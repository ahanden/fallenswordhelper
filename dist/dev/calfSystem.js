(function () {
'use strict';

/*
 * DOMParser HTML extension
 * 2012-09-04
 *
 * By Eli Grey, http://eligrey.com
 * Public domain.
 * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
 */

/* ! @source https://gist.github.com/1129031 */
/* global document, DOMParser*/

(function(DOMParser) {
  var DOMParser_proto = DOMParser.prototype;
  var real_parseFromString = DOMParser_proto.parseFromString;

  // Firefox/Opera/IE throw errors on unsupported types
  try {
    // WebKit returns null on unsupported types
    if ((new DOMParser()).parseFromString('', 'text/html')) {
      // text/html parsing is natively supported
      return;
    }
  } catch (ex) {
    // Nothing
  }

  DOMParser_proto.parseFromString = function(markup, type) {
    if (/^\s*text\/html\s*(?:;|$)/i.test(type)) {
      var doc = document.implementation.createHTMLDocument('');
      if (markup.toLowerCase().indexOf('<!doctype') > -1) {
        doc.documentElement.innerHTML = markup;
      } else {
        doc.body.innerHTML = markup;
      }
      return doc;
    }
    return real_parseFromString.apply(this, arguments);
  };
}(DOMParser));

/*
// @license http://opensource.org/licenses/MIT
// copyright Paul Irish 2015
*/

if ('performance' in window === false) {
  window.performance = {};
}

if ('now' in window.performance === false) {

  var nowOffset = Date.now();

  if (performance.timing && performance.timing.navigationStart) {
    nowOffset = performance.timing.navigationStart;
  }

  window.performance.now = function now() {
    return Date.now() - nowOffset;
  };
}

var timers = {};
var footWrap = document.getElementById('foot-wrap');

function log(text, value) {
  if (footWrap) {
    footWrap.insertAdjacentHTML('beforeend',
      '<br>' + text + ': ' + value + ' (' + typeof value + ')');
  }
}

function time(name) {
  if (name) {timers[name] = performance.now() * 1000;}
}

function timeEnd(name) {
  if (timers[name]) {
    log(name, Math.round(performance.now() * 1000 -
      timers[name]) / 1000 + 'ms');
    delete timers[name];
  }
}

// GM_ApiBrowserCheck
// @author        GIJoe
// @license       http://creativecommons.org/licenses/by-nc-sa/3.0/
// Global variables
var gvar = {};
var GMSTORAGE_PATH = 'GM_';

function storItem(name, type, value) {
  window.localStorage.setItem(GMSTORAGE_PATH + name, type + value);
}

var reviver = [
  {
    condition: 'S]',
    result: function(value) {return value.substr(2);}
  },
  {
    condition: 'N]',
    result: function(value) {return parseInt(value.substr(2), 10);}
  },
  {
    condition: 'B]',
    result: function(value) {return value.substr(2) === 'true';}
  }
];
var cold = [
  {
    condition: 'string',
    result: function(name, value) {storItem(name, 'S]', value);}
  },
  {
    condition: 'number',
    result: function(name, value) {
      if (value.toString().indexOf('.') < 0) {storItem(name, 'N]', value);}
    }
  },
  {
    condition: 'boolean',
    result: function(name, value) {storItem(name, 'B]', value);}
  }
];

function retrieve(value) {
  for (var i = 0; i < reviver.length; i += 1) {
    var test = reviver[i];
    if (value.substr(0, 2) === test.condition) {return test.result(value);}
  }
  return value;
}

// You can change it to avoid conflict with others scripts
var needApiUpgrade = false;
if (window.navigator.appName.match(/^opera/i) &&
    typeof window.opera !== 'undefined') {
  needApiUpgrade = true;
  gvar.isOpera = true;
  window.GM_log = window.opera.postError;
}
if (typeof GM_setValue !== 'undefined') {
  var gsv;
  try {
    gsv = window.GM_setValue.toString();
  } catch (e) {
    gsv = 'staticArgs';
  }
  if (gsv.indexOf('staticArgs') > 0) {
    gvar.isGreaseMonkey = true;
  // test GM_hitch
  } else if (gsv.match(/not\s+supported/)) {
    needApiUpgrade = true;
    gvar.isBuggedChrome = true;
  }
} else {
  needApiUpgrade = true;
}

if (needApiUpgrade) {
  var ws = null;
  var uid = new Date().toString();
  var result;
  try {
    window.localStorage.setItem(uid, uid);
    result = window.localStorage.getItem(uid) === uid;
    window.localStorage.removeItem(uid);
    if (result) {
      ws = typeof window.localStorage;
    } else {
      log('There is a problem with your local storage. ' +
        'FSH cannot persist your settings.');
      ws = null;
    }
  } catch (e) {
    ws = null;
  }
  // Catch Security error
  if (ws === 'object') {
    window.GM_getValue = function(name, defValue) {
      var value = window.localStorage.getItem(GMSTORAGE_PATH + name);
      if (value === null || typeof value === 'undefined') {return defValue;}
      return retrieve(value);
    };
    window.GM_setValue = function(name, value) {
      for (var i = 0; i < cold.length; i += 1) {
        var storType = cold[i];
        if (typeof value === storType.condition) {
          storType.result(name, value);
        }
      }
    };
  } else if (!gvar.isOpera || typeof GM_setValue === 'undefined') {
    gvar.temporarilyStorage = [];
    window.GM_getValue = function(name, defValue) {
      if (typeof gvar.temporarilyStorage[GMSTORAGE_PATH + name] ===
        'undefined') {return defValue;}
      return gvar.temporarilyStorage[GMSTORAGE_PATH + name];
    };
    window.GM_setValue = function(name, value) {
      if (['string', 'boolean', 'number'].indexOf(typeof value) !== -1) {
        gvar.temporarilyStorage[GMSTORAGE_PATH + name] = value;
      }
    };
  }

  window.GM_listValues = function() {
    var list = [];
    var reKey = new RegExp('^' + GMSTORAGE_PATH);
    for (var i = 0, il = window.localStorage.length; i < il; i += 1) {
      var key = window.localStorage.key(i);
      if (key.match(reKey)) {
        list.push(key.replace(GMSTORAGE_PATH, ''));
      }
    }
    return list;
  };
}

var calf = {};

var concurrent = 0;
var paused$1 = true;
var queue = [];

function beforeSend(xhr) {
  window.addEventListener('beforeunload', function() {
    xhr.abort();
    queue = [];
  });
}

function doAjax(options, retries, dfr) {
  var opt;
  if (typeof options === 'string') {
    opt = {url: options};
  } else {
    opt = options;
  }
  opt.beforeSend = beforeSend;
  return $.ajax(opt).pipe(dfr.resolve,
    function(jqXhr, textStatus, errorThrown) {
      if (retries > 0 && jqXhr.status === 503) {
        setTimeout(doAjax, 100, opt, retries - 1, dfr);
      } else {
        dfr.reject(jqXhr, textStatus, errorThrown);
      }
    }
  );
}

function taskRunner$1() {
  if (queue.length === 0) {
    paused$1 = true;
  } else {
    paused$1 = false;
    if (concurrent < 4) {
      concurrent += 1;
      var opts = queue.shift();
      doAjax.apply(null, opts).always(function() {
        concurrent -= 1;
        taskRunner$1();
      });
      taskRunner$1();
    }
  }
}

function add$1(options, retries, dfr) {
  queue.push([options, retries, dfr]);
  if (paused$1) {taskRunner$1();}
}

function retryAjax(options) {
  var dfr = $.Deferred();
  add$1(options, 10, dfr);
  return dfr;
}

/* eslint-disable max-lines */
var defaults = {
  lastActiveQuestPage: '',
  lastNormalActiveQuestPage: '',
  lastNormalCompletedQuestPage: '',
  lastNormalNotStartedQuestPage: '',
  lastSeasonalActiveQuestPage: '',
  lastSeasonalCompletedQuestPage: '',
  lastSeasonalNotStartedQuestPage: '',

  enableLogColoring: false,
  enableChatParsing: false,
  enableCreatureColoring: false,
  showCombatLog: false,
  showCreatureInfo: false,
  keepLogs: false,

  showExtraLinks: false,
  huntingBuffs: 'Doubler,Librarian,Adept Learner,Merchant,' +
    'Treasure Hunter,Animal Magnetism,Conserve',
  huntingBuffsName: 'default',
  huntingBuffs2: 'Deflect',
  huntingBuffs2Name: 'PvP',
  huntingBuffs3: 'Super Elite Slayer',
  huntingBuffs3Name: 'SE',
  showHuntingBuffs: false,
  moveFSBox: false,

  guildSelf: '',
  guildSelfMessage: 'Member of your own guild!',
  guildFrnd: '',
  guildFrndMessage: 'Do not attack - Guild is friendly!',
  guildPast: '',
  guildPastMessage: 'Do not attack - You\'ve been in that guild once!',
  guildEnmy: '',
  guildEnmyMessage: 'Enemy guild. Attack at will!',
  goldRecipient: '',
  goldAmount: '',
  sendGoldonWorld: false,

  hideQuests: false,
  hideQuestNames: '',
  hideRecipes: false,
  hideRecipeNames: '',
  enableGuildInfoWidgets: false,
  enableOnlineAlliesWidgets: false,
  guildOnlineRefreshTime: 300,
  hideGuildInfoSecureTrade: false,
  hideGuildInfoTrade: false,
  hideGuildInfoMessage: false,
  hideGuildInfoBuff: false,

  buyBuffsGreeting: 'Hello {playername}, can I buy {buffs} for {cost} please?',
  renderSelfBio: false,
  bioEditLines: 10,
  renderOtherBios: false,
  playNewMessageSound: false,
  showSpeakerOnWorld: false,
  defaultMessageSound: 'https://fallenswordhelper.github.io/fallenswordhelper/audio/sms-alert-2-daniel_simon.wav',
  highlightPlayersNearMyLvl: false,
  highlightGvGPlayersNearMyLvl: false,
  detailedConflictInfo: false,
  gameHelpLink: true,
  navigateToLogAfterMsg: false,

  enableAllyOnlineList: false,
  enableEnemyOnlineList: false,
  allyEnemyOnlineRefreshTime: 300,
  moveGuildList: false,
  moveOnlineAlliesList: false,

  hideMatchesForCompletedMoves: false,
  doNotKillList: '',
  enableBioCompressor: false,
  maxCompressedCharacters: 250,
  maxCompressedLines: 10,

  currentGoldSentTotal: 0,
  keepBuffLog: false,
  buffLog: '',

  enableActiveBountyList: false,
  bountyListRefreshTime: 300,
  enableWantedList: false,
  wantedNames: '',
  bwNeedsRefresh: true,

  fsboxlog: false,
  fsboxcontent: '',
  itemRecipient: '',
  quickLinks: '[]',
  enableAttackHelper: false,
  minGroupLevel: 1,
  combatEvaluatorBias: 0,
  huntingMode: false,
  enabledHuntingMode: '1',
  hideRelicOffline: false,

  enterForSendMessage: false,
  trackKillStreak: false,
  storeLastQuestPage: false,
  addAttackLinkToLog: false,
  showStatBonusTotal: false,

  newGuildLogHistoryPages: 3,
  useNewGuildLog: false,
  enhanceChatTextEntry: false,

  ajaxifyRankControls: false,

  enableMaxGroupSizeToJoin: false,
  maxGroupSizeToJoin: 11,

  enableTempleAlert: false,
  enableUpgradeAlert: false,
  enableComposingAlert: false,
  autoFillMinBidPrice: false,
  showPvPSummaryInLog: false,
  enableQuickDrink: false,
  enhanceOnlineDots: false,
  hideBuffSelected: false,
  hideHelperMenu: false,
  keepHelperMenuOnScreen: true,
  draggableHelperMenu: false,
  quickLinksTopPx: 22,
  quickLinksLeftPx: 0,
  draggableQuickLinks: false,
  showNextQuestSteps: true,

  showRecallMessages: true,
  showRelicMessages: true,
  showMercenaryMessages: true,
  showGroupCombatMessages: true,
  showDonationMessages: true,
  showRankingMessages: true,
  showGvGMessages: true,
  showTaggingMessages: true,
  showTitanMessages: true,

  showQuickDropLinks: false,

  inventoryMinLvl: 1,
  inventoryMaxLvl: 9999,
  onlinePlayerMinLvl: 1,
  onlinePlayerMaxLvl: 9999,
  arenaMinLvl: 1,
  arenaMaxLvl: 9999,
  showMonsterLog: false,
  lastTempleCheck: 0,
  needToPray: false,
  lastChatCheck: '0',
  lastGuildLogCheck: '0',
  lastOutBoxCheck: '0',
  lastPlayerLogCheck: '0',
  showAdmin: false,
  alliestotal: 0,
  enemiestotal: 0,
  footprints: false,
  hideNonPlayerGuildLogMessages: false,
  listOfAllies: '',
  listOfEnemies: '',
  contactList: '',
  lastUpgradeCheck: 0,
  needToDoUpgrade: false,
  characterVirtualLevel: 0,
  guildLogoControl: false,
  statisticsControl: false,
  guildStructureControl: false,
  lastMembrListCheck: 0,
  disableItemColoring: true,
  showQuickSendLinks: false,
  needToCompose: false,
  lastComposeCheck: 0,
  lastOnlineCheck: 0,
  bountyList: '',
  wantedList: '',
  inventoryCheckedElements: {
    '0': 1,
    '1': 1,
    '2': 1,
    '3': 1,
    '4': 1,
    '5': 1,
    '6': 1,
    '7': 1,
    '8': 1,
    '100': 1,
    '101': 1,
    '102': 1,
    '103': 1,
    '104': 1,
    '105': 1,
    '106': 1
  },
  lowestLevelInTop250: 0,

  quickMsg: '["Thank you very much ^_^","Happy hunting, {playername}"]',

  sendClasses: '["Composed Pots", "13699"], ["Amber", "5611"], ' +
    '["Amethyst Weed", "9145"], ["Blood Bloom", "5563"], ' +
    '["Cerulean Rose", "9156"], ["Coleoptera Body", "9287"], ' +
    '["Dark Shade", "5564"], ["Deathbloom", "9140"], ' +
    '["Deathly Mold", "9153"], ["Greenskin\u00A0Fungus", "9148"], ' +
    '["Heffle", "5565"], ["Jademare", "5566"], ' +
    '["Ruby Thistle", "9143"], ["Toad Corpse","9288"], ' +
    '["Trinettle", "5567"], ["Viridian\u00A0Vine", "9151"], ' +
    '["Mortar & Pestle", "9157"], ["Beetle Juice", "9158"]',

  quickSearchList:
    '[{"category":"Plants","searchname":"Amber","nickname":""},' +
    '{"category":"Plants","searchname":"Blood Bloom","nickname":""},' +
    '{"category":"Plants","searchname":"Jademare","nickname":""},' +
    '{"category":"Plants","searchname":"Dark Shade","nickname":""},' +
    '{"category":"Plants","searchname":"Trinettle","nickname":""},' +
    '{"category":"Plants","searchname":"Heffle Wart","nickname":""},' +
    '{"category":"Potions","searchname":"Sludge Brew",' +
      '"nickname":"DC 200","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Potion of Black Death",' +
      '"nickname":"DC 225","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Potion of Aid",' +
      '"nickname":"Assist","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Potion of Supreme Doubling",' +
      '"nickname":"DB 450","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Potion of Acceleration",' +
      '"nickname":"DB 500","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Potion of Lesser Death Dealer",' +
      '"nickname":"DD","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Runic Potion",' +
      '"nickname":"FI 250","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Potion of the Bookworm",' +
      '"nickname":"Lib 225","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Potion of Truth",' +
      '"nickname":"EW 1k","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Dull Edge",' +
      '"nickname":"DE 25","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Notched Blade",' +
      '"nickname":"DE 80","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Potion of Death",' +
      '"nickname":"DW 125","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Potion of Decay",' +
      '"nickname":"WI 150","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Potion of Fatality",' +
      '"nickname":"WI 350","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Potion of Annihilation",' +
      '"nickname":"DW 150","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Potion of the Wise",' +
      '"nickname":"Lib 200","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Potion of Shattering",' +
      '"nickname":"SA","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Dragons Blood Potion",' +
      '"nickname":"ZK 200","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Berserkers Potion",' +
      '"nickname":"ZK 300","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Potion of Fury",' +
      '"nickname":"ZK 350","displayOnAH":true},' +
    '{"category":"Potions","searchname":"Potion of Supreme Luck",' +
      '"nickname":"FI 1k","displayOnAH":true}]',

  arenaMoves: '[]',
  arenaMatches: '[]',
  CombatLog: '',
  hideChampionsGroup: false,
  hideElitesGroup: false,
  hideSEGroup: false,
  hideTitanGroup: false,
  hideLegendaryGroup: false,
  disableDeactivatePrompts: false,
  moveComposingButtons: false,
  expandMenuOnKeyPress: false,
  disableBreakdownPrompts: false,
  collapseNewsArchive: false,
  lastmyGuildLogCheck: 0,
  hideSubLvlCreature: false,
  hidePlayerActions: false,
  extraProfile: '',
  textToSearchFor: '',
  lastLadderReset: 0,
  disableQuickWearPrompts: false,
  enableGuildActivityTracker: false
};

var rarity = [
  {colour: '#ffffff', clas: 'fshCommon'},
  {colour: '#0099ff', clas: 'fshRare'},
  {colour: '#cc00ff', clas: 'fshUnique'},
  {colour: '#ffff33', clas: 'fshLegendary'},
  {colour: '#cc0033', clas: 'fshSuper'},
  {colour: '#6633ff', clas: 'fshCrystal'},
  {colour: '#009900', clas: 'fshEpic'}
];

var places = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth',
  'seventh', 'eighth', 'ninth', 'tenth', 'eleventh', 'twelfth', 'thirteenth',
  'fourteenth'];

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug',
  'Sep', 'Oct', 'Nov', 'Dec'];

var mercRE = [
  /<td>Attack:<\/td><td>(\d+)<\/td>/,
  /<td>Defense:<\/td><td>(\d+)<\/td>/,
  /<td>Armor:<\/td><td>(\d+)<\/td>/,
  /<td>Damage:<\/td><td>(\d+)<\/td>/,
  /<td>HP:<\/td><td>(\d+)<\/td>/
];

var lastActivityRE =
  /<td>Last Activity:<\/td><td>(\d+)d (\d+)h (\d+)m (\d+)s<\/td>/;

var itemRE = /item_id=(\d+)&inv_id=(\d+)/;
var defenderMultiplier = 0.2;
var now = Date.now();
var nowSecs = Math.floor(now / 1000);
var newGuildLogLoc = '?cmd=notepad&blank=1&subcmd=newguildlog';
var newGuildLogUrl = 'index.php' + newGuildLogLoc;

var server = document.location.protocol + '//' +
  document.location.host + '/';
var imageServer = window.HCS && window.HCS.defines &&
  window.HCS.defines.fileserver &&
  window.HCS.defines.fileserver.slice(0, -1);

function fallback(a, b) {
  return a || b;
}

function getValue(name) {
  if (typeof defaults[name] === 'undefined') {
    // eslint-disable-next-line no-console
    console.log(name, defaults[name]);
  }
  return GM_getValue(name, defaults[name]);
}

function reviver$1(key, value) {
  if (typeof value === 'string') {
    var a =
      /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/
        .exec(value);
    if (a) {
      return new Date(Date.UTC(Number(a[1]), Number(a[2]) - 1, Number(a[3]),
        Number(a[4]), Number(a[5]), Number(a[6])));
    }
  }
  return value;
}

function getValueJSON(name) {
  var resultJSON = getValue(name);
  var result;
  if (resultJSON) {result = JSON.parse(resultJSON, reviver$1);}
  return result;
}

function setValueJSON(name, value) {
  GM_setValue(name, JSON.stringify(value));
}

function setValue(name, value) {
  GM_setValue(name, value);
}

function getTarget(doc) {
  if (doc instanceof HTMLDocument) {return doc;}
  return document;
}

function patchXPath(xpath) {
  if (xpath.indexOf('/') === 0) {
    return '.' + xpath;
    // TODO this is likely to be bad
    // this is a chrome fix - needs a .// for xpath
    // where as firefox can function without it.
    // firefox still works with .//
  }
  return xpath;
}

function findNodes(xpath, doc) {
  var _xpath = patchXPath(xpath);
  var nodes = [];
  var target;
  // We may have passed in a HTMLDocument object as the context
  // See createDocument with DOMParser below
  // This only matters in Firefox. evaluate will fail silently if
  // the context is not part of the calling object.
  var _doc = fallback(doc, document);
  target = getTarget(_doc);
  var findQ = target.evaluate(_xpath, _doc, null,
    XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
  if (findQ.snapshotLength === 0) {return null;}
  for (var i = 0; i < findQ.snapshotLength; i += 1) {
    nodes.push(findQ.snapshotItem(i));
  }
  return nodes;
}

function findNode(xpath, doc) {
  var nodes = findNodes(xpath, doc);
  if (!nodes) {return null;}
  return nodes[0];
}

function createDocument(details) {
  // Use DOMParser to prevent img src tags downloading
  var parser = new DOMParser();
  var doc = parser.parseFromString(details, 'text/html');
  return doc;
}

function xmlhttp(theUrl, func, theCallback) {
  return retryAjax(theUrl).done(function(responseDetails) {
    if (func) {
      func(responseDetails, theCallback);
    }
  });
}

function intValue(theText) {
  if (!theText) {return 0;}
  return parseInt(theText.replace(/,/g, ''), 10);
}

function getIntFromRegExp(theText, rxSearch) {
  var result;
  var matches = theText.replace(/,/g, '').match(rxSearch);
  if (matches) {
    result = parseInt(matches[1], 10);
  } else {
    result = 0;
  }
  return result;
}

function addCommas(x) {
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
}

function convertTextToHtml(inputText) {
  return inputText
    .replace(/</g, '&lt')
    .replace(/>/g, '&gt')
    .replace(/\n/g, '<br>')
    .replace(/\[\/([a-z])\]/g, '</$1>')
    .replace(/\[([a-z])\]/g, '<$1>');
}

function parseDateAsTimestamp(textDate) {
  var dateAry = textDate.split(/[: /[]/);
  return Date.UTC(Number(dateAry[4]), months.indexOf(dateAry[3]),
    Number(dateAry[2]), Number(dateAry[0]), Number(dateAry[1]), 0);
}



function toggleVisibilty(evt) {
  var anItemId = evt.target.getAttribute('linkto');
  var anItem = document.getElementById(anItemId);
  var currentVisibility = anItem.classList.contains('fshHide');
  anItem.classList.toggle('fshHide');
  if (currentVisibility) {
    setValue(anItemId, '');
  } else {
    setValue(anItemId, 'ON');
  }
}

function outputParamVal(param) {
  if (typeof param === 'undefined') {return true;}
  return param;
}

function getCustomUrlParameter(sPageURL, sParam) {
  var sURLVariables = sPageURL.split('&');
  var sParameterName;
  for (var i = 0; i < sURLVariables.length; i += 1) {
    sParameterName = sURLVariables[i].split('=');
    if (sParameterName[0] === sParam) {
      return outputParamVal(sParameterName[1]);
    }
  }
}

function getUrlParameter(sParam) {
  var sPageURL = decodeURIComponent(window.location.search.substring(1));
  return getCustomUrlParameter(sPageURL, sParam);
}

function outputFormat(value, suffix) {
  if (value === 0) {return '';}
  return value.toString() + suffix;
}

function formatLastActivity(last_login) {
  var s = Math.abs(nowSecs - last_login);
  var m = Math.floor(s / 60);
  s %= 60;
  var h = Math.floor(m / 60);
  m %= 60;
  var d = Math.floor(h / 24);
  h %= 24;
  return outputFormat(d, ' days, ') + outputFormat(h, ' hours, ') +
    outputFormat(m, ' mins, ') + s + ' secs';
}

function getPath(obj, aPath, def) {
  var _obj = obj;
  var _path = aPath.split('.');
  var len = _path.length;
  for (var i = 0; i < len; i += 1) {
    if (fallback(!_obj, typeof _obj !== 'object')) {return def;}
    _obj = _obj[_path[i]];
  }
  return _obj;
}

function path(obj, aPath, def) {
  var _obj = getPath(obj, aPath, def);
  if (typeof _obj === 'undefined') {return def;}
  return _obj;
}

function sortDesc(result) {
  if (calf.sortAsc) {return result;}
  return -result;
}

function stringSort(a, b) {
  var result = 0;
  var _a = path(a, calf.sortBy, 'a');
  var _b = path(b, calf.sortBy, 'a');
  if (_a.toLowerCase() < _b.toLowerCase()) {result = -1;}
  if (_a.toLowerCase() > _b.toLowerCase()) {result = 1;}
  return sortDesc(result);
}

function intFromString(val) {
  if (typeof val === 'string') {
    return parseInt(val.replace(/,|#/g, ''), 10);
  }
  return val;
}

function numberSort(a, b) {
  if (typeof a.type !== 'undefined' && a.type > 8) {return 1;} // non equipment items
  if (typeof a.type !== 'undefined' && b.type > 8) {return -1;}
  var valueA = path(a, calf.sortBy, 1);
  var valueB = path(b, calf.sortBy, 1);
  valueA = intFromString(valueA);
  valueB = intFromString(valueB);
  var result = valueA - valueB;
  return sortDesc(result);
}

function testRange(aValue, min, max) {
  var theValue = parseInt(aValue, 10);
  if (!isNaN(theValue) && theValue > min && theValue < max) {
    return theValue;
  }
}

function testQuant(aValue) {
  return testRange(aValue, 0, 100);
}

function getRandomInt(_min, _max) {
  var min = Math.ceil(_min);
  var max = Math.floor(_max);
  return Math.floor(Math.random() * (max - min)) + min;
}

function rnd() {
  return getRandomInt(1000000000, 9999999998);
}

function escapeHtml(unsafe) {
  return unsafe
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

function isSelected(val, test) {
  if (val === test) {return ' selected';}
  return '';
}

function shouldBeArray(pref) {
  var stored = getValue(pref);
  if (stored && stored !== '') {return stored.split(/\s*,\s*/);}
  return [];
}

function isChecked(pref) {
  if (pref) {return ' checked';}
  return '';
}

function padZ(n) {
  var ret = n.toString();
  if (n < 10) {ret = '0' + ret;}
  return ret;
}

/*
Based on
fiddle.jshell.net/GRIFFnDOOR/r7tvg/
*/

var heap = [null];

function cmp(i, j) {
  return heap[i] && heap[i].priority < heap[j].priority;
}

function swp(i, j) {
  var temp = heap[i];
  heap[i] = heap[j];
  heap[j] = temp;
}

function calcChildIndex(leftHigher, i) {
  if (leftHigher) {return i * 2;}
  return i * 2 + 1;
}

function sink(j) {
  var i = j;
  while (i * 2 < heap.length) {
    var leftHigher = !cmp(i * 2 + 1, i * 2);
    var childIndex = calcChildIndex(leftHigher, i);
    if (cmp(i, childIndex)) {break;}
    swp(i, childIndex);
    i = childIndex;
  }
}

function bubble(j) {
  var i = j;
  while (i > 1) {
    /* jshint -W016 */
    // eslint-disable-next-line no-bitwise
    var parentIndex = i >> 1;
    /* jshint +W016 */
    if (!cmp(i, parentIndex)) {break;}
    swp(i, parentIndex);
    i = parentIndex;
  }
}

function pop() {
  if (heap.length === 1) {return;}
  var topVal = heap[1].data;
  var last = heap.pop();
  if (heap.length > 1) {
    heap[1] = last;
    sink(1);
  }
  return topVal;
}

function push(data, priority) {
  bubble(heap.push({data: data, priority: priority}) - 1);
}

function getLength() {
  return heap.length - 1;
}

var paused = true;
var message = 'fshMessage';

function taskRunner() {
  if (getLength() === 0) {
    paused = true;
  } else {
    paused = false;
    window.postMessage(message, '*');
  }
}

function devLog(args) {
  if (args && !Array.isArray(args)) {
    // eslint-disable-next-line no-console
    console.log('addTask Array.isArray(args)', Array.isArray(args));
  }
}

function add(priority, fn, args, scope) {
  devLog(args);
  if (typeof fn === 'function') {
    var _scope = fallback(scope, window);
    var _args = fallback(args, []);
    push(fn.bind.apply(fn, [_scope].concat(_args)), priority);
    if (paused) {taskRunner();}
  }
}

function asyncTask() {
  try {
    pop()();
  } catch (error) {
    log('Unhandled Exception:', error);
    // eslint-disable-next-line no-console
    console.log('Unhandled Exception:', error);
  }
  taskRunner();
}

function callback(event) {
  var key = event.data;
  if (typeof key === 'string' && key.indexOf(message) === 0) {
    asyncTask();
  }
}

window.addEventListener('message', callback);

var dragTarget;

function dragOver(event) {
  event.preventDefault();
  return false;
}

function dragDrop(event) {
  var offset = event.dataTransfer.getData('text/plain').split(',');
  dragTarget.style.left =
    event.clientX + parseInt(offset[0], 10) + 'px';
  dragTarget.style.top =
    event.clientY + parseInt(offset[1], 10) + 'px';
  document.body.removeEventListener('dragover', dragOver, false);
  document.body.removeEventListener('drop', dragDrop, false);
  event.preventDefault();
  return false;
}

function dragStart(parent, event) {
  if (parent) {
    dragTarget = parent;
  } else {
    dragTarget = event.target;
  }
  var style = window.getComputedStyle(dragTarget, null);
  event.dataTransfer.setData('text/plain',
    parseInt(style.getPropertyValue('left'), 10) - event.clientX + ',' +
    (parseInt(style.getPropertyValue('top'), 10) - event.clientY));
  document.body.addEventListener('dragover', dragOver, false);
  document.body.addEventListener('drop', dragDrop, false);
}

function draggable(element, parent) {
  element.draggable = true;
  element.addEventListener('dragstart', dragStart.bind(null, parent));
}

function retBool(bool, ifTrue, ifFalse) {
  if (bool) {
    return ifTrue;
  }
  return ifFalse;
}

function retOption(option, ifTrue, ifFalse) {
  return retBool(getValue(option), ifTrue, ifFalse);
}

function isDraggable(draggableQuickLinks) {
  if (draggableQuickLinks) {
    draggable(document.getElementById('fshQuickLinks'));
  }
}

function haveNode(node, quickLinks) { // Native ?
  var quickLinksTopPx = getValue('quickLinksTopPx');
  var quickLinksLeftPx = getValue('quickLinksLeftPx');
  var draggableQuickLinks = getValue('draggableQuickLinks');
  var draggableQuickLinksClass = retBool(draggableQuickLinks, ' fshMove', '');
  var html = '<div style="top:' + quickLinksTopPx + 'px; left:' +
    quickLinksLeftPx + 'px; background-image:url(\'' + imageServer +
    '/skin/inner_bg.jpg\');" id="fshQuickLinks" class="fshQuickLinks' +
    retOption('keepHelperMenuOnScreen', ' fshFixed', '') +
    draggableQuickLinksClass + '">';
  for (var i = 0; i < quickLinks.length; i += 1) {
    var newWindow = retBool(quickLinks[i].newWindow, ' target="new"', '');
    html += '<li><a href="' + escapeHtml(quickLinks[i].url) + '"' +
      newWindow + '>' + quickLinks[i].name + '</a></li>';
  }
  html += '</div>';
  document.body.insertAdjacentHTML('beforeend', html);
  isDraggable(draggableQuickLinks);
}

function injectQuickLinks() { // Native ?
  var node = document.getElementById('statbar-container');
  if (!node) {return;}
  var quickLinks = fallback(getValueJSON('quickLinks'), []);
  if (quickLinks.length <= 0) {return;}
  haveNode(node, quickLinks);
}

function doQuickLinks() {
  if (!calf.huntingMode) {
    add(3, injectQuickLinks);
  }
}

function doMsgSound() { // jQuery
  var soundLocation = getValue('defaultMessageSound');
  $('a:contains("New log messages"):first').each(function(i, e) {
    $(e).after('<audio src="' + soundLocation +
    '" autoplay=true />');
  });
  $('a:contains("New Guild chat message"):first').each(function(i, e) {
    $(e).after('<audio src="' + soundLocation +
    '" autoplay=true />');
  });
}

function isMessageSound() {
  if (getValue('playNewMessageSound')) {
    add(3, doMsgSound);
  }
}

function testForGuildLogMsg(guildLogNode) {
  return location.search !== newGuildLogLoc ||
    guildLogNode.parentNode.id !== 'notification-guild-log';
}

function hideGuildLogMsg(guildLogNode) {
  // hide the lhs box
  if (testForGuildLogMsg(guildLogNode)) {return;}
  var messageBox = guildLogNode.parentNode;
  if (messageBox) {
    messageBox.classList.add('fshHide');
  }
}

function gotGuildLogNodes(guildLogNodes) {
  var guildLogNode;
  for (var i = 0; i < guildLogNodes.length; i += 1) {
    guildLogNode = guildLogNodes[i];
    guildLogNode.href = newGuildLogUrl;
  }
  hideGuildLogMsg(guildLogNode);
}

function changeGuildLogHREF() {
  if (!getValue('useNewGuildLog')) {return;}
  var guildLogNodes = document.querySelectorAll(
    '#pCL a[href="index.php?cmd=guild&subcmd=log"]');
  if (guildLogNodes) {gotGuildLogNodes(guildLogNodes);}
}

function getForage(forage) {
  // Wrap in jQuery Deferred because we're using 1.7
  // rather than using ES6 promise
  var dfr = $.Deferred();
  localforage.getItem(forage, function getItemCallback(err, data) {
    if (err) {
      log(forage + ' forage error', err);
      dfr.reject(err);
    } else {
      // returns null if key does not exist
      dfr.resolve(data);
    }
  });
  return dfr.promise();
}

function mixin(obj, mixins) {
  Object.keys(mixins).forEach(function(key) {
    if (typeof mixins[key] === 'object' && mixins[key] !== null) {
      mixin(obj[key], mixins[key]);
    } else {
      obj[key] = mixins[key];
    }
  });
}

function cElement(type, props) {
  var el = document.createElement(type);
  if (props) {mixin(el, props);}
  return el;
}

function createDiv(props) {
  return cElement('div', props);
}

function createSpan(props) {
  return cElement('span', props);
}

function createTable(props) {
  return cElement('table', props);
}

function createTBody(props) {
  return cElement('tbody', props);
}

function createTr(props) {
  return cElement('tr', props);
}

function createTd(props) {
  return cElement('td', props);
}

function createTFoot(props) {
  return cElement('tfoot', props);
}

function createUl(props) {
  return cElement('ul', props);
}

function createLi(props) {
  return cElement('li', props);
}

function createButton(props) {
  return cElement('button', props);
}

function createBr() {
  return cElement('br');
}

function createAnchor(props) {
  return cElement('a', props);
}

function createInput(props) {
  return cElement('input', props);
}

function createTextArea(props) {
  return cElement('textarea', props);
}

function createTh(props) {
  return cElement('th', props);
}

function callApp(data) {
  mixin(data, {app: 1});
  return retryAjax({
    url: 'app.php',
    data: data,
    dataType: 'json'
  });
}

function guildManage() {
  return callApp({cmd: 'guild', subcmd: 'manage'});
}

function setForage(forage, data) {
  // Wrap in jQuery Deferred because we're using 1.7
  // rather than using ES6 promise
  var dfr = $.Deferred();
  localforage.setItem(forage, data, function setItemCallback(err, _data) {
    if (err) {
      log(forage + ' forage error', err);
      dfr.reject(err);
    } else {
      dfr.resolve(_data);
    }
  });
  return dfr.promise();
}

var act = 0;
var cur = 1;
var lvl = 2;
var max = 3;
var utc = 4;
var vl = 5;
var gxp = 6;

var oldArchive;
var guild;

function pushNewRecord(member) {
  oldArchive.members[member.name].push([
    Math.floor(member.last_activity / 86400),
    member.current_stamina,
    member.level,
    member.max_stamina,
    nowSecs,
    member.vl,
    member.guild_xp,
  ]);
}

function initMember(member) {
  if (!oldArchive.members[member.name]) {
    oldArchive.members[member.name] = [];
    pushNewRecord(member);
  }
}

var type2tests = [
  function(archive, current) {
    // Has current stam changed ?
    return current.current_stamina !== archive[cur]; // probably want a weighted percentage here
    // Might only care if it has dropped significantly ?
  },
  function(archive, current) {
    // Has Max Stam increased ?
    return current.max_stamina > archive[max]; // probably want a weighted percentage here
  },
  function(archive, current) {
    // Has level changed ?
    return current.level !== archive[lvl];
  },
  function(archive, current) {
    // Has VL changed ?
    return current.vl !== archive[vl];
  },
  function(archive, current) {
    // Has GXP changed ?
    return current.guild_xp !== archive[gxp]; // probably want a weighted percentage here
  }
];

function doMerge() {
  var newArchive = {lastUpdate: nowSecs, members: {}};
  guild.r.members.forEach(function(member) {
    initMember(member);
    var archiveMember = oldArchive.members[member.name];
    var archiveLength = archiveMember.length;
    var archiveRecord = archiveMember[archiveLength - 1];
    var archiveAge = nowSecs - archiveRecord[utc];
    if (archiveAge >= 86100) {
      var type2change = type2tests.some(function(test) {
        if (test(archiveRecord, member)) {
          return true;
        }
        return false;
      });
      if (type2change) {
        pushNewRecord(member);
      } else {
        archiveRecord[act] = Math.floor(member.last_activity / 86400);
        archiveRecord[utc] = nowSecs;
      }
    }
    newArchive.members[member.name] = oldArchive.members[member.name];
  });
  setForage('fsh_guildActivity', newArchive);
}

function gotGuild(data) {
  guild = data;
  doMerge();
}

function gotActivity(data) {
  if (data) {
    oldArchive = data;
    // oldArchive = transformActivity(data);
  } else {
    oldArchive = {lastUpdate: 0, members: {}};
  }
  if (nowSecs > fallback(oldArchive.lastUpdate, 0) + 300) { // 5 mins - probably want to increase
    guildManage().done(gotGuild);
  }
}

function guildActivity() {
  if (getValue('enableGuildActivityTracker')) {
    getForage('fsh_guildActivity').done(gotActivity);
  }
}

var dotList;
var dotCount;
var redDot =
  '<span class="fshDot redDot tip-static" data-tipped="Offline"></span>';
var greenDiamond =
  '<span class="fshDot greenDiamond tip-static" data-tipped="Online"></span>';
var yellowDiamond =
  '<span class="fshDot yellowDiamond tip-static" data-tipped="Offline"></span>';
var orangeDiamond =
  '<span class="fshDot orangeDiamond tip-static" data-tipped="Offline"></span>';
var offlineDot =
  '<span class="fshDot offlineDot tip-static" data-tipped="Offline"></span>';
var sevenDayDot =
  '<span class="fshDot sevenDayDot tip-static" data-tipped="Offline"></span>';

var pCC = document.getElementById('pCC');



function quickBuffHref(aPlayerId, buffList) { // Bad Pattern
  var passthru = '';
  if (buffList) {passthru = '&blist=' + buffList;}
  return 'href=\'javascript:window.openWindow("index.php?cmd=' +
    'quickbuff&tid=' + aPlayerId + passthru +
    '", "fsQuickBuff", 618, 1000, ",scrollbars")\'';
}



function openQuickBuffByName(aPlayerName) {
  window.openWindow('index.php?cmd=quickbuff&t=' + aPlayerName,
    'fsQuickBuff', 618, 1000, ',scrollbars');
}

function doBuffLinks(members) {
  // quick buff only supports 16
  var shortList = members.reduce(function(prev, curr, i) {
    var slot = Math.floor(i / 16);
    prev[slot] = fallback(prev[slot], []);
    prev[slot].push(curr);
    return prev;
  }, []).reduce(function(prev, curr, i) {
    var theNames = curr.join(',');
    var modifierWord = places[i];
    var li = createLi();
    var btn = createButton({
      className: 'fshBl fshBls tip-static',
      dataset: {tipped: 'Quick buff functionality from HCS only does 16'},
      textContent: 'Buff ' + modifierWord + ' 16'
    });
    btn.addEventListener('click',
      openQuickBuffByName.bind(null, theNames));
    li.appendChild(btn);
    prev.appendChild(li);
    return prev;
  }, createUl());
  return shortList;
}

function infoBox(documentText) {
  var doc = createDocument(documentText);
  var result;
  var infoMsg = doc.getElementById('info-msg');
  if (infoMsg) {
    var infoMatch = infoMsg.innerHTML;
    result = '';
    if (infoMatch) {
      infoMatch = infoMatch.replace(/<br.*/, '');
      result = infoMatch;
    }
  }
  return result;
}

function playerId() {
  var thePlayerId = parseInt(document.getElementById('holdtext')
    .textContent.match(/fallensword.com\/\?ref=(\d+)/)[1], 10);
  setValue('playerID', thePlayerId);
  return thePlayerId;
}

function playerName() {
  return document.getElementById('statbar-character').textContent;
}

function makePageHeader(title, comment, spanId, button) {
  var _comment = '';
  if (comment !== '') {_comment = '&nbsp;(' + comment + ')';}
  var _span = '';
  if (spanId) {
    _span = '[<span class="fshLink" id="' +
      spanId + '">' + button + '</span>]';
  }
  return '<table width=100%><tbody><tr class="fshHeader">' +
    '<td width="90%"><b>&nbsp;' + title + '</b>' + _comment +
    '<td width="10%" class="fshBtnBox">' + _span +
    '</td></tr><tbody></table>';
}

function makePageTemplate(title, comment, spanId, button, divId) {
  return makePageHeader(title, comment, spanId, button) +
    '<div class="fshSmall" id="' + divId + '"></div>';
}

var getMins = [
  function(obj, min) {
    if (obj.day) {return min + parseInt(obj.day, 10) * 1440;}
    return min;
  },
  function(obj, min) {
    if (obj.hour) {return min + parseInt(obj.hour, 10) * 60;}
    return min;
  },
  function(obj, min) {
    if (obj.min) {return min + parseInt(obj.min, 10);}
    return min;
  },
  function(obj, min) {
    if (obj.last_login) {
      return Math.floor((nowSecs - obj.last_login) / 60);
    }
    return min;
  },
  function(obj, min) {
    // last_login is 'false' over 30 days
    if ('last_login' in obj && !obj.last_login) {return 99999;}
    return min;
  }
];

var getDot = [
  {condition: 2, result: greenDiamond},
  {condition: 5, result: yellowDiamond},
  {condition: 30, result: orangeDiamond},
  {condition: 10080, result: offlineDot},
  {condition: 44640, result: sevenDayDot}
];

function onlineDot(obj) {
  var min = getMins.reduce(function(prev, curr) {
    return curr(obj, prev);
  }, 0);
  for (var i = 0; i < getDot.length; i += 1) {
    var el = getDot[i];
    if (min < el.condition) {return el.result;}
  }
  return redDot;
}

function changeOnlineDot(contactLink) {
  var lastActivity = lastActivityRE
    .exec(contactLink.getAttribute('data-tipped'));
  contactLink.parentNode.previousSibling.innerHTML =
    onlineDot({
      min: lastActivity[3],
      hour: lastActivity[2],
      day: lastActivity[1]
    });
}

function batchDots() {
  var limit = performance.now() + 5;
  while (performance.now() < limit &&
      dotCount < dotList.length) {
    changeOnlineDot(dotList[dotCount]);
    dotCount += 1;
  }
  if (dotCount < dotList.length) {
    add(3, batchDots);
  }
}

function colouredDots() {
  if (!getValue('enhanceOnlineDots')) {return;}
  dotList = document.querySelectorAll(
    '#pCC a[data-tipped*="Last Activity"]');
  dotCount = 0;
  add(3, batchDots);
}

function jConfirm(title, msgText, fn) { // jQuery
  var fshMsg = document.getElementById('fshmsg');
  if (!fshMsg) {
    fshMsg = createDiv({id: 'fshmsg'});
    document.body.appendChild(fshMsg);
    $(fshMsg).dialog({
      autoOpen: false,
      dialogClass: 'no-close',
      draggable: false,
      modal: true,
      resizable: false,
    });
  }
  fshMsg.textContent = msgText;
  $(fshMsg).dialog('option', {
    buttons: {
      Yes: function() {
        fn();
        $(this).dialog('close');
      },
      No: function() {$(this).dialog('close');}
    },
    title: title
  }).dialog('open');
}

var composeMsg =
  '<li class="notification"><a href="index.php?cmd=composing"><span' +
  ' class="notification-icon"></span><p class="notification-content">' +
  'Composing to do</p></a></li>';

function displayComposeMsg() {
  document.getElementById('notifications')
    .insertAdjacentHTML('afterbegin', composeMsg);
}

function getDoc(data) {
  if (calf.cmd !== 'composing') {
    return createDocument(data);
  }
  return document;
}

function parseComposing(data) {
  var doc = getDoc(data);
  var timeRE = /ETA:\s*(\d+)h\s*(\d+)m\s*(\d+)s/;
  var times = [];
  var openSlots = doc.getElementsByClassName('composing-potion-time');
  Array.prototype.forEach.call(openSlots, function(el) {
    if (el.textContent === 'ETA: Ready to Collect!' ||
        el.textContent === 'ETA: n/a') {
      times.push(0);
    } else {
      var timeArr = timeRE.exec(el.textContent);
      var milli = (timeArr[1] * 3600 + timeArr[2] * 60 + Number(timeArr[3])) *
        1000 + now;
      times.push(milli);
    }
  });
  var eta = Math.min.apply(null, times);
  if (eta === 0) {
    if (calf.cmd !== 'composing') {displayComposeMsg();}
    setValue('needToCompose', true);
  } else {
    setValue('needToCompose', false);
    setValue('lastComposeCheck', eta);
  }
}

function createSuccess(temp, textStatus) {
  var potName = temp[temp.selectedIndex].text;
  var myParent = temp.parentNode;
  var infoDiv = myParent.previousElementSibling.previousElementSibling;
  infoDiv.children[0].innerHTML = '';
  infoDiv.children[0].classList.add('fshPot');
  infoDiv.children[0].style.backgroundImage = 'url(' + imageServer +
    '/composing/potions/' + getRandomInt(1, 11) + '_' +
    getRandomInt(1, 51) + '.gif)';
  infoDiv.children[2].innerHTML = 'Creating \'<span class="fshBold">' +
    potName + '</span>\' Potion';
  infoDiv.children[3].innerHTML = '';
  myParent.innerHTML = '<div class="fshScs">' + textStatus + '</div>';
}

function createPotion(temp) { // jQuery
  retryAjax({
    cache: false,
    dataType: 'json',
    url: 'index.php',
    data: {
      cmd: 'composing',
      subcmd: 'createajax',
      template_id: temp.value,
      _rnd: rnd()
    }
  }).done(function potionDone(data, textStatus) {
    if (data.error !== '') {
      temp.parentNode.innerHTML = '<div class="fshScs">' +
        data.error + '</div>';
    } else {
      createSuccess(temp, textStatus);
    }
  });
}

function quickCreateBailOut(target) {
  return target.tagName !== 'SPAN' || target.className !== 'quickCreate';
}

function quickCreate(evt) {
  var target = evt.target;
  if (quickCreateBailOut(target)) {return;}
  var temp = target.previousElementSibling.previousElementSibling;
  if (temp && temp.value !== 'none') {
    createPotion(temp);
  }
}

function checkLastCompose() { // jQuery
  var lastComposeCheck = getValue('lastComposeCheck');
  if (lastComposeCheck && now < lastComposeCheck) {return;}
  retryAjax('index.php?cmd=composing').done(function(data) {
    add(3, parseComposing, [data]);
  });
}

function composeAlert() {
  var needToCompose = getValue('needToCompose');
  if (needToCompose) {
    displayComposeMsg();
    return;
  }
  checkLastCompose();
}

function injectComposeAlert() {
  if (calf.cmd !== 'composing') {composeAlert();}
}

function moveButtons() {
  if (getValue('moveComposingButtons')) {
    var buttonDiv = document.getElementById('composing-error-dialog')
      .previousElementSibling;
    buttonDiv.setAttribute('style', 'text-align: right; padding: 0 38px 0 0');
    var top = pCC.getElementsByClassName('composing-level')[0]
      .parentNode;
    top.insertAdjacentElement('beforebegin', buttonDiv);
  }
}

function injectComposing() {
  if (!pCC) {return;}
  if (calf.enableComposingAlert) {
    parseComposing();
  }

  var buttons = pCC
    .querySelectorAll('input[id^=create-]:not(#create-multi)');
  Array.prototype.forEach.call(buttons, function(el) {
    el.insertAdjacentHTML('afterend',
      '&nbsp;[<span class="quickCreate">Quick Create</span>]');
  });
  pCC.addEventListener('click', quickCreate);
  moveButtons();
}

function composingCreate() {
  document.getElementById('composing-add-skill')
    .addEventListener('click', function() {
      document.getElementById('composing-skill-level-input').value =
        document.getElementById('composing-skill-level-max').textContent;
    });
  document.getElementById('composing-skill-select')
    .addEventListener('change', function() {
      document.getElementById('composing-skill-level-input').value =
        document.getElementById('composing-skill-level-max').textContent;
    });
}

function injectFindPlayer() { // Bad jQuery
  var findPlayerButton = $('input[value="Find Player"]');
  var levelToTest = intValue($('dt.stat-level:first').next()
    .text());
  var characterVirtualLevel = getValue('characterVirtualLevel');
  levelToTest = fallback(characterVirtualLevel, levelToTest);
  var pvpLowerLevelModifier = 5;
  if (levelToTest > 205) {pvpLowerLevelModifier = 10;}
  var pvpUpperLevelModifier = 5;
  if (levelToTest >= 200) {pvpUpperLevelModifier = 10;}
  findPlayerButton.parent().append('&nbsp;<a href="index.php?' +
    'cmd=findplayer&search_active=1&search_username=&search_level_min=' +
    (levelToTest - pvpLowerLevelModifier) + '&search_level_max=' +
    (levelToTest + pvpUpperLevelModifier) + '&search_in_guild=0"><span ' +
    'style="color:blue;">Get PvP targets</span></a>&nbsp;<a href="' +
    'index.php?cmd=findplayer&search_active=1&search_username=&' +
    'search_level_min=' + (levelToTest - 25) + '&search_level_max=' +
    (levelToTest + 25) + '&search_in_guild=0"><span style="color:blue;">' +
    'Get GvG targets</span></a>');

  $('table[class="width_full"]').find('a[href*="player_id"]')
    .each(function(i, e) {
      var id = /player_id=([0-9]*)/.exec($(e).attr('href'));
      $(e).after('<a style="color:blue;font-size:10px;" ' +
        quickBuffHref(id[1]) + '>[b]</a>');
    });
}

function marketplaceWarning(sellPrice) { // Legacy
  var warningColor = 'green';
  var warningText =
    '</b><br>This is probably an offer that will please someone.';
  if (sellPrice < 100000) {
    warningColor = 'brown';
    warningText = '</b><br>This is too low ... it just ain"t gonna sell.';
  }
  if (sellPrice > 250000) {
    warningColor = 'red';
    warningText = '</b><br>Hold up there ... this is way to high a ' +
      'price ... you should reconsider.';
  }
  var amount = findNode('//input[@id="amount"]').value;
  var warningField = findNode('//td[@id="warningfield"]');
  warningField.innerHTML = '<span style="color:' + warningColor +
    ';">You are offering to buy <b>' + amount +
    '</b> FSP for >> <b>' + addCommas(sellPrice) +
    warningText + ' (Total: ' +
    addCommas(amount * sellPrice +
    Math.ceil(amount * sellPrice * 0.005)) + ')</span>';
}

function addMarketplaceWarning() { // Legacy
  var goldPerPoint = findNode('//input[@id="price"]');
  var sellPrice = goldPerPoint.value;
  if (sellPrice.search(/^[0-9]*$/) !== -1) {
    marketplaceWarning(sellPrice);
  }
}

function addMarketplaceWidgets() { // Legacy
  var requestTable = findNode(
    '//table[tbody/tr/td/input[@value="Confirm Request"]]');
  var newRow = requestTable.insertRow(2);
  var newCell = newRow.insertCell(0);
  newCell.id = 'warningfield';
  newCell.colSpan = '2';
  newCell.align = 'center';

  document.getElementById('price').addEventListener('keyup',
    addMarketplaceWarning, true);
  document.getElementById('amount').addEventListener('keyup',
    addMarketplaceWarning, true);
}

function injectNotepad() { // jQuery
  $('#notepad_notes')
    .attr('cols', '90')
    .attr('rows', '30')
    .css('resize', 'none');
}

function injectFsBoxContent(injector) { // jQuery
  var content = injector || pCC;
  content.innerHTML = makePageTemplate('FS Box Log', '',
    'fsboxclear', 'Clear', 'fsboxdetail');
  getForage('fsh_fsboxcontent').done(function(fsboxcontent) {
    document.getElementById('fsboxdetail').innerHTML = fsboxcontent;
  });
  document.getElementById('fsboxclear')
    .addEventListener('click', function() {
      setForage('fsh_fsboxcontent', '');
      location.reload();
    }, true);
}

function jQueryDialog(fn) { // jQuery
  var content = document.getElementById('content');
  if (content) {content.innerHTML = '';} else {
    content = createDiv({
      id: 'content',
      style: {display: 'none'}
    });
    document.body.appendChild(content);
  }
  $(content).dialog({
    width: 640,
    modal: true,
    position: {my: 'top', at: 'top', offset: '0 60', collision: 'none'},
    resizable: false
  });
  fn(content);
}

function getBoxList(boxList) {
  if (boxList) {return boxList;}
  return '';
}

function storeFSBox(_boxList) {
  var boxList = getBoxList(_boxList);
  var fsbox = document.getElementById('minibox-fsbox')
    .getElementsByClassName('message')[0].innerHTML;
  if (boxList.indexOf(fsbox) < 0) {boxList = '<br>' + fsbox + boxList;}
  if (boxList.length > 10000) {boxList = boxList.substring(0, 10000);}
  setForage('fsh_fsboxcontent', boxList);
}

function injectFSBoxLog() {
  var node = document.getElementById('minibox-fsbox');
  if (!node) {return;}
  var nodediv = node.lastElementChild;
  var playerName = nodediv.getElementsByTagName('a');
  if (playerName.length === 0) {return;}
  getForage('fsh_fsboxcontent').done(storeFSBox);
  playerName = playerName[0].textContent;
  nodediv.insertAdjacentHTML('beforeend',
    '<br><span class="fshPaleVioletRed">' +
    '[ <a href="index.php?cmd=log&subcmd=doaddignore&ignore_username=' +
    playerName + '">Ignore</a> ]</span> ');
  var log = createSpan({
    className: 'fshYellow',
    innerHTML: '[ <span class="fshLink">Log</span> ]'
  });
  log.addEventListener('click', function() {jQueryDialog(injectFsBoxContent);});
  nodediv.appendChild(log);
}

function displayBuffLog(buffLog) {
  document.getElementById('bufflog').innerHTML = buffLog;
}

function clearBuffLog() {
  setForage('fsh_buffLog', '').done(displayBuffLog);
}

function injectBuffLog(injector) {
  var content = injector || pCC;
  content.innerHTML = makePageTemplate('Buff Log', '',
    'clearBuffs', 'Clear', 'bufflog');
  document.getElementById('clearBuffs').addEventListener('click', clearBuffLog);
  getForage('fsh_buffLog').done(displayBuffLog);
}

var content;
var monsterAry;

function noMobs() {
  content.innerHTML = '<span>No monster information! ' +
    'Please enable entity log and travel a bit to see the world</span>';
}

function mobRows() {
  var result = '';
  for (var i = 0; i < monsterAry.length; i += 1) {
    result += '<tr>' +
      '<td class="fshCenter">' + monsterAry[i].image + '</td>' +
      '<td>' + monsterAry[i].name + '</td>' +
      '<td class="fshCenter">' + monsterAry[i].creature_class + '</td>' +
      '<td class="fshCenter">' + monsterAry[i].level + '</td>' +
      '<td class="fshCenter">' + monsterAry[i].attack + '</td>' +
      '<td class="fshCenter">' + monsterAry[i].defense + '</td>' +
      '<td class="fshCenter">' + monsterAry[i].armor + '</td>' +
      '<td class="fshCenter">' + monsterAry[i].damage + '</td>' +
      '<td class="fshCenter">' + monsterAry[i].hp + '</td>' +
      '<td class="fshCenter">' + monsterAry[i].enhancements + '</td></tr>';
  }
  return result;
}

function drawMobs() {
  var inject = document.getElementById('entityTableOutput');
  if (!monsterAry || !inject) {return;}
  inject.innerHTML = mobRows();
}

function findSortType(target) {
  return target.getAttribute('sortType') || 'string';
}

function sortMonsterAry(sortType) {
  if (sortType === 'string') {
    monsterAry.sort(stringSort);
  } else {
    monsterAry.sort(numberSort);
  }
}

function sortCol(target) {
  var headerClicked = target.getAttribute('sortKey');
  if (typeof calf.sortAsc === 'undefined') {calf.sortAsc = true;}
  if (calf.sortBy && calf.sortBy === headerClicked) {
    calf.sortAsc = !calf.sortAsc;
  }
  calf.sortBy = headerClicked;
  var sortType = findSortType(target);
  sortMonsterAry(sortType);
  drawMobs();
}

function doHandlers(evt) {
  var target = evt.target;
  if (target.id === 'clearEntityLog') {
    setForage('fsh_monsterLog', '');
    noMobs();
    return;
  }
  if (!target.classList.contains('fshLink')) {return;}
  sortCol(target);
}

function drawTable() {
  if (!monsterAry) {return;}
  content.innerHTML = '<table cellspacing="0" cellpadding="0" border="0" ' +
    'width="100%"><tr class="fshBlack fshWhite">' +
    '<td width="90%" class="fshCenter"><b>Entity Information</b></td>' +
    '<td width="10%">[<span id="clearEntityLog" class="fshPoint">Clear' +
    '</span>]</td></tr></table>' +
    '<table cellspacing="1" cellpadding="2" border="0"><thead>' +
    '<tr class="fshVerySoftOrange">' +
    '<th width="25%" class="fshLink" sortkey="name" colspan="2">Entity</th>' +
    '<th class="fshCenter fshLink" sortkey="creature_class">Class</th>' +
    '<th class="fshCenter fshLink" sortkey="level" sorttype="number">Lvl</th>' +
    '<th class="fshCenter">Attack</th>' +
    '<th class="fshCenter">Defence</th>' +
    '<th class="fshCenter">Armor</th>' +
    '<th class="fshCenter">Damage</th>' +
    '<th class="fshCenter">HP</th>' +
    '<th class="fshCenter">Enhancements</th>' +
    '</tr></thead><tbody id="entityTableOutput"></tbody></table>';
  content.addEventListener('click', doHandlers);
}

function prepMonster(data) {
  monsterAry = Object.keys(data).reduce(function(prev, curr) {
    var tmpObj = data[curr];
    tmpObj.name = curr;
    tmpObj.image = '<img class="tip-static" src="' + imageServer +
      '/creatures/' + tmpObj.image_id + '.jpg" data-tipped="<img src=\'' +
      imageServer + '/creatures/' + tmpObj.image_id +
      '.jpg\' width=200 height=200>" width=40 height=40>';
    tmpObj.level = addCommas(tmpObj.level);
    tmpObj.attack = tmpObj.attack.min + ' - ' + tmpObj.attack.max;
    tmpObj.defense = tmpObj.defense.min + ' - ' + tmpObj.defense.max;
    tmpObj.armor = tmpObj.armor.min + ' - ' + tmpObj.armor.max;
    tmpObj.damage = tmpObj.damage.min + ' - ' + tmpObj.damage.max;
    tmpObj.hp = tmpObj.hp.min + ' - ' + tmpObj.hp.max;
    var enhancements;
    if (tmpObj.enhancements) {enhancements = Object.keys(tmpObj.enhancements);}
    if (enhancements && enhancements.length > 0) {
      var tmp = '<span class="fshXXSmall">';
      tmp += enhancements.reduce(function(_prev, _curr) {
        return _prev + '<span class="fshNoWrap">' + _curr + ': ' +
          tmpObj.enhancements[_curr].min + ' - ' +
          tmpObj.enhancements[_curr].max + '</span><br>';
      }, '');
      tmpObj.enhancements = tmp.slice(0, -4) + '</span>';
    } else {
      tmpObj.enhancements = '<span class="fshGrey">**Missing**</span>';
    }
    prev.push(tmpObj);
    return prev;
  }, []);
}

function prepAry(data) {
  if (!data || data === '') {
    noMobs();
    return;
  }
  prepMonster(data);
  calf.sortBy = 'level';
  calf.sortAsc = true;
  monsterAry.sort(numberSort);
  drawTable();
  drawMobs();
}

function injectMonsterLog(injector) {
  content = injector || pCC;
  if (!content) {return;}
  getForage('fsh_monsterLog').done(prepAry);
}

var content$1;
var combatLog = [];
var textArea;

function notepadCopyLog() {
  textArea.focus();
  textArea.select();
}

function clearCombatLog() {
  combatLog = [];
  textArea.value = '[]';
  setForage('fsh_combatLog', combatLog);
}

function notepadClearLog() { // jQuery
  jConfirm('Clear Combat Log',
    'Are you sure you want to clear your log?', clearCombatLog
  );
}

function gotCombatLog(data) {
  if (data) {combatLog = data;}
  var yuuzParser = '<tr><td align="center" colspan="4"><b>Log Parser</b>' +
    '</td></tr>' +
    '<tr><td colspan="4" align="center">WARNING: this links to an ' +
    'external site not related to HCS.<br />' +
    'If you wish to visit site directly URL is: http://evolutions.' +
    'yvong.com/fshlogparser.php<br />' +
    '<tr><td colspan=4 align="center"><input type="hidden" value="true" ' +
    'name="submit"><input type="submit" value="Analyze!"></td></tr>';
  content$1.innerHTML = '<h1>Combat Logs</h1><br /><form action="http://' +
    'evolutions.yvong.com/fshlogparser.php" method="post" target="_blank">' +
    '<div align="center"><textarea align="center" cols="80" rows="25" ' +
    'readonly style="background-color:white;font-family:Consolas,\'' +
    'Lucida Console\',\'Courier New\',monospace;" id="combatLog" ' +
    'name="logs">' + JSON.stringify(combatLog) + '</textarea></div>' +
    '<br /><br /><table width="100%"><tr>' +
    '<td colspan="2" align=center>' +
    '<input type="button" class="custombutton" value="Select All" ' +
    'id="copyLog"></td>' +
    '<td colspan="2" align=center>' +
    '<input type="button" class="custombutton" value="Clear" ' +
    'id="clearLog"></td>' +
    '</tr>' + yuuzParser + '</table></div>' +
    '</form>';
  textArea = document.getElementById('combatLog');
  document.getElementById('copyLog')
    .addEventListener('click', notepadCopyLog);
  document.getElementById('clearLog')
    .addEventListener('click', notepadClearLog);
}

function injectNotepadShowLogs(injector) { // jQuery.min
  content$1 = injector || pCC;
  getForage('fsh_combatLog').done(gotCombatLog);
}

var context;
var onlinePlayers;
var onlineData;
var highlightPlayersNearMyLvl;
var lvlDiffToHighlight;
var levelToTest;
var onlinePages;
var lastPage;
var table;

function buildOnlinePlayerData() { // jQuery
  onlineData = [];
  Object.keys(onlinePlayers).forEach(function(player) {
    var guildImage = $('<div/>')
      .append(onlinePlayers[player][0]);
    $('img', guildImage).addClass('fshImgCntr');
    onlineData.push([
      guildImage.html(),
      onlinePlayers[player][1],
      onlinePlayers[player][2],
      onlinePlayers[player][3] * 100 +
      onlinePlayers[player][4] + 1,
    ]);
  });
}

function saveVal(key, val) {
  if (!isNaN(val)) {setValue(key, val);}
}

var lvlTests = [
  function(level, min, max) {return isNaN(min) && isNaN(max);},
  function(level, min, max) {return isNaN(min) && level <= max;},
  function(level, min, max) {return min <= level && isNaN(max);},
  function(level, min, max) {return min <= level && level <= max;}
];

function dataTableSearch(_settings, data) { // jQuery
  /* Custom filtering function which will search
  data in column three between two values */
  var min = parseInt($('#fshMinLvl', context).val(), 10); // context
  var max = parseInt($('#fshMaxLvl', context).val(), 10); // context
  saveVal('onlinePlayerMinLvl', min);
  saveVal('onlinePlayerMaxLvl', max);
  var level = fallback(intValue(data[2]), 0);
  for (var i = 0; i < lvlTests.length; i += 1) {
    if (lvlTests[i](level, min, max)) {return true;}
  }
  return false;
}

function filterHeaderOnlinePlayers() { // jQuery
  highlightPlayersNearMyLvl =
    getValue('highlightPlayersNearMyLvl');
  lvlDiffToHighlight = 10;
  levelToTest = intValue($('dt.stat-level:first')
    .next().text());
  var characterVirtualLevel = getValue('characterVirtualLevel');
  if (characterVirtualLevel) {levelToTest = characterVirtualLevel;}
  if (levelToTest <= 205) {lvlDiffToHighlight = 5;}
  $('#fshOutput', context).html( // context
    '<div align=right>' +
    'Min lvl:<input value="' + getValue('onlinePlayerMinLvl') +
      '" size=5 id="fshMinLvl" /> ' +
    'Max lvl:<input value="' + getValue('onlinePlayerMaxLvl') +
      '" size=5 id="fshMaxLvl" /> ' +
    '<input id="fshReset" type="button" value="Reset"/>' +
    '</div><table id="fshInv" class="allow stripe hover"></table>');
}

function gotOnlinePlayers() { // jQuery
  buildOnlinePlayerData();
  $.fn.dataTable.ext.search.push(dataTableSearch);
  filterHeaderOnlinePlayers();

  table = $('#fshInv', context).dataTable({ // context
    data: onlineData,
    pageLength: 30,
    lengthMenu: [[30, 60, -1], [30, 60, 'All']],
    columns: [
      {title: 'Guild', 'class': 'dt-center', orderable: false},
      {title: 'Name', 'class': 'dt-center'},
      {title: 'Level', 'class': 'dt-center'},
      {title: 'Page/Index', 'class': 'dt-center'}
    ],
    createdRow: function(row, data) {
      if (highlightPlayersNearMyLvl &&
        Math.abs(intValue(data[2]) - levelToTest) <=
        lvlDiffToHighlight) {
        $('td', row).eq(2).addClass('lvlHighlight');
      }
    },
    order: [3, 'desc'],
    stateSave: true,
    stateDuration: 0
  }).api();
}

function checkLastPage() {
  if (onlinePages === lastPage) {
    setForage('fsh_onlinePlayers', onlinePlayers);
    gotOnlinePlayers();
  }
}

function getOnlinePlayers(data) { // Bad jQuery
  $('#fshOutput', context).append(' ' +
    (onlinePages + 1)); // context
  var doc = createDocument(data);
  var input = $('#pCC input.custominput', doc).first();
  var thePage = input.attr('value');
  var theRows = $('#pCC img[src$="/skin/icon_action_view.gif',
    doc).parent().parent().parent();
  theRows.each(function(index, element) {
    var tds = $('td', $(element));
    var player = tds.eq(1).text();
    if (onlinePlayers[player] &&
        onlinePlayers[player][3] > thePage) {return;}
    onlinePlayers[player] = [
      tds.eq(0).html(),
      tds.eq(1).html(),
      tds.eq(2).text(),
      thePage,
      index
    ];
  });
  onlinePages += 1;
  if (onlinePages === 1) {
    input = input.parent().text();
    lastPage = parseInt(input.match(/(\d+)/g)[0], 10);
    for (var i = 2; i <= lastPage; i += 1) {
      retryAjax('index.php?cmd=onlineplayers&page=' + i).done(getOnlinePlayers);
    }
  }
  checkLastPage();
}

function refreshEvt() { // Bad jQuery
  $('#fshRefresh', context).hide();
  onlinePages = 0;
  onlinePlayers = {};
  retryAjax('index.php?cmd=onlineplayers&page=1').done(getOnlinePlayers);
  setValue('lastOnlineCheck', now);
  $('#fshOutput', context).append('Parsing online players...'); // context
}

function changeLvl(e) { // jQuery
  if (e.target.id === 'fshMinLvl' || e.target.id === 'fshMaxLvl') {
    table.draw();
  }
}

function resetEvt() { // context
  setValue('onlinePlayerMinLvl',
    defaults.onlinePlayerMinLvl);
  setValue('onlinePlayerMaxLvl',
    defaults.onlinePlayerMaxLvl);
  $('#fshMinLvl', context).val(
    defaults.onlinePlayerMinLvl); // context
  $('#fshMaxLvl', context).val(
    defaults.onlinePlayerMaxLvl); // context
  table.draw();
}

function doOnlinePlayerEventHandlers(e) {
  if (e.target.id === 'fshRefresh') {refreshEvt();}
  if (e.target.id === 'fshReset') {resetEvt();}
}

function injectOnlinePlayersNew() { // jQuery
  var lastCheck = getValue('lastOnlineCheck');
  var refreshButton;
  if (now - lastCheck > 300000) {
    refreshButton = '<span> (takes a while to refresh so only do it ' +
      'if you really need to) </span><span id="fshRefresh" class="fshLink"' +
      '>[Refresh]</span>';
  } else {
    refreshButton = '<span>[ Wait ' + Math.round(300 - (now -
      lastCheck) / 1000) + 's ]</span>';
  }
  context.html(
    '<span><b>Online Players</b></span>' + refreshButton +
    '<div id="fshOutput"></div>');
  getForage('fsh_onlinePlayers').done(function(value) {
    onlinePlayers = value || {};
    gotOnlinePlayers();
  });
  context[0].addEventListener('click', doOnlinePlayerEventHandlers);
  context[0].addEventListener('keyup', changeLvl);
}

function injectOnlinePlayers(content) { // jQuery
  if (content) {
    context = $(content);
  } else {
    context = $('#pCC');
  }
  injectOnlinePlayersNew();
}

var content$2;
var recipebook;
var hideRecipes = [];
var output;
var itmRE =
  /fetchitem.php\?item_id=(\d+)&inv_id=-1&t=2&p=(\d+)&vcode=([a-z0-9]+)/i;
var currentPlayerId;

function storeRecipeBook() {
  setForage('fsh_recipeBook', recipebook);
}

function getRecipeItems(recipe) {
  if (recipe.items) {
    return recipe.items.reduce(function(prev, itm) {
      return prev + '<div class="rmItem"><img class="tip-dynamic" ' +
        'data-tipped="fetchitem.php?item_id=' +
        itm.id + '&inv_id=-1&t=2&p=' +
        currentPlayerId + '&vcode=' +
        itm.verify + '" src="' +
        itm.img + '" height="20px" width="20px"><p>' +
        itm.amountPresent + '/' +
        itm.amountNeeded + '</p></div>';
    }, '');
  }
  return '';
}

function getComponents(recipe) {
  if (recipe.components) {
    return recipe.components.reduce(function(prev, comp) {
      return prev + '<div class="rmItem"><img class="tip-dynamic" ' +
        'data-tipped="fetchitem.php?item_id=' +
        comp.id + '&inv_id=-1&t=2&p=' +
        currentPlayerId + '&vcode=' +
        comp.verify + '" src="' +
        comp.img + '" height="20px" width="20px"><p>' +
        comp.amountPresent + '/' +
        comp.amountNeeded + '</p></div>';
    }, '');
  }
  return '';
}

function getImg(recipe) {
  if (recipe.target) {
    return ' <img class="tip-dynamic" ' +
      'data-tipped="fetchitem.php?item_id=' +
      recipe.target.id + '&inv_id=-1&t=2&p=' + currentPlayerId +
      '&vcode=' + recipe.target.verify + '" ' +
      'src="' + recipe.target.img +
      '" height="30px" width="30px"><br/>';
  }
  return '';
}

function drawRecipeTable() { // Legacy
  currentPlayerId = playerId();
  var i;
  var result = '<table width="100%"><tr class="rmTh"><th>Recipe</th>' +
    '<th><span id="sortName" class="fshLink" sortkey="name">Name</span>' +
    '</th><th>Items</th><th>Components</th><th>Target</th></tr>';
  var recipe;
  for (i = 0; i < recipebook.recipe.length; i += 1) {
    recipe = recipebook.recipe[i];
    if (hideRecipes.indexOf(recipe.name) !== -1) {continue;}
    result += '<tr class="rmTr"><td class="rmTd"><a href="' + recipe.link +
      '"><img src="' + recipe.img +
      '" height="30px" width="30px"></a></td><td class="rmTd"><a href="' +
      recipe.link + '">' + recipe.name + '</a></td><td class="rmTd">';
    result += getRecipeItems(recipe);
    result += '</td><td class="rmTd">';
    result += getComponents(recipe);
    result += '</td><td class="rmTd">';
    result += getImg(recipe);
    result += '</td></tr>';
  }
  result += '</table>';
  output.innerHTML = result;
  recipebook.lastUpdate = new Date();
  storeRecipeBook();
}

function generateRecipeTable() { // Legacy
  if (recipebook) {drawRecipeTable();}
}

function testSortType(evt) {
  var sortType = evt.target.getAttribute('sorttype');
  if (!sortType) {sortType = 'string';}
  sortType = sortType.toLowerCase();
  return sortType;
}

function sortRecipeBook(sortType) {
  if (sortType === 'number') {
    recipebook.recipe.sort(numberSort);
  } else {
    recipebook.recipe.sort(stringSort);
  }
}

function sortRecipeTable(evt) { // Legacy
  var headerClicked = evt.target.getAttribute('sortKey');
  var sortType = testSortType(evt);
  if (typeof calf.sortAsc === 'undefined') {calf.sortAsc = true;}
  if (calf.sortBy && calf.sortBy === headerClicked) {
    calf.sortAsc = !calf.sortAsc;
  }
  calf.sortBy = headerClicked;
  sortRecipeBook(sortType);
  generateRecipeTable();
}

function hasAmounts(result, amounts) {
  if (amounts) {
    var resultAmounts = amounts.textContent.split('/');
    result.amountPresent = parseInt(resultAmounts[0], 10);
    result.amountNeeded = parseInt(resultAmounts[1], 10);
  }
}

function reduceItemOrComponent(bgGif, prev, el) {
  var background = el.getAttribute('background');
  if (!background || background.indexOf(bgGif) === -1) {return prev;}
  var img = el.children[0].children[0];
  var mouseOver = img.getAttribute('data-tipped');
  var mouseOverRX = mouseOver.match(itmRE);
  var result = {
    img: img.getAttribute('src'),
    id: mouseOverRX[1],
    verify: mouseOverRX[3]
  };
  hasAmounts(result, el.parentNode.nextElementSibling);
  prev.push(result);
  return prev;
}

function parseRecipeItemOrComponent(bgGif, doc) {
  var tblCells = doc.getElementById('pCC').getElementsByTagName('td');
  return Array.prototype.reduce.call(tblCells,
    reduceItemOrComponent.bind(null, bgGif), []);
}

function processRecipe(recipe, data) {
  var doc = createDocument(data);
  output.insertAdjacentHTML('beforeend',
    'Parsing blueprint ' + recipe.name + '...<br>');
  recipe.items = parseRecipeItemOrComponent('/inventory/2x3.gif', doc);
  recipe.components = parseRecipeItemOrComponent('/inventory/1x1mini.gif', doc);
  recipe.target = parseRecipeItemOrComponent('/hellforge/2x3.gif', doc)[0];
  recipebook.recipe.push(recipe);
}

function processFolderAnyPage(data) { // jQuery.min
  var doc = createDocument(data);
  var innerPcc = doc.getElementById('pCC');
  var scope = innerPcc.firstElementChild.rows[6].cells[0]
    .firstElementChild.getElementsByTagName('a');
  var prm = Array.prototype.reduce.call(scope, function(prev, el) {
    output.insertAdjacentHTML('beforeend',
      'Found blueprint "' + el.textContent + '".<br>');
    var recipe = {
      img: el.parentNode.previousElementSibling.firstElementChild
        .getAttribute('src'),
      link: el.href,
      name: el.textContent,
      id: getCustomUrlParameter(el.href, 'recipe_id')
    };
    prev.push(retryAjax(el.href).pipe(processRecipe.bind(null, recipe)));
    return prev;
  }, []);
  return $.when.apply($, prm);
}

function processFolderFirstPage(data) { // jQuery.min
  var prm = [];
  var doc = createDocument(data);
  var innerPcc = doc.getElementById('pCC');
  var scope = innerPcc.firstElementChild.rows[4].cells[0]
    .firstElementChild.getElementsByTagName('img');
  var thisFolder = Array.prototype.filter.call(scope, function(el) {
    return /\/folder_on\.gif/.test(el.getAttribute('src'));
  })[0];
  var pages = innerPcc.getElementsByClassName('customselect')[0]
    .getElementsByTagName('option').length;
  for (var i = 1; i < pages; i += 1) {
    prm.push(retryAjax(thisFolder.parentNode.href + '&page=' + i)
      .pipe(processFolderAnyPage));
  }
  prm.push($.when(data).pipe(processFolderAnyPage));
  return $.when.apply($, prm);
}

function reduceFolders(prev, el) { // jQuery.min
  var href = el.parentNode.href;
  var folderName = el.parentNode.nextElementSibling.nextElementSibling
    .firstChild.textContent;
  if (getCustomUrlParameter(href, 'folder_id') === '-1') {
    return prev;
  }
  if (/quest/i.test(folderName)) {
    output.insertAdjacentHTML('beforeend', 'Skipping folder "' +
      folderName + '"  as it has the word "quest" in folder name.<br>');
    return prev;
  }
  prev.push(retryAjax(href).pipe(processFolderFirstPage));
  return prev;
}

function processFirstPage(data) { // jQuery.min
  var doc = createDocument(data);
  var scope = doc.getElementById('pCC').firstElementChild.rows[4].cells[0]
    .firstElementChild.getElementsByTagName('img');
  var prm = Array.prototype.reduce.call(scope, reduceFolders, []);
  prm.push($.when(data).pipe(processFolderFirstPage));
  return $.when.apply($, prm);
}

function displayStuff() {
  output.insertAdjacentHTML('beforeend', 'Finished parsing ... formatting ...');
  storeRecipeBook();
  generateRecipeTable();
}

function parseInventingStart() { // jQuery.min
  recipebook = {};
  recipebook.recipe = [];
  output.innerHTML = '<br>Parsing inventing screen ...<br>';
  retryAjax('index.php?cmd=inventing').pipe(processFirstPage)
    .done(displayStuff);
}

function gotRecipeBook(data) {
  recipebook = data;
  if (getValue('hideRecipes')) {
    hideRecipes = shouldBeArray('hideRecipeNames');
  }
  content$2.innerHTML = '<table class="fshInvFilter"><thead><tr>' +
    '<th width="90%"><b>&nbsp;Recipe Manager</b></th>' +
    '<th width="10%" class="fshBtnBox">[' +
    '<span id="rfsh" class="fshLink">' +
    'Refresh</span>]</th>' +
    '</tr></thead></table>';
  output = createDiv();
  content$2.insertAdjacentElement('beforeend', output);
  if (!recipebook) {
    parseInventingStart();
  } else {
    generateRecipeTable();
  }
}

function rmEvtHdl(evt) {
  if (evt.target.id === 'rfsh') {
    parseInventingStart();
  }
  if (evt.target.id === 'sortName') {
    sortRecipeTable(evt);
  }
}

function injectRecipeManager(injector) { // jQuery.min
  content$2 = injector || pCC;
  getForage('fsh_recipeBook').done(gotRecipeBook);
  content$2.addEventListener('click', rmEvtHdl);
}

function getInventory() {
  var subcmd = 'inventory';
  if (calf.subcmd === 'guildinvmgr') {
    subcmd = 'guild_store&inc_tagged=1';
  }
  return retryAjax({
    dataType: 'json',
    url: 'index.php?cmd=export&subcmd=' + subcmd
  });
}

function outputResult(result, handle) {
  handle.insertAdjacentHTML('beforeend',
    '<li class="fshNbrList">' + result + '</li>');
}

var lastMsg;

function jsonFail(json, handle) {
  if (!json.s && lastMsg !== json.e.message) {
    lastMsg = json.e.message;
    outputResult(json.e.message, handle);
  }
  if (!json.s) {return true;}
}

function useitem(item) {
  return callApp({
    cmd: 'profile',
    subcmd: 'useitem',
    inventory_id: item
  });
}

var extTbl;
var playerId$1;
var extractInv;
var selectST;
var selectMain;
var resourceList;
var buyResult;

function backpackRemove(invId) {
  extractInv.some(function(el, i, ary) {
    if (el.inv_id === invId) {
      ary.splice(i, 1);
      return true;
    }
    return false;
  });
}

function quickDoneExtracted(invId, json) {
  if (jsonFail(json, buyResult)) {return;}
  backpackRemove(invId);
  outputResult('Item Extracted.', buyResult);
}

function doExtract(target) {
  var InventoryIDs = resourceList[target.id.replace('fshExtr', '')].invIDs;
  target.parentNode.innerHTML = 'extracting all ' +
    InventoryIDs.length + ' resources';
  for (var i = 0; i < InventoryIDs.length; i += 1) {
    useitem(InventoryIDs[i])
      .done(quickDoneExtracted.bind(null, InventoryIDs[i]));
  }
}

function extractAllSimilar(evt) {
  jConfirm('Extract Resources',
    'Are you sure you want to extract all similar items?',
    doExtract.bind(null, evt.target)
  );
}

function checkFlags(item) {
  return selectMain && item.folder_id !== '-1' ||
    !selectST && item.is_in_st;
}

function resources(prev, item) {
  if (checkFlags(item)) {return prev;}
  if (prev[item.item_id]) {
    prev[item.item_id].invIDs.push(item.inv_id);
  } else {
    prev[item.item_id] = {
      invIDs: [item.inv_id],
      inv_id: item.inv_id,
      item_name: item.item_name
    };
  }
  return prev;
}

function tableRows(prev, item_id) {
  var res = resourceList[item_id];
  return prev + '<tr><td class="fshCenter"><span class="smallLink"' +
    ' id="fshExtr' + item_id +
    '">Extract all ' + res.invIDs.length + '</span></td>' +
    '<td><img src="' + imageServer + '/items/' +
    item_id + '.gif" class="tip-dynamic" data-tipped="' +
    'fetchitem.php?item_id=' + item_id + '&inv_id=' +
    res.inv_id + '&t=1&p=' + playerId$1 +
    '" border=0></td><td>' + res.item_name + '</td></tr>';
}

function showQuickExtract() {
  resourceList = extractInv.reduce(resources, {});
  var output = '<tr><th width="20%">Actions</th><th>Items</th></tr>' +
    '<tr><td colspan="2"><ol id="qeresult"></ol></td></tr>';
  output += Object.keys(resourceList).reduce(tableRows, '');
  extTbl.innerHTML = output;
  buyResult = document.getElementById('qeresult');
}

function isExtractable(curr) {
  return curr.item_name === 'Zombie Coffin' ||
    curr.type === '12' ||
    curr.type === '16';
}

function prepInv(data) {
  playerId$1 = data.player_id;
  extractInv = data.items.reduce(function(prev, curr) {
    if (isExtractable(curr)) {prev.push(curr);}
    return prev;
  }, []);
  showQuickExtract();
}

var extractEvents = [
  {
    test: function(e) {return e.target.id === 'fshInSt';},
    fn: function() {
      selectST = !selectST;
      showQuickExtract();
    }
  },
  {
    test: function(e) {return e.target.id === 'fshInMain';},
    fn: function() {
      selectMain = !selectMain;
      showQuickExtract();
    }
  },
  {
    test: function(e) {return e.target.id.indexOf('fshExtr') === 0;},
    fn: function(e) {
      extractAllSimilar(e);
    }
  }
];

function listen(e) {
  for (var i = 0; i < extractEvents.length; i += 1) {
    if (extractEvents[i].test(e)) {
      extractEvents[i].fn(e);
      return;
    }
  }
}

function insertQuickExtract(injector) { // jQuery.min
  var content = injector || pCC;
  content.innerHTML = '<div class="qeHead"><b>Quick Extract</b></div>' +
    'Select which type of plants you wish to extract all of. Only ' +
    'select extractable resources.<br>' +
    '<label><input type="checkbox" id="fshInSt" checked>' +
    ' Select items in ST</label>&nbsp;&nbsp;' +
    '<label><input type="checkbox" id="fshInMain" checked>' +
    ' Only extract items in Main Folder</label>';
  extTbl = createTable({width: '100%'});
  content.appendChild(extTbl);
  selectST = true;
  selectMain = true;
  content.addEventListener('click', listen);
  getInventory().done(prepInv);
}

function alpha(a, b) {
  if (a.n.toLowerCase() < b.n.toLowerCase()) {return -1;}
  if (a.n.toLowerCase() > b.n.toLowerCase()) {return 1;}
  return 0;
}

function isUseable(item) {
  if ([10, 12, 15, 16].indexOf(item.t) !== -1 ||
      item.n === 'Zombie Coffin') {
    return 'smallLink';
  }
  return 'notLink';
}

function itemImage(item) {
  var ret = imageServer + '/';
  if (item.b === 13699) {
    ret += 'composing/potions/' + item.extra.design + '_' +
      item.extra.color + '.gif';
  } else {
    ret += 'items/' + item.b + '.gif';
  }
  return ret;
}

function tableRows$1(tbl, currentPlayerId, item) {
  var newRow = tbl.insertRow(-1);
  item.dom = newRow;
  var equipClass = 'fshEq ';
  var useClass = 'fshUse ';
  if (item.t < 9) {equipClass += 'smallLink';} else {equipClass += 'notLink';}
  useClass += isUseable(item);
  newRow.innerHTML = '<td class="fshCenter"><span class="' + equipClass +
    '" data-itemid="' + item.a + '">Wear</span>&nbsp;|&nbsp;<span class="' +
    useClass + '" data-itemid="' + item.a +
    '">Use/Ext</span></td><td><img src="' + itemImage(item) +
    '" class="tip-dynamic" data-tipped="fetchitem.php?item_id=' + item.b +
    '&amp;inv_id=' + item.a + '&amp;t=1&amp;p=' + currentPlayerId +
    '&amp;currentPlayerId=' + currentPlayerId +
    '" width="30" height="30" border="0"></td><td width="90%">&nbsp;' +
    item.n + '</td>';
}

function makeFolderSpans(appInv) {
  return '<span class="fshLink folder" data-folder="0">All</span>' +
    // ' &ensp;<span class="fshLink folder" data-folder="-1">Main</span>' +
    appInv.r.reduce(function(prev, folderObj) {
      return prev + ' &ensp;<span class="fshLink fshNoWrap folder" ' +
        'data-folder="' + folderObj.id.toString() + '">' +
        folderObj.name + '</span>';
    }, '');
}

function createQuickWear(appInv) {
  var currentPlayerId = playerId();
  var tbl = createTable({
    width: '100%',
    innerHTML: '<thead><tr><th class="fshCenter" colspan="3">' +
      makeFolderSpans(appInv) + '</th></tr>' +
      '<tr class="fshHeader"><th class="fshCenter" width="20%">Actions</th>' +
      '<th colspan="2">Items</th></tr></thead>'
  });
  var tbody = createTBody();
  tbl.appendChild(tbody);
  appInv.r.forEach(function(aFolder) {
    aFolder.items.sort(alpha);
    aFolder.items.forEach(tableRows$1.bind(null, tbody, currentPlayerId));
  });
  var qw = createDiv({
    id: 'invTabs-qw',
    className: 'ui-tabs-panel ui-corner-bottom'
  });
  qw.appendChild(tbl);
  return qw;
}

function loadInventory() {
  return callApp({cmd: 'profile', subcmd: 'loadinventory'});
}

function ahLink(searchname, nickname) {
  return '<a href="index.php?cmd=auctionhouse&search_text=' + searchname +
    '">' + nickname + '</a>';
}

function foundInvItem(invCount, name) {
  if (invCount[name]) {
    invCount[name].count += 1;
  } else {
    invCount[name] = {count: 1, nicknameList: []};
  }
}

function displayFoundCount(invCount) {
  return Object.keys(invCount).reduce(function(prev, key) {
    if (invCount[key].nicknameList.length !== 0) {
      return prev + '<tr><td>' + key + '</td><td>' +
        invCount[key].nicknameList.map(function(nickname) {
          return ahLink(key, nickname);
        }).join(' ') + '</td><td>' +
        invCount[key].count + '</td><td></td><td></td></tr>';
    }
    return prev;
  }, '');
}

function displayNotFound(quickSL) {
  return quickSL.reduce(function(prev, item) {
    if (item.displayOnAH && !item.found) {
      return prev + ahLink(item.searchname, item.nickname) + ', ';
    }
    return prev;
  }, '');
}

function displayOtherCount(invCount) {
  return Object.keys(invCount).reduce(function(prev, key) {
    if (invCount[key].nicknameList.length === 0) {
      return prev + '<tr><td>' + key + '</td><td></td><td>' +
        invCount[key].count + '</td><td></td><td></td><td></td></tr>';
    }
    return prev;
  }, '');
}

function buildHTML(invCount, quickSL) {
  // TODO this is going to need significant rebuild
  return '<table width="100%" cellspacing="2" cellpadding="2"><thead>' +
    '<tr><th colspan="5" class="fshCenter">Items from ' +
    '<a href="index.php?cmd=notepad&blank=1&subcmd=auctionsearch">' +
    'AH Quick Search</a> found in your inventory</th></tr>' +
    '<tr><th>Name</th><th>Nick Name</th><th>Inv Count</th>' +
    '<th>AH Min Price</th><th>AH BuyNow Price</th></tr></thead><tbody>' +
    // show inv & counter for item with nickname found
    displayFoundCount(invCount) +
    // show item from quick AH search that are not in our inv
    '<tr><td colspan="5"><hr></td></tr>' +
    '<tr><td>Did not find:</td><td colspan="4">' +
    displayNotFound(quickSL) +
    '</td></tr><tr><td colspan="5"><hr></td></tr></tbody>' +
    '<thead><tr><th colspan="5" class="fshCenter">Items NOT from ' +
    '<a href="index.php?cmd=notepad&blank=1&subcmd=auctionsearch">' +
    'AH Quick Search</a> found in your inventory</td></thead><tbody>' +
    // show inv & counter for item with nickname NOT found
    displayOtherCount(invCount) +
    '</tbody></table>';
}

function inQuickSearchList(invCount, name, listItem) {
  if (name === listItem.searchname) {
    listItem.found = true;
    if (invCount[name].nicknameList.indexOf(listItem.nickname) < 0) {
      invCount[name].nicknameList.push(listItem.nickname);
    }
  }
}

function testItemList(invCount, quickSL, item) {
  var name = item.n;
  foundInvItem(invCount, name);
  quickSL.forEach(inQuickSearchList.bind(null, invCount, name));
}

function showAHInvManager(itemList) {
  var invCount = {};
  var quickSL = getValueJSON('quickSearchList');
  // fill up the Inv Counter
  itemList.r.forEach(function(aFolder) {
    aFolder.items.forEach(testItemList.bind(null, invCount, quickSL));
  });
  var im = createDiv({
    id: 'invTabs-ah',
    className: 'ui-tabs-panel ui-corner-bottom'
  });
  im.insertAdjacentHTML('beforeend', buildHTML(invCount, quickSL));
  return im;
}

/* eslint-disable max-lines */
var mySimpleCheckboxes = {
  moveGuildList: {
    id: 'moveGuildList',
    helpTitle: 'Move Guild Info List',
    helpText: 'This will Move the Guild Info List higher ' +
      'on the bar on the right'
  },
  moveOnlineAlliesList: {
    id: 'moveOnlineAlliesList',
    helpTitle: 'Move Online Allies List',
    helpText: 'This will Move the Online Allies List higher ' +
      'on the bar on the right'
  },
  enableOnlineAlliesWidgets: {
    id: 'enableOnlineAlliesWidgets',
    helpTitle: 'Enable Online Allies Widgets',
    helpText: 'Enabling this option will enable the Allies List ' +
      'Widgets (coloring on the Allies List panel)'
  },
  moveFSBox: {
    id: 'moveFSBox',
    helpTitle: 'Move FS box',
    helpText: 'This will move the FS box to the left, under the menu, ' +
      'for better visibility (unless it is already hidden.)'
  },
  gameHelpLink: {
    id: 'gameHelpLink',
    helpTitle: '&quot;Game Help&quot; Settings Link',
    helpText: 'This turns the Game Help text in the lower ' +
      'right box into a link to this settings page.'
  },
  enableTempleAlert: {
    id: 'enableTempleAlert',
    helpTitle: 'Enable Temple Alert',
    helpText: 'Puts an alert on the LHS if you have not ' +
      'prayed at the temple today.',
    network: true
  },
  enableUpgradeAlert: {
    id: 'enableUpgradeAlert',
    helpTitle: 'Enable Gold Upgrade Alert',
    helpText: 'Puts an alert on the LHS if you have not upgraded your ' +
      'stamina with gold today.',
    network: true
  },
  enableComposingAlert: {
    id: 'enableComposingAlert',
    helpTitle: 'Enable Composing Alert',
    helpText: 'Puts an alert on the LHS if you have composing ' +
      'slots available.',
    network: true
  },
  enhanceOnlineDots: {
    id: 'enhanceOnlineDots',
    helpTitle: 'Enhance Online Dots',
    helpText: 'Enhances the green/grey dots by player names to show ' +
      'online/offline status.'
  },
  hideBuffSelected: {
    id: 'hideBuffSelected',
    helpTitle: 'Hide Buff Selected',
    helpText: 'Hides the buff selected functionality in the online allies ' +
      'and guild info section.'
  },
  hideHelperMenu: {
    id: 'hideHelperMenu',
    helpTitle: 'Hide Helper Menu',
    helpText: 'Hides the helper menu from top left.'
  },
  keepHelperMenuOnScreen: {
    id: 'keepHelperMenuOnScreen',
    helpTitle: 'Keep Helper Menu On Screen',
    helpText: 'Keeps helper menu on screen as you scroll (helper ' +
      'menu must be enabled to work). Also works with quick links.'
  },
  showAdmin: {
    id: 'showAdmin',
    helpTitle: 'Show rank controls',
    helpText: 'Show ranking controls for guild managemenet in member ' +
      'profile page - this works for guild founders only'
  },
  ajaxifyRankControls: {
    id: 'ajaxifyRankControls',
    helpTitle: 'AJAXify rank controls',
    helpText: 'Enables guild founders with ranking rights to change rank ' +
      'positions without a screen refresh.'
  },
  detailedConflictInfo: {
    id: 'detailedConflictInfo',
    helpTitle: 'Show Conflict Details',
    helpText: 'Inserts detailed conflict information onto your guild\'s ' +
      'manage page. Currently displays the target guild as well as ' +
      'the current score.',
    network: true
  },
  showCombatLog: {
    id: 'showCombatLog',
    helpTitle: 'Show Combat Log',
    helpText: 'This will show the combat log for each automatic ' +
      'battle below the monster list.'
  },
  enableCreatureColoring: {
    id: 'enableCreatureColoring',
    helpTitle: 'Color Special Creatures',
    helpText: 'Creatures will be colored according to their rarity. ' +
      'Champions will be colored green, Elites yellow and Super Elites red.'
  },
  showCreatureInfo: {
    id: 'showCreatureInfo',
    helpTitle: 'Show Creature Info',
    helpText: 'This will show the information from the view creature ' +
      'link when you mouseover the link.',
    network: true
  },
  fsboxlog: {
    id: 'fsboxlog',
    helpTitle: 'Enable FS Box Log',
    helpText: 'This enables the functionality to keep a log of ' +
      'recent seen FS Box message.'
  },
  keepBuffLog: {
    id: 'keepBuffLog',
    helpTitle: 'Enable Buff Log',
    helpText: 'This enables the functionality to keep a log of ' +
      'recently casted buffs'
  },
  huntingMode: {
    id: 'huntingMode',
    helpTitle: 'Enable Hunting Mode',
    helpText: 'This disable menu and some visual features to ' +
      'speed up the calf.'
  },
  hideNonPlayerGuildLogMessages: {
    id: 'hideNonPlayerGuildLogMessages',
    helpTitle: 'Cleanup Guild Log',
    helpText: 'Any log messages not related to the current player ' +
      'will be dimmed (e.g. recall messages from guild store)'
  },
  useNewGuildLog: {
    id: 'useNewGuildLog',
    helpTitle: 'Use New Guild Log',
    helpText: 'This will replace the standard guild log with the ' +
      'helper version of the guild log.'
  },
  enableLogColoring: {
    id: 'enableLogColoring',
    helpTitle: 'Enable Log Coloring',
    helpText: 'Three logs will be colored if this is enabled, ' +
      'Guild Chat, Guild Log and Player Log. It will show any new ' +
      'messages in yellow and anything 20 minutes old ones in brown.'
  },
  enableChatParsing: {
    id: 'enableChatParsing',
    helpTitle: 'Enable Chat Parsing',
    helpText: 'If this is checked, your character log will be parsed for ' +
      'chat messages and show the chat message on the screen if you reply ' +
      'to that message.'
  },
  addAttackLinkToLog: {
    id: 'addAttackLinkToLog',
    helpTitle: 'Add attack link to log',
    helpText: 'If checked, this will add an Attack link to each message ' +
      'in your log.'
  },
  enhanceChatTextEntry: {
    id: 'enhanceChatTextEntry',
    helpTitle: 'Enhance Chat Text Entry',
    helpText: 'If checked, this will enhance the entry field for entering ' +
      'chat text on the guild chat page.'
  },
  showExtraLinks: {
    id: 'showExtraLinks',
    helpTitle: 'Show Extra Links',
    helpText: 'If checked, this will add AH and UFSG ' +
      'links to equipment screens.'
  },
  disableItemColoring: {
    id: 'disableItemColoring',
    helpTitle: 'Disable Item Coloring',
    helpText: 'Disable the code that colors the item text based on the ' +
      'rarity of the item.'
  },
  showQuickDropLinks: {
    id: 'showQuickDropLinks',
    helpTitle: 'Show Quick Drop Item',
    helpText: 'This will show a link beside each item which gives the ' +
      'option to drop the item.  WARNING: NO REFUNDS ON ERROR'
  },
  storeLastQuestPage: {
    id: 'storeLastQuestPage',
    helpTitle: 'Store Last Quest Page',
    helpText: 'This will store the page and sort order of each of the ' +
      'three quest selection pages for next time you visit. If you need ' +
      'to reset the links, turn this option off, click on the link you ' +
      'wish to reset and then turn this option back on again.'
  },
  showNextQuestSteps: {
    id: 'showNextQuestSteps',
    helpTitle: 'Show Next Quest Steps',
    helpText: 'Shows all quest steps in the UFSG.'
  },
  renderSelfBio: {
    id: 'renderSelfBio',
    helpTitle: 'Render self bio',
    helpText: 'This determines if your own bio will render the FSH ' +
      'special bio tags.'
  },
  renderOtherBios: {
    id: 'renderOtherBios',
    helpTitle: 'Render other players&#39; bios',
    helpText: 'This determines if other players bios will render the FSH ' +
      'special bio tags.'
  },
  showStatBonusTotal: {
    id: 'showStatBonusTotal',
    helpTitle: 'Show Stat Bonus Total',
    helpText: 'This will show a total of the item stats when you ' +
      'mouseover an item on the profile screen.'
  },
  enableQuickDrink: {
    id: 'enableQuickDrink',
    helpTitle: 'Enable Quick Drink/Wear',
    helpText: 'This enables the quick drink/wear functionality on the ' +
      'profile page.'
  },
  disableDeactivatePrompts: {
    id: 'disableDeactivatePrompts',
    helpTitle: 'Disable Deactivate Prompts',
    helpText: 'This disables the prompts for deactivating buffs on ' +
      'the profile page.'
  },
  enableAttackHelper: {
    id: 'enableAttackHelper',
    helpTitle: 'Show Attack Helper',
    helpText: 'This will show extra information on the attack player ' +
      'screen about stats and buffs on you and your target',
    network: true
  },
  showPvPSummaryInLog: {
    id: 'showPvPSummaryInLog',
    helpTitle: 'Show PvP Summary in Log',
    helpText: 'This will show a summary of the PvP results in the log.',
    network: true
  },
  autoFillMinBidPrice: {
    id: 'autoFillMinBidPrice',
    helpTitle: 'Auto Fill Min Bid Price',
    helpText: 'This enables the functionality to automatically fill in ' +
      'the min bid price so you just have to hit bid and your bid will ' +
      'be placed.'
  },
  hideRelicOffline: {
    id: 'hideRelicOffline',
    helpTitle: 'Hide Relic Offline',
    helpText: 'This hides the relic offline defenders checker.'
  },
  enterForSendMessage: {
    id: 'enterForSendMessage',
    helpTitle: 'Enter Sends Message',
    helpText: 'If enabled, will send a message from the Send Message ' +
      'screen if you press enter. You can still insert a new line by ' +
      'holding down shift when you press enter.'
  },
  navigateToLogAfterMsg: {
    id: 'navigateToLogAfterMsg',
    helpTitle: 'Navigate After Message Sent',
    helpText: 'If enabled, will navigate to the referring page after a ' +
      'successful message is sent. Example:  if you are on the world ' +
      'screen and hit message on the guild info panel after you send the ' +
      'message, it will return you to the world screen.'
  },
  moveComposingButtons: {
    id: 'moveComposingButtons',
    helpTitle: 'Move Composing Buttons',
    helpText: 'If enabled, will move composing buttons to the top of ' +
      'the composing screen.'
  },
  draggableHelperMenu: {
    id: 'draggableHelperMenu',
    helpTitle: 'Draggable Helper Menu',
    helpText: 'If enabled, allows the helper menu to ' +
      'be dragged around the screen.'
  },
  draggableQuickLinks: {
    id: 'draggableQuickLinks',
    helpTitle: 'Draggable Quick Links',
    helpText: 'If enabled, allows the quick link box to ' +
      'be dragged around the screen.'
  },
  expandMenuOnKeyPress: {
    id: 'expandMenuOnKeyPress',
    helpTitle: 'Expand Menu on Key Press',
    helpText: 'If enabled, expands the left hand menu ' +
      'when you use hotkeys.'
  },
  disableBreakdownPrompts: {
    id: 'disableBreakdownPrompts',
    helpTitle: 'Disable Breakdown Prompts',
    helpText: 'If enabled, will disable prompts when you breakdown items.' +
      '<br>NO REFUNDS OR DO-OVERS! Use at own risk.'
  },
  collapseNewsArchive: {
    id: 'collapseNewsArchive',
    helpTitle: 'Collapse News Archive',
    helpText: 'If enabled, will collapse news archives.'
  },
  hideSubLvlCreature: {
    id: 'hideSubLvlCreature',
    helpTitle: 'Hide Sub Level Creatures',
    helpText: 'If enabled, will hide creatures that are ' +
      'lower than the current realm level.'
  },
  hidePlayerActions: {
    id: 'hidePlayerActions',
    helpTitle: 'Hide Player Actions',
    helpText: 'If enabled, will hide player actions.'
  },
  disableQuickWearPrompts: {
    id: 'disableQuickWearPrompts',
    helpTitle: 'Disable Use/Ext Prompts',
    helpText: 'If enabled, will disable prompts when you Use/Ext items.' +
      '<br>NO REFUNDS OR DO-OVERS! Use at own risk.',
    title: 'Disable Use/Ext<br>Prompts'
  },
  enableGuildActivityTracker: {
    id: 'enableGuildActivityTracker',
    helpTitle: 'Enable Guild Activity Tracker',
    helpText: 'If enabled, will track guild member activity over time.',
    network: true,
    title: 'Enable Tracker'
  }
};

var networkIcon =
  '<img class="networkIcon tip-static" ' +
  'data-tipped="This function retrieves data from the network. ' +
  'Disable this to increase speed" src="data:image/png;base64,' +
  'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAA' +
  'B3RJTUUH1QgGDTMWk1twEwAAAAlwSFlzAAALEgAACxIB0t1+' +
  '/AAAAARnQU1BAACxjwv8YQUAAAC8SURBVHjahVPBEcQgCEQn' +
  'HdmTqUlr0qe16I8cufOiCGZnGCcIy4LEICJwmGgWJ3o0IOCQ' +
  'EqVg9Y4U3CoCHQhvxuPUZEiA3XYkxyI1/6S6R6rke8AlJbkV' +
  '7u95lleXq3yrdyUjLGxwnifmnHEXY3fJIQSIMcKOZCLgMltr' +
  'r+1ZWgxp8wi1VrEqxfeFWloYq4wKtOHeBNqeawqmeOnNvfdY' +
  'SvkbfaeUxP0w/G+k6WsT/xCBc25SuxDsnownEy4u5BHudpMF' +
  'egAAAABJRU5ErkJggg==" width="16" height="16" />';

var saveBoxes = [
  'navigateToLogAfterMsg',
  'gameHelpLink',
  'guildSelf',
  'guildSelfMessage',
  'guildFrnd',
  'guildFrndMessage',
  'guildPast',
  'guildPastMessage',
  'guildEnmy',
  'guildEnmyMessage',
  'showAdmin',
  'ajaxifyRankControls',
  'detailedConflictInfo',
  'disableItemColoring',
  'enableLogColoring',
  'enableChatParsing',
  'enableCreatureColoring',
  'hideNonPlayerGuildLogMessages',
  'buyBuffsGreeting',
  'renderSelfBio',
  'renderOtherBios',
  'defaultMessageSound',
  'showSpeakerOnWorld',
  'playNewMessageSound',
  'highlightPlayersNearMyLvl',
  'highlightGvGPlayersNearMyLvl',
  'showCombatLog',
  'showMonsterLog',
  'showCreatureInfo',
  'keepLogs',
  'enableGuildInfoWidgets',
  'enableOnlineAlliesWidgets',
  'hideGuildInfoMessage',
  'hideGuildInfoBuff',
  'hideGuildInfoSecureTrade',
  'hideGuildInfoTrade',
  'huntingBuffs',
  'huntingBuffsName',
  'huntingBuffs2',
  'huntingBuffs2Name',
  'huntingBuffs3',
  'huntingBuffs3Name',
  'showHuntingBuffs',
  'moveGuildList',
  'moveOnlineAlliesList',
  'moveFSBox',
  'hideQuests',
  'hideQuestNames',
  'hideRecipes',
  'hideRecipeNames',
  'doNotKillList',
  'enableBioCompressor',
  'maxCompressedCharacters',
  'maxCompressedLines',
  'sendGoldonWorld',
  'goldRecipient',
  'goldAmount',
  'keepBuffLog',
  'showQuickSendLinks',
  'showQuickDropLinks',
  'sendClasses',
  'itemRecipient',
  'currentGoldSentTotal',
  'enableAllyOnlineList',
  'enableEnemyOnlineList',
  'allyEnemyOnlineRefreshTime',
  'quickLinksTopPx',
  'quickLinksLeftPx',
  'draggableQuickLinks',
  'enableActiveBountyList',
  'bountyListRefreshTime',
  'enableWantedList',
  'wantedNames',
  'fsboxlog',
  'huntingMode',
  'enableAttackHelper',
  'hideRelicOffline',
  'enterForSendMessage',
  'storeLastQuestPage',
  'addAttackLinkToLog',
  'showStatBonusTotal',
  'newGuildLogHistoryPages',
  'useNewGuildLog',
  'enhanceChatTextEntry',
  'enableMaxGroupSizeToJoin',
  'maxGroupSizeToJoin',
  'enableTempleAlert',
  'enableUpgradeAlert',
  'enableComposingAlert',
  'autoFillMinBidPrice',
  'showPvPSummaryInLog',
  'enableQuickDrink',
  'enhanceOnlineDots',
  'hideBuffSelected',
  'hideHelperMenu',
  'keepHelperMenuOnScreen',
  'draggableHelperMenu',
  'showNextQuestSteps',
  'hideChampionsGroup',
  'hideElitesGroup',
  'hideSEGroup',
  'hideTitanGroup',
  'hideLegendaryGroup',
  'disableDeactivatePrompts',
  'moveComposingButtons',
  'showExtraLinks',
  'expandMenuOnKeyPress'
];

function bountyPrefs() {
  // Bounty hunting prefs
  return '<tr><th colspan="2"><b>Bounty hunting preferences' +
      '</b></th></tr>' +

    '<tr><td align= "right">' + networkIcon +
      'Show Active Bounties' +
      helpLink('Show Active Bounties',
        'This will show your active bounties on the right hand side') +
      ':</td><td colspan="3"><input name="enableActiveBountyList" ' +
      'type = "checkbox" value = "on"' +
      isChecked(calf.enableActiveBountyList) + '>&nbsp;' +
      '<input name="bountyListRefreshTime" size="3" value="' +
      calf.bountyListRefreshTime + '"> seconds refresh</td></tr>' +

    '<tr><td align= "right">' + networkIcon +
      'Show Wanted Bounties' +
      helpLink('Show Wanted Bounties',
        'This will show when someone you want is on the bounty board, ' +
        'the list is displayed on the right hand side') +
      ':</td><td colspan="3"><input name="enableWantedList" ' +
      'type="checkbox" value="on"' +
      isChecked(calf.enableWantedList) +
      '> Refresh time is same as Active Bounties' +

    '<tr><td align= "right">Wanted Names' +
      helpLink('Wanted Names',
        'The names of the people you want to see on the bounty board ' +
        'separated by commas') + ':</td><td colspan="3">' +
      '<input name="wantedNames" size="60" value="' + calf.wantedNames +
      '"></td></tr>' +

    simpleCheckbox('enableAttackHelper') +
    simpleCheckbox('showPvPSummaryInLog');
}

function equipPrefs() {
  // Equipment screen prefs
  return '<tr><th colspan="2"><b>Equipment screen preferences' +
      '</b></th></tr>' +

    simpleCheckbox('showExtraLinks') +
    simpleCheckbox('disableItemColoring') +

    '<tr><td class="fshRight">Show Quick Send Item' +
      helpLink('Show Quick Send on Manage Backpack',
        'This will show a link beside each item which gives the option to ' +
        'quick send the item to this person') +
      ':</td><td><input name="showQuickSendLinks" type="checkbox" ' +
      'value="on"' +
      isChecked(getValue('showQuickSendLinks')) + '>' +
      '&nbsp;&nbsp;Send Items To ' +
      '<input name="itemRecipient" size="10" value="' +
      getValue('itemRecipient') + '">' +

    simpleCheckbox('showQuickDropLinks') +

    '<tr><td class="fshRight">Quick Select all of type in Send Screen' +
      helpLink('Quick Select all of type in Send Screen',
        'This allows you to customize what quick links you would like ' +
        'displayed in your send item screen.<br>Use the format ' +
        '[&quot;name&quot;,&quot;itemid&quot;],[&quot;othername&quot;,' +
        '&quot;itemid2&quot;].<br>WARNING: NO REFUNDS ON ERROR') +
      ':</td><td><input name="sendClasses" size="60" value="' +
      escapeHtml(getValue('sendClasses')) + '">';
}

function generalPrefs() {
  // General Prefs
  return '<tr><th colspan="2"><b>General preferences ' +
      '(apply to most screens)</b></th></tr>' +

    '<tr><td class="fshRight">' +
      '<label for="enableGuildInfoWidgets">' +
      'Enable Guild Info Widgets' +
      helpLink('Enable Guild Info Widgets',
        'Enabling this option will enable the Guild Info Widgets ' +
        '(coloring on the Guild Info panel)') + ':</label></td><td>' +
      '<input id="enableGuildInfoWidgets" name="enableGuildInfoWidgets" ' +
      'type="checkbox" value="on"' +
      isChecked(calf.enableGuildInfoWidgets) +
      '>&nbsp;' +
      '<label>Hide Message&gt;<input name="hideGuildInfoMessage" ' +
      'type="checkbox" value="on"' +
      isChecked(calf.hideGuildInfoMessage) +
      '></label>&nbsp;' +
      '<label>Hide Buff&gt;<input name="hideGuildInfoBuff" ' +
      'type="checkbox" value="on"' +
      isChecked(calf.hideGuildInfoBuff) +
      '></label>&nbsp;' +
      '<label>Hide ST&gt;<input name="hideGuildInfoSecureTrade" ' +
      'type="checkbox" value="on"' +
      isChecked(calf.hideGuildInfoSecureTrade) +
      '></label>&nbsp;' +
      '<label>Hide Trade&gt;<input name="hideGuildInfoTrade" ' +
      'type="checkbox" value="on"' +
      isChecked(calf.hideGuildInfoTrade) +
      '></label></td></tr>' +

    simpleCheckbox('moveGuildList') +
    simpleCheckbox('moveOnlineAlliesList') +

    '<tr><td class="fshRight">' + networkIcon +
      'Show Online Allies/Enemies' +
      helpLink('Show Online Allies/Enemies',
        'This will show the allies/enemies online list on the right.') +
      ':</td><td><label>Allies&nbsp;<input name="enableAllyOnlineList" ' +
      'type="checkbox" value="on"' +
      isChecked(calf.enableAllyOnlineList) +
      '></label>&nbsp;&nbsp;<label>Enemies&nbsp;' +
      '<input name="enableEnemyOnlineList" type="checkbox" value="on"' +
      isChecked(calf.enableEnemyOnlineList) +
      '></label>&nbsp;&nbsp;' +
      '<input name="allyEnemyOnlineRefreshTime" size="3" value="' +
      getValue('allyEnemyOnlineRefreshTime') +
      '"> seconds refresh</td></tr>' +

    simpleCheckbox('enableOnlineAlliesWidgets') +
    simpleCheckbox('moveFSBox') +
    simpleCheckbox('fsboxlog') +
    simpleCheckbox('gameHelpLink') +
    simpleCheckbox('enableTempleAlert') +
    simpleCheckbox('enableUpgradeAlert') +
    simpleCheckbox('enableComposingAlert') +
    simpleCheckbox('enhanceOnlineDots') +
    simpleCheckbox('hideBuffSelected') +
    simpleCheckbox('hideHelperMenu') +
    simpleCheckbox('keepHelperMenuOnScreen') +
    simpleCheckbox('draggableHelperMenu') +

    '<tr><td class="fshRight">Quick Links Screen Location' +
      helpLink('Quick Links Screen Location',
        'Determines where the quick links dialog shows on the screen. ' +
        'Default is top 22, left 0.') +
      ':</td><td>Top: <input name="quickLinksTopPx" size="3" value="' +
      getValue('quickLinksTopPx') +
      '"> Left: <input name="quickLinksLeftPx" size="3" value="' +
      getValue('quickLinksLeftPx') +
      '"></td></tr>' +
    simpleCheckbox('draggableQuickLinks') +
    simpleCheckbox('expandMenuOnKeyPress');
}

function injectSettingsGuildData(guildType) {
  return '<input name="guild' + guildType + '" size="60" value="' +
    getValue('guild' + guildType) + '">' +
    '<span class="fshPoint" ' +
    'id="toggleShowGuild' + guildType + 'Message" linkto="showGuild' +
    guildType + 'Message"> &#x00bb;</span>' +
    '<div id="showGuild' + guildType + 'Message" class="fshHide">' +
    '<input name="guild' + guildType + 'Message" size="60" value="' +
    getValue('guild' + guildType + 'Message') + '">' +
    '</div>';
}

function guildPrefs() {
  // Guild Manage
  return '<tr><th colspan="2"><b>Guild>Manage preferences' +
      '</b></th></tr>' +
    '<tr><td colspan="2">Enter guild names, ' +
      'separated by commas</td></tr>' +
    '<tr><td class="fshRight">Own Guild</td><td>' +
      injectSettingsGuildData('Self') + '</td></tr>' +
    '<tr><td class="fshRight">Friendly Guilds</td><td>' +
      injectSettingsGuildData('Frnd') + '</td></tr>' +
    '<tr><td class="fshRight">Old Guilds</td><td>' +
      injectSettingsGuildData('Past') + '</td></tr>' +
    '<tr><td class="fshRight">Enemy Guilds</td><td>' +
      injectSettingsGuildData('Enmy') + '</td></tr>' +

    '<tr><td class="fshRight">Highlight Valid PvP Targets' +
      helpLink('Highlight Valid PvP Targets',
        'Enabling this option will highlight targets in OTHER guilds that ' +
        'are within your level range to attack for PvP or GvG.') +
      ':</td><td>PvP: <input name="highlightPlayersNearMyLvl" ' +
      'type="checkbox" value="on"' +
      isChecked(getValue('highlightPlayersNearMyLvl')) +
      '> GvG: <input name="highlightGvGPlayersNearMyLvl" ' +
      'type="checkbox" value="on"' +
      isChecked(getValue('highlightGvGPlayersNearMyLvl')) +
      '></td></tr>' +

    simpleCheckbox('showAdmin') +
    simpleCheckbox('ajaxifyRankControls') +
    simpleCheckbox('detailedConflictInfo');
}

function logPrefs() {
  // Log screen prefs
  return '<tr><th colspan="2"><b>Log screen preferences' +
      '</b></th></tr>' +

    simpleCheckbox('hideNonPlayerGuildLogMessages') +
    simpleCheckbox('useNewGuildLog') +

    '<tr><td class="fshRight">New Guild Log History' +
      helpLink('New Guild Log History (pages)',
        'This is the number of pages that the new guild log ' +
        'screen will go back in history.') +
      ':</td><td><input name="newGuildLogHistoryPages" size="3" value="' +
      getValue('newGuildLogHistoryPages') + '"></td></td></tr>' +

    simpleCheckbox('enableLogColoring') +

    '<tr><td class="fshRight">New Log Message Sound' +
      helpLink('New Log Message Sound',
        'The .wav or .ogg file to play when you have unread log messages. ' +
        'This must be a .wav or .ogg file. This option can be turned on/off ' +
        'on the world page. Only works in Firefox 3.5+') +
      ':</td><td colspan="3"><input name="defaultMessageSound" size="60" ' +
      'value="' + getValue('defaultMessageSound') +
      '"></td></tr>' +

    '<tr><td class="fshRight">Play sound on unread log' +
      helpLink('Play sound on unread log',
        'Should the above sound play when you have unread log messages? ' +
        '(will work on Firefox 3.5+ only)') +
      ':</td><td><input name="playNewMessageSound" type="checkbox" ' +
      'value="on"' +
      isChecked(getValue('playNewMessageSound')) + '>' +
      ' Show speaker on world' +
      helpLink('Show speaker on world',
        'Should the toggle play sound speaker show on the world map? ' +
        '(This icon is next to the Fallensword wiki icon and will only ' +
        'display on Firefox 3.5+)') +
      ':<input name="showSpeakerOnWorld" type="checkbox" value="on"' +
      isChecked(getValue('showSpeakerOnWorld')) +
      '></tr></td>' +

    simpleCheckbox('enableChatParsing') +
    simpleCheckbox('keepBuffLog') +
    simpleCheckbox('addAttackLinkToLog') +
    simpleCheckbox('enhanceChatTextEntry');
}

function otherPrefs() {
  // Other prefs
  return '<tr><th colspan="2"><b>Other preferences</b></th></tr>' +

    simpleCheckbox('autoFillMinBidPrice') +

    '<tr><td class="fshRight">Hide Specific Recipes' +
      helpLink('Hide Specific Recipes',
        'If enabled, this hides recipes whose name matches the list ' +
        '(separated by commas). This works on Recipe Manager') +
      ':</td><td colspan="3"><input name="hideRecipes" ' +
      'type="checkbox" value="on"' +
      isChecked(getValue('hideRecipes')) + '>' +
      '&nbsp;<input name="hideRecipeNames" size="60" value="' +
      getValue('hideRecipeNames') + '"></td></tr>' +

    simpleCheckbox('hideRelicOffline') +
    simpleCheckbox('enterForSendMessage') +
    simpleCheckbox('navigateToLogAfterMsg') +

    '<tr><td align= "right">Max Group Size to Join' +
      helpLink('Max Group Size to Join',
        'This will disable HCSs Join All functionality and will only join ' +
        'groups less than a set size. ') +
      ':</td><td colspan="3"><input name="enableMaxGroupSizeToJoin" ' +
      'type = "checkbox" value = "on"' +
      isChecked(getValue('enableMaxGroupSizeToJoin')) +
      '>&nbsp;&nbsp;Max Size: ' +
      '<input name="maxGroupSizeToJoin" size="3" value="' +
      getValue('maxGroupSizeToJoin') + '"></td></tr>' +

    simpleCheckbox('moveComposingButtons');
}

function worldGroup() {
  // World Screen
  return '<tr><td class="fshRight">Hide Create Group Button' +
    helpLink('Hide Create Group Button',
      'Enabling this option will hide the Create Group button') +
    ':</td><td>' +
    '<input name="hideChampionsGroup" type="checkbox" value="on"' +
      isChecked(getValue('hideChampionsGroup')) + '>' +
    '&nbsp;Champions&nbsp;&nbsp;' +
    '<input name="hideElitesGroup" type="checkbox" value="on"' +
      isChecked(getValue('hideElitesGroup')) + '>' +
    '&nbsp;Elites&nbsp;&nbsp;' +
    '<input name="hideSEGroup" type="checkbox" value="on"' +
      isChecked(getValue('hideSEGroup')) + '>' +
    '&nbsp;Super Elite&nbsp;&nbsp;' +
    '<input name="hideTitanGroup" type="checkbox" value="on"' +
      isChecked(getValue('hideTitanGroup')) + '>' +
    '&nbsp;Titan&nbsp;&nbsp;' +
    '<input name="hideLegendaryGroup" type="checkbox" value="on"' +
      isChecked(getValue('hideLegendaryGroup')) + '>' +
    '&nbsp;Legendary' +
    '</td></tr>';
}

function combatEvalBias() {
  return '<tr><td class="fshRight">Combat Evaluator Bias' +
    helpLink('Combat Evaluator Bias',
      'This changes the bias of the combat evaluator for the damage and ' +
      'HP evaluation. It will not change the attack bias (1.1053).' +
      '<br>Conservative = 1.1053 and 1.1 (Safest)' +
      '<br>Semi-Conservative = 1.1 and 1.053' +
      '<br>Adventurous = 1.053 and 1 (Bleeding Edge)' +
      '<br>Conservative+ = 1.1053 and 1 with the attack calculation ' +
      'changed to +-48 per RJEM') +
    ':</td><td><select name="combatEvaluatorBias">' +
    '<option value="0"' +
    isSelected(calf.combatEvaluatorBias, 0) +
    '>Conservative</option>' +
    '<option value="1"' +
    isSelected(calf.combatEvaluatorBias, 1) +
    '>Semi-Conservative</option>' +
    '<option value="2"' +
    isSelected(calf.combatEvaluatorBias, 2) +
    '>Adventurous</option>' +
    '<option value="3"' +
    isSelected(calf.combatEvaluatorBias, 3) +
    '>Conservative+</option></select></td></tr>';
}

function huntBuff() {
  return 'Hunting Buffs' + helpLink('Hunting Buffs',
    'Customize which buffs are designated as hunting buffs. ' +
    'You must type the full name of each buff, separated by commas. ' +
    'Use the checkbox to enable/disable them.') + ':';
}

function huntBuffCheck() {
  return '<input name="showHuntingBuffs" ' +
    'class="fshVMid" type="checkbox" value="on"' +
    isChecked(calf.showBuffs) + '>';
}

function huntMode() {
  return 'Enabled Hunting Mode' +
    helpLink('Enabled Hunting Mode',
      'This will determine which list of buffs gets checked ' +
      'on the world screen.') +
    ':<select name="enabledHuntingMode">' +
    '<option value="1"' + isSelected(calf.enabledHuntingMode, '1') +
    '>' + calf.buffsName + '</option>' +
    '<option value="2"' + isSelected(calf.enabledHuntingMode, '2') +
    '>' + calf.buffs2Name + '</option>' +
    '<option value="3"' + isSelected(calf.enabledHuntingMode, '3') +
    '>' + calf.buffs3Name + '</option>' +
    '</select>';
}

function huntingBuffsHtml() {
  return huntBuff() + huntBuffCheck() + ' ' + huntMode();
}

function huntingBuffs() {
  return '<tr><td class="fshRight">' + huntBuff() + '</td><td colspan="3">' +
    huntBuffCheck() + ' ' + huntMode() + '</td></tr>';
}

function prefs() {
  // World Screen
  return '<tr><th colspan="2"><b>' +
    'World screen/Hunting preferences</b></th></tr>' +

    worldGroup() +

    '<tr><td class="fshRight">Keep Combat Logs' +
      helpLink('Keep Combat Logs',
        'Save combat logs to a temporary variable. ' +
        'Press <u>Show logs</u> on the right to display and copy them') +
      ':</td><td><input name="keepLogs" type="checkbox" value="on"' +
      isChecked(getValue('keepLogs')) + '>&nbsp;&nbsp;' +
      '<input type="button" class="custombutton" value="Show Logs" ' +
      'id="Helper:ShowLogs"></td></tr>' +

    simpleCheckbox('showCombatLog') +
    simpleCheckbox('enableCreatureColoring') +
    simpleCheckbox('showCreatureInfo') +

    combatEvalBias() +

    '<tr><td class="fshRight">' + networkIcon + 'Keep Creature Log' +
      helpLink('Keep Creature Log',
        'This will show the creature log for each creature you see when ' +
        'you travel.') +
      ':</td><td><input name="showMonsterLog" type="checkbox" value="on"' +
      isChecked(getValue('showMonsterLog')) + '>' +
      '&nbsp;&nbsp;<input type="button" class="custombutton" ' +
      'value="Show" id="Helper:ShowMonsterLogs"></td></tr>' +

    '<tr><td class="fshRight">Show Send Gold' +
      helpLink('Show Gold on World Screen',
        'This will show an icon below the world map to allow you to ' +
        'quickly send gold to a Friend.') +
      ':</td><td><input name="sendGoldonWorld" type="checkbox" value="on"' +
      isChecked(getValue('sendGoldonWorld')) + '>' +
      '&nbsp;&nbsp;Send <input name="goldAmount" size="5" value="' +
      getValue('goldAmount') + '"> ' +
      'gold to <input name="goldRecipient" size="10" value="' +
      getValue('goldRecipient') + '">' +
      ' Current total: <input name="currentGoldSentTotal" size="5" value="' +
      getValue('currentGoldSentTotal') + '">' +
      '</td></tr>' +

    '<tr><td class="fshRight">Do Not Kill List' +
      helpLink('Do Not Kill List',
        'List of creatures that will not be killed by quick kill. ' +
        'You must type the full name of each creature, separated by commas. ' +
        'Creature name will show up in red color on world screen and will ' +
        'not be killed by keyboard entry (but can still be killed by ' +
        'mouseclick). Quick kill must be enabled for this function to work.') +
      ':</td><td colspan="3"><input name="doNotKillList" size="60" value="' +
      calf.doNotKillList + '"></td></tr>' +

    huntingBuffs() +

    '<tr><td class="fshRight">' + calf.buffsName + ' Hunting Buff List' +
      helpLink(calf.buffsName + ' Hunting Buff List',
        calf.buffsName + ' list of hunting buffs.') +
      ':</td><td colspan="3"><input name="huntingBuffsName" ' +
      'title="Hunting mode name" size="7" value="' + calf.buffsName +
      '"><input name="huntingBuffs" size="49" value="' + calf.buffs +
      '"></td></tr>' +
    '<tr><td class="fshRight">' + calf.buffs2Name + ' Hunting Buff List' +
      helpLink(calf.buffs2Name + ' Hunting Buff List',
        'List of ' + calf.buffs2Name + ' hunting buffs.') +
      ':</td><td colspan="3"><input name="huntingBuffs2Name" ' +
      'title="Hunting mode name" size="7" value="' + calf.buffs2Name +
      '"><input name="huntingBuffs2" size="49" value="' + calf.buffs2 +
      '"></td></tr>' +
    '<tr><td class="fshRight">' + calf.buffs3Name + ' Hunting Buff List' +
      helpLink(calf.buffs3Name + ' Hunting Buff List',
        'List of ' + calf.buffs3Name + ' hunting buffs.') +
      ':</td><td colspan="3"><input name="huntingBuffs3Name" ' +
      'title="Hunting mode name" size="7" value="' + calf.buffs3Name +
      '"><input name="huntingBuffs3" size="49" value="' + calf.buffs3 +
      '"></td></tr>' +

    simpleCheckbox('huntingMode');
}

function profilePrefs() {
  // profile prefs
  return '<tr><th colspan="2"><b>Profile preferences</b></th></tr>' +

    simpleCheckbox('renderSelfBio') +
    simpleCheckbox('renderOtherBios') +

    '<tr><td class="fshRight">Enable Bio Compressor' +
      helpLink('Enable Bio Compressor',
        'This will compress long bios according to settings and provide a ' +
        'link to expand the compressed section.') +
      ':</td><td><input name="enableBioCompressor" type="checkbox" ' +
      'value="on"' +
      isChecked(getValue('enableBioCompressor')) +
      '> Max Characters:<input name="maxCompressedCharacters" size="4" ' +
      'value="' + getValue('maxCompressedCharacters') + '" />' +
      ' Max Lines:<input name="maxCompressedLines" size="3" value="' +
      getValue('maxCompressedLines') + '"></td></tr>' +

    '<tr><td class="fshRight">Buy Buffs Greeting' +
      helpLink('Buy Buffs Greeting',
        'This is the default text to open a message with when asking to ' +
        'buy buffs. You can use {playername} to insert the target players ' +
        'name. You can also use {buffs} to insert the list of buffs. You ' +
        'can use {cost} to insert the total cost of the buffs.') +
      ':</td><td colspan="3"><input name="buyBuffsGreeting" size="60" ' +
      'value="' + getValue('buyBuffsGreeting') + '"></td></tr>' +

    simpleCheckbox('showStatBonusTotal') +
    simpleCheckbox('enableQuickDrink') +
    simpleCheckbox('disableDeactivatePrompts');
}

function questPrefs() {
  // Quest Preferences
  return '<tr><th colspan="2"><b>Quest preferences</b></th></tr>' +

    '<tr><td class="fshRight">Hide Specific Quests' +
      helpLink('Hide Specific Quests',
        'If enabled, this hides quests whose name matches the list ' +
        '(separated by commas). This works on Quest Manager and Quest Book.') +
      ':</td><td colspan="3"><input name="hideQuests" type="checkbox" ' +
      'value="on"' +
      isChecked(getValue('hideQuests')) + '>' +
      '&nbsp;<input name="hideQuestNames" size="60" value="' +
      getValue('hideQuestNames') + '"></td></tr>' +

    simpleCheckbox('storeLastQuestPage') +
    simpleCheckbox('showNextQuestSteps');
}

function setupConfigData() {
  calf.configData =
    '<form><table id="fshSettingsTable">' +
    '<thead><th colspan="2"><b>Fallen Sword Helper configuration ' +
      'Settings</b></th></thead>' +
    '<tr><td align=center><input id="fshClearStorage" type="button" ' +
      'class="awesome magenta tip-static" value="Clear Storage" ' +
      'data-tipped="<span class=\'fshHelpTitle\'>Clear Storage' +
      '</span><br><br>This will clear all localStorage related to ' +
      'fallensword.com<br>It will reset all your Helper settings to ' +
      'defaults<br>Use it if your storage has overflowed or become ' +
      'corrupt"></td><td align=center>' +
      '<span style="font-size:x-small">(Current version: ' +
      FSH.version + '(' + FSH.calf + ')) (Storage Used: ' +
      calf.storage + '% Remaining: ' +
      (100 - calf.storage).toFixed(2) + '%)</span></td></tr>' +
    '<tr><td colspan="2" align=center>' +
      '<span style="font-weight:bold;">Visit the ' +
      '<a href="https://github.com/fallenswordhelper/fallenswordhelper">' +
      'Fallen Sword Helper web site</a> ' +
      'for any suggestions, requests or bug reports</span></td></tr>' +

    // General Prefs
    generalPrefs() +

    // Guild Manage
    guildPrefs() +

    // World Screen
    prefs() +

    // Log screen prefs
    logPrefs() +

    // Equipment screen prefs
    equipPrefs() +

    // Quest Preferences
    questPrefs() +

    // profile prefs
    profilePrefs() +

    // Bounty hunting prefs
    bountyPrefs() +

    // Other prefs
    otherPrefs() +

    // save button
    // http://www.fallensword.com/index.php?cmd=notepad&blank=1&subcmd=savesettings
    '<tr><td colspan="2" align=center><input type="button" class=' +
      '"custombutton" value="Save" id="Helper:SaveOptions"></td></tr>' +
    '<tr><td colspan="2" align=center><a href="' + server +
      'index.php?cmd=notepad&blank=1&subcmd=savesettings">Export or Load ' +
      'Settings!</a></td></tr>' +
    '<tr><td colspan="2" align=center>' +
      '<span style="font-size:xx-small">Fallen Sword Helper was coded by ' +
      '<a href="' + server +
      'index.php?cmd=profile&player_id=1393340">Coccinella</a>, ' +
      '<a href="' + server +
      'index.php?cmd=profile&player_id=1599987">yuuzhan</a>, ' +
      '<a href="' + server +
      'index.php?cmd=profile&player_id=1963510">PointyHair</a>, ' +
      '<a href="' + server +
      'index.php?cmd=profile&player_id=1346893">Tangtop</a>, ' +
      '<a href="' + server +
      'index.php?cmd=profile&player_id=2536682">dkwizard</a>, ' +
      '<a href="' + server +
      'index.php?cmd=profile&player_id=1570854">jesiegel</a>, ' +
      '<a href="' + server +
      'index.php?cmd=profile&player_id=2156859">ByteBoy</a>, and ' +
      '<a href="' + server +
      'index.php?cmd=profile&player_id=2169401">McBush</a>, ' +
      'with valuable contributions by ' +
      '<a href="' + server +
      'index.php?cmd=profile&player_id=524660">Nabalac</a>, ' +
      '<a href="' + server +
      'index.php?cmd=profile&player_id=37905">Ananasii</a></span></td></tr>' +
    '</table></form>';
}

function getVars() {
  calf.showBuffs = getValue('showHuntingBuffs');
  calf.buffs = getValue('huntingBuffs');
  calf.buffsName = getValue('huntingBuffsName');
  calf.buffs2 = getValue('huntingBuffs2');
  calf.buffs2Name = getValue('huntingBuffs2Name');
  calf.buffs3 = getValue('huntingBuffs3');
  calf.buffs3Name = getValue('huntingBuffs3Name');
  calf.doNotKillList = getValue('doNotKillList');

  calf.bountyListRefreshTime = getValue('bountyListRefreshTime');
  calf.wantedNames = getValue('wantedNames');
  calf.combatEvaluatorBias = getValue('combatEvaluatorBias');
  calf.enabledHuntingMode = getValue('enabledHuntingMode');
  calf.storage = (JSON.stringify(localStorage).length /
    (5 * 1024 * 1024) * 100).toFixed(2);
}

function helpLink(title, text) {
  return '&nbsp;[&nbsp;<span class="fshLink tip-static" data-tipped="' +
    '<span class=\'fshHelpTitle\'>' + title + '</span><br><br>' +
    text + '">?</span>&nbsp;]';
}

function hasNetwork(o) {
  if (o.network) {return networkIcon;}
  return '';
}

function isOn(o) {
  return isChecked(getValue(o.id));
}

function justLabel(name) {
  var o = mySimpleCheckboxes[name];
  return hasNetwork(o) +
    '<label for="' + o.id + '">' + fallback(o.title, o.helpTitle) +
    helpLink(o.helpTitle, o.helpText) +
    ':</label>';
}

function justCheckbox(name) {
  var o = mySimpleCheckboxes[name];
  return '<input id="' + o.id + '" name="' + o.id +
    '" class="fshVMid" type="checkbox" value="on"' + isOn(o) + '>';
}

function simpleCheckboxHtml(name) {
  return justLabel(name) + justCheckbox(name);
}

function simpleCheckbox(name) {
  return '<tr><td align="right">' + justLabel(name) +
    '</td><td>' + justCheckbox(name) + '</td></tr>';
}

function toggleTickAllBuffs(e) { // jQuery
  var allItems = $('input[name^="blockedSkillList"]:visible',
    '#settingsTabs-4');
  var tckTxt = $(e.target);
  allItems.prop('checked', tckTxt.text() === 'Tick all buffs');
  if (tckTxt.text() === 'Tick all buffs') {
    tckTxt.text('Untick all buffs');
  } else {
    tckTxt.text('Tick all buffs');
  }
}

function clearStorage() {
  jConfirm('Clear localStorage',
    'Are you sure you want to clear you localStorage?',
    function() {localStorage.clear();}
  );
}

function saveValueForm(oForm, name) { // Legacy
  var formElement =
    findNode('//input[@name="' + name + '"]', oForm);
  if (formElement.getAttribute('type') === 'checkbox') {
    setValue(name, formElement.checked);
  } else {
    setValue(name, formElement.value);
  }
}

function setMaxCompressedCharacters(oForm) { // Legacy
  var maxCompressedCharacters =
    findNode('//input[@name="maxCompressedCharacters"]', oForm);
  var maxCompressedCharactersValue = Number(maxCompressedCharacters.value);
  if (isNaN(maxCompressedCharactersValue) ||
      maxCompressedCharactersValue <= 50) {
    maxCompressedCharacters.value = 1500;
  }
}

function setMaxCompressedLines(oForm) { // Legacy
  var maxCompressedLines =
    findNode('//input[@name="maxCompressedLines"]', oForm);
  var maxCompressedLinesValue = Number(maxCompressedLines.value);
  if (isNaN(maxCompressedLinesValue) || maxCompressedLinesValue <= 1) {
    maxCompressedLines.value = 25;
  }
}

function setGuildLogHistoryPages(oForm) { // Legacy
  var newGuildLogHistoryPages =
    findNode('//input[@name="newGuildLogHistoryPages"]', oForm);
  var newGuildLogHistoryPagesValue = Number(newGuildLogHistoryPages.value);
  if (isNaN(newGuildLogHistoryPagesValue) ||
      newGuildLogHistoryPagesValue <= 1) {
    newGuildLogHistoryPages.value = 25;
  }
}

function setMaxGroupSizeToJoin(oForm) { // Legacy
  var maxGroupSizeToJoin =
    findNode('//input[@name="maxGroupSizeToJoin"]', oForm);
  var maxGroupSizeToJoinValue = Number(maxGroupSizeToJoin.value);
  if (isNaN(maxGroupSizeToJoinValue) || maxGroupSizeToJoinValue <= 1) {
    maxGroupSizeToJoin.value = 11;
  }
}

function saveConfig(evt) { // Legacy
  var oForm = evt.target.form;
  // bio compressor validation logic
  setMaxCompressedCharacters(oForm);
  setMaxCompressedLines(oForm);
  setGuildLogHistoryPages(oForm);
  setMaxGroupSizeToJoin(oForm);
  var combatEvaluatorBiasElement =
    findNode('//select[@name="combatEvaluatorBias"]', oForm);
  var combatEvaluatorBias = Number(combatEvaluatorBiasElement.value);
  setValue('combatEvaluatorBias', combatEvaluatorBias);
  var enabledHuntingModeElement =
    findNode('//select[@name="enabledHuntingMode"]', oForm);
  var enabledHuntingMode = enabledHuntingModeElement.value;
  setValue('enabledHuntingMode', enabledHuntingMode);

  saveBoxes.forEach(saveValueForm.bind(null, oForm));

  $('#dialog_msg').text('FS Helper Settings Saved').dialog('open');
}

function showLogs() {
  jQueryDialog(injectNotepadShowLogs);
}

function showMonsterLogs() {
  jQueryDialog(injectMonsterLog);
}

function createEventListeners() {
  var tickAll = createSpan({
    id: 'fshAllBuffs',
    className: 'fshLink',
    textContent: 'Tick all buffs'
  });
  tickAll.addEventListener('click', toggleTickAllBuffs);
  var inject = document.getElementById('settingsTabs-4').firstElementChild
    .rows[0].cells[0];
  inject.appendChild(createBr());
  inject.appendChild(tickAll);

  document.getElementById('fshClearStorage')
    .addEventListener('click', clearStorage);

  document.getElementById('Helper:SaveOptions')
    .addEventListener('click', saveConfig);
  document.getElementById('Helper:ShowLogs')
    .addEventListener('click', showLogs);
  document.getElementById('Helper:ShowMonsterLogs')
    .addEventListener('click', showMonsterLogs);

  document.getElementById('toggleShowGuildSelfMessage')
    .addEventListener('click', toggleVisibilty);
  document.getElementById('toggleShowGuildFrndMessage')
    .addEventListener('click', toggleVisibilty);
  document.getElementById('toggleShowGuildPastMessage')
    .addEventListener('click', toggleVisibilty);
  document.getElementById('toggleShowGuildEnmyMessage')
    .addEventListener('click', toggleVisibilty);
}

function injectSettings() { // jQuery.min
  getVars();
  setupConfigData();
  var settingsTabs = document.getElementById('settingsTabs');
  settingsTabs.insertAdjacentHTML('beforeend', '<div id="fshSettings">' +
    calf.configData + '</div>');
  if ($(settingsTabs).tabs('length') > 0) {
    $(settingsTabs).tabs('add', '#fshSettings', 'FSH Settings');
  }
  createEventListeners();
  setValue('minGroupLevel', document.getElementById('settingsTabs-1')
    .firstElementChild.lastElementChild.rows[1].cells[1].firstElementChild
    .value);
}

function toggleForce(el, force) { // Polyfill UC
  if (el.classList.contains('fshHide') !== force) {
    el.classList.toggle('fshHide');
  }
}

var deferred = window.$ && $.when();

function dialog(data) {
  if (data.r === 0) {return;}
  $('#dialog_msg').html(data.m).dialog('open');
}

function equipItem(backpackInvId) {
  return retryAjax({
    url: 'index.php',
    data: {
      cmd: 'profile',
      subcmd: 'equipitem',
      inventory_id: backpackInvId,
      ajax: 1
    },
    dataType: 'json'
  }).done(dialog);
}

function htmlResult(data) { // TODO change to app code to avoid 302 redirect
  var info = infoBox(data);
  var _r = 1;
  if (info.search(/(successfully|gained|components)/) !== -1) {_r = 0;}
  return {r: _r, m: info};
}

function useItem(backpackInvId) {
  return retryAjax({
    url: 'index.php',
    data: {
      cmd: 'profile',
      subcmd: 'useitem',
      inventory_id: backpackInvId
    }
  }).pipe(htmlResult) // TODO change to app code to avoid 302 redirect
    .done(dialog);
}

function additionalAction(action, data) {
  if (action === 'wear') {
    return equipItem(data.b)
      .pipe(function equipItemStatus() {return data;});
    // Return takeitem status irrespective of the status of the equipitem
  }
  if (action === 'use') {
    return useItem(data.b)
      .pipe(function useItemStatus() {return data;});
    // Return takeitem status irrespective of the status of the useitem
  }
}

function takeItemStatus(action, data) {
  if (data.r === 0 && action !== 'take') {
    return additionalAction(action, data);
  }
  return data;
}

function takeItem(invId) {
  return retryAjax({
    url: 'index.php',
    data: {
      cmd: 'guild',
      subcmd: 'inventory',
      subcmd2: 'takeitem',
      guildstore_id: invId,
      ajax: 1
    },
    dataType: 'json'
  }).done(dialog);
}

function queueTakeItem(invId, action) {
  // You have to chain them because they could be modifying the backpack
  deferred = deferred.pipe(function pipeTakeToQueue() {
    return takeItem(invId).pipe(takeItemStatus.bind(null, action));
  });
  return deferred;
}

function guildInvRecall(invId, playerId$$1, mode) {
  return retryAjax({
    url: 'index.php',
    data: {
      cmd: 'guild',
      subcmd: 'inventory',
      subcmd2: 'recall',
      id: invId,
      player_id: playerId$$1,
      mode: mode
    }
  }).pipe(htmlResult) // TODO change to app code to avoid 302 redirect
    .done(dialog);
}

function backpack() {
  return retryAjax({
    url: 'index.php',
    data: {cmd: 'profile', subcmd: 'fetchinv'},
    dataType: 'json'
  });
}

function recallItem(o) {
  return guildInvRecall(o.invId, o.playerId, o.mode)
    .pipe(function recallItemStatus(data) {
      if (data.r === 0 && o.action !== 'recall') {
        return backpack().pipe(function gotBackpack(bpData) {
          // TODO assuming backpack is successful...
          if (o.action === 'wear') {
            return equipItem(bpData.items[bpData.items.length - 1].a)
              .pipe(function wearItemStatus() {return data;});
            // Return recall status irrespective of the status of the equipitem
          }
          if (o.action === 'use') {
            return useItem(
              bpData.items[bpData.items.length - 1].a)
              .pipe(function useItemStatus() {return data;});
            // Return recall status irrespective of the status of the useitem
          }
        });
      }
      return data;
    });
}

function queueRecallItem(o) {
  // You have to chain them because they could be modifying the backpack
  deferred = deferred.pipe(function pipeRecallToQueue() {
    return recallItem(o);
  });
  return deferred;
}

var disableQuickWearPrompts;
var content$3;
var itemList;

function doAction(self, fn, verb) { // jQuery.min
  var invId = self.dataset.itemid;
  fn(invId).done(function(data) {
    if (data.r !== 0) {return;}
    self.parentNode.innerHTML = '<span class="fastWorn">' + verb + '</span>';
  });
}

function doUseItem(self) {
  doAction(self, useItem, 'Used');
}

function useProfileInventoryItem(self) {
  if (disableQuickWearPrompts) {
    doUseItem(self);
  } else {
    jConfirm('Use/Extract Item',
      'Are you sure you want to use/extract the item?',
      doUseItem.bind(null, self)
    );
  }
}

function equipProfileInventoryItem(self) {
  doAction(self, equipItem, 'Worn');
}

function processItems(folderId, thisFolder, o) {
  var tr = o.dom;
  if (folderId === '0') {
    tr.classList.remove('fshHide');
  } else {
    var force = folderId !== thisFolder.toString();
    toggleForce(tr, force);
  }
}

function processFolder(folderId, aFolder) {
  var thisFolder = aFolder.id;
  aFolder.items.forEach(processItems.bind(null, folderId, thisFolder));
}

function hideFolders(self) {
  var folderId = self.dataset.folder;
  itemList.r.forEach(processFolder.bind(null, folderId));
}

function togglePref() {
  disableQuickWearPrompts = !disableQuickWearPrompts;
  setValue('disableQuickWearPrompts', disableQuickWearPrompts);
}

var evts = [
  {
    condition: function(self) {
      return self.classList.contains('smallLink') &&
        self.classList.contains('fshEq');
    },
    result: equipProfileInventoryItem
  },
  {
    condition: function(self) {
      return self.classList.contains('smallLink') &&
        self.classList.contains('fshUse');
    },
    result: useProfileInventoryItem
  },
  {
    condition: function(self) {return self.classList.contains('folder');},
    result: hideFolders
  },
  {
    condition: function(self) {return self.id === 'disableQuickWearPrompts';},
    result: togglePref
  }
];

function listen$1(evt) {
  var self = evt.target;
  evts.some(function(el) {
    if (el.condition(self)) {
      el.result(self);
      return true;
    }
    return false;
  });

}

function createInvTabs() {
  return createDiv({
    id: 'invTabs',
    className: 'ui-tabs ui-widget-content ui-corner-all',
    innerHTML: '<input id="qwtab1" type="radio" name="qwtabs" checked>' +
      '<input id="qwtab2" type="radio" name="qwtabs">' +
      '<ul class="ui-tabs-nav ui-helper-reset ' +
        'ui-helper-clearfix ui-widget-header ui-corner-all">' +
      '<li class="ui-state-default ui-corner-top inv-tabs-qw">' +
      '<label for="qwtab1">Quick Wear / Use / Extract<br>Manager</label>' +
      '</li>' +
      '<li class="ui-state-default ui-corner-top inv-tabs-ah">' +
      '<label for="qwtab2">Inventory Manager Counter' +
        '<br>filtered by AH Quick Search</label>' +
      '</li><div id="setPrompt" class="fshFloatRight fshCenter"></div></ul>'
  });
}

function showQuickWear(appInv) {
  itemList = appInv;
  var invTabs = createInvTabs();
  var invTabsQw = createQuickWear(appInv);
  invTabs.appendChild(invTabsQw);
  content$3.innerHTML = '';
  content$3.appendChild(invTabs);
  invTabs.addEventListener('click', listen$1);
  invTabs.appendChild(showAHInvManager(appInv));
  document.getElementById('setPrompt').insertAdjacentHTML('beforeend',
    simpleCheckboxHtml('disableQuickWearPrompts'));
}

function insertQuickWear(injector) {
  content$3 = injector || pCC;
  if (!content$3) {return;}
  content$3.insertAdjacentHTML('beforeend', 'Getting item list from backpack...');
  loadInventory().done(showQuickWear);
  disableQuickWearPrompts = getValue('disableQuickWearPrompts');
}

var times = {};
var refAry = ['www.lazywebtools.co.uk', 'refreshthing.com'];

function isAuto() {
  var docRef = document.referrer
    .match(/^https?:\/\/([^/?#]+)(?:[/?#]|$)/i);
  if (docRef) {docRef = docRef[1];}
  return refAry.indexOf(docRef) !== -1;
}

function start(category, variable, label) {
  if (isAuto() || typeof ga === 'undefined') {return;}
  times[category + ':' + variable + ':' + label] =
    performance.now() * 1000;
}

function sendTiming(category, variable, label) {
  var myTime = Math.round(performance.now() * 1000 -
    times[category + ':' + variable + ':' + label]) / 1000;
  if (myTime > 10) {
    ga('fshApp.send', 'timing', category, variable, Math.round(myTime),
      label);
  }
  log(variable, myTime + 'ms');
}

function end(category, variable, label) {
  if (isAuto() || typeof ga === 'undefined') {return;}
  sendTiming(category, variable, label);
}

function fixupUrl() {
  var origPath = window.location.pathname + window.location.search;
  var page = origPath.replace(/&m=.*/, '')
    .replace(/&subcmd=&.*/, '')
    .replace(/&subcmd2=&.*/, '')
    .replace(/&[a-z_]+_id=.+/, '')
    .replace(/&id=.+/, '')
    .replace(/&target_player=.+/, '')
    .replace(/&[a-z]+_username=.+/, '')
    .replace(/\?cmd=auctionhouse.+/, '?cmd=auctionhouse')
    .replace(/&subcmd=[0-9a-f]{32}/, '')
    .replace(/&search_active=.+/, '')
    .replace(/&letter=.+/, '')
    .replace(/&guild_name=.+/, '')
    .replace(/&user=.+/, '')
    .replace(/&[a-z_]*page=.+/, '')
    .replace(/&prestige=.+/, '')
    .replace(/&withdraw_amount=.+/, '')
    .replace(/&tickets=.+/, '')
    .replace(/&search=.+/, '')
    .replace(/&target=.+/, '')
    .replace(/&xcv=[0-9a-f]{32}/, '')
    .replace(/\?ref=[0-9]+/, '');
  ga('fsh.set', 'page', page);
}

function setup() {
  if (isAuto() || typeof ga === 'undefined') {return;}

  ga('create', 'UA-76488113-1', 'auto', 'fshApp', {
    userId: playerId(),
    siteSpeedSampleRate: 10
  });
  ga('fshApp.set', 'appName', 'fshApp');
  ga('fshApp.set', 'appVersion', FSH.version + '(' + FSH.calf + ')');
  ga('create', 'UA-76488113-2', 'auto', 'fsh', {
    userId: playerId(),
    siteSpeedSampleRate: 10
  });
  fixupUrl();
  ga('fsh.send', 'pageview');
}

function screenview(funcName) {
  if (isAuto() || typeof ga === 'undefined') {return;}
  ga('fshApp.send', 'screenview', {screenName: funcName});
}

var param;

function detailRow(j, itemField) { // Legacy
  if (param.tags[j] === 'checkbox') {
    return '<input type="checkbox"' + isChecked(itemField) +
      ' disabled>';
  } else if (param.url && param.url[j] !== '') {
    return '<a href="' + param.url[j].replace('@replaceme@', itemField) +
      '">' + itemField + '</a>';
  }
  return itemField;
}

function itemRow(item) { // Legacy
  var result = '';
  for (var j = 0; j < param.fields.length; j += 1) {
    result += '<td class="fshCenter">';
    var itemField = item[param.fields[j]];
    if (param.fields[j] === param.categoryField) {continue;}
    result += detailRow(j, itemField) + '</td>';
  }
  return result;
}

function doInputs() { // Legacy
  var result = '<tr>';
  for (var i = 0; i < param.tags.length; i += 1) {
    result += '<td align=center><input type="' + param.tags[i] +
      '" class="custominput" id="fshIn' + param.fields[i] + '"></td>';
  }
  return result;
}

function generateManageTable() { // Legacy
  var result = '<table cellspacing="2" cellpadding="2" class="fshGc" ' +
    'width="100%"><tr class="fshOr">';
  result += param.headers.reduce(function(prev, curr) {
    return prev + '<th>' + curr + '</th>';
  }, '');
  result += '<th>Action</th></tr>';
  var currentCategory = '';
  for (var i = 0; i < param.currentItems.length; i += 1) {
    var item = param.currentItems[i];
    result += '<tr>';
    if (param.categoryField &&
        currentCategory !==
        item[param.categoryField]) {
      currentCategory = item[param.categoryField];
      result += '<td><span class="fshQs">' +
        currentCategory + '</span></td><td></td><td></td><td></td><td></td>' +
          '</tr><tr>';
    }
    result += itemRow(item);
    result += '<td><span class="HelperTextLink" data-itemId="' + i +
      '" id="fshDel' + i + '">[Del]</span></td></tr>';
  }
  result += doInputs();
  result += '<td><span class="HelperTextLink" id="fshAdd">' +
    '[Add]</span></td></tr></table>' +
    '<table width="100%"><tr><td class="fshCenter">' +
    '<textarea cols=70 rows=20 name="fshEd">' +
    JSON.stringify(param.currentItems) + '</textarea></td></tr>' +
    '<tr><td class="fshCenter"><input id="fshSave" ' +
    'type="button" value="Save" class="custombutton">' +
    '&nbsp;<input id="fshReset" type="button" value="Reset" ' +
    'class="custombutton"></td></tr>' +
    '</tbody></table>';
  document.getElementById(param.id).innerHTML = result;
  setValueJSON(param.gmname, param.currentItems);
}

function deleteQuickItem(evt) { // Legacy
  var itemId = evt.target.getAttribute('data-itemId');
  param.currentItems.splice(itemId, 1);
  generateManageTable();
}

function buildNewItem() { // Legacy
  var newItem = {};
  for (var i = 0; i < param.fields.length; i += 1) {
    if (param.tags[i] === 'checkbox') {
      newItem[param.fields[i]] =
        document.getElementById('fshIn' + param.fields[i]).checked;
    } else {
      newItem[param.fields[i]] =
        document.getElementById('fshIn' + param.fields[i]).value;
    }
  }
  return newItem;
}

function addQuickItem() { // Legacy
  var isArrayOnly = param.fields.length === 0;
  var newItem = {};
  if (isArrayOnly) {
    newItem = document.getElementById('fshIn0').value;
  } else {
    newItem = buildNewItem();
  }
  param.currentItems.push(newItem);
  generateManageTable();
}

function saveRawEditor() { // jQuery
  param.currentItems =
    JSON.parse($('textarea[name="fshEd"]').val());
  generateManageTable();
}

function resetRawEditor() { // Legacy
  if (param.id === 'fshAso') {
    param.currentItems =
      JSON.parse(defaults.quickSearchList);
  } else {param.currentItems = [];}
  generateManageTable();
}

var listEvents = [
  {test: function(e) {return e.target.id === 'fshReset';}, fn: resetRawEditor},
  {test: function(e) {return e.target.id === 'fshSave';}, fn: saveRawEditor},
  {test: function(e) {return e.target.id === 'fshAdd';}, fn: addQuickItem},
  {
    test: function(e) {return e.target.id.indexOf('fshDel') === 0;},
    fn: deleteQuickItem
  }
];

function listEvtHnl(e) {
  for (var i = 0; i < listEvents.length; i += 1) {
    if (listEvents[i].test(e)) {
      listEvents[i].fn(e);
      return;
    }
  }
}

function injectAuctionSearch(injector) { // Legacy
  var content = injector || pCC;
  content.innerHTML =
    makePageHeader('Trade Hub Quick Search', '', '', '') +
    '<div>This screen allows you to set up some quick ' +
      'search templates for the Auction House. The Display on AH column ' +
      'indicates if the quick search will show on the short list on the ' +
      'Auction House main screen. A maximum of 36 items can show on this ' +
      'list (It will not show more than 36 even if you have more than 36 ' +
      'flagged). To edit items, either use the large text area below, or ' +
      'add a new entry and delete the old one. You can always reset the ' +
      'list to the default values.</div>' +
    '<div class="fshSmall" id="fshAso">' +
    '</div>';
  // global parameters for the meta function generateManageTable
  param = {
    id: 'fshAso',
    headers: ['Category', 'Nickname', 'Quick Search Text',
      'Display in AH?'],
    fields: ['category', 'nickname', 'searchname', 'displayOnAH'],
    tags: ['text', 'text', 'text', 'checkbox'],
    url: ['', '',
      'index.php?cmd=auctionhouse&amp;type=-1&amp;search_text=@replaceme@', ''],
    currentItems: getValueJSON('quickSearchList'),
    gmname: 'quickSearchList',
    categoryField: 'category',
  };
  generateManageTable();
  content.addEventListener('click', listEvtHnl);
}

function injectQuickLinkManager(injector) { // Legacy
  var content = injector || pCC;
  content.innerHTML =
    makePageTemplate('Quick Links', '', '', '', 'qla');

  // global parameters for the meta function generateManageTable
  param = {
    id: 'qla',
    headers: ['Name', 'URL',
      'New [<span class="fshLink tip-static" ' +
      'data-tipped="Open page in a new window">?</span>]'],
    fields: ['name', 'url', 'newWindow'],
    tags: ['text', 'text', 'checkbox'],
    currentItems: getValueJSON('quickLinks'),
    gmname: 'quickLinks',
  };
  generateManageTable();
  content.addEventListener('click', listEvtHnl);
}

/* eslint-disable no-multi-spaces, max-len */
var buffList = [
  {name: 'Rage',                stam: 10, lvl: 1,    id: 0,   nicks: 'rage'},
  {name: 'Stun',                stam: 15, lvl: 1,    id: 1,   nicks: 'stun,st'},
  {name: 'Fury',                stam: 10, lvl: 25,   id: 2,   nicks: 'fury'},
  {name: 'Blood Thirst',        stam: 10, lvl: 25,   id: 4,   nicks: 'blood thirst,bloodthirst,bt'},
  {name: 'Enchant Weapon',      stam: 10, lvl: 25,   id: 5,   nicks: 'enchant weapon,ew'},
  {name: 'Berserk',             stam: 15, lvl: 75,   id: 3,   nicks: 'berserk'},
  {name: 'Holy Flame',          stam: 15, lvl: 75,   id: 6,   nicks: 'holy flame,hf'},
  {name: 'Dark Curse',          stam: 20, lvl: 150,  id: 7,   nicks: 'dark curse,dc'},
  {name: 'Shockwave',           stam: 20, lvl: 200,  id: 29,  nicks: 'shockwave,sw,shock'},
  {name: 'Ignite',              stam: 10, lvl: 200,  id: 30,  nicks: 'ignite,ign'},
  {name: 'Super Elite Slayer',  stam: 25, lvl: 250,  id: 31,  nicks: 'super elite slayer,ses,se slayer'},
  {name: 'Wither',              stam: 15, lvl: 250,  id: 32,  nicks: 'wither,with'},
  {name: 'Shatter Armor',       stam: 20, lvl: 300,  id: 33,  nicks: 'shatter armor,sa'},
  {name: 'Death Wish',          stam: 20, lvl: 300,  id: 34,  nicks: 'deathwish,dw,deathw,death wish'},
  {name: 'Spell Breaker',       stam: 35, lvl: 300,  id: 35,  nicks: 'spell breaker,sb'},
  {name: 'Spectral Knight',     stam: 15, lvl: 400,  id: 48,  nicks: 'spectral knight,sk,spec knight'},
  {name: 'Keen Edge',           stam: 10, lvl: 400,  id: 47,  nicks: 'keen edge,ke'},
  {name: 'Arterial Strike',     stam: 20, lvl: 500,  id: 49,  nicks: 'arterial strike,as,art strike,art str'},
  {name: 'Death Dealer',        stam: 20, lvl: 500,  id: 50,  nicks: 'death dealer,dd'},
  {name: 'Savagery',            stam: 15, lvl: 600,  id: 51,  nicks: 'savagery,savage'},
  {name: 'Chi Strike',          stam: 20, lvl: 700,  id: 52,  nicks: 'chi strike,chi,chis,chi str'},
  {name: 'Shield Strike',       stam: 20, lvl: 700,  id: 53,  nicks: 'shield strike,ss,sh str'},
  {name: 'Demoralize',          stam: 25, lvl: 800,  id: 73,  nicks: 'demoralize,dem'},
  {name: 'Poison',              stam: 25, lvl: 800,  id: 70,  nicks: 'poison,poi'},
  {name: 'Iron Fist',           stam: 25, lvl: 900,  id: 74,  nicks: 'iron fist,if'},
  {name: 'Spell Leech',         stam: 50, lvl: 900,  id: 79,  nicks: 'spell leech,sl'},
  {name: 'Distraction',         stam: 25, lvl: 900,  id: 78,  nicks: 'distraction,dis'},
  {name: 'Coordinated Attack',  stam: 30, lvl: 1000, id: 118, nicks: 'coordinated attack,coorda'},
  {name: 'Undermine',           stam: 30, lvl: 1000, id: 108, nicks: 'undermine,um'},
  {name: 'Cursed Rune',         stam: 30, lvl: 1000, id: 89,  nicks: 'cursed rune,crune'},
  {name: 'Anti Deflect',        stam: 30, lvl: 1000, id: 105, nicks: 'anti deflect,ad'},
  {name: 'Overkill',            stam: 30, lvl: 1200, id: 109, nicks: 'overkill,ok'},
  {name: 'Smashing Hammer',     stam: 30, lvl: 1200, id: 111, nicks: 'smashing hammer,sh'},
  {name: 'Mighty Vigor',        stam: 35, lvl: 1200, id: 113, nicks: 'mighty vigor,mv'},
  {name: 'Fist Fight',          stam: 30, lvl: 1200, id: 115, nicks: 'fist fight,ff'},
  {name: 'Cursed Ring',         stam: 30, lvl: 1400, id: 88,  nicks: 'cursed ring,cring'},
  {name: 'Sharpen',             stam: 30, lvl: 1400, id: 106, nicks: 'sharpen,sharp'},
  {name: 'Balanced Attack',     stam: 30, lvl: 1400, id: 116, nicks: 'balanced attack,ba'},
  {name: 'Heavy Weight',        stam: 20, lvl: 1600, id: 146, nicks: 'heavy weight, hw'},
  {name: 'Armored Strike',      stam: 30, lvl: 1600, id: 130, nicks: 'armored strike, armstr'},
  {name: 'Invert',              stam: 40, lvl: 2000, id: 173, nicks: 'invert'},
  {name: 'Reign of Terror',     stam: 40, lvl: 2500, id: 174, nicks: 'reign of terror'},
  {name: 'Critical Strike',     stam: 40, lvl: 3000, id: 175, nicks: 'critical strike'},
  {name: 'Great Vigor',         stam: 10, lvl: 1,    id: 12,  nicks: 'great vigor,vigor,gv'},
  {name: 'Fortify',             stam: 10, lvl: 25,   id: 8,   nicks: 'fortify'},
  {name: 'Evade',               stam: 10, lvl: 25,   id: 10,  nicks: 'evade'},
  {name: 'Absorb',              stam: 20, lvl: 25,   id: 13,  nicks: 'absorb,abs'},
  {name: 'Rock Skin',           stam: 15, lvl: 75,   id: 11,  nicks: 'rock skin,rs'},
  {name: 'Enchanted Armor',     stam: 10, lvl: 75,   id: 9,   nicks: 'enchanted armor,enchant armor,ea,ench arm,ench armor'},
  {name: 'Aura of Protection',  stam: 20, lvl: 150,  id: 15,  nicks: 'aura of protection,aop,aofp'},
  {name: 'Deflect',             stam: 25, lvl: 150,  id: 14,  nicks: 'deflect,defl'},
  {name: 'Force Shield',        stam: 10, lvl: 200,  id: 27,  nicks: 'force shield,fs'},
  {name: 'Unbreakable',         stam: 20, lvl: 200,  id: 28,  nicks: 'unbreakable,ub,unb,unbr'},
  {name: 'Honor',               stam: 10, lvl: 800,  id: 82,  nicks: 'honor'},
  {name: 'Assist',              stam: 30, lvl: 250,  id: 36,  nicks: 'assist,ass'},
  {name: 'Constitution',        stam: 25, lvl: 300,  id: 37,  nicks: 'constitution,const'},
  {name: 'Counter Attack',      stam: 20, lvl: 400,  id: 54,  nicks: 'counter attack,ca'},
  {name: 'Summon Shield Imp',   stam: 50, lvl: 400,  id: 55,  nicks: 'summon shield imp,ssi,imp'},
  {name: 'Vision',              stam: 20, lvl: 500,  id: 56,  nicks: 'vision,vis'},
  {name: 'Fortitude',           stam: 15, lvl: 500,  id: 57,  nicks: 'fortitude,fort'},
  {name: 'Flinch',              stam: 20, lvl: 600,  id: 58,  nicks: 'flinch'},
  {name: 'Terrorize',           stam: 20, lvl: 700,  id: 59,  nicks: 'terrorize,terror'},
  {name: 'Nightmare Visage',    stam: 40, lvl: 700,  id: 60,  nicks: 'nightmare visage,nv,visage'},
  {name: 'Sanctuary',           stam: 25, lvl: 800,  id: 44,  nicks: 'sanctuary,sanc'},
  {name: 'Dull Edge',           stam: 10, lvl: 800,  id: 46,  nicks: 'dull edge,de'},
  {name: 'Erosion',             stam: 25, lvl: 900,  id: 80,  nicks: 'erosion,ero'},
  {name: 'Avert Gaze',          stam: 10, lvl: 900,  id: 71,  nicks: 'avert gaze,ag'},
  {name: 'Enchant Shield',      stam: 25, lvl: 900,  id: 77,  nicks: 'enchant shield,es'},
  {name: 'Smite',               stam: 30, lvl: 1000, id: 97,  nicks: 'smite,sm'},
  {name: 'Balanced Defense',    stam: 30, lvl: 1000, id: 117, nicks: 'balanced defense,bd'},
  {name: 'Bastion',             stam: 30, lvl: 1000, id: 122, nicks: 'bastion,bast'},
  {name: 'Side Step',           stam: 30, lvl: 1000, id: 86,  nicks: 'side step,sstep'},
  {name: 'High Guard',          stam: 30, lvl: 1200, id: 96,  nicks: 'high guard,hg'},
  {name: 'Barricade',           stam: 30, lvl: 1200, id: 98,  nicks: 'barricade,bar'},
  {name: 'Coordinated Defense', stam: 30, lvl: 1200, id: 119, nicks: 'coordinated defense,cd'},
  {name: 'Degrade',             stam: 30, lvl: 1200, id: 121, nicks: 'degrade,deg,dg'},
  {name: 'Retaliate',           stam: 30, lvl: 1400, id: 123, nicks: 'retaliate,ret'},
  {name: 'Shame',               stam: 35, lvl: 1400, id: 110, nicks: 'shame'},
  {name: 'Dispel Curse',        stam: 35, lvl: 1400, id: 114, nicks: 'dispel curse,dispel'},
  {name: 'Anchored',            stam: 30, lvl: 1600, id: 154, nicks: 'anchored, anch, anchor'},
  {name: 'Hardened',            stam: 30, lvl: 1600, id: 153, nicks: 'hardened, hard, harden'},
  {name: 'Armor Boost',         stam: 30, lvl: 1600, id: 136, nicks: 'armor boost, armbst, arm bst, armb'},
  {name: 'Shield Wall',         stam: 30, lvl: 1600, id: 135, nicks: 'shield wall, shldwll, sw'},
  {name: 'Layered Armor',       stam: 40, lvl: 2000, id: 170, nicks: 'layered armor'},
  {name: 'Defensive Aura',      stam: 40, lvl: 2500, id: 171, nicks: 'defensive aura'},
  {name: 'Fumble',              stam: 40, lvl: 3000, id: 172, nicks: 'fumble'},
  {name: 'Find Item',           stam: 10, lvl: 1,    id: 16,  nicks: 'find item,fi'},
  {name: 'Treasure Hunter',     stam: 15, lvl: 1,    id: 17,  nicks: 'treasure hunter,th,treas hunter'},
  {name: 'Deep Pockets',        stam: 10, lvl: 1,    id: 22,  nicks: 'deep pockets,dp'},
  {name: 'Quest Finder',        stam: 5,  lvl: 1,    id: 61,  nicks: 'quest finder,qf'},
  {name: 'Adept Learner',       stam: 10, lvl: 25,   id: 19,  nicks: 'adept learner,al'},
  {name: 'Defiance',            stam: 15, lvl: 25,   id: 18,  nicks: 'defiance'},
  {name: 'Librarian',           stam: 10, lvl: 75,   id: 20,  nicks: 'librarian,lib,libr'},
  {name: 'Merchant',            stam: 10, lvl: 75,   id: 21,  nicks: 'merchant,merch,merc'},
  {name: 'Last Ditch',          stam: 15, lvl: 150,  id: 23,  nicks: 'last ditch,ld'},
  {name: 'Animal Magnetism',    stam: 10, lvl: 200,  id: 24,  nicks: 'animal magnetism,animag,ani mag,am'},
  {name: 'Empower',             stam: 20, lvl: 200,  id: 25,  nicks: 'empower,emp'},
  {name: 'Doubler',             stam: 5,  lvl: 200,  id: 26,  nicks: 'doubler,doub,db'},
  {name: 'Conserve',            stam: 10, lvl: 250,  id: 39,  nicks: 'conserve,cons,consv,con'},
  {name: 'Brewing Master',      stam: 10, lvl: 250,  id: 40,  nicks: 'brewing master,bm,brm,brewm'},
  {name: 'Four Leaf',           stam: 20, lvl: 250,  id: 41,  nicks: 'four leaf,4l,fl'},
  {name: 'Extend',              stam: 30, lvl: 300,  id: 42,  nicks: 'extend,ext'},
  {name: 'Inventor',            stam: 15, lvl: 400,  id: 62,  nicks: 'inventor,inv,invI,inv1,inventor1,inventor 1,inventor i,inv i,inv 1'},
  {name: 'Extractor',           stam: 15, lvl: 400,  id: 63,  nicks: 'extractor,extr'},
  {name: 'Inventor II',         stam: 20, lvl: 500,  id: 64,  nicks: 'inventor ii,inventorii,invii,inv2,inventor 2,inv ii,inv 2'},
  {name: 'Buff Master',         stam: 10, lvl: 500,  id: 65,  nicks: 'buff master,buffm,bum'},
  {name: 'Reflection',          stam: 10, lvl: 600,  id: 66,  nicks: 'reflection,ref,refl,reflect'},
  {name: 'Guild Buffer',        stam: 10, lvl: 600,  id: 160, nicks: 'guild buffer, gldbfr, gb'},
  {name: 'Light Foot',          stam: 15, lvl: 700,  id: 67,  nicks: 'light foot,lf'},
  {name: 'Mesmerize',           stam: 20, lvl: 700,  id: 68,  nicks: 'mesmerize,mesmer,mes,mez'},
  {name: 'Resource Finder',     stam: 25, lvl: 800,  id: 76,  nicks: 'resource finder,rf'},
  {name: 'Quest Hunter',        stam: 25, lvl: 800,  id: 166, nicks: 'quest hunter'},
  {name: 'Gloat',               stam: 10, lvl: 900,  id: 81,  nicks: 'gloat'},
  {name: 'Sacrifice',           stam: 25, lvl: 900,  id: 75,  nicks: 'sacrifice,sac'},
  {name: 'Reckoning',           stam: 25, lvl: 900,  id: 72,  nicks: 'reckoning,rec,rek'},
  {name: 'Reinforce',           stam: 30, lvl: 1000, id: 126, nicks: 'reinforce,rein'},
  {name: 'Bodyguard',           stam: 30, lvl: 1000, id: 120, nicks: 'bodyguard,bg'},
  {name: 'Riposte',             stam: 30, lvl: 1000, id: 124, nicks: 'riposte,rip'},
  {name: 'Severe Condition',    stam: 30, lvl: 1000, id: 101, nicks: 'severe condition,sc'},
  {name: 'Sealed',              stam: 35, lvl: 1200, id: 112, nicks: 'sealed,seal'},
  {name: 'Righteous',           stam: 30, lvl: 1200, id: 107, nicks: 'righteous,right'},
  {name: 'Epic Forge',          stam: 30, lvl: 1200, id: 102, nicks: 'epic forge,ef'},
  {name: 'Golden Shield',       stam: 30, lvl: 1200, id: 103, nicks: 'golden shield,gs'},
  {name: 'Stalker',             stam: 35, lvl: 1400, id: 125, nicks: 'stalker,stalk'},
  {name: 'Ageless',             stam: 30, lvl: 1400, id: 100, nicks: 'ageless,age'},
  {name: 'Extractor II',        stam: 30, lvl: 1400, id: 104, nicks: 'extractor ii,extractorii,extii,ext2,extractor 2,ext ii,ext 2'},
  {name: 'Epic Craft',          stam: 30, lvl: 1600, id: 159, nicks: 'epic craft, epc crft, epccrft, ec'},
  {name: 'Gold Foot',           stam: 20, lvl: 1600, id: 137, nicks: 'gold foot, goldfoot, gldft, gf'},
  {name: 'Titan Doubler',       stam: 40, lvl: 2000, id: 167, nicks: 'titan doubler'},
  {name: 'Teleport',            stam: 40, lvl: 2500, id: 168, nicks: 'teleport'},
  {name: 'Invigorate',          stam: 40, lvl: 3000, id: 169, nicks: 'invigorate'}
];

var characterName;
var sustainLevelRE = /Level<br>(\d+)%/;
var buffCustom = {
  header: 'Buff',
  what: 'buff',
  control: function() {
    var ret = '<select style="width:140px;" id="selectedBuff">';
    for (var j = 0; j < buffList.length; j += 1) {
      ret += '<option value="' + buffList[j].id + '">' +
        buffList[j].name + '</option>';
    }
    ret += '</select>';
    return ret;
  },
  cutoff: '175 buff',
  searched: 'Nicknames of buff searched',
  potential: 'buff',
  processed: 'Buff',
  progress: 'buffers'
};
var otherCustom = {
  header: 'Other',
  what: 'text',
  control: function() {
    var textToSearchFor = getValue('textToSearchFor') || '';
    return '<input style="width:140px;" class="custominput" ' +
      'id="textToSearchFor" type="text" title="Text to search for" value="' +
      textToSearchFor + '">';
  },
  cutoff: '500+ play',
  searched: 'Text searched for',
  potential: 'play',
  processed: 'Play',
  progress: 'Other'
};
var findBuffNicks;
var findBuffMinCastLevel;
var findBuffsLevel175Only;
var onlinePlayers$1;
var onlinePlayersSetting;
var extraProfile;
var profilePagesToSearch;
var profilePagesToSearchProcessed;
var bufferProgress;

function pageLayout(o) { // Legacy
  extraProfile = getValue('extraProfile');
  return '<table class="fshFind"><tbody>' +
    '<tr><td rowspan="2" colspan="2" class="headCell">' +
    '<h1>Find ' + o.header + '</h1></td>' +
    '<td class="findLabel">' +
    'Select ' + o.what + ' to search for:</td>' +
    '<td>' +
    o.control() +
    '</td></tr>' +
    '<tr>' +
    '<td class="findLabel">' +
    'Level ' + o.cutoff + 'ers only:</td>' +
    '<td><input id="level175" type="checkbox"></td></tr>' +
    '<tr><td class="leftLabel">' +
    o.searched +
    ':&nbsp;</td><td id="buffNicks">&nbsp;</td>' +
    '<td class="findLabel">Search guild members:</td>' +
    '<td><input id="guildMembers" type="checkbox" checked>' +
    '</td></tr><tr>' +
    '<td class="findLabel">' +
    '# potential ' + o.potential + 'ers to search:&nbsp;</td>' +
    '<td id="potentialBuffers"></td>' +
    '<td class="findLabel">Search allies/enemies:' +
    helpLink('Search Allies/Enemies',
      'The checkbox enables searching your own personal ' +
      'allies/enemies list for buffs.<br><br>' +
      'Additional profiles to search can be added in the text ' +
      'field to the right, separated by commas.') + '</td>' +
    '<td><input id="alliesEnemies" type="checkbox" checked>' +
    '<input class="extraProfile" class="custominput" id="extraProfile" ' +
    'type="text" title="Extra profiles to search" value="' +
    (extraProfile || '') + '"></td></tr>' +
    '<tr><td class="findLabel">' +
    '# ' + o.processed + 'ers processed:' +
    '&nbsp;</td><td id="buffersProcessed">0</td>' +
    '<td class="findLabel">Search online list:</td>' +
    '<td><select class="selectOnline" id="onlinePlayers">' +
      '<option value="0">Disabled</option>' +
      '<option value="49">Short (fastest)</option>' +
      '<option value="47">Medium (medium)</option>' +
      '<option value="45">Long (slowest)</option>' +
    '</select></td></tr>' +
    '<tr><td class="findLabel">' +
    'Find ' + o.progress + ' progress:' +
    '&nbsp;</td><td class="buffProg" id="bufferProgress">Idle</td>' +
    '<td align="center"><input id="clearresultsbutton" ' +
    'class="custombutton" type="button" value="Clear Results"></td>' +
    '<td align="center"><input id="findbuffsbutton" class="custombutton" ' +
    'type="button" value="Find Buffers"></td></tr>' +
    '</tbody></table><br>' +
    '<h1>Potential ' + o.processed + 'ers and Bio Info</h1><br>' +
    '<table class="fshResult" id="buffTable"><tbody>' +
    '<tr><th class="nameCol">&nbsp;Name</th>' +
    '<th class="infoCol">&nbsp;Player Info</th>' +
    '<th>&nbsp;Notable Bio Text</th></tr>' +
    '</tbody></table><br>' +
    '<div class="disclaim">Disclaimer: This ' +
    'functionality does a simple text search for the terms above. ' +
    'It is not as smart as you are, so please do not judge the results ' +
    'too harshly. It does not search all online players, just a subset ' +
    'of those that have been on recently. ' +
    'The aim is to be fast and still return a good set of results. This ' +
    'feature is a work in progress, so it may be tweaked and enhanced ' +
    'over time.</div>';
}

function uniq(arr, removeBy) {
  var seen = {};
  if (removeBy) {
    return arr.filter(function(item) {
      if (seen[item[removeBy]]) {return false;}
      seen[item[removeBy]] = true;
      return true;
    });
  }
  return arr.filter(function(item) {
    if (seen[item]) {return false;}
    seen[item] = true;
    return true;
  });
}

function getPrevBr(bioCellHtml, runningTotalPosition) { // Legacy
  var prevBR = bioCellHtml.lastIndexOf('<br>', runningTotalPosition - 1);
  if (prevBR === -1) {return 0;}
  return prevBR;
}

function getNextBr(bioCellHtml, runningTotalPosition) { // Legacy
  var nextBR = bioCellHtml.indexOf('<br>', runningTotalPosition);
  if (nextBR === -1 && bioCellHtml.indexOf('<br>') !== -1) {
    return bioCellHtml.length - 5;
  }
  return nextBR;
}

function getBioLines(bioCellHtml) { // Legacy
  var res = [];
  var buffPosition = 0;
  var startingPosition = 0;
  var runningTotalPosition = 0;
  var bioTextToSearch = ' ' + bioCellHtml + ' ';
  var buffRE = new RegExp('[^a-zA-Z]((' +
    findBuffNicks.replace(/,/g, ')|(') + '))[^a-zA-Z]', 'i');
  while (buffPosition !== -1) {
    bioTextToSearch = bioTextToSearch.substr(startingPosition,
      bioTextToSearch.length);
    buffPosition = bioTextToSearch.search(buffRE);
    if (buffPosition !== -1) {
      startingPosition = buffPosition + 1;
      runningTotalPosition += buffPosition;
      var prevBR = getPrevBr(bioCellHtml, runningTotalPosition);
      var nextBR = getNextBr(bioCellHtml, runningTotalPosition);
      var textLine = bioCellHtml.substr(prevBR + 4, nextBR - prevBR);
      textLine = textLine.replace(/(`~)|(~`)|(\{b\})|(\{\/b\})/g, '');
      res.push(textLine);
    }
  }
  return uniq(res);
}

function getSustain(doc) {
  var aLinks = doc.getElementById('profileLeftColumn')
    .getElementsByTagName('a');
  var sustainLevel;
  Array.prototype.some.call(aLinks, function(el) {
    if (el.textContent === 'Sustain') {
      var sustainText = el.parentNode.parentNode.parentNode.nextElementSibling
        .firstElementChild.getAttribute('data-tipped');
      sustainLevel = parseInt(sustainLevelRE.exec(sustainText)[1], 10);
      return true;
    }
    return false;
  });
  return fallback(sustainLevel, -1);
}

function nameCell(doc, callback, lastActivity, bioCellHtml) { // Legacy
  var innerPlayerName = doc.getElementById('pCC')
    .getElementsByTagName('h1')[0].textContent;
  var levelValue = intValue(doc.getElementById('profileLeftColumn')
    .children[4].children[0].rows[0].cells[1].textContent);
  var virtualLevelValue = parseInt(doc.getElementById('stat-vl')
    .textContent, 10);
  var lastActivityMinutes = parseInt(lastActivity[1], 10);
  var lastActivityIMG = onlineDot({min: lastActivityMinutes});
  var playerHREF = callback.href;
  var bioTip = bioCellHtml.replace(/'|"|\n/g, '');
  return '<nobr>' + lastActivityIMG + '&nbsp;<a href="' +
    playerHREF + '" target="new" ' +
    // FIXME - It kind works now, but not guaranteed?
    'class="tip-static" ' +
    'data-tipped="' + bioTip + '">' + innerPlayerName + '</a>' +
    '&nbsp;<span class="fshBlue">[<span class="a-reply fshLink" ' +
    'target_player="' + innerPlayerName + '">m</span>]</span></nobr><br>' +
    '<span class="fshGray">Level:&nbsp;</span>' + levelValue +
    '&nbsp;(' + virtualLevelValue + ')';
}

function playerInfo(lastActivity, sustainLevel, hasExtendBuff) { // Legacy
  var sustain = 'fshRed';
  if (sustainLevel >= 100) {sustain = 'fshGreen';}
  var extend = '<span class="fshRed">No</span>';
  if (hasExtendBuff) {extend = '<span class="fshGreen">Yes</span>';}
  return '<table><tbody><tr>' +
    '<td colspan="2" class="resAct">Last Activity:</td>' +
    '<td colspan="2"><nobr>' + lastActivity[0] + '</nobr></td></tr>' +
    '<tr><td class="resLbl">Sustain:' +
    '</td><td class="resVal ' + sustain + '">' + sustainLevel + '%</td>' +
    '<td class="resLbl">Extend:</td>' +
    '<td class="resVal">' + extend + '</td></tr>';
}

function findBuffsParseProfileAndDisplay(responseText, callback) { // Hybrid - Evil
  var doc = createDocument(responseText);
  // name and level
  var innerPcc = doc.getElementById('pCC');
  // last activity
  var lastActivityElement = innerPcc.getElementsByTagName('p')[0];
  var lastActivity = /(\d+) mins, (\d+) secs/
    .exec(lastActivityElement.textContent);
  // buffs
  var bioCellHtml = doc.getElementById('profile-bio').innerHTML;
  var buffTable = document.getElementById('buffTable');
  var textLineArray = getBioLines(bioCellHtml);
  // sustain
  var sustainLevel = getSustain(doc);
  // extend
  var hasExtendBuff = doc.querySelector(
    'img.tip-static[data-tipped*="Extend"]');

  // add row to table
  if (textLineArray.length > 0) {
    var newRow = buffTable.insertRow(-1);
    // name cell
    var newCell = newRow.insertCell(0);
    newCell.style.verticalAlign = 'top';
    newCell.innerHTML = nameCell(doc, callback, lastActivity, bioCellHtml);
    $('.a-reply').click(function(evt) {
      window.openQuickMsgDialog(evt.target.getAttribute('target_player'));
    });

    // player info cell
    newCell = newRow.insertCell(1);
    newCell.innerHTML = playerInfo(lastActivity, sustainLevel, hasExtendBuff);
    newCell.style.verticalAlign = 'top';
    // buff cell
    newCell = newRow.insertCell(2);
    textLineArray.forEach(function(el) {
      newCell.innerHTML += el + '<br>';
    });
  }
  var processedBuffers = document.getElementById('buffersProcessed');
  var potentialBuffers =
    parseInt(document.getElementById('potentialBuffers').textContent, 10);
  var processedBuffersCount = parseInt(processedBuffers.textContent, 10);
  processedBuffers.innerHTML = processedBuffersCount + 1;
  if (potentialBuffers === processedBuffersCount + 1) {
    bufferProgress.innerHTML = 'Done.';
    bufferProgress.style.color = 'blue';
  }
}

function findBuffsParsePlayersForBuffs() { // Legacy
  // remove duplicates TODO
  // now need to parse player pages for buff ...
  document.getElementById('potentialBuffers').innerHTML =
    onlinePlayers$1.length;
  if (onlinePlayers$1.length <= 0) {
    bufferProgress.innerHTML = 'Done.';
    bufferProgress.style.color = 'blue';
    return;
  }
  bufferProgress.innerHTML = 'Parsing player data ...';
  bufferProgress.style.color = 'green';

  for (var j = 0; j < onlinePlayers$1.length; j += 1) {
    xmlhttp(onlinePlayers$1[j],
      findBuffsParseProfileAndDisplay,
      {href: onlinePlayers$1[j]});
  }
}

function calcMinLvl() { // Legacy
  if (findBuffsLevel175Only) {return 500;}
  return 1;
}

function calcNextPage(curPage, maxPage) { // Legacy
  if (curPage === 1) {return Math.round(onlinePlayersSetting * maxPage / 50);}
  return curPage + 1;
}

function findBuffsParseOnlinePlayers(responseText) { // Legacy
  var doc = createDocument(responseText);
  var playerRows = $(doc).find('table:contains("Username")>tbody>tr:has' +
    '(td>a[href*="cmd=profile&player_id="])');
  var maxPage = parseInt($(doc).find('td:has(input[name="page"]):last')
    .text().replace(/\D/g, ''), 10);
  var curPage = parseInt($(doc).find('input[name="page"]:last').val()
    .replace(/\D/g, ''), 10);
  if (curPage !== 1) {
    playerRows.each(function(i, e) {
      var onlinePlayer = $(e).find('td:eq(1) a').attr('href');
      var onlinePlayerLevel = parseInt($(e).find('td:eq(2)').text()
        .replace(/,/g, ''), 10);
      var onlinePlayerName = $(e).find('td:eq(1) a').text();
      var minPlayerVirtualLevel = calcMinLvl();
      if (onlinePlayerLevel >= findBuffMinCastLevel &&
        onlinePlayerLevel >= minPlayerVirtualLevel) {
        // add online player to search list (all but self)
        if (characterName !== onlinePlayerName.trim()) {
          onlinePlayers$1.push(onlinePlayer);
        }
      }
    });
  }
  if (curPage < maxPage) {
    var newPage = calcNextPage(curPage, maxPage);
    bufferProgress.innerHTML = 'Parsing online page ' + curPage + ' ...';
    xmlhttp('index.php?cmd=onlineplayers&page=' + newPage,
      findBuffsParseOnlinePlayers, {page: newPage});
  } else {
    // all done so moving on
    findBuffsParsePlayersForBuffs();
  }
}

function findBuffsParseOnlinePlayersStart() { // Legacy
  // if option enabled then parse online players
  onlinePlayersSetting =
    parseInt(document.getElementById('onlinePlayers').value, 10);
  if (onlinePlayersSetting !== 0) {
    xmlhttp('index.php?cmd=onlineplayers&page=1',
      findBuffsParseOnlinePlayers, {page: 1});
  } else {
    findBuffsParsePlayersForBuffs();
  }
}

function calcLastActMins(tipped) {
  var lastActivity = lastActivityRE.exec(tipped);
  var lastActivityDays = parseInt(lastActivity[1], 10);
  var lastActivityHours = parseInt(lastActivity[2], 10) + lastActivityDays * 24;
  return parseInt(lastActivity[3], 10) + lastActivityHours * 60;
}

function parsePlayerLink(el) {
  var tipped = el.dataset.tipped;
  var lastActivityMinutes = calcLastActMins(tipped);
  // check if they are high enough level to cast the buff
  var vlevel = Number(/VL:.+?(\d+)/.exec(tipped)[1]);
  var minPlayerVirtualLevel = calcMinLvl();
  if (lastActivityMinutes < 5 &&
    vlevel >= findBuffMinCastLevel &&
    vlevel >= minPlayerVirtualLevel) {
    // add online player to search list (all but self)
    var onlinePlayer = el.href;
    if (characterName !== el.textContent) {
      onlinePlayers$1.push(onlinePlayer);
    }
  }
}

function findBuffsParseProfilePage(responseText) {
  var doc = createDocument(responseText);
  var profileAlliesEnemies =
    doc.querySelectorAll('#profileLeftColumn a[data-tipped*="Last Activity"]');
  Array.prototype.forEach.call(profileAlliesEnemies, parsePlayerLink);
  // continue with online players
  profilePagesToSearchProcessed += 1;
  if (profilePagesToSearchProcessed ===
    profilePagesToSearch.length) {
    findBuffsParseOnlinePlayersStart();
  }
}

function findBuffsParseProfilePageStart() { // Legacy
  // if option enabled then parse profiles
  profilePagesToSearch = [];
  profilePagesToSearch.push('index.php?cmd=profile');
  var extraProfileArray = extraProfile.split(',');
  extraProfileArray.forEach(function(el) {
    profilePagesToSearch.push('index.php?cmd=findplayer' +
      '&search_active=1&search_level_max=&search_level_min=' +
      '&search_username=' + el + '&search_show_first=1');
  });
  profilePagesToSearchProcessed = 0;
  if (document.getElementById('alliesEnemies').checked) {
    profilePagesToSearch.forEach(function(el) {
      xmlhttp(el, findBuffsParseProfilePage);
    });
  } else {
    findBuffsParseOnlinePlayersStart();
  }
}

function findBuffsParseGuildManagePage(responseText) {
  var doc = createDocument(responseText);
  if (document.getElementById('guildMembers').checked) {
    var memList = doc.querySelectorAll('#pCC a[data-tipped*="<td>VL:</td>"]');
    Array.prototype.forEach.call(memList, parsePlayerLink);
  }
  // continue with profile pages
  findBuffsParseProfilePageStart();
}

function findBuffsClearResults() { // Legacy
  var buffTable = document.getElementById('buffTable');
  for (var j = buffTable.rows.length; j > 1; j -= 1) {
    buffTable.deleteRow(j - 1);
  }
  document.getElementById('buffNicks').innerHTML = '';
  // var bufferProgress = document.getElementById('bufferProgress');
  bufferProgress.innerHTML = 'Idle.';
  bufferProgress.style.color = 'black';
  document.getElementById('potentialBuffers').innerHTML = '';
  document.getElementById('buffersProcessed').innerHTML = 0;
}

function findAnyStart(progMsg) {
  characterName = playerName();
  document.getElementById('buffNicks').innerHTML = findBuffNicks;
  bufferProgress = document.getElementById('bufferProgress');
  bufferProgress.innerHTML = 'Gathering list of ' + progMsg + ' ...';
  bufferProgress.style.color = 'green';
  findBuffsLevel175Only =
    document.getElementById('level175').checked;
  document.getElementById('buffersProcessed').innerHTML = 0;
  onlinePlayers$1 = [];
  extraProfile = document.getElementById('extraProfile').value;
  setValue('extraProfile', extraProfile);
  // get list of players to search, starting with guild>manage page
  xmlhttp('index.php?cmd=guild&subcmd=manage',
    findBuffsParseGuildManagePage);
}

function findBuffsStart() { // Legacy
  var selectedBuff = parseInt($('#selectedBuff').val(), 10);
  for (var j = 0; j < buffList.length; j += 1) {
    if (selectedBuff === buffList[j].id) {
      findBuffNicks = buffList[j].nicks;
      findBuffMinCastLevel = buffList[j].lvl;
      break;
    }
  }
  findAnyStart('potential buffers');
}

function findOtherStart() { // Legacy
  var textToSearchFor = $('#textToSearchFor').val().replace(/\s*,\s*/, ',');
  setValue('textToSearchFor', textToSearchFor);
  findBuffNicks = textToSearchFor;
  findBuffMinCastLevel = 1;
  findAnyStart('profiles to search');
}

function injectFindBuffs(injector) { // Legacy
  var content = injector || pCC;
  calf.sortBy = 'name';
  calf.sortAsc = true;
  buffList.sort(stringSort);
  content.innerHTML = pageLayout(buffCustom);
  document.getElementById('findbuffsbutton')
    .addEventListener('click', findBuffsStart, true);
  document.getElementById('clearresultsbutton')
    .addEventListener('click', findBuffsClearResults, true);
}

function injectFindOther(injector) { // Native - Bad
  var content = injector || pCC;
  content.innerHTML = pageLayout(otherCustom);
  document.getElementById('findbuffsbutton')
    .addEventListener('click', findOtherStart, true);
  document.getElementById('clearresultsbutton')
    .addEventListener('click', findBuffsClearResults, true);
}

var helperMenuBlob =
  '<div class="column"><h3>Character</h3><ul>' +
  '<li><span class="fshLink">Buff Log</span></li>' +
  '<li><span class="fshLink">Combat Log</span></li>' +
  '<li><span class="fshLink">Creature Log</span></li>' +
  '<li><span class="fshLink">Recipe Manager</span></li>' +
  '<li><span class="fshLink">Quick Links</span></li>' +
  '</ul><h3>Actions</h3><ul>' +
  '<li><span class="fshLink">Find Buffs</span></li>' +
  '<li><span class="fshLink">Find Other</span></li>' +
  '<li><span class="fshLink">Online Players</span></li>' +
  '<li><span class="fshLink">AH Quick Search</span></li>' +
  '</ul><h3>Extra</h3><ul>' +
  '<li><span class="fshLink">Quick Extract</span></li>' +
  '<li><span class="fshLink">Quick Wear</span></li>' +
  '<li><span class="fshLink">FS Box Log</span></li>' +
  '</ul><h3>FSH developer quick links</h3><ul>' +
  '<li><span class="a-reply" target_player="PointyHair">PM</span> ' +
  '<a href="index.php?cmd=profile&player_id=1963510">PointyHair</a></li>' +
  '<li><span class="a-reply" target_player="yuuzhan">PM</span> ' +
  '<a href="index.php?cmd=profile&player_id=1599987">yuuzhan</a></li>' +
  '</ul></div>';

var functionLookup = {
  'Buff Log': injectBuffLog,
  'Combat Log': injectNotepadShowLogs,
  'Creature Log': injectMonsterLog,
  'Recipe Manager': injectRecipeManager,
  'Quick Links': injectQuickLinkManager,
  'Find Buffs': injectFindBuffs,
  'Find Other': injectFindOther,
  'Online Players': injectOnlinePlayers,
  'AH Quick Search': injectAuctionSearch,
  'Quick Extract': insertQuickExtract,
  'Quick Wear': insertQuickWear,
  'FS Box Log': injectFsBoxContent
};

function callHelperFunction(evt) { // jQuery
  var functionPath = evt.target.textContent;
  var fn = functionLookup[functionPath];
  if (typeof fn === 'function') {
    screenview(functionPath);
    jQueryDialog(fn);
  }
}

function eventHandler(evt) {
  if (evt.target.classList.contains('fshLink')) {
    callHelperFunction(evt);
    return;
  }
  if (evt.target.classList.contains('a-reply')) {
    window.openQuickMsgDialog(evt.target.getAttribute('target_player'));
  }
}

function showHelperMenu() {
  var helperMenu = document.getElementById('helperMenu');
  helperMenu.removeEventListener('mouseenter', showHelperMenu);

  var helperMenuDiv = createDiv({
    id: 'helperMenuDiv',
    className: 'helperMenuDiv',
    style: {
      backgroundImage: 'url(' + imageServer +
        '/skin/inner_bg.jpg)'
    }
  });
  helperMenuDiv.insertAdjacentHTML('beforeend', helperMenuBlob);
  helperMenu.appendChild(helperMenuDiv);
  helperMenu.addEventListener('click', function(evt) {
    if (evt.target.id !== 'helperMenu') {return;}
    var menu = evt.target.firstElementChild;
    menu.classList.toggle('showMenuDiv');
  });
  helperMenuDiv.addEventListener('click', eventHandler);
}

function haveNode$1(node) {
  var helperMenu = createDiv({
    id: 'helperMenu',
    className: 'helperMenu',
    innerHTML: 'Helper&nbsp;Menu'
  });
  if (getValue('keepHelperMenuOnScreen')) {
    helperMenu.classList.add('fshFixed');
  }
  helperMenu.addEventListener('mouseenter', showHelperMenu);
  if (getValue('draggableHelperMenu')) {
    helperMenu.classList.add('fshMove');
    draggable(helperMenu);
  }
  node.parentNode.insertBefore(helperMenu, node);
}

function injectHelperMenu() {
  // don't put all the menu code here (but call if clicked) to minimize lag
  var node = document.getElementById('statbar-container');
  if (node) {haveNode$1(node);}
}

function containsNewsHead(el) {
  return el.classList.contains('news_head') ||
    el.classList.contains('news_head_tavern');
}

function closestHead(el) {
  if (containsNewsHead(el)) {
    return el;
  }
  if (el.classList.contains('news_left_column')) {return;}
  return closestHead(el.parentNode);
}

function getNewsClass(newsHead) {
  if (newsHead.classList.contains('news_head_tavern')) {
    return '.news_body_tavern';
  }
  return '.news_body';
}

function gotNewsHead(evt, newsHead) { // jQuery
  var newsBody = newsHead.nextElementSibling;
  var newsClass = getNewsClass(newsHead);
  if (!$(newsBody).data('open')) {
    evt.preventDefault();
    $(newsClass).hide().data('open', false);
    $(newsBody).show().data('open', true);
  } else if (evt.target.tagName !== 'A') {
    $(newsBody).hide().data('open', false);
  }
  evt.stopPropagation();
}

function newsEvt(evt) {
  var newsHead = closestHead(evt.target);
  if (newsHead) {gotNewsHead(evt, newsHead);}
}

function fixCollapse() {
  var newsCol = document.getElementsByClassName('news_left_column');
  if (newsCol.length !== 1) {return;}
  newsCol[0].addEventListener('click', newsEvt, true);
}

function lookForPvPLadder() {
  var lastLadderReset = getValue('lastLadderReset');
  var rumours = pCC.getElementsByClassName('news_head_tavern');
  Array.prototype.forEach.call(rumours, function(head) {
    if (head.children[1].textContent === 'PvP Ladder') {
      var logTime = parseDateAsTimestamp(head.children[2].textContent);
      if (logTime > lastLadderReset) {
        setValue('lastLadderReset', logTime);
        lastLadderReset = logTime;
      }
    }
  });
}

function injectHomePageTwoLink() {
  var archiveLink = document.querySelector(
    '#pCC a[href="index.php?cmd=&subcmd=viewupdatearchive"]');
  if (!archiveLink) {return;}
  archiveLink.insertAdjacentHTML('afterend', '&nbsp;<a href="index.php?cmd=' +
    '&subcmd=viewupdatearchive&subcmd2=&page=2&search_text=">' +
    'View Updates Page 2</a>');
  archiveLink = document.querySelector(
    '#pCC a[href="index.php?cmd=&subcmd=viewarchive"]');
  archiveLink.insertAdjacentHTML('afterend', '&nbsp;<a href="index.php?cmd=' +
    '&subcmd=viewarchive&subcmd2=&page=2&search_text=">View News Page 2</a>');
  fixCollapse();
  lookForPvPLadder();
}

function updateQuestLink() {
  var lastActiveQuestPage = getValue('lastActiveQuestPage');
  if (lastActiveQuestPage.length > 0) {
    document.getElementById('nav-character-questbook')
      .setAttribute('href', lastActiveQuestPage);
  }
}

function spanButton(navLvl, text, fn, target) {
  var li = createLi({className: 'nav-level-' + navLvl});
  var sb = createSpan({
    className: 'nav-link fshPoint',
    textContent: text
  });
  sb.addEventListener('click', function() {
    jQueryDialog(fn);
  });
  li.appendChild(sb);
  document.getElementById(target).parentNode
    .insertAdjacentElement('afterend', li);
}

function buffLogLink() {
  if (getValue('keepBuffLog')) {
    spanButton('1', 'Buff Log', injectBuffLog, 'nav-character-log');
  }
}

function combatLogLink() {
  if (getValue('keepLogs')) {
    spanButton('1', 'Combat Logs', injectNotepadShowLogs,
      'nav-character-notepad');
  }
}

function creatureLogLink() {
  if (getValue('showMonsterLog')) {
    spanButton('1', 'Creature Logs', injectMonsterLog,
      'nav-character-notepad');
  }
}

function newGuildLogLink() {
  if (!getValue('useNewGuildLog')) {
    // if not using the new guild log, show it as a separate menu entry
    document.getElementById('nav-guild-ledger-guildlog').parentNode
      .insertAdjacentHTML('beforebegin',
        '<li class="nav-level-2"><a class="nav-link" ' +
        'href="index.php' + newGuildLogUrl + '"' +
        '>New Guild Log</a></li>');
  }
}

function adjustHeight() { // jQuery
  // adjust the menu height for the newly added items
  var theNav = document.getElementById('nav');
  var myNav = $(theNav).data('nav');
  // first the closed saved variables
  myNav.heights = [
    null,
    null,
    // Character
    document.getElementById('nav-character').nextElementSibling.children
      .length * 22,
    660,
    // Guild
    document.querySelectorAll('#nav-guild > ul li').length * 22,
    374,
    132,
    132,
    null
  ];
  if (myNav.state !== '-1' && myNav.state !== -1) {
    // and now the open one
    theNav.children[myNav.state].children[1].style.height =
      myNav.heights[myNav.state] + 'px';
  }
}

function injectMenu() {
  if (!document.getElementById('pCL')) {return;}
  updateQuestLink();
  // character
  spanButton('1', 'Recipe Manager', injectRecipeManager, 'nav-character-log');
  document.getElementById('nav-character-log').parentNode
    .insertAdjacentHTML('afterend',
      '<li class="nav-level-1"><a class="nav-link" id="nav-' +
      'character-medalguide" href="index.php?cmd=profile&subcmd=' +
      'medalguide">Medal Guide</a></li>' +
      '<li class="nav-level-1"><a class="nav-link" id="nav-' +
      'character-invmanager" href="index.php?cmd=notepad&blank=1&' +
      'subcmd=invmanagernew">Inventory Manager</a></li>');
  buffLogLink();
  combatLogLink();
  creatureLogLink();
  spanButton('1', 'Quick Links', injectQuickLinkManager,
    'nav-character-notepad');
  // guild
  document.getElementById('nav-guild-storehouse-inventory').parentNode
    .insertAdjacentHTML('afterend',
      '<li class="nav-level-2"><a class="nav-link" id="nav-' +
      'guild-guildinvmanager" href="index.php?cmd=notepad&blank=1' +
      '&subcmd=guildinvmgr">Guild Inventory</a></li>');
  newGuildLogLink();
  // top rated
  document.getElementById('nav-toprated-players-level').parentNode
    .insertAdjacentHTML('afterend',
      '<li class="nav-level-2"><a class="nav-link" id="nav-' +
      'toprated-top250" href="index.php?cmd=toprated&subcmd=xp">' +
      'Top 250 Players</a></li>');
  // actions
  spanButton('2', 'AH Quick Search', injectAuctionSearch,
    'nav-actions-trade-auctionhouse');
  spanButton('2', 'Online Players', injectOnlinePlayers,
    'nav-actions-interaction-findplayer');
  spanButton('2', 'Find Other', injectFindOther,
    'nav-actions-interaction-findplayer');
  spanButton('2', 'Find Buffs', injectFindBuffs,
    'nav-actions-interaction-findplayer');
  adjustHeight();
}

function showMsgTemplate() { // jQuery
  var targetPlayer = $('#quickMsgDialog_targetUsername').text();
  $('#msgTemplateDialog').remove();

  // template displayed
  var html = '<div id=msgTemplateDialog title="Choose Msg Template" ' +
    'style="display:none"><style>#msgTemplate .ui-selecting { ' +
    'background: #FECA40; };</style><ol id=msgTemplate valign=center>';
  for (var i = 0; i < calf.template.length; i += 1) {
    html += '<li class="ui-widget-content">' +
      calf.template[i].replace(/\{playername\}/g, targetPlayer) + '</li>';
  }
  html += '</ol></div>';
  $('body').append(html);

  // template manager
  $('#msgTemplate li').prepend('<input type=button class="del-button" ' +
    'value=Del style="display:none">');
  $('#msgTemplate').append('<li class="add-button" style="display:none">' +
    '<input type=button id=newTmplAdd value=Add><input id=newTmpl ' +
    'class=ui-widget-content></li>');
  $(':button', '#msgTemplate').button();
  $('.del-button').click(function(evt) {
    calf.template.splice($('#msgTemplate li')
      .index(evt.target.parentNode), 1);
    setValueJSON('quickMsg', calf.template);
    $('#msgTemplateDialog').dialog('close');
    showMsgTemplate();
  });
  $('#newTmplAdd').click(function() {
    if ($('#newTmpl').val() === '') {return;}
    calf.template.push($('#newTmpl').val());
    setValueJSON('quickMsg', calf.template);
    $('#msgTemplateDialog').dialog('close');
    showMsgTemplate();
  });

  // enable selectable template
  $('#msgTemplate').selectable({
    filter: 'li.ui-widget-content',
    stop: function() {
      if ($('.add-button.ui-selected').length > 0) {return;} // click on add row
      if ($('.ui-selected').length === 0) {return;} // nothing selected yet
      $('#quickMsgDialog_msg').val($('#quickMsgDialog_msg').val() +
        $('#msgTemplate .ui-selected').text() + '\n');
      $('#msgTemplateDialog').dialog('close');
    }
  });

  // show the template form
  $('#msgTemplateDialog').dialog({
    buttons: {
      Manage: function() {
        $('.del-button').toggle();
        $('.add-button').toggle();
      },
      Cancel: function() {
        $('#msgTemplateDialog').dialog('close');
        $('#msgTemplateDialog').remove();
      }
    }
  });
}

function openQuickMsgDialog(name, msg, tip) { // jQuery
  if (!calf.template) {
    calf.template = getValueJSON('quickMsg');
    var buttons = $('#quickMessageDialog').dialog('option', 'buttons');
    buttons.Template = showMsgTemplate;
    $('#quickMessageDialog').dialog('option', 'buttons', buttons);
  }
  $('#quickMsgDialog_targetUsername').html(name);
  $('#quickMsgDialog_targetPlayer').val(name);
  $('#quickMsgDialog_msg').val(fallback(msg, ''));
  $('#quickMsgDialog_msg').removeAttr('disabled');
  $('.validateTips').text(fallback(tip, ''));
  $('#quickMessageDialog').dialog('open');
}

function injectQuickMsgDialogJQ() {
  window.openQuickMsgDialog = openQuickMsgDialog;
}

function getProfile(username) {
  return retryAjax({
    url: 'index.php',
    data: {
      cmd: 'export',
      subcmd: 'profile',
      player_username: username
    },
    dataType: 'json'
  });
}

function sendMyProfileToForage(data) {
  setForage('fsh_selfProfile', data);
}

function addLastUpdateDate(data) {
  data.lastUpdate = now;
  return data;
}

function getMyProfile() {
  return getProfile(playerName())
    .pipe(addLastUpdateDate)
    .done(sendMyProfileToForage);
}

function getProfileFromForage(data) {
  if (!data || data.lastUpdate < now -
    calf.allyEnemyOnlineRefreshTime) {
    return getMyProfile();
  }
  return data;
}

function myStats(force) {
  if (force) {return getMyProfile();}
  // jQuery 1.7 uses pipe instead of then
  return getForage('fsh_selfProfile')
    .pipe(getProfileFromForage);
}

var buffCheck = '<span class="enemy-buff-check-on"></span>';
var msgButton = '<span class="enemy-send-message guild-icon left ' +
  'guild-minibox-action tip-static" data-tipped="Send Message"></span>';
var buffButton = '<span class="enemy-quickbuff guild-icon left ' +
  'guild-minibox-action tip-static" data-tipped="Quick Buff"></span>';

var contactClass = [
  {
    condition: function(n) {return n < 120;},
    ally: 'fshDodgerBlue',
    enemy: 'fshRed'
  },
  {
    condition: function(n) {return n < 300;},
    ally: 'fshDodgerBlue',
    enemy: 'fshRed'
  },
  {
    condition: function() {return true;},
    ally: 'fshPowderBlue',
    enemy: 'fshPink'
  }
];

function allyOrEnemy(type, test) {
  if (type) {return test.ally;}
  return test.enemy;
}

function contactColor(last_login, type) {
  for (var i = 0; i < contactClass.length; i += 1) {
    var test = contactClass[i];
    if (test.condition(nowSecs - last_login)) {
      return allyOrEnemy(type, test);
    }
  }
  return 'fshWhite';
}

function playerName$1(val, type) {
  return '<a class="player-name tip-static ' +
    contactColor(val.last_login, type) +
    '" data-tipped="<b>' + val.username + '</b><br><table><tbody><tr>' +
    '<td>Level:</td><td>' + val.level + '</td></tr><tr><td>Last ' +
    'Activity:</td><td>' + formatLastActivity(val.last_login) +
    '</td></tr></tbody></table>" href="index.php?cmd=profile&player_id=' +
    val.id + '">' + val.username + '</a>';
}

function doBuffCheck() {
  if (!calf.hideBuffSelected) {
    return buffCheck;
  }
  return '';
}

function doMsgButton() {
  if (!calf.hideGuildInfoMessage) {
    return msgButton;
  }
  return '';
}

function doBuffButton() {
  if (!calf.hideGuildInfoBuff) {
    return buffButton;
  }
  return '';
}

function doSecureButton(val) {
  if (!calf.hideGuildInfoSecureTrade) {
    return '<a class="enemy-secure-trade guild-icon left ' +
      'guild-minibox-action tip-static" href="index.php?cmd=trade' +
      '&subcmd=createsecure&target_username=' + val.username +
      '" data-tipped="Secure Trade"></a>';
  }
  return '';
}

function doTradeButton(val) {
  if (!calf.hideGuildInfoTrade) {
    return '<a class="enemy-trade guild-icon left ' +
      'guild-minibox-action tip-static" href="index.php?cmd=trade' +
      '&target_player=' + val.username +
      '" data-tipped="Send Gold/Items/FSP"></a>';
  }
  return '';
}

function addContact(contactList, type) {
  var output = '';
  contactList.forEach(function(val) {
    if (nowSecs - val.last_login > 1800) {return;} // 30 mins
    output += '<li class="player"><div class="player-row">';
    output += doBuffCheck();
    output += playerName$1(val, type);
    output += '</div><div class="guild-minibox-actions">';
    output += doMsgButton();
    output += doBuffButton();
    output += doSecureButton(val);
    output += doTradeButton(val);
    output += '</div></li>';
  });
  return output;
}

function noAllies(allies, enemies) {
  return allies.length + enemies.length === 0 ||
    !calf.enableAllyOnlineList && enemies.length === 0 ||
    !calf.enableEnemyOnlineList && allies.length === 0;
}

function hazAllies(allies, enemies) {
  var output = '';
  if (calf.enableAllyOnlineList) {
    output += addContact(allies, true);
  }
  if (calf.enableEnemyOnlineList) {
    output += addContact(enemies, false);
  }
  var fshContactList = document.getElementById('fshContactList');
  fshContactList.innerHTML = '';
  fshContactList.insertAdjacentHTML('beforeend', output);
}

function injectAllyEnemyList(data) {
  var allies = fallback(data._allies, []);
  var enemies = fallback(data._enemies, []);
  if (noAllies(allies, enemies)) {return;}
  hazAllies(allies, enemies);
}

function resetList() { // jQuery
  myStats(true).done(injectAllyEnemyList);
}

function toggleBuffSelected(self) {
  self.classList.toggle('enemy-buff-check-on');
  self.classList.toggle('enemy-buff-check-off');
}

function msgPlayer(self) {
  window.openQuickMsgDialog(self.parentNode.previousElementSibling
    .lastElementChild.textContent);
}

function buffPlayer(self) {
  openQuickBuffByName(self.parentNode
    .previousElementSibling.lastElementChild.textContent);
}

function selectedBuff() {
  var buffBalls = document.getElementById('fshContactList')
    .getElementsByClassName('enemy-buff-check-on');
  var sendstring = Array.prototype.reduce.call(buffBalls,
    function(prev, curr) {
      prev.push(curr.nextElementSibling.textContent);
      return prev;
    }, []);
  openQuickBuffByName(sendstring.join());
}

var classEvt = [
  {className: 'enemy-buff-check-on', handler: toggleBuffSelected},
  {className: 'enemy-buff-check-off', handler: toggleBuffSelected},
  {className: 'enemy-send-message', handler: msgPlayer},
  {className: 'enemy-quickbuff', handler: buffPlayer},
  {className: 'enemy-quick-buff', handler: selectedBuff}
];

function eventHandler$1(evt) {
  var self = evt.target;
  if (self.id === 'fshResetEnemy') {
    resetList();
    return;
  }
  classEvt.some(function(test) {
    if (self.classList.contains(test.className)) {
      test.handler(self);
      return true;
    }
    return false;
  });
}

function makeDiv(data) {
  var fshAllyEnemy = createDiv({
    id: 'fshAllyEnemy',
    className: 'minibox'
  });
  var wrapper = '<h3>Allies/Enemies</h3><div class="minibox-content">' +
    '<h4>Online Contacts <span id="fshResetEnemy">Reset</span></h4>' +
    '<div id="minibox-enemy"><ul id="fshContactList"></ul>';
  if (!calf.hideBuffSelected) {
    wrapper += '<ul class="enemy-quick-buff">Quick Buff Selected</ul>';
  }
  wrapper += '</div></div>';
  fshAllyEnemy.insertAdjacentHTML('beforeend', wrapper);
  document.getElementById('pCR')
    .insertAdjacentElement('afterbegin', fshAllyEnemy);
  fshAllyEnemy.addEventListener('click', eventHandler$1);
  injectAllyEnemyList(data);
}

function prepareAllyEnemyList() { // jQuery.min
  myStats(false)
    .done(function(data) {
      add(3, makeDiv, [data]);
    });
}

var bountyList;
var wantedList;
var bountyListRefreshTime;
var bwNeedsRefresh;
var curPage;
var maxPage;
var activeBountyListPosted;
var wantedNames;
var wantedArray;

function resetBountyList() {
  setValueJSON('bountyList', null);
  location.reload();
}

function injectBountyList() {
  setValueJSON('bountyList', bountyList);
  var injectHere = document
    .getElementById('Helper:BountyListPlaceholder');
  var displayList = createTable({cellPadding: 1, width: 125});

  var aRow = displayList.insertRow(0); // bountyList.rows.length
  var aCell = aRow.insertCell(0);
  var output = '<h3>Active Bounties</h3><ol style="color:#FFF380;font-' +
    'size:10px;list-style-type:decimal;margin-left:1px;margin-top:' +
    '1px;margin-bottom:1px;padding-left:20px;"><nobr><span id="' +
    'Helper:resetBountyList" style=" font-size:8px; cursor:pointer; ' +
    'text-decoration:underline;">Reset</span><nobr><br>';

  if (bountyList.activeBounties === false) {
    output += '</ol> \f <ol style="color:orange;font-size:10px;list-' +
      'style-type:decimal;margin-left:1px;margin-top:1px;margin-' +
      'bottom:1px;padding-left:10px;">[No Active bounties]</ol>';
  } else {
    for (var i = 0; i < bountyList.bounty.length; i += 1) {
      var mouseOverText = '<div>Level:  ' + bountyList.bounty[i].lvl +
        '<br/>Reward: ' + bountyList.bounty[i].reward + ' ' +
        bountyList.bounty[i].rewardType +
        '<br/>XP Loss Remaining: ' + bountyList.bounty[i].xpLoss +
        '<br/>Progress:  ' + bountyList.bounty[i].progress +
        '</div>';

      output += '<li style="padding-bottom:0px;"><a style="color:' +
        'red;font-size:10px;"href="' + server +
        'index.php?cmd=attackplayer&mode=bounty&target_username=' +
        bountyList.bounty[i].target + '">[a]</a>&nbsp;<a style="' +
        'color:#A0CFEC;font-size:10px;"href="' + server +
        'index.php?cmd=message&target_player=' +
        bountyList.bounty[i].target + '">[m]</a> &nbsp;<a href="' +
        bountyList.bounty[i].link + '" class="tip-static" ' +
        'data-tipped="' + mouseOverText + '" style="color:' +
        '#FFF380;font-size:10px;">' + bountyList.bounty[i].target +
        '</a></li>';
    }
  }

  aCell.innerHTML = output;
  var breaker = createBr();
  injectHere.parentNode.insertBefore(breaker, injectHere.nextSibling);
  injectHere.parentNode.insertBefore(displayList, injectHere.nextSibling);
  document.getElementById('Helper:resetBountyList')
    .addEventListener('click', resetBountyList, true);
}

function resetWantedList() { // Legacy
  setValueJSON('wantedList', null);
  location.reload();
}

function acceptOrAttack(bounty) { // Legacy
  if (bounty.accept) {
    return 'color:rgb(0,255,0); cursor:pointer; ' +
      'text-decoration:underline blink;" title = "Accept ' +
      'Bounty" onclick="' + bounty.accept +
      '">[a]</a>&nbsp;';
  }
  return 'color:red;" href="' + server +
    'index.php?cmd=attackplayer&target_username=' +
    bounty.target + '">[a]</a>&nbsp;';
}

function injectWantedList() { // Legacy
  setValueJSON('wantedList', wantedList);
  var injectHere = document
    .getElementById('Helper:WantedListPlaceholder');
  var displayList = createTable({cellPadding: 3, width: 125});

  var aRow = displayList.insertRow(0);
  var aCell = aRow.insertCell(0);
  var output = '<h3>Wanted Bounties</h3><ol style="color:#FFF380;font-' +
    'size:10px;list-style-type:decimal;margin-left:1px;margin-top:' +
    '1px;margin-bottom:1px;padding-left:12px;"><nobr> <span id="' +
    'Helper:resetWantedList" font-size:8px; cursor:pointer; text-' +
    'decoration:underline;">Reset</span></nobr><br>';

  if (wantedList.wantedBounties === false) {
    output += '</ol> \f <ol style="color:orange;font-size:10px;list-' +
      'style-type:decimal;margin-left:1px;margin-top:1px;margin-' +
      'bottom:1px;padding-left:7px;">[No wanted bounties]</ol>';
  } else {
    for (var i = 0; i < wantedList.bounty.length; i += 1) {
      var mouseOverText = '"<div style=\'text-align:center;width:' +
        '205px;\'>Target Level:  ' + wantedList.bounty[i].lvl +
        '<br/>Offerer: ' + wantedList.bounty[i].offerer +
        '<br/>Reward: ' + wantedList.bounty[i].reward + ' ' +
        wantedList.bounty[i].rewardType +
        '<br/>XP Loss Remaining: ' + wantedList.bounty[i].xpLoss +
        '<br/>Posted: ' + wantedList.bounty[i].posted +
        '<br/>Tickets Req.:  ' + wantedList.bounty[i].tickets + '</div>" ';

      output += '<li style="padding-bottom:0px;margin-left:5px;">' +
        '<a style= "font-size:10px;' + acceptOrAttack(wantedList.bounty[i]) +
        '<a style="color:#A0CFEC;font-size:10px;"href="j' +
        'avascript:openQuickMsgDialog(\'' + wantedList.bounty[i].target +
        '\');">[m]</a> &nbsp;<a class="tip-static" data-tipped=' +
        mouseOverText + 'style="color:#FFF380;font-size:10px;" href="' +
        wantedList.bounty[i].link + '">' +
        wantedList.bounty[i].target + '</a></li>';
    }
  }

  aCell.innerHTML = output;
  var breaker = createBr();
  injectHere.parentNode.insertBefore(breaker, injectHere.nextSibling);
  injectHere.parentNode.insertBefore(displayList, injectHere.nextSibling);
  document.getElementById('Helper:resetWantedList')
    .addEventListener('click', resetWantedList);
}

function getTarget$1(target, theRow) {
  wantedList.wantedBounties = true;
  var bounty = {};
  bounty.target = target;
  bounty.link = theRow.cells[0]
    .firstChild.firstChild.href;
  bounty.lvl = theRow.cells[0]
    .firstChild.firstChild.nextSibling.textContent
    .replace(/\[/, '').replace(/\]/, '');
  bounty.offerer = theRow.cells[1]
    .firstChild.firstChild.firstChild.textContent;
  bounty.reward = theRow.cells[2].textContent;
  bounty.rewardType = theRow.cells[2]
    .firstChild.firstChild.firstChild.firstChild
    .nextSibling.firstChild.title;
  bounty.xpLoss = theRow.cells[3].textContent;
  bounty.posted = theRow.cells[4].textContent;
  bounty.tickets = theRow.cells[5].textContent;
  if (theRow.cells[6].textContent.trim() === '[active]') {
    bounty.active = true;
    bounty.accept = '';
  } else if (theRow.cells[6].textContent.trim() !== '[n/a]') { // TODO
    bounty.active = false;
    bounty.accept = theRow.cells[6]
      .firstChild.firstChild
      .getAttribute('onclick');
  }
  wantedList.bounty.push(bounty);
}

function wantedTarget(target, theRow, el) {
  if (target === el.trim() ||
      wantedArray.indexOf('*') !== -1) {
    getTarget$1(target, theRow);
  }
}

function findTarget(activeTable) {
  for (var i = 1; i < activeTable.rows.length - 2; i += 2) {
    var theRow = activeTable.rows[i];
    var target = theRow.cells[0].firstChild
      .firstChild.firstChild.textContent;
    if (target === '[ No bounties available. ]') {break;}
    wantedArray.forEach(wantedTarget.bind(null, target, theRow));
  }
}

function getWantedBountyList(doc) { // Legacy
  if (!calf.enableWantedList) {return;}
  var page = findNode('//input[@name="page"]', doc);
  curPage = parseInt(page.value, 10);
  maxPage = page.parentNode.innerHTML.match(/of&nbsp;(\d*)/)[1];
  var activeTable = findNode('//table[@width = "630" and ' +
    'contains(.,"Target")]', doc);
  if (activeTable) {findTarget(activeTable);}
}

function parseActiveBounty(activeTable) { // Legacy
  if (!/No bounties active/.test(activeTable.rows[1].cells[0].innerHTML)) {
    bountyList.activeBounties = true;
    for (var i = 1; i < activeTable.rows.length - 2; i += 2) {
      var bounty = {};
      bounty.target = activeTable.rows[i].cells[0].firstChild
        .firstChild.firstChild.textContent;
      bounty.link = activeTable.rows[i].cells[0].firstChild
        .firstChild.href;
      bounty.lvl = activeTable.rows[i].cells[0].firstChild
        .firstChild.nextSibling.textContent
        .replace(/\[/, '').replace(/\]/, '');
      bounty.reward = activeTable.rows[i].cells[2]
        .textContent;
      bounty.rewardType = activeTable.rows[i].cells[2]
        .firstChild.firstChild.firstChild.firstChild
        .nextSibling.firstChild.title;
      bounty.posted = activeTable.rows[i].cells[3]
        .textContent;
      bounty.xpLoss = activeTable.rows[i].cells[4]
        .textContent;
      bounty.progress = activeTable.rows[i].cells[5]
        .textContent;
      bountyList.bounty.push(bounty);
    }
  } else {
    bountyList.activeBounties = false;
  }
}

function getActiveBountyList(doc) { // Legacy
  var activeTable = findNode('//table[@width = 620]', doc);
  bountyList = {};
  bountyList.bounty = [];
  bountyList.isRefreshed = true;
  bountyList.lastUpdate = new Date();
  if (activeTable) {parseActiveBounty(activeTable);}
  injectBountyList();
  activeBountyListPosted = true;
}

function parseBountyPageForWorld(details) {
  var doc = createDocument(details);
  getWantedBountyList(doc);
  if (calf.enableActiveBountyList &&
      !activeBountyListPosted) {
    getActiveBountyList(doc);
  }
  if (curPage < maxPage) {
    xmlhttp('index.php?cmd=bounty&page=' + (curPage + 1),
      parseBountyPageForWorld);
  } else {
    injectWantedList();
  }
}

function testCacheInvalid() { // Legacy
  return bountyList &&
    now - bountyList.lastUpdate.getTime() > bountyListRefreshTime ||
    wantedList &&
    now - wantedList.lastUpdate.getTime() > bountyListRefreshTime;
}

function invalidateCache() { // Legacy
  bountyList = getValueJSON('bountyList');
  wantedList = getValueJSON('wantedList');
  bountyListRefreshTime = getValue('bountyListRefreshTime');
  bwNeedsRefresh = getValue('bwNeedsRefresh');
  bountyListRefreshTime *= 1000;
  if (bwNeedsRefresh) {return;}
  if (testCacheInvalid()) {
    bwNeedsRefresh = true; // invalidate cache
  }
}

function doRefresh() { // Legacy
  wantedList = {};
  wantedList.bounty = [];
  wantedList.isRefreshed = true;
  wantedList.lastUpdate = new Date();
  wantedList.wantedBounties = false;
  activeBountyListPosted = false;
  wantedNames = getValue('wantedNames');
  wantedArray = wantedNames.split(',');
  xmlhttp('index.php?cmd=bounty&page=1', parseBountyPageForWorld);
  setValue('bwNeedsRefresh', false);
}

function notRefreshed(enableActiveBountyList, enableWantedList) {
  if (enableWantedList) {
    wantedList.isRefreshed = false;
    injectWantedList(wantedList);
  }
  if (enableActiveBountyList) {
    bountyList.isRefreshed = false;
    injectBountyList(bountyList);
  }
}

var testConditions = [
  function() {return !bountyList;},
  function() {return !wantedList;},
  function() {return bwNeedsRefresh;}
];

function testForRefresh() {
  for (var i = 0; i < testConditions.length; i += 1) {
    if (testConditions[i]()) {return true;}
  }
  return false;
}

function retrieveBountyInfo(enableActiveBountyList, enableWantedList) { // Legacy
  invalidateCache();
  if (testForRefresh()) {
    doRefresh();
  } else {
    notRefreshed(enableActiveBountyList, enableWantedList);
  }
}

function prepareBountyData() {
  var pCR = document.getElementById('pCR');
  if (calf.enableWantedList) {
    pCR.insertAdjacentHTML('afterbegin', '<div class="minibox">' +
      '<span id="Helper:WantedListPlaceholder"></span></div>');
  }
  if (calf.enableActiveBountyList) {
    pCR.insertAdjacentHTML('afterbegin', '<div class="minibox">' +
      '<span id="Helper:BountyListPlaceholder"></span></div>');
  }
  retrieveBountyInfo(
    calf.enableActiveBountyList,
    calf.enableWantedList);
}

function doSendGold() { // jQuery
  retryAjax({
    url: 'index.php',
    data: {
      cmd: 'trade',
      subcmd: 'sendgold',
      xc: window.ajaxXC,
      target_username: $('#HelperSendTo').html(),
      gold_amount: $('#HelperSendAmt').html().replace(/[^\d]/g, '')
    }
  }).done(function(data) {
    var info = infoBox(data);
    if (info === 'You successfully sent gold!' || info === '') {
      setValue('currentGoldSentTotal',
        parseInt(getValue('currentGoldSentTotal'), 10) +
        parseInt(getValue('goldAmount'), 10));
      GameData.fetch(1);
    }
  });
}

function injectSendGoldOnWorld() { // jQuery
  if (!getValue('sendGoldonWorld')) {return;}
  $('#statbar-gold-tooltip-general').append(
    '<dt class="stat-gold-sendTo">Send To:</dt>' +
    '<dd id="HelperSendTo">' + getValue('goldRecipient') +
    '</dd>' +
    '<dt class="stat-gold-sendAmt">Amount:</dt>' +
    '<dd id="HelperSendAmt">' + getValue('goldAmount')
      .replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,') + '</dd>' +
    '<dt class="stat-gold-sendTo">Send?</dt>' +
    '<dd><input id="HelperSendGold" value="Send!" class="custombutton" ' +
    'type="submit"><input type="hidden" id="xc" value=""</dd>' +
    '<dt class="stat-gold-sendTotal">Total Sent:</dt>' +
    '<dd id="HelperSendTotal">' +
      getValue('currentGoldSentTotal')
        .toString()
        .replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,') +
      '</dd>');
  $('#HelperSendGold').click(doSendGold);
}

function updateSendGoldOnWorld(data) { // jQuery
  if (data.player && getValue('sendGoldonWorld')) {
    $('#HelperSendTotal')
      .html(getValue('currentGoldSentTotal')
        .toString()
        .replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,'));
    if (parseInt(data.player.gold, 10) >
      getValue('goldAmount')) {
      $('#statbar-gold').css('background-color', 'red');
    } else {
      $('#statbar-gold').css('background-color', 'inherit');
    }
  }
}

var expandMenuOnKeyPress;

function movePage(dir) { // Legacy
  var dirButton = findNode('//input[@value="' + dir + '"]');
  if (!dirButton) {return;}
  var url = dirButton.getAttribute('onClick');
  url = url.replace(/^[^']*'/m, '').replace(/';$/m, '');
  location.href = url;
}

function changeCombatSet(responseText, itemIndex) { // jQuery.min
  var doc = createDocument(responseText);

  var cbsSelect = doc.querySelector(
    '#profileCombatSetDiv select[name="combatSetId"]');

  // find the combat set id value
  var allItems = cbsSelect.getElementsByTagName('option');
  if (itemIndex >= allItems.length) {return;}
  var cbsIndex = allItems[itemIndex].value;

  retryAjax({
    url: 'index.php',
    data: {
      cmd: 'profile',
      subcmd: 'managecombatset',
      combatSetId: cbsIndex,
      submit: 'Use'
    },
    success: function() {
      if (expandMenuOnKeyPress) {
        localStorage.setItem('hcs.nav.openIndex', '2');
      }
      location.href = 'index.php?cmd=profile';
    }
  });
}

function doRepair() {
  // do not use repair link for new map
  if (!document.getElementById('worldPage')) {
    location.href = 'index.php?cmd=blacksmith&subcmd=repairall&fromworld=1';
  }
}

function createGroup() {
  if (expandMenuOnKeyPress) {localStorage.setItem('hcs.nav.openIndex', '4');}
  location.href =
    'index.php?cmd=guild&subcmd=groups&subcmd2=create&fromworld=1';
}

function logPage() {
  if (expandMenuOnKeyPress) {localStorage.setItem('hcs.nav.openIndex', '2');}
  location.href = 'index.php?cmd=log';
}

function gotoGuild() {
  if (expandMenuOnKeyPress) {localStorage.setItem('hcs.nav.openIndex', '4');}
  location.href = 'index.php?cmd=guild&subcmd=manage';
}

function joinAllGroup() {
  if (expandMenuOnKeyPress) {localStorage.setItem('hcs.nav.openIndex', '4');}
  if (!getValue('enableMaxGroupSizeToJoin')) {
    location.href = 'index.php?cmd=guild&subcmd=groups&subcmd2=joinall';
  } else {
    location.href =
      'index.php?cmd=guild&subcmd=groups&subcmd2=joinallgroupsundersize';
  }
}

function backpack$1() {
  if (expandMenuOnKeyPress) {localStorage.setItem('hcs.nav.openIndex', '2');}
  location.href = 'index.php?cmd=profile&subcmd=dropitems';
}

function fastWearMgr() {
  jQueryDialog(insertQuickWear);
}

function profile() {
  if (expandMenuOnKeyPress) {localStorage.setItem('hcs.nav.openIndex', '2');}
  location.href = 'index.php?cmd=profile';
}

function combatSetKey(itemIndex) {
  retryAjax('index.php?cmd=profile').done(function(data) {
    changeCombatSet(data, itemIndex);
  });
}

var keyDict = {
  '33': {fn: combatSetKey, arg: 1}, // Shift+1
  '64': {fn: combatSetKey, arg: 2}, // Shift+2
  '34': {fn: combatSetKey, arg: 2}, // Shift+2 -- for UK keyboards, I think
  '35': {fn: combatSetKey, arg: 3}, // Shift+3
  '36': {fn: combatSetKey, arg: 4}, // Shift+4
  '37': {fn: combatSetKey, arg: 5}, // Shift+5
  '94': {fn: combatSetKey, arg: 6}, // Shift+6
  '38': {fn: combatSetKey, arg: 7}, // Shift+7
  '42': {fn: combatSetKey, arg: 8}, // Shift+8
  '40': {fn: combatSetKey, arg: 9}, // Shift+9
  '60': {fn: movePage, arg: '<'}, // move to prev page [<]
  '62': {fn: movePage, arg: '>'}, // move to next page [>]
  '71': {fn: createGroup}, // create group [G]
  '76': {fn: logPage}, // Log Page [L]
  '98': {fn: backpack$1}, // backpack [b]
  '103': {fn: gotoGuild}, // go to guild [g]
  '106': {fn: joinAllGroup}, // join all group [j]
  '108': {fn: logPage}, // Log Page [l]
  '112': {fn: profile}, // profile [p]
  '114': {fn: doRepair}, // repair [r]
  '118': {fn: fastWearMgr}, // fast wear manager [v]
  '121': {fn: doSendGold}, // fast send gold [y]
  '163': {fn: combatSetKey, arg: 3}, // Shift+3 -- for UK keyboards
};

function handleKey(r) {
  if (r in keyDict) {
    keyDict[r].fn(keyDict[r].arg);
  }
}

var bailOut = [
  function(evt) {
    return evt.target.tagName !== 'HTML' && evt.target.tagName !== 'BODY';
  },
  /* ignore control, alt and meta keys
  (I think meta is the command key in Macintoshes) */
  function(evt) {return evt.ctrlKey;},
  function(evt) {return evt.metaKey;},
  function(evt) {return evt.altKey;}
];

function keyPress(evt) {
  for (var i = 0; i < bailOut.length; i += 1) {
    if (bailOut[i](evt)) {return;}
  }
  handleKey(evt.charCode);
}

function replaceKeyHandler() {
  expandMenuOnKeyPress = getValue('expandMenuOnKeyPress');
  document.onkeypress = keyPress;
}

function statbarWrapper(href, id) {
  var myWrapper = createAnchor({href: href});
  var character = document.getElementById(id);
  var statWrapper = character.parentNode;
  myWrapper.appendChild(character);
  statWrapper.insertBefore(myWrapper, statWrapper.firstChild);
  myWrapper.addEventListener('click', function(evt) {
    evt.stopPropagation();
  }, true);
}

function statbar() {
  statbarWrapper('index.php?cmd=profile', 'statbar-character');
  statbarWrapper('index.php?cmd=points&subcmd=reserve', 'statbar-stamina');
  statbarWrapper('index.php?cmd=blacksmith', 'statbar-equipment');
  statbarWrapper('index.php?cmd=profile&subcmd=dropitems', 'statbar-inventory');
  statbarWrapper('index.php?cmd=points', 'statbar-fsp');
  statbarWrapper('index.php?cmd=bank', 'statbar-gold');
}

function updateHCSQuickBuffLinks(selector) {
  Array.prototype.forEach.call(document.querySelectorAll(selector),
    function(el) {
      el.href = el.getAttribute('href').replace(/, 500/g, ', 1000'); // getAttribute neccessary for FF
    }
  );
}

function hideElement(el) {
  el.classList.add('fshHide');
}

function hideNodeList(nodeList) {
  Array.prototype.forEach.call(nodeList, hideElement);
}

function hideQuerySelectorAll(parent, selector) { // Native - probably wrong
  hideNodeList(parent.querySelectorAll(selector));
}

function contactColour(el, obj) {
  var onMouseOver = el.getAttribute('data-tipped');
  var lastActivityMinutes =
    /Last Activity:<\/td><td>(\d+) mins/.exec(onMouseOver)[1];
  if (lastActivityMinutes < 2) {
    el.classList.add(obj.l1);
  } else if (lastActivityMinutes < 5) {
    el.classList.add(obj.l2);
  } else {
    el.classList.add(obj.l3);
  }
}

function guildColour(el) {
  contactColour(el, {
    l1: 'fshGreen',
    l2: 'fshWhite',
    l3: 'fshGrey'
  });
}

function alliesColour(el) {
  contactColour(el, {
    l1: 'fshDodgerBlue',
    l2: 'fshLightSkyBlue',
    l3: 'fshPowderBlue'
  });
}

var hideBtn = [
  {
    condition: function() {return calf.hideGuildInfoTrade;},
    guildSelector: '#guild-minibox-action-trade',
    allySelector: '#online-allies-action-trade'
  },
  {
    condition: function() {return calf.hideGuildInfoSecureTrade;},
    guildSelector: '#guild-minibox-action-secure-trade',
    allySelector: '#online-allies-action-secure-trade'
  },
  {
    condition: function() {return calf.hideGuildInfoBuff;},
    guildSelector: '#guild-minibox-action-quickbuff',
    allySelector: '#online-allies-action-quickbuff'
  },
  {
    condition: function() {return calf.hideGuildInfoMessage;},
    guildSelector: '#guild-minibox-action-send-message',
    allySelector: '#online-allies-action-send-message'
  }
];

function doHideBtn(context, selector) {
  hideBtn.forEach(function(el) {
    if (el.condition()) {
      hideQuerySelectorAll(context, el[selector]);
    }
  });
}

function addGuildInfoWidgets() {
  var guildMembrList = document.getElementById('minibox-guild-members-list');
  if (!guildMembrList) {return;} // list exists
  // hide guild info links
  doHideBtn(guildMembrList, 'guildSelector');
  if (calf.hideBuffSelected) {
    hideNodeList(
      guildMembrList.getElementsByClassName('guild-buff-check-on'));
    document.getElementById('guild-quick-buff').classList.add('fshHide');
  }
  // add coloring for offline time
  Array.prototype.forEach.call(
    guildMembrList.getElementsByClassName('player-name'), guildColour);
  Array.prototype.forEach.call(
    document.querySelectorAll('#pCR h4'),
    function(el) {
      if (el.textContent !== 'Chat') {return;}
      el.innerHTML = '<a href="index.php?cmd=guild&subcmd=chat">' +
        el.textContent + '</a>';
    }
  );
}

function addOnlineAlliesWidgets() {
  var onlineAlliesList = document.getElementById('minibox-allies-list');
  if (!onlineAlliesList) {return;}
  doHideBtn(onlineAlliesList, 'allySelector');
  if (calf.hideBuffSelected) {
    hideNodeList(
      onlineAlliesList.getElementsByClassName('ally-buff-check-on'));
    document.getElementById('ally-quick-buff').classList.add('fshHide');
  }
  // add coloring for offline time
  Array.prototype.forEach.call(
    onlineAlliesList.getElementsByClassName('player-name'), alliesColour);
}

var havePrayedMsg =
  '<span class="notification-icon"></span><p class="notification-content">' +
  'You are currently praying at the temple.</p>';
var godsNotification =
  '<li class="notification">' +
  '<span id="helperPrayToGods" class="fastPray">' +
  '<table><tbody><tr><td>' +
  '<span class="tip-static" data-tipped="Pray to Sahria" ' +
  'style="background-image: url(\'' + imageServer +
  '/temple/0.gif\');" praytype="0"></span></td><td>' +
  '<span class="tip-static" data-tipped="Pray to Osverin" ' +
  'style="background-image: url(\'' + imageServer +
  '/temple/1.gif\');" praytype="1"></span></td></tr><tr><td>' +
  '<span class="tip-static" data-tipped="Pray to Gurgriss" ' +
  'style="background-image: url(\'' + imageServer +
  '/temple/2.gif\');" praytype="2"></span></td><td>' +
  '<span class="tip-static" data-tipped="Pray to Lindarsil" ' +
  'style="background-image: url(\'' + imageServer +
  '/temple/3.gif\');" praytype="3"></span></td></tr></tbody></table>' +
  '<a href="index.php?cmd=temple">' +
  '<p class="notification-content">Bow down to the gods</p>' +
  '</a></span></li>';
var goldUpgradeMsg =
  '<li class="notification"><a href="index.php?cmd=points&type=1"><span' +
  ' class="notification-icon"></span><p class="notification-content">Up' +
  'grade stamina with gold</p></a></li>';

function havePrayed() {
  document.getElementById('helperPrayToGods').outerHTML = havePrayedMsg;
  setValue('needToPray', false);
  setValue('lastTempleCheck', new Date()
    .setUTCHours(23, 59, 59, 999) + 1); // Midnight
}

function prayToGods(e) { // jQuery
  var myGod = e.target.getAttribute('praytype');
  if (!myGod) {return;}
  document.getElementById('helperPrayToGods').removeEventListener('click',
    prayToGods);
  retryAjax('index.php?cmd=temple&subcmd=pray&type=' + myGod)
    .done(havePrayed);
  $(e.target).qtip('hide');
}

function displayDisconnectedFromGodsMessage() {
  document.getElementById('notifications').insertAdjacentHTML('afterbegin',
    godsNotification);
  document.getElementById('helperPrayToGods').addEventListener('click',
    prayToGods);
}

function displayUpgradeMsg() {
  if (location.search.indexOf('cmd=points&type=1') === -1) {
    document.getElementById('notifications').insertAdjacentHTML('afterbegin',
      goldUpgradeMsg);
  }
}

function findNewGroup(el) {
  if (el.textContent.indexOf('New attack group created.') === -1) {return;}
  var groupJoinHTML = '';
  if (!getValue('enableMaxGroupSizeToJoin')) {
    groupJoinHTML = '<a href="index.php?cmd=guild&subcmd=groups&' +
      'subcmd2=joinall"><span class="notification-icon"></span>' +
      '<p class="notification-content">Join all attack groups.</p></a>';
  } else {
    var maxGroupSizeToJoin = getValue('maxGroupSizeToJoin');
    groupJoinHTML = '<a href="index.php?cmd=guild&subcmd=groups&' +
      'subcmd2=joinallgroupsundersize"><span class="notification-icon">' +
      '</span><p class="notification-content">Join all attack groups ' +
      'less than size ' + maxGroupSizeToJoin + '.</p></a>';
  }
  el.insertAdjacentHTML('afterend',
    '<li class="notification">' + groupJoinHTML + '</li>');
}

function templeAlertEnabled(responseText) {
  var checkNeedToPray;
  var doc;
  if (calf.cmd !== 'temple') {
    doc = createDocument(responseText);
  } else {
    doc = document;
  }
  checkNeedToPray = doc.querySelector('input[value="Pray to Osverin"]');
  var needToPray = false;
  if (checkNeedToPray) {
    displayDisconnectedFromGodsMessage();
    needToPray = true;
  }
  setValue('needToPray', needToPray);
  setValue('lastTempleCheck', new Date()
    .setUTCHours(23, 59, 59, 999) + 1); // midnight
}

function parseTemplePage(responseText) {
  if (calf.enableTempleAlert) {templeAlertEnabled(responseText);}
}

function checkLastUpdate(templeAlertLastUpdate) {
  return !templeAlertLastUpdate || now > templeAlertLastUpdate;
}

function doWeNeedToParse() {
  if (checkLastUpdate(getValue('lastTempleCheck'))) {return true;}
  if (getValue('needToPray')) {
    displayDisconnectedFromGodsMessage();
  }
  return false;
}

function injectTempleAlert() { // jQuery
  // Checks to see if the temple is open for business.
  if (calf.cmd === 'temple') {return;}
  if (doWeNeedToParse()) {
    retryAjax('index.php?cmd=temple').done(parseTemplePage);
  }
}

function findDoc(data) {
  if (location.search.indexOf('cmd=points&type=1') === -1) {
    return createDocument(data);
  }
  document.querySelectorAll('#pCC input[name="quantity"]')[1].value = '10';
  return document;
}

function parseGoldUpgrades(data) {
  if (!calf.enableUpgradeAlert) {return;}
  var doc = findDoc(data);
  var limit = doc.getElementById('pCC').getElementsByTagName('TABLE')[0]
    .rows[3].cells[2];
  var checkDoneUpgrade = limit.textContent.split(' / ');
  if (checkDoneUpgrade[0] !== checkDoneUpgrade[1]) {
    displayUpgradeMsg();
    setValue('needToDoUpgrade', true);
  } else {
    setValue('needToDoUpgrade', false);
    setValue('lastUpgradeCheck',
      Date.parse(limit.nextElementSibling.textContent + ' GMT'));
  }
}

function notUpgradesPage() {
  var needToDoUpgrade = getValue('needToDoUpgrade');
  if (needToDoUpgrade) {
    displayUpgradeMsg();
    return;
  }
  var lastUpgradeCheck = getValue('lastUpgradeCheck');
  if (lastUpgradeCheck && now < lastUpgradeCheck) {return;}
  retryAjax('index.php?cmd=points&type=1').done(function(data) {
    add(3, parseGoldUpgrades, [data]);
  });
}

function injectUpgradeAlert() { // jQuery
  if (location.search.indexOf('cmd=points&type=1') === -1) {notUpgradesPage();}
}

function injectJoinAllLink() {
  var nodeList = document.getElementById('pCL').getElementsByTagName('li');
  Array.prototype.forEach.call(nodeList, findNewGroup);
}

var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

function formatShortDate(aDate) {
  var yyyy = aDate.getFullYear();
  var dd = padZ(aDate.getDate());
  var ddd = days[aDate.getDay()];
  var month = months[aDate.getMonth()];
  var hh = padZ(aDate.getHours());
  var mm = padZ(aDate.getMinutes());
  return hh + ':' + mm + ' ' + ddd + ' ' + dd + '/' + month + '/' + yyyy;
}

function timeBox(nextGainTime, hrsToGo) {
  var nextGain = /([0-9]+)m ([0-9]+)s/.exec(nextGainTime);
  if (!nextGain) {return;}
  return '<dd>' +
    formatShortDate(new Date(now +
    (hrsToGo * 60 * 60 + parseInt(nextGain[1], 10) * 60 +
    parseInt(nextGain[2], 10)) * 1000)) + '</dd>';
}

function injectStaminaCalculator() {
  var nextGain = document.getElementsByClassName('stat-stamina-nextGain');
  if (!nextGain) {return;}
  var staminaMouseover =
    document.getElementById('statbar-stamina-tooltip-stamina');
  var stamVals = /([,0-9]+)\s\/\s([,0-9]+)/.exec(
    staminaMouseover.getElementsByClassName('stat-name')[0]
      .nextElementSibling.textContent
  );
  staminaMouseover.insertAdjacentHTML('beforeend',
    '<dt class="stat-stamina-nextHuntTime">Max Stam At</dt>' +
    timeBox(
      nextGain[0].nextElementSibling.textContent,
      // get the max hours to still be inside stamina maximum
      Math.floor(
        (intValue(stamVals[2]) -
        intValue(stamVals[1])) /
        intValue(
          document.getElementsByClassName('stat-stamina-gainPerHour')[0]
            .nextElementSibling.textContent
        )
      )
    )
  );
}

function injectLevelupCalculator() {
  var nextGain = document.getElementsByClassName('stat-xp-nextGain');
  if (!nextGain) {return;}
  document.getElementById('statbar-level-tooltip-general')
    .insertAdjacentHTML('beforeend',
      '<dt class="stat-xp-nextLevel">Next Level At</dt>' +
      timeBox(
        nextGain[0].nextElementSibling.textContent,
        Math.ceil(
          intValue(
            document.getElementsByClassName('stat-xp-remaining')[0]
              .nextElementSibling.textContent
          ) /
          intValue(
            document.getElementsByClassName('stat-xp-gainPerHour')[0]
              .nextElementSibling.textContent
          )
        )
      )
    );
}

function gameHelpLink() {
  var nodeList = document.querySelectorAll('#pCR h3');
  Array.prototype.forEach.call(nodeList, function(el) {
    if (el.textContent === 'Game Help') {
      el.innerHTML = '<a href="index.php?cmd=settings">Game Help</a>';
    }
  });
}

function getEnvVars() {
  calf.enableAllyOnlineList = getValue('enableAllyOnlineList');
  calf.enableEnemyOnlineList = getValue('enableEnemyOnlineList');
  calf.enableGuildInfoWidgets = getValue('enableGuildInfoWidgets');
  calf.enableOnlineAlliesWidgets =
    getValue('enableOnlineAlliesWidgets');
  calf.hideGuildInfoTrade = getValue('hideGuildInfoTrade');
  calf.hideGuildInfoSecureTrade = getValue('hideGuildInfoSecureTrade');
  calf.hideGuildInfoBuff = getValue('hideGuildInfoBuff');
  calf.hideGuildInfoMessage = getValue('hideGuildInfoMessage');
  calf.hideBuffSelected = getValue('hideBuffSelected');
  calf.enableTempleAlert = getValue('enableTempleAlert');
  calf.enableUpgradeAlert = getValue('enableUpgradeAlert');
  calf.enableComposingAlert = getValue('enableComposingAlert');
  calf.enableActiveBountyList = getValue('enableActiveBountyList');
  calf.enableWantedList = getValue('enableWantedList');
  calf.allyEnemyOnlineRefreshTime =
    getValue('allyEnemyOnlineRefreshTime') * 1000;
}

function callAllyEnemy() {
  if (calf.enableAllyOnlineList ||
      calf.enableEnemyOnlineList) {
    add(3, prepareAllyEnemyList);
  }
}

function callBounties() {
  if (calf.enableWantedList ||
      calf.enableActiveBountyList) {
    add(3, prepareBountyData);
  }
}

function callGuildInfo() {
  if (calf.enableGuildInfoWidgets) {
    add(3, addGuildInfoWidgets);
  }
}

function callAllies() {
  if (calf.enableOnlineAlliesWidgets) {
    add(3, addOnlineAlliesWidgets);
  }
}

function callTemple() {
  if (calf.enableTempleAlert) {
    add(3, injectTempleAlert);
  }
}

function callUpgrade() {
  if (calf.enableUpgradeAlert) {
    add(3, injectUpgradeAlert);
  }
}

function callComposing() {
  if (calf.enableComposingAlert) {
    add(3, injectComposeAlert);
  }
}

function conditional() {
  callAllyEnemy();
  callBounties();
  callGuildInfo();
  callAllies();
  callTemple();
  callUpgrade();
  callComposing();
}

function navMenu() { // jQuery
  var myNav = $('#nav').data('nav');
  if (!myNav) {return;}
  var oldSave = myNav._saveState;
  myNav._saveState = function(_id) {
    var id = _id;
    var myHeight = $('li.nav-level-0', '#nav').eq(id).find('ul').height();
    if (myHeight === 0) {id = -1;}
    oldSave.call(myNav, id);
  };
}

function moveRHSBoxUpOnRHS(title) {
  document.getElementById('pCR').insertAdjacentElement('afterbegin',
    document.getElementById(title));
}

function moveRHSBoxToLHS(title) {
  var boxDiv = document.getElementById(title);
  boxDiv.classList.add('pCR');
  document.getElementById('pCL').appendChild(boxDiv);
}

function doMoveGuildList() {
  if (getValue('moveGuildList')) {
    add(3, moveRHSBoxUpOnRHS, ['minibox-guild']);
  }
}

function doMoveAllyList() {
  if (getValue('moveOnlineAlliesList')) {
    add(3, moveRHSBoxUpOnRHS, ['minibox-allies']);
  }
}

function doMoveFsBox() {
  if (getValue('moveFSBox')) {
    add(3, moveRHSBoxToLHS, ['minibox-fsbox']);
  }
}

function fixOnlineGuildBuffLinks() {
  updateHCSQuickBuffLinks(
    '#minibox-guild-members-list #guild-minibox-action-quickbuff');
  updateHCSQuickBuffLinks(
    '#minibox-allies-list #online-allies-action-quickbuff');
}

function notHuntMode() {
  if (calf.huntingMode) {return;}
  // move boxes in opposite order that you want them to appear.
  doMoveGuildList();
  doMoveAllyList();
  doMoveFsBox();

  getEnvVars();
  conditional();

  add(3, navMenu);
  add(3, statbar);

  add(3, injectStaminaCalculator);
  add(3, injectLevelupCalculator);

  add(3, injectMenu);

  if (getValue('fsboxlog')) {
    add(3, injectFSBoxLog);
  }
  add(3, fixOnlineGuildBuffLinks);

  add(3, injectJoinAllLink);
  add(3, changeGuildLogHREF);
  add(3, injectHomePageTwoLink);

  add(3, injectQuickMsgDialogJQ);

  add(4, guildActivity);
}

function prepareEnv() {
  if (getValue('gameHelpLink')) {
    add(3, gameHelpLink);
  }
  calf.huntingMode = getValue('huntingMode');
  add(3, replaceKeyHandler);
  notHuntMode();
  if (!getValue('hideHelperMenu')) {
    add(3, injectHelperMenu);
  }
}

function lookForHcsData() {
  var hcsData = document.getElementById('html');
  if (hcsData && JSON.parse(hcsData.getAttribute('data-hcs'))['new-ui']) {
    prepareEnv();
  }
}

function updateHistoryCharacters() { // Legacy
  var textArea = findNode('//textarea[@id="textInputBox"]');
  var previewArea = findNode('//span[@findme="biopreview"]');
  var bioPreviewHTML = convertTextToHtml(textArea.value);
  previewArea.innerHTML = bioPreviewHTML;
}

function addHistoryWidgets() { // Legacy
  var textArea = findNode('//textarea[@name="history"]');
  if (!textArea) {return;}
  textArea.value = textArea.value.replace(/<br \/>/ig, '');
  var textAreaDiv = textArea.parentNode;
  var bioPreviewHTML = convertTextToHtml(textArea.value);
  var newDiv = createDiv({
    innerHTML: '<table align="center" width="325" border="1"><tbody>' +
    '<tr><td style="text-align:center;color:#7D2252;' +
    'background-color:#CD9E4B">Preview</td></tr>' +
    '<tr><td align="left" width="325"><span style="font-size:small;" ' +
    'findme="biopreview">' + bioPreviewHTML +
    '</span></td></tr></tbody></table>'
  });
  textAreaDiv.appendChild(newDiv);
  document.getElementById('textInputBox').addEventListener('keyup',
    updateHistoryCharacters);
}

function allowBack() {
  document.querySelector('input[type="submit"]')
    .addEventListener('click', function(evt) {
      evt.preventDefault();
      var url = 'index.php?';
      Array.prototype.forEach.call(
        document.querySelectorAll('input:not([type="submit"])' +
          ':not([type="checkbox"]), select, input[type="checkbox"]:checked'),
        function(e) {url += '&' + e.name + '=' + e.value;});
      window.location = url;
    });
}

var moveOptions =
  '<td colspan=3 ' +
  'style="padding-top: 2px;padding-bottom: 2px;">' +
  '<select style="max-width: 50px;">' +
  '<option value="x">Basic Attack</option>' +
  '<option value="0">Block</option>' +
  '<option value="1">Counter Attack</option>' +
  '<option value="2">Critical Hit</option>' +
  '<option value="3">Defend</option>' +
  '<option value="4">Deflect</option>' +
  '<option value="5">Dodge</option>' +
  '<option value="6">Lunge</option>' +
  '<option value="7">Power Attack</option>' +
  '<option value="8">Spin Attack</option>' +
  '<option value="9">Piercing Strike</option>' +
  '<option value="10">Crush</option>' +
  '<option value="11">Weaken</option>' +
  '<option value="12">Ice Shard</option>' +
  '<option value="13">Fire Blast</option>' +
  '<option value="14">Poison</option>' +
  '</select></td>';
var tableOpts = {
  paging: false,
  info: false,
  order: [[3, 'asc'], [0, 'asc']],
  columnDefs: [
    {orderable: false, targets: [9]}
  ],
  stateSave: true,
  stateDuration: 0
};
var arenaFilter =
  '<table width="100%"><tbody><tr><td>' +
  '<span class="fshBlue"><input id="fshHideMoves" type="checkbox">' +
  '&nbsp;Hide Matches for Completed Moves</span></td><td align="right">' +
  '<span class="fshBlue">Min lvl:&nbsp;<input id="fshMinLvl" size="5">' +
  '&nbsp;Max lvl:&nbsp;<input id="fshMaxLvl" size="5">&nbsp;&nbsp;' +
  '<input id="fshReset" class="custombutton" type="button" ' +
  'value="Reset"></span></td></tr></tbody></table>';

function dontPost(e) { // jQuery
  e.preventDefault();
  var self = $(e.target);
  var pvpId = self.prev().val();
  var subcmd = self.prev().prev().val();
  window.location = 'index.php?cmd=arena&subcmd=' + subcmd +
    '&pvp_id=' + pvpId;
}

function gotoPage(pageId) {
  window.location = 'index.php?cmd=arena&subcmd=completed&page=' + pageId;
}

function completedArenas() { // jQuery
  var prevButton = $('#pCC input[value="<"]');
  var nextButton = $('#pCC input[value=">"]');
  if (prevButton.length === 1) {
    var startButton = $('<input value="<<" type="button">');
    prevButton.before(startButton).before('&nbsp;');
    startButton.click(function() {gotoPage(1);});
  }
  if (nextButton.length === 1) {
    var lastPage = $('#pCC input[value="Go"]').closest('td').prev().text()
      .replace(/\D/g, '');
    var finishButton = $('<input value=">>" type="button">');
    nextButton.after(finishButton).after('&nbsp;');
    finishButton.click(function() {gotoPage(lastPage);});
  }
  $('#pCC input[value="View"]').click(dontPost);
}

function rekeyInventory(data) {
  data.items = data.items.reduce(function(prev, curr) {
    if (curr.is_in_st) {prev.fshHasST = true;}
    prev[curr.inv_id] = curr;
    return prev;
  }, {});
  return data;
}

function getInventoryById() {
  return getInventory().pipe(rekeyInventory);
}

var inv;
var target;

function selectPerf() {
  var items = document.getElementById(target + '-items')
    .getElementsByClassName('selectable-item');
  if (items.length === 0) {return;}
  Array.prototype.forEach.call(items, function(e) {
    var thisItem = e.id.replace(target + '-item-', '');
    if (inv[thisItem].craft === 'Perfect') {e.click();}
  });
}

function drawFilters(data) {
  inv = data.items;
  var buttonDiv = createDiv({className: 'fshAC'});
  buttonDiv.insertAdjacentHTML('beforeend',
    '<button class="fshBl">Perfect</button>');
  pCC.appendChild(buttonDiv);
  buttonDiv.addEventListener('click', selectPerf);
}

function perfFilter(loc) { // jQuery.min
  target = loc;
  getInventoryById().done(drawFilters);
}

var disableBreakdownPrompts;
var selectedList = [];

function showComposingMessage(message, bgcolor) { // jQuery
  $('#composingMessageContainer').remove();

  $('#composingMessage')
    .append(
      $('<div/>', {
        id: 'composingMessageContainer',
        width: '100%'
      })
        .append(
          $('<div/>', {id: 'composingMessageText'})
            .css({
              width: '90%',
              'text-align': 'center',
              'background-color': bgcolor,
              color: 'rgb(255, 255, 255)',
              margin: '5px auto 5px auto',
              padding: '2px'
            })
            .html(message)
        )
    );

  setTimeout(function() {
    var self = $('#composingMessageContainer');
    self.animate({opacity: 0}, 500, function() {
      self.animate({height: 0}, 500, function() {
        self.hide();
      });
    });
  }, 5000);
}

function breakItems() { // jQuery.min
  return retryAjax({
    type: 'POST',
    url: 'index.php?cmd=composing&subcmd=dobreakdown',
    data: {'item_list[]': selectedList},
    dataType: 'json'
  }).done(function(response) {
    if (response.error !== 0) {
      showComposingMessage('Error: ' + response.msg, 'rgb(164, 28, 28)');
    }
    window.location = 'index.php?cmd=composing&subcmd=breakdown&m=1';
  });
}

function breakEvt(evt) {
  if (disableBreakdownPrompts &&
      evt.target.id === 'breakdown-selected-items') {
    evt.stopPropagation();
    if (selectedList.length === 0) {
      showComposingMessage('Error: No items selected.', 'rgb(164, 28, 28)');
      return;
    }
    breakItems();
  }
}

function itemClick(evt) {
  if (!evt.target.classList.contains('selectable-item')) {return;}
  var myItem = evt.target.id.replace('composing-item-', '');
  var itemPos = selectedList.indexOf(myItem);
  if (itemPos === -1) {
    selectedList.push(myItem);
  } else {
    selectedList.splice(itemPos, 1);
  }
}

function togglePref$1() {
  disableBreakdownPrompts = !disableBreakdownPrompts;
  setValue('disableBreakdownPrompts', disableBreakdownPrompts);
}

function composingBreakdown() {
  perfFilter('composing');
  disableBreakdownPrompts = getValue('disableBreakdownPrompts');
  document.getElementById('breakdown-selected-items').parentNode
    .addEventListener('click', breakEvt, true);
  document.getElementById('composing-items')
    .addEventListener('click', itemClick);
  pCC.insertAdjacentHTML('beforeend',
    '<table class="fshTblCenter"><tbody>' +
    simpleCheckbox('disableBreakdownPrompts') +
    '</tbody></table>');
  document.getElementById('disableBreakdownPrompts')
    .addEventListener('click', togglePref$1);
}

function globalQuest() {
  var topTable = pCC.getElementsByTagName('table')[3];
  for (var i = 2; i < topTable.rows.length; i += 4) {
    var aCell = topTable.rows[i].cells[1];
    aCell.innerHTML = '<a href="index.php?cmd=findplayer' +
      '&search_show_first=1&search_active=1&search_username=' +
      aCell.textContent + '">' + aCell.textContent + '</a>';
  }
}

function closestTable(el) {
  if (el.tagName === 'TABLE') {return el;}
  return closestTable(el.parentNode);
}

function translateReturnInfo(data) {
  var info = infoBox(data);
  var _r = {r: 1, m: info};
  if (info === 'Item was transferred to the guild store!') {
    _r = {r: 0, m: ''};
  }
  return _r;
}

function guildMailboxTake(href) {
  return retryAjax({url: href}).pipe(translateReturnInfo).done(dialog);
}

function takeResult(self, data) {
  if (data.r === 0) {
    closestTable(self).nextElementSibling.rows[0].cells[0].innerHTML =
      '<span class="fshGreen">Taken</span>';
  }
}

function guildMailboxEvent(e) {
  var self = e.target;
  if (self.tagName === 'IMG') {
    e.preventDefault();
    var anchor = self.parentNode.href;
    guildMailboxTake(anchor).done(takeResult.bind(null, self));
  }
  if (self.className === 'sendLink') {
    var nodeList = pCC.getElementsByTagName('img');
    Array.prototype.forEach.call(nodeList, function(el) {el.click();});
  }
}

function guildMailbox() {
  pCC.addEventListener('click', guildMailboxEvent);
  document.querySelector('#pCC td[height="25"]')
    .insertAdjacentHTML('beforeend',
      '<span class="sendLink">Take All</span>');
}

function currentGuildId() {
  var _guildId;
  var nodeList = document.body.getElementsByTagName('script');
  Array.prototype.forEach.call(nodeList, function getGuildId(el) {
    var match = el.textContent.match(/\s+guildId: ([0-9]+),/);
    if (match) {_guildId = parseInt(match[1], 10);}
  });
  return _guildId;
}

function getGuild(guildId) {
  return retryAjax({
    dataType: 'json',
    url: 'index.php',
    data: {
      cmd: 'export',
      subcmd: 'guild_members',
      guild_id: guildId
    }
  });
}

function addMembrListToForage(membrList) {
  getForage('fsh_membrList')
    .done(function saveMembrListInForage(data) {
      var oldMemList = data || {};
      setForage('fsh_membrList', $.extend(oldMemList, membrList));
    });
}

function getGuildMembers(guildId) {
  return getGuild(guildId).pipe(function membrListToHash(data) {
    var membrList = {};
    membrList[guildId] = {};
    membrList[guildId].lastUpdate = now;
    data.forEach(function memberToObject(ele) {
      membrList[guildId][ele.username] = ele;
    });
    return membrList;
  });
}

function getMembrListFromForage(guildId, membrList) {
  if (membrList && membrList[guildId] &&
      membrList[guildId].lastUpdate &&
      membrList[guildId].lastUpdate > now - 300000) {
    return membrList;
  }
  return getGuildMembers(guildId).done(addMembrListToForage);
}

function guildMembers(force, guildId) {
  if (force) {
    return getGuildMembers(guildId).done(addMembrListToForage);
  }
  return getForage('fsh_membrList')
    .pipe(getMembrListFromForage.bind(null, guildId));
}

function setHelperMembrList(guildId, membrList) {
  calf.membrList = membrList[guildId];
  return calf.membrList;
}

function getMembrList(force) {
  var guildId = currentGuildId();
  return guildMembers(force, guildId)
    .pipe(setHelperMembrList.bind(null, guildId));
}

var newSummary = {};
var advisorColumns = [
  {title: '<div class="fshBold">Member</div>'},
  {title: '<div class="fshBold">Lvl</div>', 'class': 'dt-center'},
  {title: '<div class="fshBold">Rank</div>', 'class': 'dt-center dt-nowrap'},
  {
    title: '<div class="fshBold">Gold From Deposits</div>',
    'class': 'dt-center'
  },
  {title: '<div class="fshBold">Gold From Tax</div>', 'class': 'dt-center'},
  {title: '<div class="fshBold">Gold Total</div>', 'class': 'dt-center'},
  {title: '<div class="fshBold">FSP</div>', 'class': 'dt-center'},
  {title: '<div class="fshBold">Skill Cast</div>', 'class': 'dt-center'},
  {title: '<div class="fshBold">Group Create</div>', 'class': 'dt-center'},
  {title: '<div class="fshBold">Group Join</div>', 'class': 'dt-center'},
  {title: '<div class="fshBold">Relic</div>', 'class': 'dt-center'},
  {title: '<div class="fshBold">XP Contrib</div>', 'class': 'dt-center'}
];
var membrList;
var list;
var data = [];

function doTable() { // jQuery
  $(list).dataTable({
    pageLength: 25,
    lengthMenu: [[25, 50, -1], [25, 50, 'All']],
    autoWidth: false,
    columns: advisorColumns,
    stateSave: true,
    stateDuration: 0
  });
}

function summaryLink() {
  var updateInput = pCC.getElementsByClassName('custombutton');
  if (!updateInput) {return;}
  updateInput[0].insertAdjacentHTML('afterend', '<span> <a href="index.php' +
    '?cmd=guild&subcmd=advisor&subcmd2=weekly">7-Day Summary</a></span>');
}

function playerName$2(f) {
  if (!membrList[f]) {return f;}
  return '<a href="index.php?cmd=profile&player_id=' +
    membrList[f].id + '">' + f + '</a>';
}

function playerLevel(f) {
  if (!membrList[f]) {return '';}
  return membrList[f].level;
}

function playerRank(f) {
  if (!membrList[f]) {return '';}
  return '<div class="fshAdvRank">' +
    membrList[f].rank_name + '</div>';
}

function injectAdvisorNew() {

  time('guildAdvisor.injectAdvisorNew');

  list = pCC.getElementsByTagName('TABLE')[1];
  if (!list) {return;}
  var totalRow = list.firstElementChild.lastElementChild;
  var totalCell = totalRow.firstElementChild;
  totalCell.className = 'fshRight';
  totalCell.setAttribute('colspan', '3');
  var tfoot = createTFoot();
  tfoot.insertAdjacentElement('beforeend', totalRow);
  list.className = 'fshXSmall hover';
  list.firstElementChild
    .removeChild(list.firstElementChild.firstElementChild);
  Array.prototype.forEach.call(list.rows, function(tr) {
    Array.prototype.forEach.call(tr.cells, function(td) {
      td.removeAttribute('bgcolor');
    });
    var tdOne = tr.cells[0];
    var username = tdOne.textContent.trim();
    tdOne.innerHTML = playerName$2(username);
    tdOne.insertAdjacentHTML('afterend', '<td>' + playerLevel(username) +
      '</td><td>' + playerRank(username) + '</td>');
  });
  list.insertAdjacentElement('beforeend', tfoot);
  add(3, doTable);
  summaryLink();

  timeEnd('guildAdvisor.injectAdvisorNew');

}

function returnAdvisorPage(e, response) {

  time('guildAdvisor.returnAdvisorPage' + e);

  list.lastElementChild.insertAdjacentHTML('beforeend', ' day ' + e + ',');
  var doc = createDocument(response);
  var table = doc.getElementById('pCC').firstElementChild
    .firstElementChild.lastElementChild.firstElementChild.firstElementChild;
  var tr = table.rows;
  Array.prototype.forEach.call(tr, function(el) {
    var tds = el.cells;
    var member = tds[0].textContent.trim();
    if (member === 'Member') {return;}
    newSummary[member] = fallback(newSummary[member], {});
    newSummary[member].deposit =
      fallback(newSummary[member].deposit, 0) +
      intValue(tds[1].textContent);
    newSummary[member].tax = fallback(newSummary[member].tax, 0) +
      intValue(tds[2].textContent);
    newSummary[member].total = fallback(newSummary[member].total, 0) +
      intValue(tds[3].textContent);
    newSummary[member].fsp = fallback(newSummary[member].fsp, 0) +
      intValue(tds[4].textContent);
    newSummary[member].skills = fallback(newSummary[member].skills, 0) +
      intValue(tds[5].textContent);
    newSummary[member].grpCrt = fallback(newSummary[member].grpCrt, 0) +
      intValue(tds[6].textContent);
    newSummary[member].grpJoin =
      fallback(newSummary[member].grpJoin, 0) +
      intValue(tds[7].textContent);
    newSummary[member].relics = fallback(newSummary[member].relics, 0) +
      intValue(tds[8].textContent);
    newSummary[member].contrib =
      fallback(newSummary[member].contrib, 0) +
      intValue(tds[9].textContent);
  });

  timeEnd('guildAdvisor.returnAdvisorPage' + e);

}

function getAdvisorPage(e) { // jQuery
  return retryAjax({
    url: 'index.php',
    data: {
      cmd: 'guild',
      subcmd: 'advisor',
      period: e
    }
  }).done(returnAdvisorPage.bind(null, e));
}

function displayAdvisor() { // jQuery

  time('guildAdvisor.displayAdvisor');

  list.className = 'fshXSmall hover';
  list.innerHTML = '<tfoot id="advTFoot"><tr><td class="fshRight" ' +
    'colspan="3">Total: </td><td><u>' +
    addCommas(newSummary['Total:'].deposit) + '</u></td><td><u>' +
    addCommas(newSummary['Total:'].tax) + '</u></td><td><u>' +
    addCommas(newSummary['Total:'].total) + '</u></td><td><u>' +
    addCommas(newSummary['Total:'].fsp) + '</u></td><td><u>' +
    addCommas(newSummary['Total:'].skills) + '</u></td><td><u>' +
    addCommas(newSummary['Total:'].grpCrt) + '</u></td><td><u>' +
    addCommas(newSummary['Total:'].grpJoin) + '</u></td><td><u>' +
    addCommas(newSummary['Total:'].relics) + '</u></td><td><u>' +
    addCommas(newSummary['Total:'].contrib) +
      '</u></td></tr></tfoot>';
  $(list).dataTable({
    data: data,
    pageLength: 25,
    lengthMenu: [[25, 50, -1], [25, 50, 'All']],
    autoWidth: false,
    columns: advisorColumns,
    stateSave: true,
    stateDuration: 0
  });

  timeEnd('guildAdvisor.displayAdvisor');

}

function addStats(f) {
  if (f === 'Total:') {return;}
  data.push([
    playerName$2(f),
    playerLevel(f),
    playerRank(f),
    addCommas(newSummary[f].deposit),
    addCommas(newSummary[f].tax),
    addCommas(newSummary[f].total),
    addCommas(newSummary[f].fsp),
    addCommas(newSummary[f].skills),
    addCommas(newSummary[f].grpCrt),
    addCommas(newSummary[f].grpJoin),
    addCommas(newSummary[f].relics),
    addCommas(newSummary[f].contrib),
  ]);
}

function addAdvisorPages() {
  Object.keys(newSummary).forEach(addStats);
  add(3, displayAdvisor);
}

function injectAdvisorWeekly() { // jQuery

  time('guildAdvisor.injectAdvisorWeekly');

  list = pCC.firstElementChild.firstElementChild
    .lastElementChild.firstElementChild.firstElementChild;
  if (!list) {return;}
  list.innerHTML = '<span class="fshCurveBtn" style="background-image: ' +
    'url(\'' + imageServer +
    '/world/actionLoadingSpinner.gif\');"></span>' +
    '<span class="fshSpinnerMsg">&nbsp;Retrieving daily data ...</span>';

  $.when(
    getMembrList(false)
      .done(function(response) {
        membrList = response;
      }),
    getAdvisorPage(1),
    getAdvisorPage(2),
    getAdvisorPage(3),
    getAdvisorPage(4),
    getAdvisorPage(5),
    getAdvisorPage(6),
    getAdvisorPage(7)
  ).done(function() {
    add(3, addAdvisorPages);
  });

  timeEnd('guildAdvisor.injectAdvisorWeekly');

}

function injectAdvisor() {
  if (calf.subcmd2 === 'weekly') {
    injectAdvisorWeekly();
  } else {
    getMembrList(false).done(function(response) {
      membrList = response;
      add(3, injectAdvisorNew);
    });
  }
}

var tabs;
var theTables;
var opts;
var oldIds;

function changeLvls() { // jQuery
  var minLvl = parseInt($('#fshMinLvl').val(), 10);
  var maxLvl = parseInt($('#fshMaxLvl').val(), 10);
  if (!isNaN(minLvl) && !isNaN(maxLvl)) {
    opts = opts || {};
    opts.minLvl = minLvl;
    opts.maxLvl = maxLvl;
    setForage('fsh_arena', opts);
    $('#arenaTypeTabs table[width="635"]').DataTable().draw();
  }
}

function resetLvls() { // jQuery
  opts = opts || {};
  opts.minLvl = defaults.arenaMinLvl;
  opts.maxLvl = defaults.arenaMaxLvl;
  setForage('fsh_arena', opts);
  $('#fshMinLvl').val(opts.minLvl);
  $('#fshMaxLvl').val(opts.maxLvl);
  $('#arenaTypeTabs table[width="635"]').DataTable().draw();
}

function hideMoves(evt) { // jQuery
  opts = opts || {};
  opts.hideMoves = evt.target.checked;
  setForage('fsh_arena', opts);
  $('.moveMax').toggle(!evt.target.checked);
}

function sortHandler(evt) { // jQuery
  var self = $(evt.target).closest('td');
  var table = self.closest('table').DataTable();
  var myCol = self.index();
  var classes = self.attr('class');
  var test = /sorting([^\s]+)/.exec(classes);
  var sortOrder = 'desc';
  if (test && test[1] === '_desc') {sortOrder = 'asc';}
  if (myCol !== 3) {
    table.order([3, 'asc'], [myCol, sortOrder]).draw();
  } else {
    table.order([3, sortOrder]).draw();
  }
}

function hideMovesCheckbox(aTable) { // jQuery
  var fshHideMoves = $('#fshHideMoves', aTable);
  if (opts && 'hideMoves' in opts) {
    fshHideMoves.prop('checked', opts.hideMoves);
    $('.moveMax').toggle(!opts.hideMoves);
  }
  fshHideMoves.click(hideMoves);
}

function minLvlValue(aTable) { // jQuery
  var fshMinLvl = $('#fshMinLvl', aTable);
  if (opts && 'minLvl' in opts) {
    fshMinLvl.val(opts.minLvl);
  } else {
    fshMinLvl.val(defaults.arenaMinLvl);
  }
}

function maxLvlValue(aTable) { // jQuery
  var fshMaxLvl = $('#fshMaxLvl', aTable);
  if (opts && 'maxLvl' in opts) {
    fshMaxLvl.val(opts.maxLvl);
  } else {
    fshMaxLvl.val(defaults.arenaMaxLvl);
  }
}

function filterHeader() { // jQuery
  var theRow = $('#pCC > table > tbody > tr:nth-child(7)');
  theRow.clone().insertBefore(theRow).find('td').attr('height', '2');
  theRow.clone().insertAfter(theRow).find('td').attr('height', '1');
  var aTable = $(arenaFilter);
  hideMovesCheckbox(aTable);
  minLvlValue(aTable);
  maxLvlValue(aTable);
  $('#fshMinLvl, #fshMaxLvl', aTable).keyup(changeLvls);
  $('#fshReset', aTable).click(resetLvls);
  $('td', theRow).append(aTable);
}

var doLvlFilter = [
  function(min) {return !min;},
  function(min, max) {return !max;},
  function(min, max) {return isNaN(min) && isNaN(max);},
  function(min, max, level) {return isNaN(min) && level <= max;},
  function(min, max, level) {return min <= level && isNaN(max);},
  function(min, max, level) {return min <= level && level <= max;}
];

function hazOpts(_settings, data) {
  var min = opts.minLvl;
  var max = opts.maxLvl;
  var level = intValue(data[7]);
  for (var i = 0; i < doLvlFilter.length; i += 1) {
    if (doLvlFilter[i](min, max, level)) {return true;}
  }
  return false;
}

function lvlFilter(_settings, data) {
  if (opts) {return hazOpts(_settings, data);}
  return true;
}

function players(cell) { // jQuery
  var matches = /(\d+)\s\/\s(\d+)/.exec(cell.text());
  if (matches) {
    cell.attr('data-order', matches[2] * 1000 + Number(matches[1]));
  }
}

function boolData(cell) { // jQuery
  var matches = /(\d)\.gif/.exec($('img', cell).attr('src'));
  if (matches) {cell.attr('data-order', matches[1]);}
}

function hazMaxMoves(matches, row) { // jQuery
  if (opts.moves[matches[1]] &&
    opts.moves[matches[1]].count === 3) {
    row.addClass('moveMax');
  }
}

function maxMoves(cell, row) { // jQuery
  if (opts && opts.moves) {
    var matches = /\/pvp\/(\d+)\.gif/.exec($('img', cell).attr('src'));
    if (matches) {
      hazMaxMoves(matches, row);
      cell.attr('data-order', matches[1]);
    }
  }
}

function reward(cell) { // jQuery
  if (cell.children('table').length !== 1) {return;}
  cell.attr('data-order', cell.find('td').first().text().replace(/[,\s]/g, ''));
}

function orderData(i, e) { // jQuery

  var row = $(e);
  var theCells = row.children();

  var cell = theCells.eq(0);
  var matches = /#\s(\d+)/.exec(cell.text());
  if (matches && opts && opts.id) {
    opts.id[matches[1]] = matches[1];
    if (oldIds && !oldIds[matches[1]]) {
      row.css('background-color', '#F5F298');
      row.find('tr').css('background-color', '#F5F298');
    }
  }

  players(theCells.eq(1));
  cell = theCells.eq(2);
  cell.attr('data-order', $('td', cell).first().text().replace(/[,\s]/g, ''));
  boolData(theCells.eq(4));
  boolData(theCells.eq(5));
  boolData(theCells.eq(6));
  maxMoves(theCells.eq(8), row);
  reward(theCells.eq(8));

}

function redoHead(i, e) { // jQuery
  var firstRow = $('tr', e).first();
  $('a', firstRow).contents().unwrap();
  $(e).prepend($('<thead/>').append(firstRow));
}

function process(arena) { // jQuery

  time('arena.process');

  theTables.each(redoHead);
  opts = arena || {};
  oldIds = opts.id || {};
  opts.id = {};
  var myRows = theTables.children('tbody').children('tr');
  myRows.each(orderData);
  filterHeader();
  setForage('fsh_arena', opts);
  $.fn.dataTable.ext.search.push(lvlFilter);
  theTables.DataTable(tableOpts);
  $('td.sorting, td.sorting_asc, td.sorting_desc', tabs).off('click');
  $('div.dataTables_filter').hide();
  tabs.on('click', 'td.sorting, td.sorting_asc, td.sorting_desc', sortHandler);
  tabs.on('click', 'input.custombutton[type="submit"]', dontPost);

  timeEnd('arena.process');

}

function injectArena() { // jQuery
  tabs = $('#arenaTypeTabs');
  if (tabs.length !== 1) {return;} // Join error screen
  theTables = $('table[width="635"]', tabs);
  getForage('fsh_arena').done(process);
}

function buyitem(item) {
  return callApp({
    cmd: 'potionbazaar',
    subcmd: 'buyitem',
    item_id: item
  });
}

var ItemId;
var bazaarTable =
  '<table id="fshBazaar"><tr><td colspan="5">Select an item to quick-buy:' +
  '</td></tr><tr><td colspan="5">Select how many to quick-buy</td></tr>' +
  '<tr><td colspan="5"><input id="buy_amount" class="fshNumberInput" ' +
  'type="number" min="0" max="99" value="1"></td></tr><tr><td>@0@</td>' +
  '<td>@1@</td><td>@2@</td><td>@3@</td><td>@4@</td></tr><tr><td>@5@</td>' +
  '<td>@6@</td><td>@7@</td><td>@8@</td><td>@9@</td></tr><tr>' +
  '<td colspan="3">Selected item:</td><td id="selectedItem" colspan="2">' +
  '</td></tr><tr><td colspan="5">' +
  '<span id="fshBazaarWarning" class="fshHide">' +
  'Warning:<br>pressing [<span id="fshBuy" class="fshLink">This button' +
  '</span>] now will buy the <span id="quantity">1</span> item(s) WITHOUT ' +
  'confirmation!</span></td></tr><tr><td id="buy_result" colspan="5"></td>' +
  '</tr></table>';
var bazaarItem =
  '<span class="bazaarButton tip-dynamic" style="background-image: ' +
  'url(\'@src@\');" itemid="@itemid@" data-tipped="@tipped@"></span>';

function testBuyAmount() {
  return testQuant(document.getElementById('buy_amount').value);
}

function select(evt) {
  var target = evt.target;
  if (!target.classList.contains('bazaarButton')) {return;}
  var theValue = testBuyAmount();
  if (!theValue) {return;}
  document.getElementById('quantity').textContent = theValue;
  ItemId = target.getAttribute('itemid');
  document.getElementById('fshBazaarWarning').removeAttribute('class');
  var dupNode = target.cloneNode(false);
  dupNode.className = 'bazaarSelected tip-dynamic';
  var selected = document.getElementById('selectedItem');
  selected.innerHTML = '';
  selected.appendChild(dupNode);
}

function quantity() {
  var theValue = testBuyAmount();
  if (theValue) {
    document.getElementById('quantity').textContent = theValue;
  }
}

function done(json) {
  if (json.success) {
    document.getElementById('buy_result').insertAdjacentHTML('beforeend',
      '<br>You purchased the item!');
  }
}

function buy() { // jQuery
  if (!ItemId) {return;}
  var buyAmount = document.getElementById('quantity').textContent;
  document.getElementById('buy_result').textContent =
    'Buying ' + buyAmount + ' items';
  for (var i = 0; i < buyAmount; i += 1) {
    buyitem(ItemId).done(done);
  }
}

function injectBazaar() { // TODO stop using getElementById
  var pbImg = pCC.getElementsByTagName('IMG')[0];
  pbImg.className = 'fshFloatLeft';
  var potions = pCC.getElementsByTagName('A');
  Array.prototype.forEach.call(potions, function(el, i) {
    var item = el.firstElementChild;
    var tipped = item.getAttribute('data-tipped');
    bazaarTable = bazaarTable
      .replace('@' + i + '@', bazaarItem)
      .replace('@src@', item.getAttribute('src'))
      .replace('@itemid@', tipped.match(/\?item_id=(\d+)/)[1])
      .replace('@tipped@', tipped);
  });
  bazaarTable = bazaarTable.replace(/@\d@/g, '');
  pbImg.parentNode.insertAdjacentHTML('beforeend', bazaarTable);
  document.getElementById('fshBazaar').addEventListener('click', select);
  document.getElementById('buy_amount').addEventListener('input', quantity);
  document.getElementById('fshBuy').addEventListener('click', buy);
}

var buffCost = {count: 0, buffs: {}};
var numRE = /[^a-zA-Z0-9.,+\- ]/g;
var priceRE =
  /([+-]{0,1}[.\d]+ *k)|([+-]{0,1}[.\d]+ *fsp)|([+-]{0,1}[.\d]+ *stam)/;

function getTargetPlayer() {
  var targetPlayer = pCC
    .getElementsByTagName('h1');
  if (targetPlayer.length !== 0) {
    targetPlayer = targetPlayer[0].textContent;
  } else {
    targetPlayer = playerName();
  }
  return targetPlayer;
}

function formatBuffsToBuy() { // Legacy
  var targetPlayer = getTargetPlayer();
  var buffsToBuy = Object.keys(buffCost.buffs).join(', ');
  var greetingText = getValue('buyBuffsGreeting').trim();
  var hasBuffTag = greetingText.indexOf('{buffs}') !== -1;
  var hasCostTag = greetingText.indexOf('{cost}') !== -1;
  greetingText = greetingText.replace(/{playername}/g, targetPlayer);
  if (!hasBuffTag) {
    greetingText += ' ' + buffsToBuy;
  } else if (!hasCostTag) {
    greetingText = greetingText
      .replace(/{buffs}/g, '`~' + buffsToBuy + '~`');
  } else {
    greetingText = greetingText
      .replace(/{buffs}/g, '`~' + buffsToBuy + '~`')
      .replace(/{cost}/g, buffCost.buffCostTotalText);
  }
  window.openQuickMsgDialog(targetPlayer, greetingText, '');
}

function getBuffsToBuy() { // Legacy
  if (buffCost.count > 0) {formatBuffsToBuy();}
}

var costFormatter = [
  {
    condition: function(total) {
      return total.fsp > 0;
    },
    result: function(total) {
      return String(Math.round(total.fsp * 100) / 100) + ' FSP';
    }
  },
  {
    condition: function(total) {
      return total.fsp > 0 && total.k > 0;
    },
    result: function() {
      return ' and ';
    }
  },
  {
    condition: function(total) {
      return total.k > 0;
    },
    result: function(total) {
      return total.k + ' k';
    }
  },
  {
    condition: function(total) {
      return total.stam > 0 && (total.fsp > 0 || total.k > 0);
    },
    result: function() {
      return ' and ';
    }
  },
  {
    condition: function(total) {
      return total.stam > 0;
    },
    result: function(total) {
      return total.stam + ' Stam(' +
        String(Math.round(total.stam / 25 * 10) / 10) + 'fsp)';
    }
  },
  {
    condition: function(total) {
      return total.unknown > 0;
    },
    result: function(total) {
      return ' (' + total.unknown + ' buff(s) with unknown cost)';
    }
  }
];

function formatCost(total) {
  return costFormatter.reduce(function(prev, el) {
    var ret = prev;
    if (el.condition(total)) {
      ret += el.result(total);
    }
    return ret;
  }, '');
}

function hazBuffs() { // Legacy
  var total = {k: 0, fsp: 0, stam: 0, unknown: 0};
  var html = 'This is an estimated cost based on how the script finds ' +
    'the cost associated with buffs from viewing bio.' +
    'It can be incorrect, please use with discretion.<br><hr>' +
    '<table border=0>';

  Object.keys(buffCost.buffs).forEach(function(buff) {
    total[buffCost.buffs[buff][1]] += buffCost.buffs[buff][0];
    html += '<tr><td>' + buff + '</td><td>: ' + buffCost.buffs[buff][0] +
      buffCost.buffs[buff][1] + '</td></tr>';
  });

  var totalText = formatCost(total);

  html += '</table><b>Total: ' + totalText + '</b>';
  document.getElementById('buffCost').innerHTML = '<br/><span ' +
    'class="tip-static" data-tipped="' + html + '">Estimated Cost: <b>' +
    totalText + '</b></span>';
  buffCost.buffCostTotalText = totalText;
}

function updateBuffCost() { // Legacy
  if (buffCost.count > 0) {
    hazBuffs();
  } else {
    document.getElementById('buffCost').innerHTML = '';
    buffCost.buffCostTotalText = '';
  }
}

function priceUnit(price) {
  if (price[0].indexOf('k') > 0) {
    return 'k';
  }
  if (price[0].indexOf('f') > 0) {
    return 'fsp';
  }
  return 'stam';
}

function priceBeforeName(buffNameNode, price) {
  if (!price) { // some players have prices BEFORE the buff names
    var newtext;
    var text = '';
    var node = buffNameNode;
    while (node && node.nodeName.toLowerCase() !== 'br') {
      newtext = node.textContent;
      node = node.previousSibling;
      text = newtext + text;
    }
    return text.replace(numRE, '').toLowerCase().match(priceRE);
  }
  return price;
}

function getBuffCost(buffNameNode) {
  var node = buffNameNode;
  var buffName = node.textContent;
  var newtext;
  var text = '';
  // get the whole line from the buff name towards the end (even after
  // the ',', in case of 'AL, Lib, Mer: 10k each'
  while (node && node.nodeName.toLowerCase() !== 'br') {
    newtext = node.textContent;
    node = node.nextSibling;
    text += newtext;
  }
  var price = text.replace(numRE, '').toLowerCase().match(priceRE);
  price = priceBeforeName(buffNameNode, price);
  var type;
  var cost;
  if (price) {
    type = priceUnit(price);
    cost = price[0].match(/([+-]{0,1}[.\d]+)/)[0];
  } else {
    type = 'unknown';
    cost = '1';
  }
  buffCost.buffs[buffName] = [parseFloat(cost), type];
  buffCost.count += 1;
}

function toggleBuffsToBuy(evt) { // Legacy
  // This is also called by bio preview
  var buffNameNode = evt.target;
  while (buffNameNode.tagName.toLowerCase() !== 'span') {
    buffNameNode = buffNameNode.parentNode;
  }
  var node = buffNameNode;
  var selected = node.classList.contains('fshBlue');
  node.classList.toggle('fshBlue');
  node.classList.toggle('fshYellow');
  var buffName = node.textContent;
  if (selected) {
    getBuffCost(buffNameNode);
  } else {
    buffCost.count -= 1;
    delete buffCost.buffs[buffName];
  }
  updateBuffCost();
}

function getBuffNameNode(e) {
  var buffNameNode = e.target;
  while (buffNameNode.tagName &&
      buffNameNode.tagName.toLowerCase() !== 'span') {
    buffNameNode = buffNameNode.parentNode;
  }
  return buffNameNode;
}

function bioEvtHdl(e) {
  var buffNameNode = getBuffNameNode(e);
  if (buffNameNode.classList &&
      buffNameNode.classList.contains('buffLink')) {
    toggleBuffsToBuy(e);
  } else if (e.target.id === 'fshSendBuffMsg') {
    getBuffsToBuy(e);
  }
}

function renderBio(_bioContents) {
  var bioContents = _bioContents.replace(/\{b\}/g, '`~')
    .replace(/\{\/b\}/g, '~`');
  var buffs = bioContents.match(/`~([^~]|~(?!`))*~`/g);
  if (!buffs) {return;}
  buffs.forEach(function(buff, i) {
    var fullName = buff.replace(/(`~)|(~`)|(\{b\})|(\{\/b\})/g, '');
    var cbString = '<span id="fshBuff' + i + '" class="buffLink fshBlue">' +
      fullName + '</span>';
    bioContents = bioContents.replace(buff, cbString);
  });
  if (bioContents.indexOf('[cmd]') < 0) {bioContents += '[cmd]';}
  bioContents = bioContents.replace('[cmd]',
    '<br><input id="fshSendBuffMsg" ' +
    'class="custombutton" type="button" value="Ask For Buffs">' +
    '<span id="buffCost" class="fshRed"></span>');
  return bioContents;
}

var bioEditLines;

function bioPreview() {
  var textArea = document.getElementById('textInputBox');
  var bioPreviewHTML = convertTextToHtml(textArea.value);
  textArea.parentNode.insertAdjacentHTML('beforeend', '<div>' +
    '<table align="center" width="325" border="1">' +
    '<tbody><tr><td style="text-align:center;color:#7D2252;' +
    'background-color:#CD9E4B">Preview</td></tr><tr>' +
    '<td align="left" width="325"><span id="biopreview">' +
    bioPreviewHTML + '</span></td></tr></tbody></table></div>');
}

function bioWords() {
  // Add description text for the new tags
  pCC.insertAdjacentHTML('beforeend', '<div>' +
    '`~This will allow FSH Script users to ' +
    'select buffs from your bio~`<br>You can use the [cmd] tag as well to ' +
    'determine where to put the "Ask For Buffs" button<br><br>' +
    '&nbsp;&nbsp;&nbsp;- Note 1: The ` and ~ characters are on the same ' +
    'key on QWERTY keyboards. ` is <b>NOT</b> an apostrophe.<br>' +
    '&nbsp;&nbsp;&nbsp;- Note 2: Inner text will not contain special ' +
    'characters (non-alphanumeric).<br>' +
    '&nbsp;&nbsp;&nbsp;- P.S. Be creative with these! Wrap your buff ' +
    'pack names in them to make buffing even easier!</div>');
}

function testHeightValid(boxVal) {
  return isNaN(boxVal) || boxVal < '1' || boxVal > '99';
}

function changeHeight() {
  var theBox = document.getElementById('fshLinesToShow');
  var boxVal = parseInt(theBox.value, 10);
  if (testHeightValid(boxVal)) {return;}
  bioEditLines = boxVal;
  setValue('bioEditLines', boxVal);
  document.getElementById('textInputBox').rows = bioEditLines;
}

function bioHeight() {
  var bioEditLinesDiv = createDiv({
    innerHTML: ' Display <input id="fshLinesToShow"' +
      ' type="number" min="1" max="99" value="' +
      bioEditLines + '"/> Lines '
  });
  var saveLines = createInput({
    className: 'custombutton',
    value: 'Update Rows To Show',
    type: 'button'
  });
  saveLines.addEventListener('click', changeHeight);
  bioEditLinesDiv.appendChild(saveLines);
  pCC.appendChild(bioEditLinesDiv);
}

function updateBioCharacters() {
  var textArea = document.getElementById('textInputBox');
  var previewArea = document.getElementById('biopreview');
  var bioContents = convertTextToHtml(textArea.value);
  bioContents = renderBio(bioContents);
  if (bioContents) {
    previewArea.innerHTML = bioContents;
  }
}

function injectBioWidgets() {
  bioEditLines = getValue('bioEditLines');
  var textArea = document.getElementById('textInputBox');
  bioPreview();
  bioWords();
  bioHeight();
  textArea.rows = bioEditLines;

  textArea.parentNode.addEventListener('click', bioEvtHdl);
  textArea.addEventListener('keyup', updateBioCharacters);
  // Force the preview area to render
  updateBioCharacters();
}

function alpha$1(a, b) {
  if (a.toLowerCase() < b.toLowerCase()) {return -1;}
  if (a.toLowerCase() > b.toLowerCase()) {return 1;}
  return 0;
}

function formatDateTime(aDate) {
  if (Object.prototype.toString.call(aDate) === '[object Date]' &&
      !isNaN(aDate.getTime())) {
    var yyyy = aDate.getFullYear().toString();
    var mon = padZ(aDate.getMonth() + 1);
    var dd = padZ(aDate.getDate());
    var hh = padZ(aDate.getHours());
    var mm = padZ(aDate.getMinutes());
    var ss = padZ(aDate.getSeconds());
    return yyyy + '-' + mon + '-' + dd + ' ' + hh + ':' + mm + ':' + ss;
  }
}

var actBody;
var selMember;
var tgCont;
var memberSelect;
var myMembers;

function buildOptions() {
  return '<select name="member">' +
    '<option value="- All -" selected>- All -</option>' +
    Object.keys(myMembers).sort(alpha$1).reduce(function(prev, member) {
      return prev + '<option value="' + member + '">' + member + '</option>';
    }, '') + '</select>';
}

function toText(val) {
  if (typeof val === 'undefined') {return '#DEF';}
  return val.toLocaleString();
}

function memberRows() {
  return Object.keys(myMembers).reduce(function(outside, memberKey) {
    if (selMember &&
        selMember !== '- All -' &&
        selMember !== memberKey) {return outside;}
    return outside + myMembers[memberKey].reduce(
      function(inside, activity) {
        return inside + '<tr>' +
          '<td>' +
          formatDateTime(new Date(activity[utc] * 1000)) +
          '</td>' +
          '<td>' + memberKey + '</td>' +
          '<td class="fshRight">' + toText(activity[lvl]) + '</td>' +
          '<td class="fshRight">' + toText(activity[vl]) + '</td>' +
          '<td class="fshRight">' + toText(activity[cur]) + '</td>' +
          '<td class="fshRight">' + toText(activity[max]) + '</td>' +
          '<td class="fshRight">' +
            Math.floor(activity[cur] / activity[max] * 100) +
          '</td>' +
          '<td class="fshRight">' + activity[act] + '</td>' +
          '<td class="fshRight">' + toText(activity[gxp]) + '</td>' +
          '</tr>';
      }, '');
  }, '');
}

function drawRows() {
  actBody.innerHTML = memberRows();
  tgCont.classList.remove('fshSpinner');
}

function queueDrawRows() {
  add(3, drawRows);
}

function myChange(e) {
  selMember = e.target.value;
  queueDrawRows();
}

function initTable(theMembers) {
  myMembers = theMembers;
  memberSelect.innerHTML = buildOptions();
  queueDrawRows();
}

function makeTg() {
  var tg = createTable({id: 'tg'});
  var hrow = tg.createTHead().insertRow(-1);
  hrow.insertAdjacentHTML('beforeend', '<th>Date</th>');

  var memberHead = createTh({textContent: 'Member'});
  memberSelect = createDiv();
  memberHead.appendChild(memberSelect);
  hrow.appendChild(memberHead);

  hrow.insertAdjacentHTML('beforeend', '<th>Level</th><th>VL</th>' +
  '<th>Stam</th><th>Max<br>Stam</th><th>Stam<br>%</th>' +
  '<th>Last<br>Activity<br>(Days)</th><th>GXP</th>');

  actBody = createTBody();
  tg.appendChild(actBody);
  tg.addEventListener('change', myChange);
  tgCont = createDiv({className: 'tgCont fshSpinner fshSpinner64'});
  tgCont.appendChild(tg);
  return tgCont;
}

function jsonParse(str) {
  try {
    return JSON.parse(str);
  } catch (e) {
    // Ignore bad json
  }
}

var ioText;
var saveBtn;
var resetBtn;
var io;

function drawRawData(trackerData) {
  ioText.value = trackerData;
  io.classList.remove('fshSpinner');
}

function queueRawData(trackerData) {
  io.className = 'fshSpinner fshSpinner64';
  add(4, drawRawData, [trackerData]);
}

function doReset() {
  ioText.value = '{"lastUpdate": 0, "members": {}}';
}

function doSave() {
  var newData = jsonParse(ioText.value);
  setForage('fsh_guildActivity', newData)
    .done(function() {
      $('#dialog_msg').text('Update successful').dialog('open');
      initTable(newData.members);
    })
    .fail(function(err) {
      $('#dialog_msg').text(err).dialog('open');
    });
}

function customButton(text, fn) {
  var btn = createButton({
    className: 'custombutton',
    textContent: text
  });
  btn.addEventListener('click', fn);
  return btn;
}

function makeInOut() {
  io = createDiv({id: 'io'});
  ioText = createTextArea();
  ioText.setAttribute('autocapitalize', 'off');
  ioText.setAttribute('autocomplete', 'off');
  ioText.setAttribute('autocorrect', 'off');
  ioText.setAttribute('spellcheck', 'false');
  saveBtn = customButton('Save', doSave);
  resetBtn = customButton('Reset', doReset);
  io.appendChild(ioText);
  io.appendChild(createBr());
  io.appendChild(saveBtn);
  io.appendChild(resetBtn);
  return io;
}

var trackerData;
var tracker;
var trDialog;
var acttab2;

function makeDragHandle() {
  return createUl({
    className: 'fshMove ui-tabs-nav ui-widget-header ui-corner-all ' +
      'ui-helper-reset ui-helper-clearfix',
    innerHTML: '<li class="ui-state-default ui-corner-top">' +
      '<label class="fsh-tab-label" for="acttab1">' +
      'Guild Activity Tracker</label></li>' +
      '<li class="ui-state-default ui-corner-top">' +
      '<label class="fsh-tab-label" for="acttab2">Import/Export</label></li>' +
      '<label for="tracker" class="fsh-dialog-close ' +
      'ui-dialog-titlebar-close">&times;</label>'
  });
}

function updateRawData() {
  acttab2.removeEventListener('change', updateRawData);
  queueRawData(trackerData);
}

function makeInnerPopup() {
  var dialogPopup = createDiv({
    className: 'fsh-dialog-popup ' +
      'ui-dialog ui-tabs ui-widget ui-widget-content ui-corner-all',
    innerHTML: '<input id="acttab1" class="fsh-tab-open" ' +
      'name="acttabs" checked type="radio">'
  });
  acttab2 = createInput({
    className: 'fsh-tab-open',
    id: 'acttab2',
    name: 'acttabs',
    type: 'radio'
  });
  acttab2.addEventListener('change', updateRawData);
  dialogPopup.appendChild(acttab2);
  return dialogPopup;
}

function makePopup() {
  var ret = makeInnerPopup();
  var hdl = makeDragHandle();
  ret.appendChild(hdl);
  var container = createDiv({className: 'fsh-dialog-content'});
  container.appendChild(makeTg());
  container.appendChild(makeInOut());
  ret.appendChild(container);
  draggable(hdl, ret);
  trDialog.appendChild(ret);
}

function addOverlay() {
  trDialog.insertAdjacentHTML('beforeend',
    '<div class="fsh-dialog-overlay">' +
    '<label class="fsh-dialog-cancel" for="tracker"></label>' +
    '</div>');
}

function gotActivity$1(data) {
  // console.log('guildTracker', data);
  trackerData = JSON.stringify(data);
  // var tempAct = transformActivity(data);
  // trackerData = JSON.stringify(tempAct);
  initTable(data.members);
  // initTable(tempAct.members);
}

function togglePref$2(evt) {
  if (evt.target.id === 'enableGuildActivityTracker') {
    setValue('enableGuildActivityTracker',
      !getValue('enableGuildActivityTracker'));
  }
}

function openDialog() {
  getForage('fsh_guildActivity').done(gotActivity$1);
  tracker.removeEventListener('change', openDialog);
  addOverlay();
  makePopup();
}

function guildTracker() {
  var gs = document.querySelector('#pCC img.guild_openGuildStore');
  var oldTr = gs.parentNode.parentNode;
  var newTr = createTr();
  var cellOne = newTr.insertCell(-1);
  var cellTwo = newTr.insertCell(-1);
  cellOne.appendChild(gs);
  cellTwo.innerHTML = simpleCheckboxHtml('enableGuildActivityTracker') +
    '&nbsp;<label class="custombutton" for="tracker">Show</label>';
  newTr.addEventListener('change', togglePref$2);
  oldTr.parentNode.replaceChild(newTr, oldTr);
  tracker = createInput({
    id: 'tracker',
    className: 'fsh-dialog-open',
    type: 'checkbox'
  });
  tracker.addEventListener('change', openDialog);
  trDialog = createDiv({className: 'fsh-dialog'});
  trDialog.appendChild(tracker);
  document.body.appendChild(trDialog);
}

function removeGuildAvyImgBorder() {
  document.querySelector('#pCC img[oldtitle$="\'s Logo"]')
    .removeAttribute('style');
}

function guildXPLock() {
  var xpLock = document
    .querySelector('#pCC a[data-tipped^="<b>Guild XP</b>"]');
  if (!xpLock) {return;}
  var xpLockmouseover = xpLock.getAttribute('data-tipped');
  var xpLockXP = getIntFromRegExp(xpLockmouseover,
    /XP Lock: <b>(\d*)/);
  var actualXP = getIntFromRegExp(xpLockmouseover,
    /XP: <b>(\d*)/);
  if (actualXP < xpLockXP) {
    xpLock.parentNode.nextElementSibling.insertAdjacentHTML('beforeend',
      ' (<b>' + addCommas(xpLockXP - actualXP) + '</b>)');
  }
}

var leftHandSideColumnTable;
var members;
var memCount;

function hazConflict(conflictTable, curPage, insertHere) { // Legacy
  if (curPage === 1) {
    var newNode = insertHere.insertRow(insertHere.rows.length - 2);
    newNode.insertCell(0);
    newNode.insertCell(0);
    newNode.cells[0].innerHTML =
      '<a href="index.php?cmd=guild&subcmd=conflicts">Active Conflicts</a>';
    newNode.cells[1].innerHTML = 'Score';
  }
  for (var i = 1; i <= conflictTable.rows.length - 4; i += 2) {
    var newRow = insertHere.insertRow(insertHere.rows.length - 2);
    newRow.insertCell(0);
    newRow.insertCell(0);
    newRow.cells[0].innerHTML = conflictTable.rows[i].cells[0].innerHTML;
    newRow.cells[1].innerHTML = '<b>' + conflictTable.rows[i].cells[6]
      .innerHTML + '</b>';
  }
}

function activeConflicts(doc, curPage, insertHere) { // Legacy
  var conflictTable = findNode(
    '//font[contains(.,"Participants")]/ancestor::table[1]', doc);
  if (conflictTable && conflictTable.rows.length > 3) {
    hazConflict(conflictTable, curPage, insertHere);
  }
}

function gotConflictInfo(responseText, callback) { // Legacy
  var doc = createDocument(responseText);
  var page = findNode('//td[contains(.,"Page:")]', doc);
  var curPage = parseInt(findNode('//input[@name="page"]',
    doc).value, 10);
  var maxPage = page.innerHTML.match(/of&nbsp;(\d*)/);
  activeConflicts(doc, curPage, callback.node);
  if (maxPage && parseInt(maxPage[1], 10) > curPage) {
    xmlhttp(
      'index.php?cmd=guild&subcmd=conflicts&subcmd2=&page=' +
      (curPage + 1) + '&search_text=',
      gotConflictInfo,
      {node: callback.node});
  }
}

function conflictInfo() { // jQuery
  retryAjax('index.php?cmd=guild&subcmd=conflicts').done(function(data) {
    gotConflictInfo(data,
      {node: document.getElementById('statisticsControl')});
  });
}

function logoToggle() {
  var changeLogoCell = leftHandSideColumnTable.rows[0].cells[1].firstChild;
  changeLogoCell.insertAdjacentHTML('beforeend', '[ <span class="fshLink' +
    ' tip-static" id="toggleGuildLogoControl" ' +
    'linkto="guildLogoControl" data-tipped="Toggle Section">X</span> ]');
  var guildLogoElement = leftHandSideColumnTable.rows[2].cells[0]
    .firstChild.nextSibling;
  guildLogoElement.id = 'guildLogoControl';
  if (getValue('guildLogoControl')) {
    guildLogoElement.classList.add('fshHide');
  }
  document.getElementById('toggleGuildLogoControl')
    .addEventListener('click', toggleVisibilty);
}

function statToggle() {
  var leaveGuildCell = leftHandSideColumnTable.rows[4].cells[1].firstChild;
  leaveGuildCell.insertAdjacentHTML('beforeend', '<span class="fshNoWrap">' +
    '[ <span class="fshLink tip-static" id="toggleStatisticsControl" ' +
    'linkto="statisticsControl" data-tipped="Toggle Section">X</span> ]' +
    '</span>');
  var statisticsControlElement = leftHandSideColumnTable.rows[6].cells[0]
    .firstChild.nextSibling;
  statisticsControlElement.id = 'statisticsControl';
  if (getValue('statisticsControl')) {
    statisticsControlElement.classList.add('fshHide');
  }
  document.getElementById('toggleStatisticsControl')
    .addEventListener('click', toggleVisibilty);
}

function structureToggle() {
  var buildCell = leftHandSideColumnTable.rows[15].cells[1].firstChild;
  buildCell.insertAdjacentHTML('beforeend', '[ <span class="fshLink ' +
    'tip-static" id="toggleGuildStructureControl" ' +
    'linkto="guildStructureControl" data-tipped="Toggle Section">X</span> ]');
  var guildStructureControlElement = leftHandSideColumnTable.rows[17]
    .cells[0].firstChild.nextSibling;
  guildStructureControlElement.id = 'guildStructureControl';
  if (getValue('guildStructureControl')) {
    guildStructureControlElement.classList.add('fshHide');
  }
  document.getElementById('toggleGuildStructureControl')
    .addEventListener('click', toggleVisibilty);
}

function batchBuffLinks() {
  var limit = performance.now() + 5;
  while (performance.now() < limit && memCount < members.length) {
    members[memCount].parentNode.insertAdjacentHTML('beforeend',
      ' <span class="smallLink">[b]</span>');
    memCount += 1;
  }
  if (memCount < members.length) {
    add(3, batchBuffLinks);
  }
}

function buffLinks() {
  // TODO preference
  memCount = 0;
  members = document.querySelectorAll(
    '#pCC a[href^="index.php?cmd=profile&player_id="]');
  add(3, batchBuffLinks);
  pCC.addEventListener('click', function(evt) {
    if (evt.target.className !== 'smallLink') {return;}
    openQuickBuffByName(evt.target.previousElementSibling.text);
  });
}

function selfRecallLink() {
  // self recall
  var getLi = leftHandSideColumnTable.getElementsByTagName('LI');
  var selfRecall = getLi[getLi.length - 1].parentNode;
  selfRecall.insertAdjacentHTML('beforeend',
    '<li><a href="index.php?cmd=guild&subcmd=inventory&subcmd2=report&' +
    'user=' + playerName() +
    '" class="tip-static" data-tipped="Self Recall">Self Recall</a></li>');
}

function injectGuild() {
  add(3, colouredDots);
  add(3, removeGuildAvyImgBorder);
  add(3, guildXPLock);
  leftHandSideColumnTable = pCC
    .lastElementChild.rows[2].cells[0].firstElementChild;
  add(3, logoToggle);
  add(3, statToggle);
  add(3, structureToggle);
  add(3, buffLinks);
  add(3, selfRecallLink);
  // Detailed conflict information
  if (getValue('detailedConflictInfo')) {
    add(3, conflictInfo);
  }
  add(4, guildTracker);
}

function doItemTable(rows) {
  for (var i = 1; i < rows.length - 1; i += 2) {
    rows[i].cells[2].insertAdjacentHTML('beforeend',
      '&nbsp;<span class="sendLink">Fast BP</span>');
  }
}

function doCheckAll() {
  var boxes = document.querySelectorAll('#pCC input[name="tagIndex[]"]');
  Array.prototype.forEach.call(boxes, function(el) {
    el.click();
  });
}

function takeResult$1(self, data) {
  if (data.r === 0) {
    self.removeAttribute('style');
    self.className = 'fshGreen';
    self.textContent = 'Taken';
  }
}

function fastBp(el) {
  var itmId = el.parentNode.previousElementSibling.previousElementSibling
    .firstElementChild.value;
  takeItem(itmId).done(takeResult$1.bind(null, el));
  el.textContent = '';
  el.className = 'guildTagSpinner';
  el.style.backgroundImage = 'url(\'' + imageServer +
    '/skin/loading.gif\')';
}

function evtHdlr(e) {
  var self = e.target;
  if (self.value === 'Check All') {doCheckAll();}
  if (self.className === 'sendLink') {fastBp(self);}
}

function injectGuildAddTagsWidgets() {
  pCC.addEventListener('click', evtHdlr);

  var nodeList = pCC.getElementsByTagName('table');
  var itemTable = nodeList[nodeList.length - 1];
  if (itemTable) {doItemTable(itemTable.rows);}

  var checkAll = createInput({type: 'button', value: 'Check All'});
  nodeList[0].rows[5].cells[0].appendChild(checkAll);
}

var ranks;
var myRank;
var theRows;
var rankCount;
var characterRow;

var privLookup = {
  'Bank Withdraw': 5,
  'Build/Upgrade/Demolish Structures': 5,
  'Can Un-Tag Items': 5,
  'Build/Upgrade Structures': 4,
  'Can Kick Members': 4,
  'Can Mass Messages': 0.5,
  'Take Items': 0.2,
  'Can Recall Tagged Items': 0.2,
  'Store Items': 0.1,
  'Can View Advisor': 0.1
};

function parseRankData(linkElement, responseText) {
  // Makes a weighted calculation of available permissions and gets tax rate
  var doc = createDocument(responseText);
  var checkBoxes = doc.querySelectorAll(
    '#pCC input[type="checkbox"]:checked');
  var count = 0;
  Array.prototype.forEach.call(checkBoxes, function(checkbox) {
    var privName = checkbox.nextElementSibling.textContent.trim();
    if (privName in privLookup) {
      count += privLookup[privName];
    } else {count += 1;}
  });
  var taxRate = doc.querySelector('#pCC input[name="rank_tax"]').value;
  linkElement.insertAdjacentHTML('afterbegin', '<span class="fshBlue">(' +
    Math.round(10 * count) / 10 + ') Tax:(' + taxRate + '%)</span> ');
}

function fetchRankData() { // jQuery
  var calcButton = document.getElementById('getrankweightings');
  calcButton.classList.add('fshHide');
  var allItems = document.querySelectorAll('#pCC input[value="Edit"]');
  Array.prototype.forEach.call(allItems, function(anItem) {
    var targetNode = anItem.parentNode.parentNode.previousElementSibling;
    var href = /window\.location='(.*)';/.exec(anItem
      .getAttribute('onclick'))[1];
    retryAjax(href).done(parseRankData.bind(null, targetNode));
  });
}

function notValidRow(thisRankRowNum, targetRowNum, parentTable) {
  return characterRow >= Math.min(thisRankRowNum, targetRowNum) ||
    targetRowNum < 1 ||
    targetRowNum > parentTable.rows.length;
}

function getTargetRowNumber(val) {
  if (val === 'Up') {return -1;}
  return 2;
}

function getPxScroll(val) {
  if (val === 'Up') {return -22;}
  return 22;
}

function ajaxifyRankControls(evt) { // jQuery
  var val = evt.target.getAttribute('value');
  if (val !== 'Up' && val !== 'Down') {return;}
  evt.stopPropagation();
  var onclickHREF = /window.location='(.*)';/
    .exec(evt.target.getAttribute('onclick'))[1];
  var thisRankRow = evt.target.parentNode.parentNode.parentNode;
  var thisRankRowNum = thisRankRow.rowIndex;
  var targetRowNum = thisRankRowNum + getTargetRowNumber(val);
  var parentTable = thisRankRow.parentNode;
  if (notValidRow(thisRankRowNum, targetRowNum, parentTable)) {return;}
  retryAjax(onclickHREF);
  var injectRow = parentTable.rows[targetRowNum];
  parentTable.insertBefore(thisRankRow, injectRow);
  var pxScroll = getPxScroll(val);
  window.scrollBy(0, pxScroll);
}

function doButtons() {
  // gather rank info button
  var weightButton = createInput({
    id: 'getrankweightings',
    className: 'custombutton',
    type: 'button',
    value: 'Get Rank Weightings'
  });
  weightButton.addEventListener('click', fetchRankData);
  var theTd = document.getElementById('show-guild-founder-rank-name')
    .parentNode;
  theTd.insertAdjacentHTML('beforeend', '&nbsp;');
  theTd.insertAdjacentElement('beforeend', weightButton);

  if (getValue('ajaxifyRankControls')) {
    pCC.addEventListener('click',
      ajaxifyRankControls, true);
  }
}

function writeMembers(el) {
  var rankCell = el.firstElementChild;
  var rankName = rankCell.textContent;
  if (ranks[rankName]) { // has members
    if (rankName === myRank) {
      characterRow = rankCount; // limit for ajaxify later
    }
    rankCell.insertAdjacentHTML('beforeend', ' <span class="fshBlue">- ' +
      ranks[rankName].join(', ') + '</span>');
  }
}

function paintRanks() {
  var limit = performance.now() + 10;
  while (performance.now() < limit &&
      rankCount < theRows.length) {
    var el = theRows[rankCount];

    writeMembers(el);

    rankCount += 1;
  }
  if (rankCount < theRows.length) {
    add(3, paintRanks);
  }
}

function getRanks(membrList) {
  ranks = Object.keys(membrList).reduce(function(prev, curr) {
    if (curr !== 'lastUpdate') {
      var rankName = membrList[curr].rank_name;
      prev[rankName] = prev[rankName] || [];
      prev[rankName].push(curr);
    }
    return prev;
  }, {});
  myRank = membrList[playerName()].rank_name;
  theRows = pCC.firstElementChild
    .nextElementSibling.rows[13].firstElementChild.firstElementChild.rows;
  rankCount = 1;
  add(3, paintRanks);
}

function injectGuildRanks() { // jQuery
  getMembrList(true).done(function(membrList) {
    add(3, getRanks, [membrList]);
  });
  add(3, doButtons);
}

var locations = [
  {
    test: function(row) {return row.player_id && row.player_id === -1;},
    res: function(row, act) {
      return 'takeItem" action="' + act.a;
    }
  },
  {
    test: function(row) {
      return row.player_id &&
        row.player_id !== theInv.current_player_id;
    },
    res: function(row, act) {
      return 'recallItem" playerid="' + row.player_id +
        '" mode="0" action="' + act.a;
    }
  },
  {
    test: function(row) {
      return row.folder_id && !row.equipped ||
        row.player_id && !row.equipped &&
        row.player_id === theInv.current_player_id;
    },
    res: function(row, act) {return act.c;}
  }
];

function wuRender(row, act) {
  for (var i = 0; i < locations.length; i += 1) {
    if (locations[i].test(row)) {
      return '<span class="fshLink ' + locations[i].res(row, act) +
        '" invid="' + row.inv_id + '">' + act.b + '</span>';
    }
  }
  return '';
}

function wearUseRender(data, _type, row) {
  //            0  1  2  3  4  5  6  7  8 9 10 11121314 15
  // eslint-disable-next-line no-sparse-arrays
  var action = [1, 1, 1, 1, 1, 1, 1, 1, 1, , 2, 2, , , , 2][data]; // jshint ignore:line
  if (action === 1) {
    return wuRender(row, {
      a: 'wear',
      b: 'Wear',
      c: 'wearItem'
    });
  } else if (action === 2) {
    return wuRender(row, {
      a: 'use',
      b: 'Use',
      c: 'useItem'
    });
  }
}

var invManFilter =
  '<table class="fshInvFilter">' +
  '<tr><th colspan="14">@@reportTitle@@</th>' +
  '<th><span id="fshRefresh" class="fshLink">[Refresh]</span></th></tr>' +
  '<tr><td colspan="2" rowspan="3"><b>&nbsp;Show Items:</b></td>' +
  '<td class="fshRight">&nbsp;Helmet:</td>' +
  '<td><input id="fshHelmet" type="checkbox" item="0"/></td>' +
  '<td class="fshRight">&nbsp;Armor:</td>' +
  '<td><input id="fshArmor" type="checkbox" item="1"/></td>' +
  '<td class="fshRight">&nbsp;Gloves:</td>' +
  '<td><input id="fshGloves" type="checkbox" item="2"/></td>' +
  '<td class="fshRight">&nbsp;Boots:</td>' +
  '<td><input id="fshBoots" type="checkbox" item="3"/></td>' +
  '<td class="fshRight">&nbsp;Weapon:</td>' +
  '<td><input id="fshWeapon" type="checkbox" item="4"/></td>' +
  '<td></td>' +
  '<td class="fshRight">&nbsp;Min lvl:</td>' +
  '<td><input id="fshMinLvl" size="5" value="1"/></td>' +
  '</tr><tr>' +
  '<td class="fshRight">&nbsp;Shield:</td>' +
  '<td><input id="fshShield" type="checkbox" item="5"/></td>' +
  '<td class="fshRight">&nbsp;Ring:</td>' +
  '<td><input id="fshRing" type="checkbox" item="6"/></td>' +
  '<td class="fshRight">&nbsp;Amulet:</td>' +
  '<td><input id="fshAmulet" type="checkbox" item="7"/></td>' +
  '<td class="fshRight">&nbsp;Rune:</td>' +
  '<td><input id="fshRune" type="checkbox" item="8"/></td>' +
  '<td class="fshRight">&nbsp;Sets Only:</td>' +
  '<td><input id="fshSets" item="-1" type="checkbox"/></td>' +
  '<td></td>' +
  '<td class="fshRight">&nbsp;Max lvl:</td>' +
  '<td><input id="fshMaxLvl" size="5" value="9999"/></td>' +
  '</tr><tr>' +
  '<td colspan="2">' +
  '&nbsp;[<span id="fshAll" class="fshLink">Select All</span>]</td>' +
  '<td colspan="2">' +
  '&nbsp;[<span id="fshNone" class="fshLink">Select None</span>]</td>' +
  '<td colspan="2">' +
  '&nbsp;[<span id="fshDefault" class="fshLink">Defaults</span>]</td>' +
  '<td colspan="6"></td>' +
  '<td><input id="fshReset" type="button" value="Reset"/></td>' +
  '</tr>' +
  '<tr>' +
  '<td class="fshRight">&nbsp;Quest Item:</td>' +
  '<td><input id="fshQuest" item="9" type="checkbox"/></td>' +
  '<td class="fshRight">&nbsp;Potion:</td>' +
  '<td><input id="fshPotion" item="10" type="checkbox"/></td>' +
  '<td class="fshRight">&nbsp;Resource:</td>' +
  '<td><input id="fshResource" item="12" type="checkbox"/></td>' +
  '<td class="fshRight">&nbsp;Recipe:</td>' +
  '<td><input id="fshRecipe" item="13" type="checkbox"/></td>' +
  '<td class="fshRight">&nbsp;Container:</td>' +
  '<td><input id="fshContainer" item="14" type="checkbox"/></td>' +
  '<td class="fshRight">&nbsp;Frag Stash:</td>' +
  '<td><input id="fshStash" item="16" type="checkbox"/></td>' +
  // ' Composed: <input id="fshComposed" item="15" type="checkbox"/>' +
  '<td colspan="3"></td></tr>' +
  '<tr>' +
  '<td class="fshRight">&nbsp;Common:</td>' +
  '<td><input id="fshCommon" item="100" type="checkbox" checked/></td>' +
  '<td class="fshRight">&nbsp;Rare:</td>' +
  '<td><input id="fshRare" item="101" type="checkbox" checked/></td>' +
  '<td class="fshRight">&nbsp;Unique:</td>' +
  '<td><input id="fshUnique" item="102" type="checkbox" checked/></td>' +
  '<td class="fshRight">&nbsp;Legendary:</td>' +
  '<td><input id="fshLegendary" item="103" type="checkbox" checked/></td>' +
  '<td class="fshRight">&nbsp;Super Elite:</td>' +
  '<td><input id="fshSuperElite" item="104" type="checkbox" checked/></td>' +
  '<td class="fshRight">&nbsp;Crystalline:</td>' +
  '<td><input id="fshCrystalline" item="105" type="checkbox" checked/></td>' +
  '<td class="fshRight">&nbsp;Epic:</td>' +
  '<td colspan="2"><input id="fshEpic" item="106" type="checkbox" checked/>' +
  '</td>' +
  '</tr>' +
  '</table>';
var inventoryCheckAll = {
  '0': 1,
  '1': 1,
  '2': 1,
  '3': 1,
  '4': 1,
  '5': 1,
  '6': 1,
  '7': 1,
  '8': 1,
  '9': 1,
  '10': 1,
  '11': 1,
  '12': 1,
  '13': 1,
  '14': 1,
  '15': 1,
  '16': 1,
  '100': 1,
  '101': 1,
  '102': 1,
  '103': 1,
  '104': 1,
  '105': 1,
  '106': 1
};
var itemType = ['Helmet', 'Armor', 'Gloves', 'Boots', 'Weapon', 'Shield',
  'Ring', 'Amulet', 'Rune', 'Quest Item', 'Potion', 'Component',
  'Resource', 'Recipe', 'Container', 'Composed', 'Frag Stash'];
var craftHash = {
  Perfect: {abbr: 'Perf', colour: '#00b600', index: 8},
  Excellent: {abbr: 'Exc', colour: '#f6ed00', index: 7},
  'Very Good': {abbr: 'VG', colour: '#f67a00', index: 6},
  Good: {abbr: 'Good', colour: '#f65d00', index: 5},
  Average: {abbr: 'Ave', colour: '#f64500', index: 4},
  Poor: {abbr: 'Poor', colour: '#f61d00', index: 3},
  'Very Poor': {abbr: 'VPr', colour: '#b21500', index: 2},
  Uncrafted: {abbr: 'Unc', colour: '#666666', index: 1}
};

function getT(player_id) {
  if (player_id === -1) {return 4;}
  return 1;
}

function player(invPlayer, rowPlayer, guild) {
  if (invPlayer) {return invPlayer;}
  if (rowPlayer !== -1) {return rowPlayer;}
  return guild;
}

function nameRenderDisplay(data, row) {
  var cur = fallback(theInv.player_id,
    theInv.current_player_id);
  var t = getT(row.player_id);
  var p = player(theInv.player_id, row.player_id,
    theInv.guild_id);

  var bold = data;
  if (row.equipped) {bold = '<b>' + data + '</b>';}

  var _setName = '';
  if (row.stats && row.stats.set_name !== '') {
    _setName = ' (<span class="fshLink setName" set="' + row.stats.set_name +
      '">set</span>)';
  }

  return '<a href="index.php?cmd=auctionhouse&search_text=' + data +
    '" class="fshInvItem tip-dynamic ' +
    rarity[row.rarity].clas + '" ' +
    'data-tipped="fetchitem.php?item_id=' + row.item_id +
    '&inv_id=' + row.inv_id + '&t=' + t + '&p=' + p +
    '&currentPlayerId=' + cur + '">' +
    bold + '</a>' + _setName;
}

function nameRender(data, type, row) {
  if (type !== 'display') {return data;}
  return nameRenderDisplay(data, row);
}

function whereData(row) {
  return fallback(row.folder_id, row.player_id);
}

function whereRenderUserFolder(row) {
  if (row.equipped) {return -2;}
  return parseInt(row.folder_id, 10);
}

function playerName$3(f) {
  if (!calf.membrList[f]) {return '???';}
  return calf.membrList[f].username;
}

function whereRender(data, type, row) {
  if (row.folder_id) {
    return whereRenderUserFolder(row);
  }
  if (row.player_id === -1) {return '~';}
  return playerName$3(row.player_id);
}

function whereRenderGuildDisplay(row) {
  if (row.player_id === -1) {return 'GS';}
  return '<a class="fshMaroon" href="index.php?cmd=profile&player_id=' +
    row.player_id + '">' + playerName$3(row.player_id) + '</a>';
}

function whereRenderDisplay(data, type, row) {
  if (row.player_id) {
    return whereRenderGuildDisplay(row);
  }
  if (row.equipped) {return 'Worn';}
  var folderSelect = '<select class="fshMoveItem" data-inv="' + row.inv_id +
    '">';
  var keysArray = Object.keys(theInv.folders)
    .sort(function(a, b) {return a - b;});
  keysArray.forEach(function(value) {
    folderSelect += '<option value="' + value + '"' +
      isSelected(value, row.folder_id) + '>' +
      theInv.folders[value] + '</option>';
  });
  folderSelect += '</select>';
  return folderSelect;
}

function whereRenderGuildFilter(row) {
  if (row.player_id === -1) {return 'GS';}
  return playerName$3(row.player_id);
}

function whereRenderFilter(data, type, row) {
  if (row.player_id) {
    return whereRenderGuildFilter(row);
  }
  if (row.equipped) {return 'Worn';}
  return theInv.folders[row.folder_id];
}

function craftRender(craft) {
  if (craftHash[craft]) {return craftHash[craft].abbr;}
  return '';
}

function durabilityRender(data, type, row) {
  if (parseInt(row.max_durability, 10) > 0) {
    return Math.ceil(row.durability / row.max_durability * 100);
  }
}

function bpDisplayType(type, row) {
  if (type !== 'display') {return 'BP';}
  if (row.player_id === -1) {
    return '<span class="fshLink takeItem" invid="' + row.inv_id +
      '" action="take">BP</span>';
  }
  return '<span class="fshLink recallItem" invid="' + row.inv_id +
    '" playerid="' + row.player_id +
    '" mode="0" action="recall">BP</span>';
}

function bpRender(where, type, row) {
  if (row.folder_id || row.player_id ===
    theInv.current_player_id) {return;}
  return bpDisplayType(type, row);
}

function gsDisplayType(_data, type, row) {
  if (type === 'display') {
    return '<span class="fshLink recallItem" invid="' +
    row.inv_id + '" playerid="' +
    fallback(row.player_id, theInv.player_id) +
    '" mode="1" action="recall">GS</span>';
  }
  return 'GS';
}

function gsRender(_data, type, row) {
  if (row.player_id && row.player_id !== -1 ||
      row.folder_id && row.guild_tag !== '-1') {
    return gsDisplayType(_data, type, row);
  }
}

function dropRender(data, type, row) {
  if (fallback(row.guild_tag !== '-1', row.equipped)) {return;}
  if (type !== 'display') {return 'Drop';}
  return '<span class="dropItem tip-static dropLink" data-tipped=' +
    '"INSTANTLY DESTROY THE ITEM. NO REFUNDS OR DO-OVERS! Use at own risk."' +
    ' data-inv="' + row.inv_id + '">Drop</span>';
}

function sendRender(data, type, row) {
  if (fallback(row.bound, row.equipped)) {return;}
  if (type !== 'display') {return 'Send';}
  return '<span class="sendItem tip-static sendLink" data-tipped=' +
    '"INSTANTLY SEND THE ITEM. NO REFUNDS OR DO-OVERS! Use at own risk."' +
    ' data-inv="' + row.inv_id + '">Send</span>';
}

function selfRowColor(data) {
  if (data.equipped) {return 'fshGreen';}
  return 'fshNavy';
}

function guildRowColor(data) {
  if (data.player_id === -1) {return 'fshNavy';}
  return 'fshMaroon';
}

function getRowColor(data) {
  if (data.folder_id) {return selfRowColor(data);}
  return guildRowColor(data);
}

function createdRow(row, data) {
  var colour = getRowColor(data);
  row.classList.add(colour);
}

function doTable$1() { // jQuery
  $('#pCC').append('<table id="fshInv" class="hover" ' +
    'style="font-size: x-small;"></table>');
  var table = $('#fshInv').DataTable({
    data: theInv.items,
    autoWidth: false,
    pageLength: 50,
    lengthMenu: [[50, 100, 150, 200, -1], [50, 100, 150, 200, 'All']],
    columnDefs: [{targets: '_all', defaultContent: ''},
      {
        targets: [1, 4, 5, 6, 7, 8, 9, 10, 12, 13],
        orderSequence: ['desc', 'asc']
      }],
    columns: [
      {
        title: 'Name',
        data: 'item_name',
        render: nameRender
      },
      {title: 'Level', data: 'stats.min_level'},
      {
        title: 'Where',
        data: whereData,
        render: {
          _: whereRender,
          display: whereRenderDisplay,
          filter: whereRenderFilter
        }
      },
      {
        title: 'Type',
        data: 'type',
        render: function(type) {return itemType[type];}
      },
      {title: 'Att', data: 'stats.attack'},
      {title: 'Def', data: 'stats.defense'},
      {title: 'Arm', data: 'stats.armor'},
      {title: 'Dam', data: 'stats.damage'},
      {title: 'HP', data: 'stats.hp'},
      {title: 'Frg', data: 'forge'},
      {
        title: 'Craft',
        data: 'craft',
        render: {
          _: function(craft) {
            if (craftHash[craft]) {
              return craftHash[craft].index;
            }
            return 0;
          },
          display: craftRender,
          filter: craftRender
        }
      },
      {
        title: 'Du%',
        data: 'durability',
        render: durabilityRender
      },
      {
        title: 'BP',
        data: whereData,
        render: bpRender
      },
      {
        title: 'GS',
        data: whereData,
        render: gsRender
      },
      {
        title: 'W/U',
        data: 'type',
        render: wearUseRender
      },
      {
        title: 'setName',
        data: 'stats.set_name',
        orderable: false,
        visible: false
      },
      {
        title: 'Tag',
        data: 'guild_tag',
        render: function(tag) {
          if (tag === '-1') {return 'No';}
          return 'Yes';
        }
      },
      {
        title: 'Drop',
        data: 'type',
        render: dropRender
      },
      {
        title: 'Send',
        data: 'type',
        render: sendRender
      }
    ],
    createdRow: createdRow,
    stateSave: true,
    stateDuration: 0
  });
  table.column(12).visible('current_player_id' in theInv);
  table.column(17).visible('player_id' in theInv &&
    showQuickDropLinks);
  table.column(18).visible('player_id' in theInv &&
    showQuickSendLinks);
}

function dropItem(invIdList) {
  return retryAjax({
    url: 'index.php',
    data: {
      cmd: 'profile',
      subcmd: 'dodropitems',
      removeIndex: invIdList,
      ajax: 1
    },
    dataType: 'json'
  }).done(dialog);
}

function moveItem(invIdList, folderId) {
  return retryAjax({
    url: 'index.php',
    data: {
      cmd: 'profile',
      subcmd: 'sendtofolder',
      inv_list: JSON.stringify(invIdList),
      folder_id: folderId,
      ajax: 1
    },
    dataType: 'json'
  }).done(dialog);
}

function sendItem(invIdList) {
  return retryAjax({
    url: 'index.php',
    data: {
      cmd: 'trade',
      subcmd: 'senditems',
      xc: window.ajaxXC,
      target_username: getValue('itemRecipient'),
      sendItemList: invIdList
    }
  }).pipe(htmlResult)
    .done(dialog);
}

var lvlTests$1 = [
  function(level) {return level === 0;},
  function(level, min, max) {return isNaN(min) && isNaN(max);},
  function(level, min, max) {return isNaN(min) && level <= max;},
  function(level, min, max) {return min <= level && isNaN(max);},
  function(level, min, max) {return min <= level && level <= max;}
];

function doLvlFilter$1(_settings, data) {
  var min = options.fshMinLvl;
  var max = options.fshMaxLvl;
  var level = intValue(data[1]); // use data for the level column
  for (var i = 0; i < lvlTests$1.length; i += 1) {
    if (lvlTests$1[i](level, min, max)) {return true;}
  }
  return false;
}

function lvlFilter$1() { // jQuery
  /* Custom filtering function which will search
  data in column 2 between two values */
  $.fn.dataTable.ext.search.push(doLvlFilter$1);
}

function typeFilter() { // jQuery
  $.fn.dataTable.ext.search.push(
    function(_settings, _row, _index, data) {
      return !options.checkedElements ||
        options.checkedElements[data.type];
    }
  );
}

function setFilter() { // jQuery
  $.fn.dataTable.ext.search.push(
    function(_settings, _row, _index, data) {
      return !options.checkedElements ||
        !options.checkedElements['-1'] ||
        options.checkedElements['-1'] &&
        data.stats &&
        data.stats.set_id !== '-1';
    }
  );
}

function rarityFilter() { // jQuery
  $.fn.dataTable.ext.search.push(
    function(_settings, _row, _index, data) {
      var rarity = (parseInt(data.rarity, 10) + 100).toString();
      return !options.checkedElements ||
        options.checkedElements[rarity];
    }
  );
}

/* jshint latedef: nofunc */
var options;
var showQuickDropLinks;
var showQuickSendLinks;
var theInv;

function doSpinner() { // jQuery
  $('#pCC').html('<span id="fshInvMan"><img src = "' +
  imageServer + '/world/actionLoadingSpinner.gif">&nbsp;' +
    'Getting inventory data...</span>');
}

function rekeyMembrList() {
  calf.membrList = Object.keys(calf.membrList)
    // Using reduce() to rekey the membrList from names to id's
    .reduce(function(prev, curr) {
      if (curr !== 'lastUpdate') {
        prev[calf.membrList[curr].id] =
          calf.membrList[curr];
      }
      return prev;
    }, {});
}

function decorate() {
  if (theInv.folders) {
    theInv.folders['-1'] = 'Main';
  }
  // Hide composed potions until Zorg fixes the feed
  theInv.items =
    theInv.items.filter(function(obj) {
      return obj.type !== '15';
    });
  //
}

function headers() { // jQuery
  var reportTitle;
  if (theInv.player_id) {
    reportTitle = '<b>&nbsp;Inventory Manager</b> ' +
      theInv.items.length +
      ' items (green = worn, blue = backpack)';
  } else {
    reportTitle = '<b>&nbsp;Guild Inventory Manager</b> ' +
      theInv.items.length +
      ' items (maroon = in BP, blue=guild store)';
  }
  var myHtml = invManFilter.replace('@@reportTitle@@', reportTitle);
  $('#pCC').html(myHtml);
}

function setChecks() {
  Array.prototype.forEach.call(
    document.querySelectorAll('table.fshInvFilter input[type="checkbox"]'),
    function(el) {
      el.checked =
        options.checkedElements[el.getAttribute('item')] === 1;
    });
  setForage('fsh_inventory', options);
}

function setLvls() { // jQuery
  $('#fshMinLvl').val(options.fshMinLvl);
  $('#fshMaxLvl').val(options.fshMaxLvl);
}

function refresh() {
  doSpinner();
  // eslint-disable-next-line no-use-before-define
  syncInvMan();
}

function changeLvls$1() { // jQuery
  var minLvl = parseInt($('#fshMinLvl').val(), 10);
  var maxLvl = parseInt($('#fshMaxLvl').val(), 10);
  if (isNaN(minLvl) || isNaN(maxLvl)) {return;}
  options.fshMinLvl = minLvl;
  options.fshMaxLvl = maxLvl;
  setForage('fsh_inventory', options);
  $('#fshInv').DataTable().draw(false);
}

function resetLvls$1() { // jQuery
  options.fshMinLvl = defaults.inventoryMinLvl;
  options.fshMaxLvl = defaults.inventoryMaxLvl;
  setForage('fsh_inventory', options);
  $('#fshMinLvl').val(options.fshMinLvl);
  $('#fshMaxLvl').val(options.fshMaxLvl);
  $('#fshInv').DataTable().draw(false);
}

function getChecks() { // jQuery
  options.checkedElements = {};
  Array.prototype.forEach.call(
    document.querySelectorAll(
      'table.fshInvFilter input[type="checkbox"][item]:checked'),
    function(el) {
      options.checkedElements[el.getAttribute('item')] = 1;
    });
  setForage('fsh_inventory', options);
  $('#fshInv').DataTable().draw(false);
}

function allChecks() { // jQuery
  options.checkedElements = inventoryCheckAll;
  setChecks();
  $('#fshInv').DataTable().draw(false);
}

function clearGearOnly(checkedElements) {
  var newEle = {};
  Object.keys(checkedElements).forEach(function(key) {
    if (parseInt(key, 10) >= 100) {
      newEle[key] = checkedElements[key];
    }
  });
  return newEle;
}

function clearChecks() { // jQuery
  options.checkedElements = clearGearOnly(options.checkedElements);
  setChecks();
  $('#fshInv').DataTable().draw();
}

function resetChecks() { // jQuery
  options.checkedElements = defaults.inventoryCheckedElements;
  setChecks();
  $('#fshInv').DataTable().draw(false);
}

function setName(e) { // jQuery
  $('#fshInv').DataTable().search($(e.target).attr('set')).draw();
  $('#fshInv_filter input').focus();
}

function removeClass(self) {
  self.closest('tr')
    .find('.takeItem, .recallItem, .wearItem, .dropItem, .sendItem')
    .removeClass().qtip('hide');
}

function killRow(self, data) { // jQuery
  if (data.r === 1) {return;}
  var tr = self.closest('tr');
  var td = $('td', tr);
  td.eq(2).empty(); // Where
  td.eq(12).empty(); // BP - GS
  td.eq(13).empty(); // GS - W/U
  td.eq(14).empty(); // W/U - Tag
  td.eq(15).empty(); // Tag - Drop
  td.eq(16).empty(); // ? - Send
  tr.css('text-decoration', 'line-through');
}

function anotherSpinner(self) {
  self.empty().append('<img src="' + imageServer +
    '/skin/loading.gif" width="11" height="11">');
}

function doAction$1(fn, self) { // jQuery
  removeClass(self);
  fn().done(killRow.bind(null, self));
  anotherSpinner(self);
}

function takeItem$1(e) { // jQuery
  var self = $(e.target);
  doAction$1(
    queueTakeItem.bind(null, self.attr('invid'), self.attr('action')),
    self
  );
}

function recallItem$1(e) { // jQuery
  var self = $(e.target);
  doAction$1(
    queueRecallItem.bind(null, {
      invId: self.attr('invid'),
      playerId: self.attr('playerid'),
      mode: self.attr('mode'),
      action: self.attr('action')
    }),
    self
  );
}

function wearItem(e) { // jQuery
  var self = $(e.target);
  doAction$1(equipItem.bind(null, self.attr('invid')), self);
}

function doUseItem$1(e) { // jQuery
  var self = $(e.target);
  doAction$1(useItem.bind(null, self.attr('invid')), self);
}

function doMoveItem(e) { // jQuery
  var self = $(e.target);
  moveItem([self.data('inv')], self.val());
}

function doDropItem(e) { // jQuery
  var self = $(e.target);
  doAction$1(dropItem.bind(null, [self.data('inv')]), self);
}

function doSendItem(e) { // jQuery
  var self = $(e.target);
  doAction$1(sendItem.bind(null, [self.data('inv')]), self);
}

function eventHandlers() { // jQuery
  $('#fshRefresh').click(refresh);
  $('#fshMinLvl, #fshMaxLvl').keyup(changeLvls$1);
  $('#fshReset').click(resetLvls$1);
  $('table.fshInvFilter').on('click', 'input[type="checkbox"]', getChecks);
  $('#fshAll').click(allChecks);
  $('#fshNone').click(clearChecks);
  $('#fshDefault').click(resetChecks);
  $('#fshInv').on('click', 'span.setName', setName);
  $('#fshInv').on('click', 'span.takeItem', takeItem$1);
  $('#fshInv').on('click', 'span.recallItem', recallItem$1);
  $('#fshInv').on('click', 'span.wearItem', wearItem);
  $('#fshInv').on('click', 'span.useItem', doUseItem$1);
  $('#fshInv').on('change', 'select.fshMoveItem', doMoveItem);
  $('#fshInv').on('click', 'span.dropItem', doDropItem);
  $('#fshInv').on('click', 'span.sendItem', doSendItem);
}

function clearButton() { // jQuery
  var input = $('#fshInv_filter input');
  input.prop('type', 'text');
  var clear = $('<span>&times;</span>');
  input.wrap($('<span class="text-input-wrapper"/>'));
  input.after(clear);
  clear.click(function() {
    input.val('');
    $('#fshInv').DataTable().search('').draw();
  });
}

function getInvMan() {

  time('inventory.getInvMan');

  showQuickDropLinks = getValue('showQuickDropLinks');
  showQuickSendLinks = getValue('showQuickSendLinks');

  if (calf.membrList) {rekeyMembrList();}

  decorate();
  lvlFilter$1();
  typeFilter();
  setFilter();
  rarityFilter();
  headers();
  setChecks();
  setLvls();
  doTable$1();
  eventHandlers();
  clearButton();

  timeEnd('inventory.getInvMan');

}

function extendOptions(data) {
  options = fallback(data, {});
  options.fshMinLvl = fallback(options.fshMinLvl,
    defaults.inventoryMinLvl);
  options.fshMaxLvl = fallback(options.fshMaxLvl,
    defaults.inventoryMaxLvl);
  options.checkedElements = fallback(options.checkedElements,
    defaults.inventoryCheckedElements);
}

function syncInvMan() { // jQuery
  var prm = [];
  prm.push(getInventory().done(function(data) {
    theInv = data;
  }));
  if (calf.subcmd === 'guildinvmgr') {
    prm.push(getMembrList(false));
  }
  prm.push(getForage('fsh_inventory')
    .done(extendOptions)
  );
  $.when.apply($, prm).done(function() {
    add(3, getInvMan);
  });
}

function showError(data) { // jQuery
  var $tempError = $('#temp_error');
  $tempError.html('<span style="color: red">Error:</span> ' + data.m);
  $tempError.show().delay(5000).hide(400);
}

function failHndlr(jqXHR) {
  showError({m: jqXHR.status + ' ' + jqXHR.statusText});
}

function quickDoneTaken(data) { // jQuery
  if (data.r !== 0) {
    showError(data);
  } else {
    var qtipId = $('#temp-inv-img-' + data.temp_id).data('hasqtip');
    $('#temp-inv-' + data.temp_id).remove();
    $('#qtip-' + qtipId).remove();
  }
  outputResult('Item taken.', document.getElementById('take_result'));
}

function takeAllSimilar(evt) { // jQuery.min
  var invIds = evt.target.getAttribute('invIDs').split(',');
  evt.target.parentNode.innerHTML = 'taking all ' +
    invIds.length + ' items';
  invIds.forEach(function(invId) {
    retryAjax({
      type: 'POST',
      url: 'index.php',
      data: {
        cmd: 'tempinv',
        subcmd: 'takeitem',
        temp_id: invId,
        ajax: '1'
      },
      dataType: 'json'
    }).done(quickDoneTaken).fail(failHndlr);
  });
}

function toggleQuickTake() { // jQuery
  if ($('#currentMBDisplay').attr('value') === 'mailbox') {
    $('#mailboxSwitcher').html('Toggle Mailbox');
    $('#quickTake').css('display', 'block');
    $('#regularMailbox').css('display', 'none');
    $('#currentMBDisplay').attr('value', 'quicktake');
  } else {
    $('#mailboxSwitcher').html('Toggle Quick Take');
    $('#quickTake').css('display', 'none');
    $('#regularMailbox').css('display', 'block');
    $('#currentMBDisplay').attr('value', 'mailbox');
  }
}

function injectMailbox() { // Bad jQuery
  var items = $('#pCC a');
  if (items.length === 0) {return;} // Empty mailbox
  $('#pCC').wrapInner('<div id="regularMailbox" />');
  var quickTakeDiv = '<div id="quickTake" style="display:none"><br />' +
    '<br /><center><font size="3"><b>Quick Take</b></font>' +
    '<br />Select which item to take all similar items from your ' +
    'Mailbox.<br /></center>' +
    '<table id="quickTakeTable" align="left"><tr><th width=20%>' +
    'Actions</th><th>Items</th></tr><tr><td id="take_result" ' +
    'colspan=2></td></tr></table>' +
    '</div>';
  $('#pCC').prepend('<span id="mailboxSwitcher" ' +
    'style="cursor:pointer; text-decoration:underline; ' +
    'color:blue;">Toggle Quick Take</span><input type="hidden" ' +
    'id="currentMBDisplay" value="mailbox" />' + quickTakeDiv);
  var itemList = {};
  $('#regularMailbox img[data-tipped*="t=5"]').each(function(i, e) {
    var itemIDs = itemRE.exec($(e).attr('data-tipped'));
    if (!itemIDs) {return;}
    var itemId = itemIDs[1];
    var invId = itemIDs[2];
    var tipped = $(e).attr('data-tipped');
    var src = $(e).attr('src');
    if (!itemList[itemId]) {
      var invIds = [];
      invIds.push(invId);
      itemList[itemId] = {
        invIds: invIds,
        tipped: tipped,
        src: src
      };
    } else {
      itemList[itemId].invIds.push(invId);
    }
  });
  var quickTakeTable = $('#quickTakeTable');
  Object.keys(itemList).forEach(function(id) {
    var titem = itemList[id];
    quickTakeTable.append('<tr><td align=center>' +
      '<span style="cursor:pointer; text-decoration:underline; ' +
      'color:blue; font-size:x-small;" ' +
      'id="Helper:takeAllSimilar' + id + '" invIDs="' + titem.invIds.join() +
      '">Take All ' + titem.invIds.length + '</span></td>' +
      '<td><img src="' + titem.src +
      '" class="tip-dynamic" border="0" data-tipped="' +
      titem.tipped + '"></td></tr>');
    document.getElementById('Helper:takeAllSimilar' + id)
      .addEventListener('click', takeAllSimilar, true);
  });
  document.getElementById('mailboxSwitcher')
    .addEventListener('click', toggleQuickTake, true);
}

var currentPlayerId$1;

function getPlayer(playerAry) { // Legacy
  if (playerAry) {return Number(playerAry[1]);}
  return 0;
}

function findPlayers(aRow) { // Legacy
  var messageHTML = aRow.cells[2].innerHTML;
  var doublerPlayerMessageRE =
    /member\s<a\shref="index.php\?cmd=profile&amp;player_id=(\d+)/;
  var secondPlayer = doublerPlayerMessageRE.exec(messageHTML);
  var singlePlayerMessageRE =
    /<a\shref="index.php\?cmd=profile&amp;player_id=(\d+)/;
  var firstPlayer = singlePlayerMessageRE.exec(messageHTML);

  var firstPlayerID = getPlayer(firstPlayer);
  var secondPlayerID = getPlayer(secondPlayer);

  if (firstPlayer && firstPlayerID !== currentPlayerId$1 &&
      secondPlayerID !== currentPlayerId$1) {
    for (var j = 0; j < 3; j += 1) {
      aRow.cells[j].removeAttribute('class');
    }
    aRow.classList.add('fshGrey');
    aRow.classList.add('fshXXSmall');
  }
}

function likeInvite(aRow, hasInvited) { // Legacy
  var message = aRow.cells[2].innerHTML;
  var firstQuote = message.indexOf('\'');
  var firstPart = '';
  firstPart = message.substring(0, firstQuote);
  var secondQuote = message.indexOf('\'', firstQuote + 1);
  var targetPlayerName = message.substring(firstQuote + 1, secondQuote);
  aRow.cells[2].innerHTML = firstPart + '\'' +
    '<a href="index.php?cmd=findplayer&search_active=1&' +
    'search_level_max=&search_level_min=&search_username=' +
    targetPlayerName + '&search_show_first=1">' + targetPlayerName +
    '</a>' + message.substring(secondQuote, message.length);
  if (!hasInvited &&
    targetPlayerName !== playerName()) {
    $(aRow).find('td').removeClass('row').css('font-size', 'xx-small');
    aRow.style.color = 'gray';
  }
}

function guildInvite(aRow) { // Legacy
  var hasInvited = aRow.cells[2].textContent
    .search('has invited the player') !== -1;
  if (aRow.cells[2].textContent.charAt(0) === '\'' || hasInvited) {
    likeInvite(aRow, hasInvited);
  }
}

function processGuildWidgetRow(aRow) { // Legacy
  findPlayers(aRow);
  guildInvite(aRow);
}

function getMessageHeader() {
  var nodeList = pCC.getElementsByTagName('TD');
  for (var i = 0; i < nodeList.length; i += 1) {
    if (nodeList[i].textContent === 'Message') {
      return nodeList[i];
    }
  }
}

function guildLogWidgetsEnabled() { // Legacy
  var messageNameCell = getMessageHeader();
  if (!messageNameCell) {return;}
  var logTable = messageNameCell.parentNode.parentNode.parentNode;
  messageNameCell.innerHTML += '&nbsp;&nbsp;<span class="fshWhite">' +
    '(Guild Log messages not involving self are dimmed!)</span>';

  currentPlayerId$1 = playerId();

  for (var i = 1; i < logTable.rows.length; i += 2) {
    var aRow = logTable.rows[i];
    processGuildWidgetRow(aRow);
  }
}

function addGuildLogWidgets() {
  if (getValue('hideNonPlayerGuildLogMessages')) {
    guildLogWidgetsEnabled();
  }
}

var nowUtc;
var lastCheckUtc;

function findChatTable() { // Legacy
  var chatTable = findNode('//table[@class="width_full"]'); // Guild Log
  if (!chatTable) {
    chatTable = findNode('//table[tbody/tr/td[.="Message"]]'); // Outbox & Guild Chat
  }
  if (!chatTable) {
    chatTable = findNode('//table[tbody/tr/td/span[' +
      'contains(.,"Currently showing:")]]'); // personal log
  }
  return chatTable;
}

function chatRowBuffLink(aRow, logScreen, addBuffTag) { // Legacy
  if (logScreen === 'Chat' && addBuffTag) {
    var playerIDRE = /player_id=(\d+)/;
    var playerID = playerIDRE.exec(aRow.cells[1].innerHTML)[1];
    aRow.cells[1].innerHTML += ' <a class="fshBf" ' +
      quickBuffHref(playerID) + '>[b]</a>';
  }
}

function rowColor(aRow, logScreen, dateColumn) { // Legacy
  var addBuffTag = true;
  var cellContents = aRow.cells[dateColumn].textContent;
  var postDateUtc = parseDateAsTimestamp(cellContents);
  var postAgeMins = (nowUtc - postDateUtc) / (1000 * 60);
  if (postDateUtc > lastCheckUtc) {
    aRow.classList.add('fshNr');
  } else if (postAgeMins > 20 && postDateUtc <= lastCheckUtc) {
    aRow.classList.add('fshOr');
    addBuffTag = false;
  }
  chatRowBuffLink(aRow, logScreen, addBuffTag);
}

function getLastCheck(lastCheckScreen) {
  return getValue(lastCheckScreen) || nowUtc;
}

function doLogColoring(logScreen, dateColumn, chatTable) { // Legacy
  nowUtc = (new Date()).setUTCSeconds(0, 0) - 1;
  var lastCheckScreen = 'last' + logScreen + 'Check';
  lastCheckUtc = getLastCheck(lastCheckScreen);
  var increment = 2;
  if (logScreen === 'Chat') {
    increment = 4;
    chatTable.classList.add('fshGc');
  }
  for (var i = 1; i < chatTable.rows.length; i += increment) {
    rowColor(chatTable.rows[i], logScreen, dateColumn);
  }
  setValue(lastCheckScreen, nowUtc);
}

function addLogColoring(logScreen, dateColumn) { // Legacy
  if (!getValue('enableLogColoring')) {return;}
  var chatTable = findChatTable();
  if (chatTable) {doLogColoring(logScreen, dateColumn, chatTable);}
}

var depoRe = /deposited ([,0-9]+) FallenSword Points into the guild./;
var lookup = [
  {
    condition: function(data) {return data.indexOf('(Potion)') !== -1;},
    id: 1
  },
  {
    condition: function(data) {
      return data.indexOf('recalled the item') !== -1;
    },
    id: 2
  },
  {
    condition: function(data) {
      return data.indexOf('took the item') !== -1;
    },
    id: 2
  },
  {
    condition: function(data) {
      return data.indexOf('auto-returned the') !== -1;
    },
    id: 2
  },
  {
    condition: function(data) {
      return data.indexOf('stored the item') !== -1;
    },
    id: 2
  },
  {
    condition: function(data) {
      return data.indexOf('has added flags to') !== -1;
    },
    id: 3
  },
  {
    condition: function(data) {
      return data.indexOf('has removed flags to') !== -1;
    },
    id: 3
  },
  {
    condition: function(data) {
      return data.indexOf(
        'relic. This relic now has an empower level of') !== -1;
    },
    id: 4
  },
  {
    condition: function(data) {
      return data.indexOf(
        'relic. The relic empower level has been reset to zero.') !== -1;
    },
    id: 4
  },
  {
    condition: function(data) {
      return data.indexOf('failed to capture the relic') !== -1;
    },
    id: 4
  },
  {
    condition: function(data) {
      return data.indexOf('captured the relic') !== -1;
    },
    id: 4
  },
  {
    condition: function(data) {
      return data.indexOf('captured your relic') !== -1;
    },
    id: 4
  },
  {
    condition: function(data) {
      return data.indexOf('has captured the undefended relic') !== -1;
    },
    id: 4
  },
  {
    condition: function(data) {
      return data.indexOf('attempted to capture your relic') !== -1;
    },
    id: 4
  },
  {
    condition: function(data) {
      return / empowered the .+ relic/.test(data);
    },
    id: 4
  },
  {
    condition: function(data) {
      return / removed the empowerment from the .+ relic/.test(data);
    },
    id: 4
  },
  {
    condition: function(data) {
      return data.indexOf('disbanded a mercenary.') !== -1;
    },
    id: 5
  },
  {
    condition: function(data) {
      return data.indexOf('hired the mercenary') !== -1;
    },
    id: 5
  },
  {
    condition: function(data) {
      return data.indexOf('has disbanded one of their groups') !== -1;
    },
    id: 6
  },
  {
    condition: function(data) {
      return /A group from your guild was (.*) in combat./.test(data);
    },
    id: 6
  },
  {
    condition: function(data) {
      return /deposited ([,0-9]+) gold into the guild bank/.test(data);
    },
    id: 7
  },
  {
    condition: function(data) {
      return depoRe.test(data);
    },
    id: 7
  },
  {
    condition: function(data) {
      return data.indexOf('has added a new rank entitled') !== -1;
    },
    id: 8
  },
  {
    condition: function(data) {
      return data.indexOf('has deleted the rank') !== -1;
    },
    id: 8
  },
  {
    condition: function(data) {
      return data.indexOf('has requested to join the guild') !== -1;
    },
    id: 8
  },
  {
    condition: function(data) {
      return data.indexOf('has invited the player') !== -1;
    },
    id: 8
  },
  {
    condition: function(data) {
      return data.indexOf('has officially joined the guild') !== -1;
    },
    id: 8
  },
  {
    condition: function(data) {
      return data.indexOf('has been kicked from the guild by') !== -1;
    },
    id: 8
  },
  {
    condition: function(data) {
      return data.indexOf('has left the guild') !== -1;
    },
    id: 8
  },
  {
    condition: function(data) {
      return data.indexOf('has been assigned the rank') !== -1;
    },
    id: 8
  },
  {
    condition: function(data) {
      return /resulted in (.*) with a final score of/.test(data);
    },
    id: 9
  },
  {
    condition: function(data) {
      return data.indexOf('resulted in a draw. Your GvG rating ') !== -1;
    },
    id: 9
  },
  {
    condition: function(data) {
      return data.indexOf(
        'has just initiated a conflict with the guild') !== -1;
    },
    id: 9
  },
  {
    condition: function(data) {
      return data.indexOf('has initiated a conflict with your guild') !== -1;
    },
    id: 9
  },
  {
    condition: function(data) {
      return data.indexOf('is participating in the conflict ' +
        'against the guild') !== -1;
    },
    id: 9
  },
  {
    condition: function(data) {
      return data.indexOf('bought the Titan Reward item') !== -1;
    },
    id: 10
  },
  {
    condition: function(data) {
      return data.indexOf('from your guild\'s contribution to the ' +
        'defeat of the titan') !== -1;
    },
    id: 10
  },
  {
    condition: function(data) {
      return data.indexOf('a 7 day cooldown has been activated ' +
        'on your guild for this titan') !== -1;
    },
    id: 10
  }
];

function rowProfile(data) {
  for (var i = 0; i < lookup.length; i += 1) {
    var test = lookup[i];
    if (test.condition(data)) {return test.id;}
  }
  return 0;
}

var guildLogFilter =
  '<table id="fshNewGuildLog" class="fshInvFilter"><thead><tr>' +
  '<th colspan="11"><b>Guild Log Version 4</b></th>' +
  '<th colspan="3"><span id="rfsh" class="sendLink">Reset</span> ' +
  '<a href="index.php?cmd=guild&subcmd=log" class="sendLink">' +
  'Old Guild Log</a></th>' +
  '</tr></thead><tbody>' +
  '<tr><td rowspan="3"><b>&nbsp;Filters:</b></td>' +
  '<td class="fshRight">&nbsp;Potions:</td>' +
  '<td><input id="fshPotion" type="checkbox" item="1"/></td>' +
  '<td class="fshRight">&nbsp;Store/Recalls:</td>' +
  '<td><input id="fshStore" type="checkbox" item="2"/></td>' +
  '<td class="fshRight">&nbsp;Relics:</td>' +
  '<td><input id="fshRelic" type="checkbox" item="4"/></td>' +
  '<td class="fshRight">&nbsp;Mercenaries:</td>' +
  '<td><input id="fshMerc" type="checkbox" item="5"/></td>' +
  '<td class="fshRight">&nbsp;Group Combats:</td>' +
  '<td><input id="fshGroup" type="checkbox" item="6"/></td>' +
  '<td colspan="3">&nbsp;</td>' +
  '</tr><tr>' +
  '<td class="fshRight">&nbsp;Donations:</td>' +
  '<td><input id="fshDonation" type="checkbox" item="7"/></td>' +
  '<td class="fshRight">&nbsp;Rankings:</td>' +
  '<td><input id="fshRank" type="checkbox" item="8"/></td>' +
  '<td class="fshRight">&nbsp;GvGs:</td>' +
  '<td><input id="fshGvG" type="checkbox" item="9"/></td>' +
  '<td class="fshRight">&nbsp;Tag/UnTags:</td>' +
  '<td><input id="fshTag" type="checkbox" item="3"/></td>' +
  '<td class="fshRight">&nbsp;Titans:</td>' +
  '<td><input id="fshTitan" type="checkbox" item="10"/></td>' +
  '<td class="fshRight">&nbsp;Other:</td>' +
  '<td><input id="fshOther" type="checkbox" item="0"/></td>' +
  '<td>&nbsp;</td>' +
  '</tr><tr>' +
  '<td colspan="2">' +
  '&nbsp;[<span id="fshAll" class="fshLink">Select All</span>]</td>' +
  '<td colspan="2">' +
  '&nbsp;[<span id="fshNone" class="fshLink">Select None</span>]</td>' +
  '<td colspan="9"></td>' +
  '</tr><tr><td id="fshOutput" class="fshBlue" colspan="14">' +
  'Loading Page 1 ...</td></tr>' +
  '</tbody></table>' +
  '<table id="fshInjectHere">' +
  '</table>';
var headerRow = '<tbody><tr>' +
  '<td class="header" width="16">&nbsp;</td>' +
  '<td class="header" width="20%">Date</td>' +
  '<td class="header" width="80%">Message</td></tr></tbody>';

var defChecks = [true, true, true, true, true, true,
  true, true, true, true, true];
var noChecks = [false, false, false, false, false, false,
  false, false, false, false, false];

var options$1 = {};
var fshNewGuildLog;
var fshOutput;
var maxPagesToFetch;
var maxPage$1;
var doc;
var currPage;
var lastPage$1;
var tmpGuildLog = [];
var completeReload = true;
var myTable;

function getGuildLogPage(page) {
  return retryAjax({
    url: 'index.php',
    data: {cmd: 'guild', subcmd: 'log', page: page},
    datatype: 'html'
  });
}

function findPageInput(prev, curr) {
  var output = prev;
  if (!prev && curr.name === 'page') {output = curr;}
  return output;
}

function getPageInput() {
  var inputList = doc.getElementById('pCC')
    .getElementsByClassName('custominput');
  return Array.prototype.reduce.call(inputList, findPageInput, null);
}

function parsePage(data) {
  doc = createDocument(data);
  var pageInput = getPageInput();
  currPage = Number(pageInput.value);
  lastPage$1 = Number(/\d+/.exec(pageInput.parentNode.textContent)[0]);
  if (currPage === 1) {maxPage$1 = Math.min(lastPage$1, maxPagesToFetch);}
  fshOutput.textContent = 'Loading ' + currPage + ' of ' + maxPage$1 + '...';
}

function getTableList(tableList) {
  var theTable = tableList[0];
  var limit = theTable.rows.length - 1;
  for (var i = 1; i < limit; i += 2) {
    var myRow = theTable.rows[i];
    var myDate = myRow.cells[1].textContent;
    var timestamp = parseDateAsTimestamp(myDate);
    var myMsg = myRow.cells[2].innerHTML;
    if (currPage === 1 &&
        options$1.log &&
        timestamp === options$1.log[0][0] &&
        myMsg === options$1.log[0][2]) {
      completeReload = false;
      break;
    }
    tmpGuildLog.push([currPage * 100 + i, timestamp, myDate, myMsg,
      rowProfile(myMsg)]);
  }
}

function parseTable() {
  var tableList = doc.getElementsByClassName('width_full');
  if (tableList.length === 1) {getTableList(tableList);}
}

function processPage(data) {
  parsePage(data);
  parseTable();
}

function getOtherPages() {
  var prm = [];
  if (completeReload) {
    for (var i = 2; i <= maxPage$1; i += 1) {
      prm.push(getGuildLogPage(i).done(processPage));
    }
  } else {
    options$1.log.forEach(function(e) {
      tmpGuildLog.push([0, e[0], e[1], e[2], e[3]]);
    });
  }
  return $.when.apply($, prm);
}

function storeOptions() {
  setForage('fsh_guildLog', options$1);
}

function updateOptionsLog() {
  // Don't cache current minute as it may be incomplete
  var nowUtc = (new Date()).setSeconds(0, 0);
  options$1.log = tmpGuildLog.reduce(function(prev, curr) {
    if (curr[1] !== nowUtc) {
      prev.push([curr[1], curr[2], curr[3], curr[4]]);
    }
    return prev;
  }, []);
  storeOptions();
}

function buildTable() {
  myTable = createTable({id: 'fshInjectHere', className: 'width_full'});
  myTable.insertAdjacentHTML('beforeend', headerRow);

  tmpGuildLog.forEach(function(r) {
    var myRow = myTable.insertRow(-1);
    r.push(myRow);
    if (!options$1.checks[r[4]]) {myRow.className = 'fshHide';}
    myRow.insertCell(-1).innerHTML =
      '<span class="newGuildLog" style="background-image: url(\'' +
      imageServer + '/skin/log_1.gif\');"></span>';
    myRow.cells[0].className = 'row';
    myRow.insertCell(-1).innerHTML = '<nobr>' + r[2] + '</nobr>';
    myRow.cells[1].className = 'row';
    myRow.insertCell(-1).innerHTML = r[3];
    myRow.cells[2].className = 'row';
    var sepRow = myTable.insertRow(-1);
    r.push(sepRow);
    if (!options$1.checks[r[4]]) {sepRow.className = 'fshHide';}
    var sep = sepRow.insertCell(-1);
    sep.className = 'divider';
    sep.colSpan = 3;
  });

  var injector = document.getElementById('fshInjectHere');
  pCC.replaceChild(myTable, injector);
  addLogColoring('myGuildLog', 1);
  addGuildLogWidgets();
}

function setChecks$1() {
  Array.prototype.forEach.call(
    fshNewGuildLog.getElementsByTagName('input'),
    function(el) {
      el.checked = options$1.checks[el.getAttribute('item')];
    }
  );
  storeOptions();
}

function gotOtherPages() {
  if (completeReload) {
    tmpGuildLog.sort(function(a, b) {
      return a[0] - b[0];
    });
  }
  fshOutput.textContent = 'Loading complete.';
  updateOptionsLog();
  buildTable();
}

function processFirstPage$1(data) {
  processPage(data);
  getOtherPages().done(gotOtherPages);
}

function toggleItem(self) {
  var item = Number(self.getAttribute('item'));
  options$1.checks[item] = !options$1.checks[item];
  storeOptions();
  tmpGuildLog.forEach(function(r) {
    if (r[4] !== item) {return;}
    r[5].classList.toggle('fshHide');
    r[6].classList.toggle('fshHide');
  });
}

function selectAll() {
  options$1.checks = defChecks.slice(0);
  setChecks$1();
  tmpGuildLog.forEach(function(r) {
    r[5].classList.remove('fshHide');
    r[6].classList.remove('fshHide');
  });
}

function selectNone() {
  options$1.checks = noChecks.slice(0);
  setChecks$1();
  tmpGuildLog.forEach(function(r) {
    r[5].classList.add('fshHide');
    r[6].classList.add('fshHide');
  });
}

function refresh$1() {
  options$1.log = false;
  storeOptions();
  fshOutput.textContent = 'Loading Page 1 ...';
  tmpGuildLog = [];
  completeReload = true;
  document.getElementById('fshInjectHere').innerHTML = '';
  getGuildLogPage(1).done(processFirstPage$1);
}

var guildLogEvents = [
  {test: function(self) {return self.tagName === 'INPUT';}, fn: toggleItem},
  {test: function(self) {return self.id === 'fshAll';}, fn: selectAll},
  {test: function(self) {return self.id === 'fshNone';}, fn: selectNone},
  {test: function(self) {return self.id === 'rfsh';}, fn: refresh$1}
];

function eventHandler$2(evt) {
  var self = evt.target;
  for (var i = 0; i < guildLogEvents.length; i += 1) {
    if (guildLogEvents[i].test(self)) {guildLogEvents[i].fn(self);}
  }
}

function gotOptions(guildLog) {
  options$1 = guildLog || options$1;
  options$1.checks = options$1.checks || defChecks.slice(0);
  pCC.innerHTML = guildLogFilter;
  fshNewGuildLog = document.getElementById('fshNewGuildLog');
  fshNewGuildLog.addEventListener('click', eventHandler$2);
  setChecks$1();
  fshOutput = document.getElementById('fshOutput');
  maxPagesToFetch = Number(getValue('newGuildLogHistoryPages'));
  maxPage$1 = maxPagesToFetch;
  getGuildLogPage(1).done(processFirstPage$1);
}

function injectNewGuildLog() {
  getForage('fsh_guildLog').done(gotOptions);
}

function reduceStatTable(prev, curr, index) {
  var key = curr.cells[0].textContent.trim().replace(':', '');
  if (!key) {return prev;}
  prev[key] = {ind: index};
  if (curr.cells[1] && curr.cells[1].textContent) {
    prev[key].value = Number(
      curr.cells[1].textContent.trim().replace('+', '')
    );
  }
  return prev;
}

function getVal(prop, obj) {
  if (obj[prop] && obj[prop].value) {
    return obj[prop].value;
  }
  return 0;
}

function getLastIndex(obj, tbl) {
  if (obj.Enhancements) {
    return tbl.rows[obj.Enhancements.ind - 1];
  }
  return tbl.rows[tbl.rows.length - 1];
}

function addStats$1(el) {
  var statTable = closestTable(el);
  var statObj = Array.prototype.reduce.call(statTable.rows,
    reduceStatTable, {});
  var totalStats = getVal('Attack', statObj) + getVal('Defense', statObj) +
    getVal('Armor', statObj) + getVal('Damage', statObj) +
    getVal('HP', statObj);
  getLastIndex(statObj, statTable).insertAdjacentHTML('beforebegin',
    '<tr class="fshDodgerBlue"><td>Stat Total:</td><td align="right">' +
    totalStats + '&nbsp;</td></tr>');
}

function fshDataFilter(data) {
  var container = createDiv();
  container.insertAdjacentHTML('beforeend', data);
  var bonus = container.getElementsByTagName('font');
  bonus = Array.prototype.filter.call(bonus, function(el) {
    return el.textContent === 'Bonuses';
  });
  bonus.forEach(addStats$1);
  return container.innerHTML;
}

function fshPreFilter(options) {
  if (options.url.indexOf('fetchitem') !== 0) {return;}
  options.dataFilter = fshDataFilter;
}

function addStatTotalToMouseover() { // jQuery
  $.ajaxPrefilter(fshPreFilter);
}

var disableDeactivatePrompts = getValue('disableDeactivatePrompts');

function debuff(buffId) {
  return retryAjax({
    url: 'fetchdata.php',
    data: {
      a: '22',
      d: '0',
      id: buffId
    },
    dataType: 'json'
  });
}

function doDebuff(aLink) { // jQuery
  var buffId = aLink.href.match(/(\d+)$/)[1];
  debuff(buffId)
    .done(function(data) {
      if (data.response.response === 0) {
        aLink.parentNode.innerHTML = '';
      } else {
        $('#dialog_msg').html(data.response.msg).dialog('open');
      }
    });
}

function doPrompt(aLink) {
  var onclick = aLink.getAttribute('onclick');
  var warn = onclick
    .match(/Are you sure you wish to remove the .* skill\?/)[0];
  jConfirm('Remove Skill', warn, function() {
    doDebuff(aLink);
  });
}

function checkForPrompt(aLink) {
  if (!disableDeactivatePrompts) {
    doPrompt(aLink);
  } else {
    doDebuff(aLink);
  }
}

function interceptDebuff(e) { // jQuery
  var aLink = e.target;
  if (aLink.tagName === 'IMG') {
    $(e.target).qtip('hide');
    aLink = aLink.parentNode;
  } else if (aLink.tagName !== 'A') {return;}
  e.stopPropagation();
  e.preventDefault();
  checkForPrompt(aLink);
}

function fastDebuff() {
  var profileRightColumn = document.getElementById('profileRightColumn')
    .lastElementChild;
  profileRightColumn.addEventListener('click', interceptDebuff, true);
}

function backpackRemove$1(invId) { // jQuery
  var _invId = parseInt(invId, 10);
  var theBackpack = $('#backpackContainer').data('backpack');
  // remove from srcData
  theBackpack.srcData.some(function(el, i, ary) {
    if (el.a === _invId) {
      ary.splice(i, 1);
      return true;
    }
    return false;
  });
}

function fastWearUse(evt) { // jQuery
  var InventoryItemID = evt.target.getAttribute('itemID');
  useItem(InventoryItemID).done(function(data) {
    if (data.r !== 0) {return;}
    backpackRemove$1(InventoryItemID);
    evt.target.parentNode.innerHTML = '<span class="fastWorn">Used</span>';
  });
}

function fastWearEquip(e) { // jQuery
  var self = e.target;
  var invId = self.getAttribute('itemid');
  equipItem(invId).done(function(data) {
    if (data.r !== 0) {return;}
    backpackRemove$1(invId);
    // TODO Insert item from worn
    self.parentNode.innerHTML = '<span class="fastWorn">Worn</span>';
  });
}

function actionClass(usable) {
  if (usable) {return 'fastUse';}
  return 'fastWear';
}

function actionText(usable) {
  if (usable) {return 'Use';}
  return 'Wear';
}

function drawButtons(theSpan) {
  var toUse = theSpan.classList.contains('backpackContextMenuUsable');
  var myDiv = createDiv({
    className: 'fastDiv',
    innerHTML: '<span class="' + actionClass(toUse) +
      '" itemid="' + theSpan.getAttribute('data-inv') + '">' +
      actionText(toUse) + '</span>&nbsp;'
  });
  if (theSpan.parentNode.nextElementSibling) {
    myDiv.appendChild(theSpan.parentNode.nextElementSibling.nextElementSibling);
  }
  theSpan.parentNode.parentNode.appendChild(myDiv);
}

function fastWearLinks() {
  var bpTabs = document.getElementById('backpack_tabs');
  var type = bpTabs.getElementsByClassName('tab-selected')[0]
    .getAttribute('data-type');
  var items = document.querySelectorAll('#backpackTab_' + type +
    ' .backpackContextMenuEquippable,.backpackContextMenuUsable');
  if (items.length === 0) {return;}
  Array.prototype.forEach.call(items, drawButtons);
}

function foundBackpack(backpackContainer, theBackpack) {
  var oldShow = theBackpack._showPage;
  theBackpack._showPage = function(type, page) {
    oldShow.call(theBackpack, type, page);
    fastWearLinks();
  };
  if (document.getElementById('backpack_current').textContent.length !== 0) {
    add(3, fastWearLinks);
  }
  backpackContainer.addEventListener('click', function(e) {
    if (e.target.classList.contains('fastWear')) {fastWearEquip(e);}
    if (e.target.classList.contains('fastUse')) {fastWearUse(e);}
  });
}

function injectFastWear() { // jQuery
  if (!getValue('enableQuickDrink')) {return;}
  var bpBack = document.getElementById('backpack');
  bpBack.className = 'fshBackpack';
  bpBack.removeAttribute('style');
  var backpackContainer = document.getElementById('backpackContainer');
  var theBackpack = $(backpackContainer).data('backpack');
  if (theBackpack) {foundBackpack(backpackContainer, theBackpack);}
}

function unequipitem(item) {
  return callApp({
    cmd: 'profile',
    subcmd: 'unequipitem',
    inventory_id: item
  });
}

var profileCombatSetDiv;

function getNekid() { // jQuery
  var profileBlock = profileCombatSetDiv.nextElementSibling;
  var aLinks = profileBlock.getElementsByTagName('a');
  Array.prototype.forEach.call(aLinks, function(link) {
    var item = /inventory_id=(\d+)/.exec(link.href)[1];
    if (item) {
      unequipitem(item).done(function() {
        link.parentNode.innerHTML = '';
      });
    }
  });
}

function nekidBtn() {
  var profileRightColumn = document.getElementById('profileRightColumn');
  profileCombatSetDiv = document.getElementById('profileCombatSetDiv');
  var targetBr = profileCombatSetDiv.parentNode.nextElementSibling;
  var nekidDiv = createDiv({className: 'fshCenter'});
  var theBtn = createButton({
    className: 'fshBl fshBls',
    textContent: 'Nekid'
  });
  nekidDiv.insertAdjacentText('beforeend', '[ ');
  nekidDiv.insertAdjacentElement('beforeend', theBtn);
  nekidDiv.insertAdjacentText('beforeend', ' ]');
  profileRightColumn.replaceChild(nekidDiv, targetBr);
  theBtn.addEventListener('click', getNekid);
}

var quickDelDiv;
var sumComp;
var delAllDiv;
var compDel;
var compSum;
var compDelAll;
var qe;
var thisInvTable;
var componentList = {};
var usedCount;
var usedCountDom;
var totalCount;
var pageCount;

function getInvTables(doc) {
  return doc.getElementById('profileRightColumn')
    .getElementsByClassName('inventory-table');
}

function tallyComponent(visible, el) {
  var mouseover = el.getAttribute('data-tipped');
  var id = mouseover.match(/fetchitem.php\?item_id=(\d+)/)[1];
  componentList[id] = componentList[id] || {
    count: 0,
    src: el.getAttribute('src'),
    onmouseover: mouseover,
    del: [],
    dom: []
  };
  componentList[id].count += 1;
  componentList[id].del.push(el.parentNode.href);
  if (visible) {componentList[id].dom.push(el.parentNode.parentNode);}
  usedCount += 1;
}

function retriveComponent(doc) {
  var visible = doc === document;
  var invTbl = getInvTables(doc)[1];
  var nodeList = invTbl.getElementsByTagName('IMG');
  Array.prototype.forEach.call(nodeList, tallyComponent.bind(null, visible));
  totalCount += invTbl.querySelectorAll(
    'td[background$="inventory/1x1mini.gif"]').length;
}

function tallyTableRow(prev, id) {
  var comp = componentList[id];
  return prev + '<tr><td><img src="' + comp.src +
    '" class="fshTblCenter tip-dynamic" data-tipped="' + comp.onmouseover +
    '"></td><td>' + comp.count + '</td>' +
    '<td>[<span class="sendLink compDelType" data-compid="' + id +
    '">Del</span>]</td></tr>';
}

function displayComponentTally() {
  var tbl = createTable({className: 'fshTblCenter'});
  var tBody = createTBody();
  tbl.appendChild(tBody);
  tBody.insertAdjacentHTML('beforeend',
    '<tr><td colspan="3">Component Summary</td></tr>' +
    Object.keys(componentList).reduce(tallyTableRow, ''));
  var totRow = tbl.insertRow(-1);
  totRow.insertAdjacentHTML('beforeend', '<td>Total:</td>');
  var totCell = totRow.insertCell(-1);
  totCell.colSpan = 2;
  usedCountDom = createSpan();
  usedCountDom.innerHTML = usedCount.toString();
  totCell.appendChild(usedCountDom);
  totCell.insertAdjacentText('beforeend', ' / ' + totalCount.toString());
  sumComp.innerHTML = '';
  sumComp.appendChild(tbl);
}

function gotComponentsPage(data) {
  pageCount += 1;
  sumComp.insertAdjacentHTML('beforeend', pageCount + ', ');
  retriveComponent(createDocument(data));
}

function countComponent(self) { // jQuery.min
  self.parentNode.innerHTML = 'Retrieve page: 1, ';
  usedCount = 0;
  totalCount = 0;
  pageCount = 1;
  var prm = [$.when(document).done(retriveComponent)];
  var lastRowIndex = thisInvTable.rows.length - 1;
  var pageLinks = thisInvTable.rows[lastRowIndex].firstChild.children;
  Array.prototype.forEach.call(pageLinks, function(el) {
    if (el.children.length === 0) {
      prm.push(retryAjax(el.href).done(gotComponentsPage));
    }
  });
  $.when.apply($, prm).done(displayComponentTally);
}

function delAllComponent() {
  var nodeList = thisInvTable.getElementsByClassName('compDelBtn');
  Array.prototype.forEach.call(nodeList, function(el) {
    el.click();
  });
}

function compDeleted(self, data) {
  var response = infoBox(data);
  if (response === 'Component destroyed.') {
    self.parentNode.innerHTML = '';
  } else {
    $('#dialog_msg').html(response).dialog('open');
  }
}

function delComponent(self) { // jQuery.min
  var href = self.previousElementSibling.href;
  retryAjax(href).done(compDeleted.bind(null, self));
}

function addDelBtn(el) {
  el.parentNode.parentNode.insertAdjacentHTML('beforeend',
    '<span class="compDelBtn">Del</span>');
}

function enableDelComponent() {
  quickDelDiv.classList.add('fshHide');
  delAllDiv.classList.remove('fshHide');
  var nodeList = thisInvTable.getElementsByTagName('IMG');
  Array.prototype.forEach.call(nodeList, addDelBtn);
}

function updateUsedCount() {
  usedCount -= 1;
  usedCountDom.textContent = usedCount.toString();
}

function delCompType(self) { // jQuery.min
  var id = self.dataset.compid;
  var td = self.parentNode;
  td.innerHTML = '';
  td.className = 'guildTagSpinner';
  td.style.backgroundImage = 'url(\'' + imageServer +
    '/skin/loading.gif\')';
  var prm = [];
  componentList[id].del.forEach(function(href) {
    prm.push(retryAjax(href).done(updateUsedCount));
  });
  $.when.apply($, prm).done(function() {
    componentList[id].dom.forEach(function(el) {el.innerHTML = '';});
    td.parentNode.remove();
  });
}

var evtHdl = [
  {
    test: function(self) {return self === compDel;},
    act: enableDelComponent
  },
  {
    test: function(self) {return self === compSum;},
    act: countComponent
  },
  {
    test: function(self) {return self === compDelAll;},
    act: delAllComponent
  },
  {
    test: function(self) {return self === qe;},
    act: function() {jQueryDialog(insertQuickExtract);}
  },
  {
    test: function(self) {return self.classList.contains('compDelBtn');},
    act: delComponent
  },
  {
    test: function(self) {return self.classList.contains('compDelType');},
    act: delCompType
  }
];

function compEvt(evt) {
  var self = evt.target;
  evtHdl.some(function(el) {
    if (el.test(self)) {
      el.act(self);
      return true;
    }
    return false;
  });
}

function decorateButton(parentDiv, label) {
  var innerSpan = createSpan(
    {className: 'sendLink', textContent: label});
  parentDiv.textContent = '[';
  parentDiv.appendChild(innerSpan);
  parentDiv.insertAdjacentHTML('beforeend', ']');
  return innerSpan;
}

function profileComponents() {
  var invTables = getInvTables(document);
  if (invTables.length !== 2) {return;}
  thisInvTable = invTables[1];
  var compDiv = thisInvTable.parentNode;
  if (compDiv.style.display !== 'block') {return;}
  var cmDiv = createDiv({className: 'fshCenter'});
  quickDelDiv = createDiv();
  sumComp = createDiv();
  delAllDiv = createDiv({className: 'fshHide'});
  var qeDiv = createDiv();
  compDel = decorateButton(quickDelDiv, 'Enable Quick Del');
  compSum = decorateButton(sumComp, 'Count Components');
  compDelAll = decorateButton(delAllDiv, 'Delete All Visible');
  qe = decorateButton(qeDiv, 'Quick Extract Components');
  cmDiv.appendChild(quickDelDiv);
  cmDiv.appendChild(sumComp);
  cmDiv.appendChild(qeDiv);
  cmDiv.appendChild(delAllDiv);
  compDiv.appendChild(cmDiv);
  compDiv.addEventListener('click', compEvt);
}

function totalAllyEnemy(target, numberOfContacts, contactsTotal) {
  var _c = '';
  if (contactsTotal && contactsTotal >= numberOfContacts) {
    _c = '/' + contactsTotal;
  }
  target.insertAdjacentHTML('beforeend', '<span class="fshBlue">&nbsp;' +
    numberOfContacts + _c + '</span>');
}

function findAllyEnemy(el) {
  var isAllies = el.textContent === 'Allies';
  var isEnemies = el.textContent === 'Enemies';
  if (!isAllies && !isEnemies) {return;}
  var target = el.parentNode;
  var numberOfContacts = target.nextSibling.nextSibling
    .getElementsByTagName('table').length - 1;
  if (isAllies) {
    totalAllyEnemy(target, numberOfContacts,
      getValue('alliestotal'));
  } else {
    totalAllyEnemy(target, numberOfContacts,
      getValue('enemiestotal'));
  }
}

function profileParseAllyEnemy() {
  // Allies/Enemies count/total function
  Array.prototype.forEach.call(
    document.querySelectorAll('#profileLeftColumn strong'), findAllyEnemy);
}

function expandBio() {
  var bioExpander = document.getElementById('fshBioExpander');
  if (bioExpander.textContent === 'More ...') {
    bioExpander.textContent = 'Less ...';
  } else {
    bioExpander.textContent = 'More ...';
  }
  document.getElementById('fshBioHidden').classList.toggle('fshHide');
}

function doCompression(bioCell, bioContents, maxCharactersToShow) {
  // find the end of next HTML tag after the max characters to show.
  var breakPoint = bioContents.indexOf('<br>', maxCharactersToShow) + 4;
  var lineBreak = '';
  if (breakPoint === 3) {
    breakPoint = bioContents.indexOf(' ', maxCharactersToShow) + 1;
    if (breakPoint === 0) {return;}
    lineBreak = '<br>';
  }
  var bioStart = bioContents.substring(0, breakPoint);
  var bioEnd = bioContents.substring(breakPoint, bioContents.length);
  var extraOpenHTML = '';
  var extraCloseHTML = '';
  var tagList = ['b', 'i', 'u', 'span'];
  tagList.forEach(function(tag) {
    var closeTagIndex = bioEnd.indexOf('</' + tag + '>');
    var openTagIndex = bioEnd.indexOf('<' + tag + '>');
    if (closeTagIndex !== -1 && (openTagIndex > closeTagIndex ||
        openTagIndex === -1)) {
      extraOpenHTML += '<' + tag + '>';
      extraCloseHTML += '</' + tag + '>';
    }
  });
  bioCell.innerHTML = bioStart + extraCloseHTML + lineBreak +
    '<span id="fshBioExpander" class="sendLink">More ...</span><br>' +
    '<span class="fshHide" id="fshBioHidden">' + extraOpenHTML + bioEnd +
    '</span>';
  document.getElementById('fshBioExpander')
    .addEventListener('click', expandBio);
}

function findStartPosition(bioContents, _maxRowsToShow) {
  var maxRowsToShow = _maxRowsToShow;
  var startIndex = 0;
  while (maxRowsToShow > 0) {
    maxRowsToShow -= 1;
    startIndex = bioContents.indexOf('<br>\n', startIndex + 1);
  }
  return startIndex;
}

function compressBio(bioCell) {
  var bioContents = bioCell.innerHTML;
  var maxCharactersToShow = getValue('maxCompressedCharacters');
  var maxRowsToShow = getValue('maxCompressedLines');
  var numberOfLines = bioContents.substr(0, maxCharactersToShow)
    .split(/<br>\n/).length - 1;
  if (bioContents.length <= maxCharactersToShow &&
      numberOfLines < maxRowsToShow) {return;}
  if (numberOfLines >= maxRowsToShow) {
    maxCharactersToShow = findStartPosition(bioContents, maxRowsToShow);
  }
  doCompression(bioCell, bioContents, maxCharactersToShow);
}

function doRender(bioCell) {
  var bioContents = bioCell.innerHTML;
  bioContents = renderBio(bioContents);
  if (bioContents) {
    bioCell.innerHTML = bioContents;
  }
}

function testForRender(self, bioCell) {
  if (self && getValue('renderSelfBio') ||
      !self && getValue('renderOtherBios')) {
    doRender(bioCell);
  }
}

function profileRenderBio(self) {
  var bioCell = document.getElementById('profile-bio');
  if (!bioCell) {return;}
  testForRender(self, bioCell);
  if (getValue('enableBioCompressor')) {compressBio(bioCell);}
  bioCell.addEventListener('click', bioEvtHdl);
}

var guildId;
var currentGuildRelationship;
var guildMessages = {
  self: {
    color: 'fshGreen',
    message: getValue('guildSelfMessage')
  },
  friendly: {
    color: 'fshOliveDrab',
    message: getValue('guildFrndMessage')
  },
  old: {
    color: 'fshDarkCyan',
    message: getValue('guildPastMessage')
  },
  enemy: {
    color: 'fshRed',
    message: getValue('guildEnmyMessage')
  }
};

function quickWearLink() {
  // quick wear manager link
  var node = document.querySelector('#profileRightColumn ' +
    'a[href="index.php?cmd=profile&subcmd=togglesection&section_id=2"]');
  if (!node) {return;}
  var wrap = createSpan({innerHTML: '&nbsp;['});
  var qw = createSpan({className: 'sendLink', innerHTML: 'Quick&nbsp;Wear'});
  wrap.appendChild(qw);
  wrap.insertAdjacentText('beforeend', ']');
  node.parentNode.appendChild(wrap);
  qw.addEventListener('click', function() {
    jQueryDialog(insertQuickWear);
  });
}

function profileSelectAll() {
  var bpTabs = document.getElementById('backpack_tabs');
  var type = bpTabs.getElementsByClassName('tab-selected')[0]
    .getAttribute('data-type');
  var items = document.querySelectorAll('#backpackTab_' + type +
    ' li:not(.hcsPaginate_hidden) .backpackItem');
  if (items.length === 0) {return;}
  var checkboxes = document.querySelectorAll('#backpackTab_' + type +
    ' li:not(.hcsPaginate_hidden) .backpackCheckbox:not(:disabled)');
  if (checkboxes.length > 0) {items = checkboxes;}
  Array.prototype.forEach.call(items, function(el) {
    el.click();
  });
}

function selectAllLink() {
  // select all link
  var node = document.querySelector('#profileRightColumn' +
    ' a[href="index.php?cmd=profile&subcmd=dropitems"]');
  if (!node) {return;}
  var allSpan = createSpan({className: 'smallLink', textContent: 'All'});
  allSpan.addEventListener('click', profileSelectAll);
  var wrapper = createSpan({innerHTML: '[&nbsp;'});
  wrapper.appendChild(allSpan);
  wrapper.insertAdjacentHTML('beforeend', '&nbsp;]&nbsp;');
  node.parentNode.appendChild(wrapper);
}

function storeVL() {
  // store the VL of the player
  var virtualLevel = parseInt(
    document.getElementById('stat-vl').textContent, 10);
  if (intValue(document.getElementsByClassName('stat-level')[0]
    .nextElementSibling.textContent) === virtualLevel) {
    setValue('characterVirtualLevel', ''); // ?
  } else {
    setValue('characterVirtualLevel', virtualLevel);
  }
}

function guildAry(val) {
  if (val) {
    return val.toLowerCase().replace(/\s\s*/g, ' ').split(/\s*,\s*/);
  }
  return [];
}

function guildRelationship(_txt) {
  var scenario = [
    {test: guildAry(getValue('guildSelf')), type: 'self'},
    {test: guildAry(getValue('guildFrnd')), type: 'friendly'},
    {test: guildAry(getValue('guildPast')), type: 'old'},
    {test: guildAry(getValue('guildEnmy')), type: 'enemy'}
  ];
  var txt = _txt.toLowerCase().replace(/\s\s*/g, ' ');
  for (var i = 0; i < scenario.length; i += 1) {
    if (scenario[i].test.indexOf(txt) !== -1) {return scenario[i].type;}
  }
}

function foundGuildLink(aLink) {
  var guildIdResult = /guild_id=([0-9]+)/i.exec(aLink.href);
  if (guildIdResult) {guildId = parseInt(guildIdResult[1], 10);}
  currentGuildRelationship = guildRelationship(aLink.text);
  if (currentGuildRelationship) {
    aLink.parentNode.classList.add(
      guildMessages[currentGuildRelationship].color);
    aLink.parentNode.insertAdjacentHTML('beforeend', '<br>' +
      guildMessages[currentGuildRelationship].message);
  }
}

function profileInjectGuildRel() {
  var aLink = document.querySelector(
    '#pCC a[href^="index.php?cmd=guild&subcmd=view&guild_id="]');
  if (aLink) {foundGuildLink(aLink);}
}

function profileInjectQuickButton(avyImg, playerid, playername) {
  var newhtml = '<div align="center">';
  newhtml += '<a class="quickButton buttonQuickBuff tip-static" ' +
    quickBuffHref(playerid) + 'data-tipped="Buff ' + playername +
    '" style="background-image: url(\'' + imageServer +
    '/skin/realm/icon_action_quickbuff.gif\');"></a>&nbsp;&nbsp;';
  if (!getValue('enableMaxGroupSizeToJoin')) {
    newhtml += '<a class="quickButton buttonJoinAll tip-static" ' +
      'href="index.php?cmd=guild&subcmd=groups&subcmd2=joinall" ' +
      'data-tipped="Join All Groups" style="background-image: url(\'' +
      imageServer +
      '/skin/icon_action_join.gif\');"></a>&nbsp;&nbsp;';
  } else {
    var maxGroupSizeToJoin = getValue('maxGroupSizeToJoin');
    newhtml += '<a class="quickButton buttonJoinUnder tip-static" ' +
      'href="index.php?cmd=guild&subcmd=groups&subcmd2=' +
      'joinallgroupsundersize" data-tipped="Join All Groups < ' +
      maxGroupSizeToJoin + ' Members" style="background-image: url(\'' +
      imageServer +
      '/skin/icon_action_join.gif\');"></a>&nbsp;&nbsp;';
  }
  newhtml += '<a class="quickButton tip-static" ' +
    'href="index.php?cmd=auctionhouse&type=-3&tid=' + playerid +
    '" data-tipped="Go to ' + playername +
    '\'s auctions" style="background-image: url(\'' +
    imageServer + '/skin/gold_button.gif\');"></a>&nbsp;&nbsp;';
  newhtml += '<a class="quickButton tip-static" ' +
    'href="index.php?cmd=trade&subcmd=createsecure&target_username=' +
    playername + '" data-tipped="Create Secure Trade to ' + playername +
    '" style="background-image: url(\'' + imageServer +
    '/temple/2.gif\');"></a>&nbsp;&nbsp;';
  newhtml += '<a class="quickButton tip-static" ' +
    'href="index.php?cmd=guild&subcmd=inventory&subcmd2=report&user=' +
    playername + '" data-tipped="Recall items from ' + playername +
    '" style="background-image: url(\'' + imageServer +
    '/temple/3.gif\');"></a>&nbsp;&nbsp;';
  if (currentGuildRelationship === 'self' &&
      getValue('showAdmin')) {
    newhtml += '<a class="quickButton buttonGuildRank tip-static" href="' +
      'index.php?cmd=guild&subcmd=members&subcmd2=changerank&member_id=' +
      playerid + '" data-tipped="Rank ' + playername +
      '" style="background-image: url(\'' + imageServer +
      '/guilds/' + guildId + '_mini.jpg\');"></a>&nbsp;&nbsp;';
  }
  newhtml += '</div>';
  avyImg.insertAdjacentHTML('afterend', newhtml);
}

function removeStatTable(el) {
  var tde = el.getElementsByTagName('td');
  el.parentNode.innerHTML = tde[0].innerHTML.replace(/&nbsp;/g, ' ') +
    '<div class="profile-stat-bonus">' +
    tde[1].textContent + '</div>';
}

function updateStatistics() {
  var charStats = document.getElementById('profileLeftColumn')
    .getElementsByTagName('table')[0];
  var dodgyTables = charStats.getElementsByTagName('table');
  Array.prototype.forEach.call(dodgyTables, removeStatTable);
}

function ifSelf(self) { // Legacy
  if (self) {
    // self inventory
    fastDebuff();
    profileParseAllyEnemy();
    injectFastWear();
    profileComponents();
    quickWearLink();
    selectAllLink();
    storeVL();
    nekidBtn();
  }
}

function yuuzhan(playername, avyImg) { // Legacy
  if (playername === 'yuuzhan') {
    avyImg.setAttribute('src',
      'http://evolutions.yvong.com/images/tumbler.gif');
    avyImg.addEventListener('click', function() {
      $('#dialog_msg').text('Winner!').dialog('open');
    });
  }
}

function updateNmv() {
  var nmvImg = document.querySelector(
    '#profileRightColumn img[src$="/60_sm.gif"]');
  if (!nmvImg) {return;}
  var atkStat = Number(
    document.getElementById('stat-attack').firstChild.textContent.trim());
  if (isNaN(atkStat)) {return;}
  var defStat = Number(
    document.getElementById('stat-defense').firstChild.textContent.trim());
  var oldTipped = nmvImg.dataset.tipped;
  var lvlAry = /\(Level: (\d+)\)/.exec(oldTipped);
  var nmvLvl = Number(lvlAry[1]);
  var nmvEffect = Math.floor(atkStat * nmvLvl * 0.0025);
  nmvImg.dataset.tipped = oldTipped.slice(0, -15) +
    '<br>Attack: ' + (atkStat - nmvEffect).toString() +
    '&nbsp;&nbsp;Defense: ' + (defStat + nmvEffect).toString() +
    '</center></div>';
}

function highlightPvpProtection() {
  var pvpp = document
    .querySelector('#profileLeftColumn a[href="index.php?cmd=points"]');
  if (pvpp.parentNode.nextSibling.textContent.trim() !== 'N/A') {
    pvpp.parentNode.parentNode.style.cssText =
      'border: 3px solid red';
  }
}

function injectProfile() { // Legacy
  var avyImg = document
    .querySelector('#profileLeftColumn img[oldtitle*="\'s Avatar"]');
  if (!avyImg) {return;}
  var playername = pCC
    .getElementsByTagName('h1')[0].textContent;
  var self = playername === playerName();
  ifSelf(self);
  // Must be before profileInjectQuickButton
  profileInjectGuildRel();
  // It sets up guildId and currentGuildRelationship
  var playerid = fallback(getUrlParameter('player_id'),
    playerId());
  profileInjectQuickButton(avyImg, playerid, playername);

  //* ************* yuuzhan having fun
  yuuzhan(playername, avyImg);
  //* *************

  updateHCSQuickBuffLinks('#profileRightColumn a[href*="quickbuff"]');
  updateNmv();
  updateStatistics();
  highlightPvpProtection();
  profileRenderBio(self);
  addStatTotalToMouseover();
  add(3, colouredDots);
}

var retries = 0;
var quickBuffHeader =
  '<div id="helperQBheader"><table class="quickbuffTable"><thead><tr>' +
  '<th class="quickbuffTableHeader">Sustain</th>' +
  '<th class="quickbuffTableHeader">Fury Caster</th>' +
  '<th class="quickbuffTableHeader">Guild Buffer</th>' +
  '<th class="quickbuffTableHeader">Buff Master</th>' +
  '<th class="quickbuffTableHeader">Extend</th>' +
  '<th class="quickbuffTableHeader">Reinforce</th>' +
  '</tr></thead><tbody><tr>' +
  '<td id="fshSus" class="quickbuffTableDetail">&nbsp;</td>' +
  '<td id="fshFur" class="quickbuffTableDetail">&nbsp;</td>' +
  '<td id="fshGB"  class="quickbuffTableDetail">&nbsp;</td>' +
  '<td id="fshBM"  class="quickbuffTableDetail">&nbsp;</td>' +
  '<td id="fshExt" class="quickbuffTableDetail">&nbsp;</td>' +
  '<td id="fshRI"  class="quickbuffTableDetail">&nbsp;</td>' +
  '</tr></tbody></table></div>';
var excludeBuff = {
  'skill-50': 'Death Dealer',
  'skill-54': 'Counter Attack',
  'skill-55': 'Summon Shield Imp',
  'skill-56': 'Vision',
  'skill-60': 'Nightmare Visage',
  'skill-61': 'Quest Finder',
  'skill-98': 'Barricade',
  'skill-101': 'Severe Condition'
};

function getEnhancement(doc, enh, inject) {
  var enhLevel = doc[enh] || 0;
  var enhClass = 'fshLime';
  if (enhLevel < 100) {enhClass = 'fshRed';}
  inject.innerHTML = '<span class="' + enhClass + '">' + enhLevel + '%</span>';
}

function timeUnit(value, unit) {
  if (value > 0) {return value.toString() + unit;}
  return '';
}

function buffTimeLeft(_s) {
  var m = Math.floor(_s / 60);
  var s = _s % 60;
  var buffTimeToExpire = timeUnit(m, 'm');
  if (m > 0 && s > 0) {buffTimeToExpire += ' ';}
  buffTimeToExpire += timeUnit(s, 's');
  return buffTimeToExpire;
}

function getBuff(doc, buff, inject) {
  var s = fallback(doc[buff], 0);
  if (s) {
    var buffTimeToExpire = buffTimeLeft(s);
    inject.innerHTML = '<span class="fshLime">On</span>&nbsp;<span ' +
      'class="fshBuffOn">(' + buffTimeToExpire + ')</span>';
  } else {
    var elem = document.getElementById('buff-outer')
      .querySelector('input[data-name="' + buff + '"]');
    if (elem) {
      inject.innerHTML = '<span class="quickbuffActivate" ' +
        'buffID="' + elem.getAttribute('value') + '">Activate</span>';
    } else {
      inject.innerHTML = '<span class="fshRed;">Off</span>';
    }
  }
}

function quickActivate(evt) { // jQuery
  var trigger = evt.target;
  if (trigger.className !== 'quickbuffActivate') {return;}
  var buffHref = '?cmd=quickbuff&subcmd=activate&targetPlayers=' +
    window.self + '&skills[]=' + trigger.getAttribute('buffID');
  retryAjax(buffHref).done(function(data) {
    var doc = createDocument(data);
    var result = doc.querySelector('#quickbuff-report font');
    if (result &&
        (result.textContent.indexOf(
          'current or higher level is currently active on') !== -1 ||
        result.textContent.indexOf('was activated on') !== -1)) {
      trigger.className = 'fshLime';
      trigger.innerHTML = 'On';
    }
  });
}

function addStatsQuickBuff(data) {
  var myPlayer = document.querySelector('div.player[data-username="' +
    data.username + '"]');
  var activity = myPlayer.querySelector('span.fshLastActivity');
  if (!activity) {
    activity = createSpan({className: 'fshLastActivity'});
    var player = myPlayer.getElementsByTagName('h1')[0];
    player.insertAdjacentElement('afterend', activity);
  }
  activity.innerHTML = 'Last Activity: ' +
    formatLastActivity(data.last_login) +
    '<br>Stamina: ' + data.current_stamina + ' / ' +
    data.stamina + ' ( ' + Math.floor(data.current_stamina /
    data.stamina * 100) + '% )';
}

function newPlayerSpan(el, playerSpan) {
  if (!playerSpan) {
    var ret = createSpan({className: 'fshPlayer'});
    el.nextElementSibling.insertAdjacentElement('afterend', ret);
    return ret;
  }
  return playerSpan;
}

function getBuffColor(myLvl, playerBuffLevel) {
  if (myLvl > playerBuffLevel) {return 'fshRed';}
  return 'fshGreen';
}

function hazBuff(playerData, el) {
  var myBuffName = el.getAttribute('data-name');
  var playerBuffLevel = playerData[myBuffName];
  var playerSpan = el.nextElementSibling.nextElementSibling;
  if (!playerBuffLevel && !playerSpan) {return;}
  if (!playerBuffLevel) {
    playerSpan.innerHTML = '';
    return;
  }
  var lvlSpan = el.nextElementSibling.firstElementChild.firstElementChild;
  var myLvl = parseInt(lvlSpan.textContent.replace(/\[|\]/g, ''), 10);
  playerSpan = newPlayerSpan(el, playerSpan);
  var buffColor = getBuffColor(myLvl, playerBuffLevel);
  playerSpan.innerHTML = ' <span class="' + buffColor +
    '">[' + playerBuffLevel + ']</span>';
}

function addBuffLevels(evt) {
  var player = evt.target;
  if (player.tagName !== 'H1') {return;}
  getProfile(player.textContent).done(addStatsQuickBuff);

  var playerData = player.parentNode.lastElementChild.textContent.split(',');
  playerData = playerData.reduce(function(prev, curr) {
    if (curr.indexOf(' [') !== -1) {
      var bob = curr.split(' [');
      prev[bob[0].trim()] = parseInt(bob[1].replace(']', ''), 10);
    }
    return prev;
  }, {});

  var buffOuter = document.getElementById('buff-outer');
  var nodeList = buffOuter.querySelectorAll('input[name]');

  Array.prototype.forEach.call(nodeList, hazBuff.bind(null, playerData));

}

function doLabels(el) {
  var nameSpan = el.firstElementChild;
  var dataTipped = nameSpan.getAttribute('data-tipped');
  var cost = el.previousElementSibling.getAttribute('data-cost');
  nameSpan.setAttribute('data-tipped', dataTipped
    .replace('</center>', '<br>Stamina Cost: ' + cost + '$&'));
  var lvlSpan = nameSpan.firstElementChild;
  var myLvl = parseInt(lvlSpan.textContent.replace(/\[|\]/g, ''), 10);
  if (!excludeBuff[el.getAttribute('for')] && myLvl < 125) {
    el.classList.add('fshDim');
  }
}

function haveTargets() {
  var firstPlayer = document.getElementById('players')
    .getElementsByTagName('h1')[0];
  if (!firstPlayer && retries < 9) {
    retries += 1;
    setTimeout(haveTargets, 100);
    return;
  }
  if (!firstPlayer) {return;}
  firstPlayer.click();
}

function firstPlayerStats() {
  var targets = document.getElementById('targetPlayers')
    .getAttribute('value');
  if (targets && targets !== '') {haveTargets();}
}

function getSustain$1(responseText) {
  var enh = responseText._enhancements.reduce(function(prev, curr) {
    prev[curr.name] = curr.value;
    return prev;
  }, {});
  var skl = responseText._skills.reduce(function(prev, curr) {
    prev[curr.name] = curr.duration;
    return prev;
  }, {});
  getEnhancement(enh, 'Sustain', document.getElementById('fshSus'));
  getEnhancement(enh, 'Fury Caster', document.getElementById('fshFur'));
  getBuff(skl, 'Guild Buffer', document.getElementById('fshGB'));
  getBuff(skl, 'Buff Master', document.getElementById('fshBM'));
  getBuff(skl, 'Extend', document.getElementById('fshExt'));
  getBuff(skl, 'Reinforce', document.getElementById('fshRI'));

  document.getElementById('helperQBheader')
    .addEventListener('click', quickActivate);
  document.getElementById('players')
    .addEventListener('click', addBuffLevels);

  var labels = document.getElementById('buff-outer')
    .querySelectorAll('label[for^="skill-"]');
  Array.prototype.forEach.call(labels, doLabels);

  firstPlayerStats();

}

function injectQuickBuff() { // jQuery
  var quickbuffDiv = document.getElementById('quickbuff');
  if (!quickbuffDiv) {return;}
  quickbuffDiv.firstElementChild.insertAdjacentHTML('afterend',
    quickBuffHeader);
  getProfile(window.self).done(getSustain$1);
}

function reduceBuffArray(buffAry) {
  return buffAry.reduce(function(prev, curr) {
    prev[curr.name] = Number(curr.level);
    return prev;
  }, {});
}

var packRE = />([ a-zA-Z]+) Level (\d+)/g;

function postWarnings(myBuffs) {
  var nodeList = pCC.firstElementChild.rows[9]
    .cells[0].firstElementChild.getElementsByTagName('A');
  Array.prototype.forEach.call(nodeList, function(el) {
    var tipped = el.dataset.tipped;
    var packBuffs;
    while ((packBuffs = packRE.exec(tipped)) !== null) {
      if (myBuffs[packBuffs[1]] === Number(packBuffs[2])) {
        el.parentNode.insertAdjacentHTML('beforeend',
          '<br><span class="fshRed fshNoWrap">' + packBuffs[1] + ' ' +
          packBuffs[2] + ' active</span>');
      }
    }
  });
}

function parseProfile(data) {
  if (data._skills.length !== 0) {
    var myBuffs = reduceBuffArray(data._skills);
    postWarnings(myBuffs);
  }
}

function injectRPUpgrades() { // jQuery.min
  myStats().done(parseProfile);
}

var spinner = '<span class="guildReportSpinner" style="background-image: ' +
  'url(\'' + imageServer + '/skin/loading.gif\');"></span>';

function recallItem$2(evt) { // jQuery
  $(evt.target).qtip('hide');
  var mode = evt.target.getAttribute('mode');
  var theTd = evt.target.parentNode.parentNode;
  if (mode === '0') {theTd = theTd.parentNode;}
  var href = theTd.firstElementChild.href;
  queueRecallItem({
    invId: href.match(/&id=(\d+)/)[1],
    playerId: href.match(/&player_id=(\d+)/)[1],
    mode: mode,
    action: evt.target.getAttribute('action')
  })
    .done(function(data) {
      if (data.r === 1) {return;}
      theTd.innerHTML = '<span class="fastWorn">' +
        'You successfully recalled the item</span>';
    });
  theTd.innerHTML = spinner;
}

function wearItem$1(evt) { // jQuery
  $(evt.target).qtip('hide');
  var theTd = evt.target.parentNode.parentNode.parentNode;
  var href = theTd.firstElementChild.href;
  equipItem(href.match(/&id=(\d+)/)[1]).done(function(data) {
    if (data.r === 1) {return;}
    theTd.innerHTML = '<span class="fastWorn">Worn</span>';
  });
  theTd.innerHTML = spinner;
}

var events = [
  {test: 'recall', fn: recallItem$2},
  {test: 'equip', fn: wearItem$1},
  {
    test: 'a-reply',
    fn: function(evt) {
      window.openQuickMsgDialog(evt.target.getAttribute('target_player'));
    }
  }
];

function eventHandlers$1(evt) {
  for (var i = 0; i < events.length; i += 1) {
    if (evt.target.classList.contains(events[i].test)) {
      events[i].fn(evt);
      return;
    }
  }
}

var storeMap = 'fsh_potMap';
var defaultOpts = {
  pottab1: false,
  pottab2: false,
  pottab3: false,
  myMap: {},
  minpoint: 12,
  maxpoint: 20
};
var potObj$1;
var potOpts;
var inventory;
var mapping;
var thresholds;

function createContainer() {
  return createDiv({
    id: 'potReport',
    innerHTML: '<input id="pottab1" type="checkbox" name="pottabs"' +
      isChecked(potOpts.pottab1) + '>' +
      '<label for="pottab1">Composed Potion Inventory</label>' +
      '<input id="pottab2" type="checkbox" name="pottabs"' +
      isChecked(potOpts.pottab2) + '>' +
      '<label for="pottab2">Mapping</label>' +
      '<input id="pottab3" type="checkbox" name="pottabs"' +
      isChecked(potOpts.pottab3) + '>' +
      '<label for="pottab3">Thresholds</label>'
  });
}

function createThresholds() {
  return createDiv({
    id: 'thresholds',
    innerHTML: 'Min:' +
      '<input id="minpoint" type="number" value="' +
      potOpts.minpoint + '" min="0" max="999">' +
      'Max:' +
      '<input id="maxpoint" type="number" value="' +
      potOpts.maxpoint + '" min="0" max="999">',
  });
}

function sortKeys(obj) {
  return Object.keys(obj).sort(alpha$1).reduce(function(result, key) {
    result[key] = obj[key];
    return result;
  }, {});
}

function resetMap() {
  potOpts.myMap = Object.keys(potObj$1).reduce(function(prev, pot) {
    prev[pot] = pot;
    return prev;
  }, {});
}

function buildMap() {
  Object.keys(potObj$1).forEach(function(pot) {
    if (!potOpts.myMap[pot]) {potOpts.myMap[pot] = pot;}
  });
  potOpts.myMap = sortKeys(potOpts.myMap);
}

function buildOptions$1(select) {
  return '<select name="' + select +
    '"><option value="Ignore">Ignore</option>' +
    Object.keys(potOpts.myMap).reduce(function(prev, pot) {
      return prev + '<option value="' + pot + '"' +
        isSelected(pot, potOpts.myMap[select]) + '>' + pot + '</option>';
    }, '') + '</select>';
}

function drawMapping() {
  mapping.innerHTML = '<table><tbody>' +
    Object.keys(potOpts.myMap).reduce(function(prev, pot) {
      var options = buildOptions$1(pot);
      return prev + '<tr height="19px"><td>' + pot + '</td><td>' + options +
        '</td></tr>';
    }, '') + '<tr><td></td><td class="fshCenter">' +
    '<input id="fshReset" value="Reset" type="button">' +
    '</td></tr></tbody></table>';
}

function perc2color(percent) {
  var perc = Math.max(Math.min(percent, 100), 0);
  var r;
  var g;
  var b = 0;
  if (perc < 50) {
    r = 255;
    g = Math.round(5.1 * perc);
  } else {
    g = 255;
    r = Math.round(510 - 5.10 * perc);
  }
  var h = r * 0x10000 + g * 0x100 + b;
  return '#' + ('000000' + h.toString(16)).slice(-6);
}

function pivotPotObj(prev, pot) {
  if (potOpts.myMap[pot] !== 'Ignore') {
    if (prev[potOpts.myMap[pot]]) {
      prev[potOpts.myMap[pot]] += potObj$1[pot];
    } else {
      prev[potOpts.myMap[pot]] = potObj$1[pot];
    }
  }
  return prev;
}

function makeRowsFromPivot(pivot, prev, pot) {
  return prev + '<tr height="19px"><td>' + pot +
    '</td><td style="background-color: ' +
    perc2color((pivot[pot] - potOpts.minpoint) /
    (potOpts.maxpoint - potOpts.minpoint) * 100) + ';">' +
    pivot[pot].toString() + '</td></tr>';
}

function drawInventory() {
  var pivot = Object.keys(potObj$1).reduce(pivotPotObj, {});
  inventory.innerHTML = '<table><tbody>' +
    Object.keys(pivot).reduce(makeRowsFromPivot.bind(null, pivot), '') +
    '</tbody></table>';
}

function onChange(e) {
  if (e.target.tagName === 'SELECT') {
    potOpts.myMap[e.target.name] = e.target.value;
    setForage(storeMap, potOpts);
    drawInventory();
  }
}

function doReset$1() {
  resetMap();
  setForage(storeMap, potOpts);
  drawMapping();
  drawInventory();
}

function saveState(self) {
  var option = self.id;
  potOpts[option] = self.checked;
  setForage(storeMap, potOpts);
}

var evtHdl$1 = [
  {
    test: function(self) {return self.id === 'fshReset';},
    act: doReset$1
  },
  {
    test: function(self) {
      return /^pottab\d$/.test(self.id);
    },
    act: saveState
  }
];

function onClick(e) {
  var self = e.target;
  evtHdl$1.some(function(el) {
    if (el.test(self)) {
      el.act(self);
      return true;
    }
    return false;
  });
}

function onInput(e) {
  var self = e.target.id;
  var maybeValue = testRange(e.target.value, 0, 999);
  if (maybeValue) {
    potOpts[self] = maybeValue;
    setForage(storeMap, potOpts);
    drawInventory();
  }
}

function gotMap(data) {
  potOpts = defaultOpts;
  if (data) {
    mixin(potOpts, data);
  }
  buildMap(potObj$1);
  setForage(storeMap, potOpts);
  var container = createContainer();
  var panels = createDiv({id: 'panels'});
  container.appendChild(panels);
  inventory = createDiv({id: 'inventory'});
  drawInventory();
  panels.appendChild(inventory);
  mapping = createDiv({id: 'mapping'});
  drawMapping();
  panels.appendChild(mapping);
  thresholds = createThresholds();
  panels.appendChild(thresholds);

  var myCell = pCC.lastElementChild.insertRow(2).insertCell(-1);
  myCell.addEventListener('change', onChange);
  myCell.addEventListener('click', onClick);
  myCell.addEventListener('input', onInput);
  myCell.appendChild(container);
}

function potReport(potObj_) {
  potObj$1 = sortKeys(potObj_);
  getForage(storeMap).done(gotMap);
}

var wearRE = new RegExp('<b>|Bottle|Brew|Draft|Elixir|Potion|Jagua Egg|' +
  'Gut Rot Head Splitter|Serum');
var counter;
var nodeArray;
var nodeList;
var potObj;

function paintChild() {
  var limit = performance.now() + 1;
  while (performance.now() < limit && counter < nodeArray.length) {
    var el = nodeList[counter];
    var inject = nodeArray[counter];
    el.appendChild(inject);
    counter += 1;
  }
  if (counter < nodeArray.length) {
    add(3, paintChild);
  }
}

function hideElement$1(test) {
  if (test) {return ' class="fshHide"';}
  return '';
}

function isEquipable(test) {
  if (test) {return 'recall';}
  return 'equip';
}

function addPotObj(item) {
  if (item.indexOf(' (Potion)') !== -1) {
    var itemName = item.replace(' (Potion)', '');
    if (potObj[itemName]) {
      potObj[itemName] += 1;
    } else {
      potObj[itemName] = 1;
    }
  }
}

function mySpan(el) {
  var secondHref = el.children.length === 2;
  var firstHref = hideElement$1(!secondHref);
  var itemName = el.previousElementSibling.innerHTML;
  addPotObj(itemName);
  var wearable = hideElement$1(wearRE.test(itemName));
  var equipable = isEquipable(secondHref);
  return createSpan({
    innerHTML: '<span' + firstHref +
    '> | <span class="sendLink recall tip-static" data-tipped="' +
    'Click to recall to backpack" mode="0" action="recall">Fast BP' +
    '</span></span>' +
    ' | <span class="sendLink recall tip-static" ' +
    'data-tipped="Click to recall to guild store" mode="1" ' +
    'action="recall">Fast GS</span>' +
    '<span' + wearable +
    '> | <span class="sendLink ' +
    equipable +
    '" mode="0" action="wear">Fast Wear</span></span>'
  });
}

function doSpan(el) {
  if (counter === 0) {
    el.previousSibling.setAttribute('width', '200px');
    el.setAttribute('width', '370px');
  } else {
    el.previousSibling.removeAttribute('width');
    el.removeAttribute('width');
  }
  nodeArray.push(mySpan(el));
}

function makeSpan() {
  var limit = performance.now() + 10;
  while (performance.now() < limit && counter < nodeList.length) {
    var el = nodeList[counter];

    doSpan(el);

    counter += 1;
  }
  if (counter < nodeList.length) {
    add(3, makeSpan);
  } else {
    counter = 0;
    add(3, paintChild);
    potReport(potObj);
  }
}

function prepareChildRows() {
  nodeList = document.querySelectorAll('#pCC table table ' +
    'tr:not(.fshHide) td:nth-of-type(3n+0)');
  potObj = {};
  nodeArray = [];
  counter = 0;
  add(3, makeSpan);
}

var headerCount;
var headers$1;

function memberHeader(oldhtml) {
  if (!calf.membrList[oldhtml]) {return oldhtml;}
  return onlineDot({last_login: calf.membrList[oldhtml].last_login}) +
    '<a href="index.php?cmd=profile&player_id=' + calf.membrList[oldhtml].id +
    '">' + oldhtml + '</a> [ <span class="a-reply fshLink" target_player=' +
    oldhtml + '>m</span> ]';
}

function paintHeader() {
  var limit = performance.now() + 10;
  while (performance.now() < limit && headerCount < headers$1.length) {
    var el = headers$1[headerCount];
    var oldhtml = el.textContent;
    el.innerHTML = memberHeader(oldhtml);
    headerCount += 1;
  }
  if (headerCount < headers$1.length) {
    add(3, paintHeader);
  }
}

function reportHeader() {
  headers$1 = document.querySelectorAll('#pCC table table ' +
    'tr:not(.fshHide) td[bgcolor="#DAA534"][colspan="2"] b');
  headerCount = 0;
  add(3, paintHeader);
}

var counter$1;
var nodeList$1;
var findUser;
var foundUser;

function hideOther(el) {
  if (el.firstChild.hasAttribute('bgcolor')) {
    foundUser = el.firstChild.firstElementChild.textContent === findUser;
  }
  if (!foundUser) {
    el.className = 'fshHide';
  }
}

function hideOthers() {
  var limit = performance.now() + 5;
  while (performance.now() < limit && counter$1 < nodeList$1.length) {
    var el = nodeList$1[counter$1];

    hideOther(el);

    counter$1 += 1;
  }
  if (counter$1 < nodeList$1.length) {
    add(2, hideOthers);
  }
}

function searchUser() {
  findUser = getUrlParameter('user');
  if (!findUser) {return;}
  var userNodes = document.querySelectorAll(
    '#pCC table table td[bgcolor="#DAA534"] b');
  var userNode = Array.prototype.some.call(userNodes, function(el) {
    return el.textContent === findUser;
  });
  if (!userNode) {return;}
  nodeList$1 = document.querySelectorAll('#pCC table table tr');
  counter$1 = 0;
  add(2, hideOthers);
}

function injectReportPaint() { // jQuery
  getMembrList(false).done(function() {
    add(3, reportHeader);
  });
  add(2, searchUser);
  add(3, prepareChildRows);
  pCC.getElementsByTagName('TABLE')[1]
    .addEventListener('click', eventHandlers$1);
}

function injectSaveSettings() { // Hybrid
  var content = pCC;
  var fshSettings = {};
  var list = GM_listValues();
  for (var i = 0; i < list.length; i += 1) {
    fshSettings[list[i]] = getValue(list[i]);
  }
  content.innerHTML = '<h1>FSH Settings</h1><br><center>The box below ' +
    'is your current settings. Copy it to save your current settings<br>' +
    'To load saved settings, simply replace the contents of the box with ' +
    'your saved copy and press the button below.' +
    '<textarea align="center" cols="80" rows="25" style="' +
    'background-color:white;' +
    'font-family:Consolas,\'Lucida Console\',\'Courier New\',monospace;" ' +
    'id="HelperfshSettings" name="fshSettings">' +
    JSON.stringify(fshSettings) + '</textarea>' +
    '<br><input id="HelperLoadSettings" class="custombutton" ' +
    'type="submit" value="Load Settings!" /></center>';
  $('#HelperLoadSettings').click(function() {
    var settings = JSON.parse($('#HelperfshSettings').val());
    Object.keys(settings).forEach(function(id) {
      setValue(id, settings[id]);
    });
    $('#dialog_msg').text('Settings loaded successfully!').dialog('open');
  });
}

// var system = require('./support/system');

// Legacy - Bad, could be repurposed
/* function getBpCountFromWorld(responseText) {
  // backpack counter
  var doc=system.createDocument(responseText);
  var bp=system.findNode(
    '//td[a/img[contains(@src,"_manageitems.gif")]]',doc);
  var injectHere=document.getElementById('reportDiv');
  if (!injectHere) {
    injectHere=system.findNode(
      '//b[contains(.,"Multiple Scavenging Results")]/..');
  }
  injectHere.appendChild(bp);
}
*/

/* function multiSummary() { // Legacy - Bad, could be repurposed
  var injectHere=system.findNode(
    '//b[contains(.,"Multiple Scavenging Results")]/..');
  if (injectHere) { // multi scavenging
    var victories=system.findNodes('//td[contains(.,"victorious")]');
    if (victories) {
      injectHere.innerHTML+='<br/>Victories: '+victories.length;
    }
    var defeats=system.findNodes('//td[contains(.,"defeated")]');
    if (defeats) {
      injectHere.innerHTML+=', Defeated: '+defeats.length;
    }
    var gains=system.findNodes('//td[contains(.,"Item Gained")]/b');
    if (gains) {
      injectHere.innerHTML+='<br/>'+gains.length+' item(s): ';
      var gainHash={};
      for (var i=0;i<gains.length;i += 1) {
        if (gainHash[gains[i].textContent]) {
          gainHash[gains[i].textContent]+= 1;
        } else {
          gainHash[gains[i].textContent]=1;
        }
      }
      for (var item in gainHash) {
        if (!gainHash.hasOwnProperty(item)) { continue; }
        injectHere.innerHTML+=gainHash[item]+' '+item+'(s), ';
      }
    }
  }
  system.xmlhttp('index.php?cmd=world', getBpCountFromWorld);
}
*/

function dontPost$1(e) { // jQuery
  e.preventDefault();
  window.location = 'index.php?cmd=scavenging&subcmd=process' +
    '&cave_id=' + $('#pCC input[name="cave_id"]:checked').val() +
    '&gold=' + $('#gold').val() + '&submit=Scavenge';
}

function injectScavenging() { // jQuery
  $('#pCC input[value="Scavenge"]').click(dontPost$1);
}

function buffAll(self) {
  var titanTable = self.parentNode.parentNode.parentNode.parentNode;
  var shortList = [];
  for (var j = 1; j < titanTable.rows.length; j += 2) {
    var firstCell = titanTable.rows[j].cells[0].firstChild.firstChild;
    shortList.push(firstCell.textContent);
  }
  openQuickBuffByName(shortList.join());
}

function buffEvent(e) {
  var self = e.target;
  if (self.textContent === '[b]') {
    openQuickBuffByName(self.previousElementSibling.textContent);
  }
  if (self.textContent === 'all') {
    buffAll(self);
  }
}

function evtHdl$2(e) {
  if (e.target.classList.contains('fshBl')) {buffEvent(e);}
}

function doBuffLinks$1(titanTable) {
  for (var j = 1; j < titanTable.rows.length; j += 2) {
    var firstCell = titanTable.rows[j].cells[0];
    firstCell.insertAdjacentHTML('beforeend',
      ' <button class="fshBl fshXSmall">[b]</button>');
  }
  titanTable.rows[0].cells[0].insertAdjacentHTML('beforeend',
    ' <button class="fshBl fshXSmall">all</button>');
}

function gotTables(titanTables) {
  for (var i = 2; i < titanTables.length; i += 1) {
    var titanTable = titanTables[i];
    if (titanTable.rows.length < 2) {continue;}
    doBuffLinks$1(titanTable);
  }
  titanTables[1].addEventListener('click', evtHdl$2);
}

function injectScouttowerBuffLinks(titanTables) {
  if (titanTables.length > 2) {gotTables(titanTables);}
}

function cooldownTracker(aRow, theTitans) {
  var myName = aRow.cells[0].firstElementChild.getAttribute('oldtitle')
    .replace(' (Titan)', '');
  if (!theTitans[myName]) {
    var cooldown = aRow.nextElementSibling.cells[0].textContent;
    var coolTime = 0;
    if (cooldown.indexOf('until') !== -1) {
      coolTime = parseDateAsTimestamp(
        cooldown.replace('Cooldown until: ', ''));
    }
    theTitans[myName] = {
      cooldownText: cooldown,
      coolTime: coolTime,
      seen: 'yes'
    };
  }
}

function addRow(theTitans, trackerTable, titan) {
  if (theTitans[titan].coolTime < now) {return;}
  trackerTable.insertAdjacentHTML('beforeend',
    '<tr><td class="fshCenter">' + titan + '</td>' +
    '<td class="fshBold fshCenter fshCooldown">' +
    theTitans[titan].cooldownText + '</td><td class="fshCenter">' +
    theTitans[titan].seen + '</td></tr>');
}

function displayTracker(parentTable, theTitans) {
  var trackerTable = createTable({className: 'fshTTracker'});
  var tBody = createTBody({
    innerHTML: '<tr><td class="header fshCenter">Titan</td>' +
      '<td class="header fshCenter">Cooldown</td>' +
      '<td class="header fshCenter">Visible</td></tr>'
  });
  trackerTable.appendChild(tBody);
  Object.keys(theTitans).forEach(addRow.bind(null, theTitans, tBody));

  var newRow = parentTable.insertRow(5);
  var newCell = newRow.insertCell(-1);
  newCell.colSpan = 3;
  newCell.appendChild(trackerTable);
}

function addMissingTitansFromOld(oldTitans, newTitans) {
  if (!oldTitans) {return;}
  Object.keys(oldTitans).forEach(function(oldTitan) {
    if (newTitans[oldTitan]) {return;}
    if (oldTitans[oldTitan].coolTime <= now) {return;}
    newTitans[oldTitan] = {
      cooldownText: oldTitans[oldTitan].cooldownText,
      coolTime: oldTitans[oldTitan].coolTime,
      seen: 'no'
    };
  });
}

function getTitanString(guildKills, totalHP, currentHP) {
  var numberOfKillsToSecure = Math.ceil(totalHP / 2 + 1);
  if (guildKills >= numberOfKillsToSecure) {
    return 'Secured';
  }
  if (numberOfKillsToSecure - guildKills > currentHP) {
    return '<span class="fshRed">Cannot Secure</span>';
  }
  return '<span class="fshRed">' +
    (numberOfKillsToSecure - guildKills) + '</span> to secure';
}

function getKillsPct(currentNumberOfKills, guildKills) {
  if (currentNumberOfKills === 0) {return 0;}
  return guildKills * 100 / currentNumberOfKills;
}

function killsSummary(aRow) {
  var titanHP = aRow.cells[2].textContent;
  if (titanHP.indexOf('-') !== -1) {return;}
  var guildKills = Number(aRow.cells[3].textContent);
  var titanHPArray = titanHP.split('/');
  var currentHP = Number(titanHPArray[0]);
  var totalHP = Number(titanHPArray[1]);
  var currentNumberOfKills = totalHP - currentHP;
  var titanString = getTitanString(guildKills, totalHP, currentHP);
  var killsTotPct = (guildKills * 100 / totalHP).toFixed(2);
  aRow.cells[3].insertAdjacentHTML('beforeend',
    '<br><span class="fshBlue"> (' +
    getKillsPct(currentNumberOfKills, guildKills).toFixed(2) +
    '% Current <br>' + killsTotPct + '% Total<br>' + titanString + ')');
}

function gotOldTitans(oldTitans) {
  var titanTables = pCC.getElementsByTagName('table');
  injectScouttowerBuffLinks(titanTables);
  var titanTable = titanTables[1];
  var newTitans = {};
  for (var i = 1; i < titanTable.rows.length - 1; i += 6) {
    var aRow = titanTable.rows[i];
    killsSummary(aRow);
    cooldownTracker(aRow, newTitans);
  }
  addMissingTitansFromOld(oldTitans, newTitans);
  displayTracker(titanTables[0], newTitans);
  setForage('fsh_titans', newTitans);
}

function injectScouttower() {
  getForage('fsh_titans').done(gotOldTitans);
}

function getScoutTowerDetails(responseText) { // Legacy
  var doc = createDocument(responseText);
  injectScouttowerBuffLinks(doc.getElementById('pCC')
    .getElementsByTagName('table'));
  var scoutTowerTable = findNode(
    '//table[tbody/tr/td/img[contains(@src,"/banners/scouttower.png")]]',
    doc);
  if (scoutTowerTable) {
    var titanTable = findNode(
      '//table[tbody/tr/td/img[contains(@src,"/banners/titankilllog.png")]]');
    var newRow = titanTable.insertRow(0);
    newRow.appendChild(scoutTowerTable.rows[1].cells[0])
      .insertAdjacentHTML('beforeend', '<br><br>');
    newRow = titanTable.insertRow(1);
    newRow.appendChild(scoutTowerTable.rows[8].cells[0]);
  }
}

function injectTitan() { // jQuery
  retryAjax('index.php?cmd=guild&subcmd=scouttower').done(getScoutTowerDetails);
}

function guildView(guildId) {
  return callApp({cmd: 'guild', subcmd: 'view', guild_id: guildId});
}

function getStat(stat, doc) { // jQuery
  // 'Hidden' returns NaN
  return intValue(
    $(stat, doc)
      .contents()
      .filter(function(i, e) {
        return e.nodeType === 3;
      })[0].nodeValue
  );
}

function getBuffLevel(doc, buff) { // jQuery
  var hasBuff = $('img.tip-static[data-tipped*="b>' + buff + '</b"]', doc)
    .data('tipped');
  // var re = new RegExp('</b> \\(Level: (\\d+)\\)');
  var test = /<\/b> \(Level: (\d+)\)/.exec(hasBuff);
  if (test) {return intValue(test[1]);}
  return 0;
}

function getBonus(stat, doc) { // jQuery
  var target = $(stat, doc);
  var children = target.children();
  if (children.length === 0) {
    children = target.next();
  }
  return intValue(children.text().slice(2, -1));
}

function cloakGuess(bonus, level) {
  if (bonus > level * 10 ||
      bonus < level) {
    return bonus;
  }
  return level * 10;
}

function updateForCloak(obj) {
  obj.attackValue = cloakGuess(obj.attackBonus, obj.levelValue);
  obj.defenseValue = cloakGuess(obj.defenseBonus, obj.levelValue);
  obj.armorValue = cloakGuess(obj.armorBonus, obj.levelValue);
  obj.damageValue = cloakGuess(obj.damageBonus, obj.levelValue);
  obj.hpValue = obj.hpBonus;
}

function playerDataString(responseText) {
  var doc = createDocument(responseText);
  var obj = {
    levelValue: getStat('#stat-vl', doc),
    attackValue: getStat('#stat-attack', doc),
    attackBonus: getBonus('#stat-attack', doc),
    defenseValue: getStat('#stat-defense', doc),
    defenseBonus: getBonus('#stat-defense', doc),
    armorValue: getStat('#stat-armor', doc),
    armorBonus: getBonus('#stat-armor', doc),
    damageValue: getStat('#stat-damage', doc),
    damageBonus: getBonus('#stat-damage', doc),
    hpValue: getStat('#stat-hp', doc),
    hpBonus: getBonus('#stat-hp', doc),
    killStreakValue: getStat('#stat-kill-streak', doc),
    // get buffs here later ... DD, CA, DC, Constitution, etc
    counterAttackLevel: getBuffLevel(doc, 'Counter Attack'),
    doublerLevel: getBuffLevel(doc, 'Doubler'),
    deathDealerLevel: getBuffLevel(doc, 'Death Dealer'),
    darkCurseLevel: getBuffLevel(doc, 'Dark Curse'),
    holyFlameLevel: getBuffLevel(doc, 'Holy Flame'),
    constitutionLevel: getBuffLevel(doc, 'Constitution'),
    sanctuaryLevel: getBuffLevel(doc, 'Sanctuary'),
    flinchLevel: getBuffLevel(doc, 'Flinch'),
    nightmareVisageLevel: getBuffLevel(doc, 'Nightmare Visage'),
    superEliteSlayerLevel: getBuffLevel(doc, 'Super Elite Slayer'),
    fortitudeLevel: getBuffLevel(doc, 'Fortitude'),
    chiStrikeLevel: getBuffLevel(doc, 'Chi Strike'),
    terrorizeLevel: getBuffLevel(doc, 'Terrorize'),
    barricadeLevel: getBuffLevel(doc, 'Barricade'),
    reignOfTerrorLevel: getBuffLevel(doc, 'Reign Of Terror'),
    anchoredLevel: getBuffLevel(doc, 'Anchored'),
    severeConditionLevel: getBuffLevel(doc, 'Severe Condition'),
    entrenchLevel: getBuffLevel(doc, 'Entrench'),
    cloakLevel: getBuffLevel(doc, 'Cloak')
  };
  obj.superEliteSlayerMultiplier = Math.round(0.002 *
    obj.superEliteSlayerLevel * 100) / 100;

  if (obj.cloakLevel === 0 ||
      typeof obj.attackValue === 'number' &&
      !isNaN(obj.attackValue)) {
    return obj;
  }

  updateForCloak(obj);
  return obj;
}

function getBuffLvl(buffs, buff) {
  return fallback(buffs[buff], 0);
}

function playerDataObject(json) {
  var buffs = reduceBuffArray(json._skills);
  var obj = {
    levelValue: json.level,
    attackValue: json.attack,
    attackBonus: json.bonus_attack,
    defenseValue: json.defense,
    defenseBonus: json.bonus_defense,
    armorValue: json.armor,
    armorBonus: json.bonus_armor,
    damageValue: json.damage,
    damageBonus: json.bonus_damage,
    hpValue: json.hp,
    hpBonus: json.bonus_hp,
    killStreakValue: intValue(json.killstreak),
    // get buffs here later ... DD, CA, DC, Constitution, etc
    counterAttackLevel: getBuffLvl(buffs, 'Counter Attack'),
    doublerLevel: getBuffLvl(buffs, 'Doubler'),
    deathDealerLevel: getBuffLvl(buffs, 'Death Dealer'),
    darkCurseLevel: getBuffLvl(buffs, 'Dark Curse'),
    holyFlameLevel: getBuffLvl(buffs, 'Holy Flame'),
    constitutionLevel: getBuffLvl(buffs, 'Constitution'),
    sanctuaryLevel: getBuffLvl(buffs, 'Sanctuary'),
    flinchLevel: getBuffLvl(buffs, 'Flinch'),
    nightmareVisageLevel: getBuffLvl(buffs, 'Nightmare Visage'),
    superEliteSlayerLevel: getBuffLvl(buffs, 'Super Elite Slayer'),
    fortitudeLevel: getBuffLvl(buffs, 'Fortitude'),
    chiStrikeLevel: getBuffLvl(buffs, 'Chi Strike'),
    terrorizeLevel: getBuffLvl(buffs, 'Terrorize'),
    barricadeLevel: getBuffLvl(buffs, 'Barricade'),
    reignOfTerrorLevel: getBuffLvl(buffs, 'Reign Of Terror'),
    anchoredLevel: getBuffLvl(buffs, 'Anchored'),
    severeConditionLevel: getBuffLvl(buffs, 'Severe Condition'),
    entrenchLevel: getBuffLvl(buffs, 'Entrench'),
    cloakLevel: getBuffLvl(buffs, 'Cloak')
  };
  if (obj.cloakLevel !== 0) {updateForCloak(obj);}
  return obj;
}

var highlightPlayersNearMyLvl$1;
var lvlDiffToHighlight$1;
var myVL;
var spinner$1;
var validPvP = nowSecs - 604800;
var guilds;

function doOnlineDot(aTable, data) {
  aTable.rows[0].insertAdjacentHTML('beforeend',
    '<td>' + onlineDot({last_login: data.last_login}) + '</td>');
  if (myVL &&
      data.last_login >= validPvP &&
      data.virtual_level > myVL - lvlDiffToHighlight$1 &&
      data.virtual_level < myVL + lvlDiffToHighlight$1) {
    aTable.parentNode.parentNode.classList.add('lvlHighlight');
  }
}

function parsePlayer(aTable, data, jqXhr) {
  if (data) {
    doOnlineDot(aTable, data);
    var defender = playerDataObject(data);
    if (defender.cloakLevel !== 0) {console.log('Cloaked Player', data);} // eslint-disable-line no-console
  } else {
    aTable.rows[0].insertAdjacentHTML('beforeend',
      '<td class="fshBkRed">' + jqXhr.status + '</td>');
  }
}

function failFilter(jqXhr) {
  return $.Deferred().resolve(null, jqXhr).promise();
}

function addPlayerObjectToGuild(guildId, obj) {
  if (guilds[guildId]) {
    guilds[guildId].push(obj);
  } else {
    guilds[guildId] = [obj];
  }
}

function addPlayerToGuild(tbl, playerName$$1) {
  var guildHRef = tbl.rows[0].cells[0].firstElementChild.href;
  var guildId = /guild_id=(\d+)/.exec(guildHRef)[1];
  addPlayerObjectToGuild(guildId, {dom: tbl, player: playerName$$1});
}

function stackAjax(prm, playerName$$1, tbl) {
  prm.push(getProfile(playerName$$1)
    .pipe(null, failFilter)
    .done(parsePlayer.bind(null, tbl))
  );
}

function parseGuild(data) {
  var guildId = data.r.id;
  data.r.members.forEach(function(member) {
    guilds[guildId].forEach(function(player) {
      if (member.name === player.player) {
        doOnlineDot(player.dom, {
          last_login: (nowSecs - member.last_activity).toString(),
          virtual_level: member.vl
        });
      }
    });
  });
}

function findOnlinePlayers() { // jQuery
  var someTables = pCC.getElementsByTagName('table');
  var prm = [];
  guilds = {};
  Array.prototype.slice.call(someTables, 4).forEach(function(tbl) {
    var playerName$$1 = tbl.textContent.trim();
    if (tbl.rows[0].cells[0].firstElementChild) {
      addPlayerToGuild(tbl, playerName$$1);
    } else {
      stackAjax(prm, playerName$$1, tbl);
    }
  });
  Object.keys(guilds).forEach(function(guildId) {
    if (guilds[guildId].length === 1) {
      stackAjax(prm, guilds[guildId][0].player, guilds[guildId][0].dom);
    } else {
      guildView(guildId).done(parseGuild);
    }
  });
  $.when.apply($, prm).done(function() {
    spinner$1.classList.add('fshHide');
  });
}

function gotMyVl(data) {
  myVL = data.virtual_level;
  lvlDiffToHighlight$1 = 11;
  if (myVL <= 205) {lvlDiffToHighlight$1 = 6;}
}

function getMyVL(e) { // jQuery
  $(e.target).qtip('hide');
  spinner$1 = createSpan({
    className: 'fshCurveBtn fshTopListSpinner',
    style: {
      backgroundImage: 'url(\'' + imageServer +
        '/world/actionLoadingSpinner.gif\')'
    }
  });
  e.target.parentNode.replaceChild(spinner$1, e.target);
  if (highlightPlayersNearMyLvl$1) {
    myStats(false).done(gotMyVl).done(findOnlinePlayers);
  } else {findOnlinePlayers();}
}

function looksLikeTopRated() {
  highlightPlayersNearMyLvl$1 =
    getValue('highlightPlayersNearMyLvl');
  var theCell = pCC.getElementsByTagName('TD')[0];
  theCell.firstElementChild.className = 'fshTopListWrap';
  var findBtn = createInput({
    id: 'fshFindOnlinePlayers',
    className: 'custombutton tip-static',
    type: 'button',
    value: 'Find Online Players',
    dataset: {
      tipped: 'Fetch the online status of the ' +
        'top 250 players (warning ... takes a few seconds).'
    }
  });
  theCell.insertBefore(findBtn, theCell.firstElementChild);
  findBtn.addEventListener('click', getMyVL);
}

function injectTopRated() {
  if (pCC &&
      pCC.firstElementChild &&
      pCC.firstElementChild.rows &&
      pCC.firstElementChild.rows.length > 2 &&
      pCC.firstElementChild.rows[1].textContent
        .indexOf('Last Updated') === 0) {looksLikeTopRated();}
}

function getItemDiv() {
  var itemDiv = document.getElementById('item-div');
  if (!itemDiv) {
    itemDiv = createDiv({id: 'item-div', className: 'itemDiv'});
    var itemList = document.getElementById('item-list');
    var oldItems = itemList.getElementsByTagName('table');
    while (oldItems.length) {
      oldItems[0].classList.add('fshBlock');
      itemDiv.appendChild(oldItems[0]);
    }
    itemList.parentNode.insertBefore(itemDiv, itemList);
  }
  return itemDiv;
}

function doHideFolder(evt) {
  var folderid = evt.target.id;
  var itemDiv = getItemDiv();
  var items = itemDiv.getElementsByTagName('table');
  Array.prototype.forEach.call(items, function(el) {
    el.firstElementChild.lastElementChild.firstElementChild
      .firstElementChild.checked = false;
    var hidden = el.classList.contains('fshHide');
    var all = folderid === 'folderid0';
    var hasFolder = el.classList.contains(folderid);
    if (hidden && fallback(all, hasFolder)) {
      el.classList.remove('fshHide');
      el.classList.add('fshBlock'); // show()
    }
    if (!hidden && !all && !hasFolder) {
      el.classList.remove('fshBlock');
      el.classList.add('fshHide'); // hide()
    }
  });
}

function hideFolder(evt) {
  if (evt.target.nodeName === 'SPAN' &&
      evt.target.id.indexOf('folderid') !== -1) {doHideFolder(evt);}
}

function doFolderHeaders(folders) {
  var folderCell = '<td colspan=6>';
  // append main folder
  folderCell += '<span id="folderid0" class="fshLink" fid=0>All</span>' +
    ' &ensp;<span id="folderid-1" class="fshLink" fid="-1">Main</span>';
  Object.keys(folders).forEach(function(key) {
    folderCell += ' &ensp;<span id="folderid' + key +
      '" class="fshLink fshNoWrap" fid=' + key + '>' +
      folders[key] + '</span> ';
  });
  var foldersRow = createTr({
    id: 'fshFolderSelect',
    innerHTML: folderCell
  });
  foldersRow.addEventListener('click', hideFolder);
  var multiple = document.getElementById('fshSelectMultiple');
  multiple.insertAdjacentHTML('afterend', '<tr id="fshShowSTs">' +
    '<td align="center" colspan=6>' +
    '<label><input type="checkbox" id="itemsInSt" checked> ' +
    'Select items in ST</label></td></tr>');
  multiple.insertAdjacentElement('afterend', foldersRow);
}

var invItems;

function stColor(el, item) {
  if (item.is_in_st) {
    el.classList.add('isInST');
  } else {el.classList.add('tradeItemMargin');}
}

function forEachInvItem(el) {
  var checkbox = el.firstElementChild.lastElementChild.firstElementChild
    .firstElementChild;
  var item = invItems[checkbox.getAttribute('value')];
  el.classList.add('folderid' + item.folder_id);
  if (invItems.fshHasST) {stColor(el, item);}
  checkbox.classList.add('itemid' + item.item_id);
  checkbox.classList.add('itemtype' + item.type);
}

function processTrade(data) {

  time('trade.processTrade');

  invItems = data.items;
  /* Highlight items in ST */
  var nodeList = document.getElementById('item-list')
    .getElementsByTagName('table');
  Array.prototype.forEach.call(nodeList, forEachInvItem);
  doFolderHeaders(data.folders);

  timeEnd('trade.processTrade');

}

function inv$1() { // jQuery
  getInventoryById().done(function(data) {
    add(3, processTrade, [data]);
  });
}

function getHowMany(itemTables) {
  var howMany = parseInt(document.getElementById('fshSendHowMany').value, 10);
  if (isNaN(howMany)) {return itemTables.length;}
  // maximum of 100 items in an ST
  if (calf.subcmd !== '-') {return Math.min(100, howMany);}
  return howMany;
}

function shouldBeChecked(itemid, checkbox) {
  return itemid === 'itemid-1' ||
    itemid === 'itemid-2' && checkbox.classList.contains('itemtype12') ||
    checkbox.classList.contains(itemid);
}

function doCheckAll$1(evt) {
  var itemid = evt.target.id;
  var itemList = document.getElementById('item-div') ||
    document.getElementById('item-list');
  var itemTables = itemList.querySelectorAll('table:not(.fshHide)');
  var howMany = getHowMany(itemTables);
  var itemsInSt = document.getElementById('itemsInSt').checked;
  Array.prototype.forEach.call(itemTables, function(el) {
    var checkbox = el.firstElementChild.lastElementChild.firstElementChild
      .firstElementChild;
    if (howMany &&
        fallback(itemsInSt, !el.classList.contains('isInST')) &&
        shouldBeChecked(itemid, checkbox)) {
      checkbox.checked = true;
      howMany -= 1;
      return;
    }
    checkbox.checked = false;
  });
}

function toggleAllPlants(evt) {
  if (evt.target.classList.contains('fshCheckAll')) {doCheckAll$1(evt);}
}

function injectTradeOld() {
  var myTd = '<td colspan=6>Select:&ensp;<span id="itemid-1" ' +
    'class="fshCheckAll fshLink fshNoWrap">All Items</span> &ensp;' +
    '<span id="itemid-2" ' +
    'class="fshCheckAll fshLink fshNoWrap">All Resources</span>';
  var sendClasses = getValue('sendClasses');
  var itemList = JSON.parse('[' + sendClasses + ']');
  itemList.forEach(function(el) {
    myTd += ' &ensp;<span id="itemid' + el[1] +
      '" class="fshCheckAll fshLink fshNoWrap">' + el[0] + '</span>';
  });
  myTd += ' &ensp;How&nbsp;many:<input id="fshSendHowMany" type="text" ' +
    'class="custominput" value="all" size=3></td>';
  var multiple = createTr({
    id: 'fshSelectMultiple',
    innerHTML: myTd
  });
  multiple.addEventListener('click', toggleAllPlants);
  var el = document.getElementById('item-list').parentNode.parentNode;
  el.parentNode.insertBefore(multiple, el);
}

function injectTrade() {
  add(3, inv$1);
  add(3, injectTradeOld);
}

function calcLvlToTest() {
  var levelToTest = intValue(document.getElementsByClassName(
    'stat-level')[0].nextElementSibling.textContent);
  var characterVirtualLevel = getValue('characterVirtualLevel');
  if (characterVirtualLevel) {levelToTest = characterVirtualLevel;}
  return levelToTest;
}

function calcPvpRange(levelToTest) {
  if (levelToTest <= 205) {return 5;}
  return 10;
}

function calcGvgRange(levelToTest) {
  if (levelToTest <= 300) {
    return 25;
  }
  if (levelToTest <= 700) {
    return 50;
  }
  return 100;
}

function injectViewGuild() {
  add(3, colouredDots);
  removeGuildAvyImgBorder();
  guildXPLock();
  var highlightPlayersNearMyLvl =
    getValue('highlightPlayersNearMyLvl');
  var highlightGvGPlayersNearMyLvl =
    getValue('highlightGvGPlayersNearMyLvl');
  if (!highlightPlayersNearMyLvl && !highlightGvGPlayersNearMyLvl) {return;}
  var levelToTest = calcLvlToTest();
  var pvpRange = calcPvpRange(levelToTest);
  var gvgRange = calcGvgRange(levelToTest);
  var memList = document.querySelectorAll(
    '#pCC a[data-tipped*="<td>VL:</td>"]');
  Array.prototype.forEach.call(memList, function(el) {
    var tipped = el.getAttribute('data-tipped');
    var lastActDays = lastActivityRE.exec(tipped)[1];
    var vlevel = Number(/VL:.+?(\d+)/.exec(tipped)[1]);
    var aRow = el.parentNode.parentNode;
    if (lastActDays < 7 &&
        highlightPlayersNearMyLvl &&
        Math.abs(vlevel - levelToTest) <= pvpRange) {
      aRow.classList.add('lvlHighlight');
    } else if (lastActDays < 7 &&
        highlightGvGPlayersNearMyLvl &&
        Math.abs(vlevel - levelToTest) <= gvgRange) {
      aRow.classList.add('lvlGvGHighlight');
    }
  });
}

var assets = {
  colorHash: {
    '0': 'red', // Should never see this.
    '1': 'orange',
    '2': 'yellow'
  },
  worldFormgroup:
    '<a href="#" class="fshCurveBtn tip-static" ' +
      'data-tipped="Quick Create Attack Group" ' +
      'style="background-image: url(\'' + imageServer +
      '/skin/realm/icon_action_formgroup.gif\');">' +
    '</a>',
  worldQuickBuff:
    '<a href="#" class="fshCurveBtn tip-static" ' +
      'data-tipped="Open Quick Buff Popup" ' +
      'style="background-image: url(\'' + imageServer +
      '/skin/realm/icon_action_quickbuff.gif\');">' +
    '</a>',
  worldMap:
    '<a href="index.php?cmd=world&subcmd=map" target="fsWorldMap" ' +
      'class="fshCurveBtn tip-static" data-tipped="Open Realm Map" ' +
      'style="background-image: url(\'' + imageServer +
      '/skin/realm/icon_action_map.gif\');">' +
    '</a>',
  searchMapUFSG:
    '<a href="https://guide.fallensword.com/index.php?cmd=realms' +
      '&subcmd=view&realm_id=@@realmId@@" target="mapUFSG" ' +
      'class="fshCurveBtn tip-static" data-tipped="Search map in ' +
      'Ultimate FSG" style="background-image: url(\'' +
      imageServer + '/temple/1.gif\');">' +
    '</a>',
  bias: {
    '0': {generalVariable: 1.1053, hpVariable: 1.1},
    '1': {generalVariable: 1.1, hpVariable: 1.053},
    '2': {generalVariable: 1.053, hpVariable: 1},
    '3': {generalVariable: 1.1053, hpVariable: 1}
  },
  huntingOnImage: '<a href="#" id="HelperToggleHuntingMode" ' +
    'class="huntOn fshCurveBtn tip-static" ' +
    'data-tipped="Hunting mode is ON"></a>',
  huntingOffImage: '<a href="#" id="HelperToggleHuntingMode" ' +
    'class="huntOff fshCurveBtn tip-static" ' +
    'data-tipped="Hunting mode is OFF"></a>',
  soundMuteImage: '<a href="#" id="toggleSoundLink" ' +
    'class="soundOn fshCurveBtn tip-static" ' +
    'data-tipped="Turn Off Sound when you have a new log message"></a>',
  soundImage: '<a href="#" id="toggleSoundLink" ' +
    'class="soundOff fshCurveBtn tip-static" ' +
    'data-tipped="Turn On Sound when you have a new log message"></a>'
};

// Taking the Not Save in case they add new enhancements.
var notSave = ['Breaker', 'Protection', 'Master Thief', 'Protect Gold',
  'Disarm', 'Duelist', 'Thievery', 'Master Blacksmith', 'Master Crafter',
  'Fury Caster', 'Master Inventor', 'Sustain'];
var combatLog$1 = [];
var combatData;

function storeBuffs(buff) {
  if (buff.id === 54 || buff.id === 26) {
    combatData.player.buffs[buff.id] = parseInt(buff.level, 10);
  }
}

function storeEnhancements(enh) {
  if (notSave.indexOf(enh.name) === -1) {
    combatData.player.enhancements[enh.name] = enh.value;
  }
}

function hazBuffs$1(data) {
  if (data.player.buffs) {
    data.player.buffs.forEach(storeBuffs); // loop through buffs, only need to keep CA and Doubler 54 = ca, 26 = doubler
  }
}

function hazEnhancements(data) {
  if (data.player.enhancements) {
    data.player.enhancements.forEach(storeEnhancements); // loop through enhancements
  }
}

function processCombatResponse(e, data) {
  combatData = {};
  combatData.combat = data.response.data;
  if (combatData.combat.inventory_id) {
    combatData.combat.drop = combatData.combat.item.id;
  }

  combatData.player = {};
  combatData.player.buffs = {};
  combatData.player.enhancements = {};
  hazBuffs$1(data);
  hazEnhancements(data);
  combatData.time = data.time;
  combatLog$1.push(combatData);
  setForage('fsh_combatLog', combatLog$1);
}

function combatResponse(e, data) {
  // If bad response do nothing.
  if (data.response.response === 0) {processCombatResponse(e, data);}
}

function gotCombatLog$1(data) { // jQuery.min
  if (data) {combatLog$1 = data;}
  $.subscribe('2-success.action-response', combatResponse);
}

function combatLogger() { // jQuery.min
  if (getValue('keepLogs')) {
    getForage('fsh_combatLog').done(gotCombatLog$1);
  }
}

function doFormGroup(e) { // jQuery
  e.preventDefault();
  $(e.target).qtip('hide');
  GameData.doAction(12, 401, {}, 0);
}

function openQuickBuff(e) {
  e.preventDefault();
  openQuickBuffByName(playerName());
}

function showQuickLinks(worldName, data) { // jQuery
  worldName.append('<div class="fshFsty"><div>Min Lvl: ' + data.realm.minlevel +
    '</div><div>Your Lvl: ' + data.player.level + '</div></div>');
  var formgroup = $(assets.worldFormgroup);
  worldName.append('&nbsp;&nbsp;').append(formgroup);
  formgroup.click(doFormGroup);
  var quickbuff = $(assets.worldQuickBuff);
  worldName.append('&nbsp;').append(quickbuff);
  quickbuff.click(openQuickBuff);
  worldName.append('&nbsp;').append(assets.worldMap);
}

function showSearchButtons(worldName, data) { // jQuery
  worldName.append('&nbsp;')
    .append(assets.searchMapUFSG.replace('@@realmId@@', data.realm.id));
}

function toggleSound(e) { // jQuery
  e.preventDefault();
  if (getValue('playNewMessageSound') === false) {
    $('#toggleSoundLink').qtip('hide')
      .replaceWith(assets.soundMuteImage);
  } else {
    $('#toggleSoundLink').qtip('hide')
      .replaceWith(assets.soundImage);
  }
  setValue('playNewMessageSound',
    !getValue('playNewMessageSound'));
}

function showSpeakerOnWorld(worldName) { // jQuery
  var img = assets.soundImage;
  if (getValue('playNewMessageSound')) {img = assets.soundMuteImage;}
  worldName.append('&nbsp;').append(img);
  worldName.on('click', '#toggleSoundLink', toggleSound);
}

function toggleHuntMode(e) { // jQuery
  e.preventDefault();
  if (!calf.huntingMode) {
    $('#HelperToggleHuntingMode').qtip('hide')
      .replaceWith(assets.huntingOnImage);
  } else {
    $('#HelperToggleHuntingMode').qtip('hide')
      .replaceWith(assets.huntingOffImage);
  }
  calf.huntingMode = !calf.huntingMode;
  setValue('huntingMode', calf.huntingMode);
}

function showHuntMode(worldName) { // jQuery
  var img = assets.huntingOffImage;
  if (calf.huntingMode) {img = assets.huntingOnImage;}
  worldName.append('&nbsp;').append(img);
  worldName.on('click', '#HelperToggleHuntingMode',
    toggleHuntMode);
}

function injectButtons(data) { // jQuery
  var worldName = $('#worldName');
  // worldName.html(data.realm.name); // BUGFIX - incase of switchign between master realm and realm they dont replace teh realm name
  GameController.Realm.footprintTileList = []; // BUGFIX - in case of teleporting in new realm with footprints turned on
  var oldButtonContainer = $('#fshWorldButtonContainer');
  if (oldButtonContainer.length !== 0) {oldButtonContainer.remove();}
  var buttonContainer = $('<div/>', {id: 'fshWorldButtonContainer'});
  showQuickLinks(buttonContainer, data);
  showSearchButtons(buttonContainer, data);
  if (getValue('showSpeakerOnWorld')) {
    showSpeakerOnWorld(buttonContainer);
  }
  showHuntMode(buttonContainer);
  worldName.after(buttonContainer);
}

var assets$1 = {
  defStats: '<table class="relicT relicS"><thead>' +
    '<tr><th colspan="2">Defending Guild Stats</th></tr></thead><tbody>' +
    '<tr><td>Relic Count:</td><td id="relicCount">0</td></tr>' +
    '<tr><td>Lead Defender Bonus:</td><td id="LDPercentage">0</td></tr>' +
    '<tr><td>Lead Defender Cloaked:</td><td id="LDCloaked">No</td></tr>' +
    '</tbody><thead><tr><th colspan="2">Other Defender Stats</th></tr>' +
    '</thead><tbody>' +
    '<tr><td>Raw Attack:</td><td class="fshGrey" id="attackValue">0</td></tr>' +
    '<tr><td>Attack w/ buffs:</td><td id="attackValueBuffed">0</td></tr>' +
    '<tr><td>Raw Defense:</td>' +
      '<td class="fshGrey" id="defenseValue">0</td></tr>' +
    '<tr><td>Defense w/buffs:</td><td id="defenseValueBuffed">0</td></tr>' +
    '<tr><td>Raw Armor:</td><td class="fshGrey" id="armorValue">0</td></tr>' +
    '<tr><td>Armor w/ buffs:</td><td id="armorValueBuffed">0</td></tr>' +
    '<tr><td>Raw Damage:</td><td class="fshGrey" id="damageValue">0</td></tr>' +
    '<tr><td>Damage w/ buffs:</td><td id="damageValueBuffed">0</td></tr>' +
    '<tr><td>Raw HP:</td><td class="fshGrey" id="hpValue">0</td></tr>' +
    '<tr><td>HP w/ buffs:</td><td id="hpValueBuffed">0</td></tr>' +
    '<tr><td>Cloaked:</td><td id="defendersCloaked">0</td></tr>' +
    '<tr><td>Processed:</td><td id="defendersProcessed">0</td></tr>' +
    '</tbody></table>',
  atkStats: '<table class="relicT relicS"><thead>' +
    '<tr><th colspan="2">Adjusted defense values</th></tr></thead><tbody>' +
    '<tr><td>DC225:</td><td id="DC225">0</td></tr>' +
    '<tr><td>DC175:</td><td id="DC175">0</td></tr>' +
    '<tr><td colspan="2">&nbsp;</td></tr></tbody><thead>' +
    '<tr><th colspan="2">Attacking Group Stats</th></tr></thead><tbody>' +
    '<tr><td>Raw Group Attack:</td>' +
      '<td class="fshGrey" id="GroupAttack"></td></tr>' +
    '<tr><td>Group Attack w/ buffs:</td><td id="GroupAttackBuffed"></td></tr>' +
    '<tr><td>Raw Group Defense:</td>' +
      '<td class="fshGrey" id="GroupDefense"></td></tr>' +
    '<tr><td>Group Defense w/ buffs:</td>' +
      '<td id="GroupDefenseBuffed"></td></tr>' +
    '<tr><td>Raw Group Armor:</td>' +
      '<td class="fshGrey" id="GroupArmor"></td></tr>' +
    '<tr><td>Group Armor w/ buffs:</td><td id="GroupArmorBuffed"></td></tr>' +
    '<tr><td>Raw Group Damage:</td>' +
      '<td class="fshGrey" id="GroupDamage"></td></tr>' +
    '<tr><td>Group Damage w/ buffs:</td><td id="GroupDamageBuffed"></td></tr>' +
    '<tr><td>Raw Group HP:</td><td class="fshGrey" id="GroupHP"></td></tr>' +
    '<tr><td>Group HP w/ buffs:</td><td id="GroupHPBuffed"></td></tr>' +
    '</tbody></table>',
  proc: '<table class="relicT">' +
    '<thead><tr><th colspan="2">Processing</th></tr></thead><tbody>' +
    '<tr><td class="fshGreen" colspan="2" id="ProcessingStatus">' +
      'Parsing defending guild stats ...</td></tr>' +
    '</tbody><thead><tr><th colspan="2">Assumptions</th></tr></thead><tbody>' +
    '<tr><td colspan="2" class="fshGrey">Above calculations include ' +
      'Constitution, Fortitude, Nightmare Visage, Chi Strike, Sanctuary, ' +
      'Terrorize and Flinch bonus calculations (in that order) on both the ' +
      'defending group and attacking group.</td></tr>' +
    '</tbody></table>'
};

function groupViewStats(doc) {
  var attackElement = doc.getElementById('stat-attack');
  var defenseElement = doc.getElementById('stat-defense');
  var armorElement = doc.getElementById('stat-armor');
  var damageElement = doc.getElementById('stat-damage');
  var hpElement = doc.getElementById('stat-hp');
  return {
    attack: intValue(attackElement.textContent),
    attackElement: attackElement,
    defense: intValue(defenseElement.textContent),
    defenseElement: defenseElement,
    armor: intValue(armorElement.textContent),
    armorElement: armorElement,
    damage: intValue(damageElement.textContent),
    damageElement: damageElement,
    hp: intValue(hpElement.textContent),
    hpElement: hpElement
  };
}

function parseGroupStats(html) {
  var doc = createDocument(html);
  return groupViewStats(doc);
}

function getGroupStats(viewStats) {
  return retryAjax(viewStats).pipe(parseGroupStats);
}

function addMercStat(mouseover, stat, i) {
  return stat +
    Math.round(Number(mercRE[i].exec(mouseover)[1]) * defenderMultiplier);
}

function addMercStats(prev, merc) {
  return prev.map(addMercStat.bind(null, merc.dataset.tipped));
}

function addAllMercStats(mercElements) {
  return Array.prototype.reduce.call(mercElements, addMercStats,
    [0, 0, 0, 0, 0]);
}

function transform(mercTotal) {
  return {
    attack: mercTotal[0],
    defense: mercTotal[1],
    armor: mercTotal[2],
    damage: mercTotal[3],
    hp: mercTotal[4]
  };
}

function parseMercStats(html) {
  var doc = createDocument(html);
  var mercElements = doc.querySelectorAll('#pCC img[src*="/merc/"]');
  var mercTotal = addAllMercStats(mercElements);
  return transform(mercTotal);
}

function getMercStats() {
  return retryAjax('index.php?cmd=guild&subcmd=mercs').pipe(parseMercStats);
}

var relicData;
var containerDiv;
var leftDiv;
var fetchStatsBtn;
var midDiv;
var rightDiv;
var hideRelicOffline;
var player$1;
var guildMemberList;
var myDefenders;
var twoMinutes;
var sevenDays;
var memberExclusions = [
  function(key) {return key === 'lastUpdate';},
  function(key) {return myDefenders.indexOf(key) !== -1;},
  function(key) {return !guildMemberList[key].last_login;},
  function(key) {return Number(guildMemberList[key].last_login) >= twoMinutes;},
  function(key) {return Number(guildMemberList[key].last_login) <= sevenDays;},
  function(key) {
    return guildMemberList[key].level >= 400 &&
      guildMemberList[key].level <= 421;
  },
  function(key) {
    return guildMemberList[key].level >= 441 &&
      guildMemberList[key].level <= 450;
  }
];
var relicCount;
var relicMultiplier;
var processingStatus;
var attackElement;
var defRawAttack;
var attackBuffedElement;
var defBuffedAttack;
var defenseElement;
var defRawDefense;
var defenseBuffedElement;
var armorElement;
var defRawArmor;
var armorBuffedElement;
var damageElement;
var defRawDamage;
var damageBuffedElement;
var defBuffedDamage;
var hpElement;
var defRawHp;
var hpBuffedElement;
var defCloaked;
var defCloakedElement;
var defProcessedElement;
var defProcessed;
var dc225Element;
var dc175Element;
var groupAttackElement;
var groupAttackBuffedElement;
var groupDefenseElement;
var groupDefenseBuffedElement;
var groupArmorElement;
var groupArmorBuffedElement;
var groupDamageElement;
var groupDamageBuffedElement;
var groupHPElement;
var groupHPBuffedElement;
var leadDefender;
var groupStats;
var mercStats;

function ajaxFailure(jqXHR) {
  processingStatus.textContent = jqXHR.status.toString() + ' ' +
    jqXHR.statusText;
}

function updateDefValues() {
  attackElement.textContent = addCommas(defRawAttack);
  defenseElement.textContent = addCommas(defRawDefense);
  armorElement.textContent = addCommas(defRawArmor);
  damageElement.textContent = addCommas(defRawDamage);
  hpElement.textContent = addCommas(defRawHp);
  defCloakedElement.textContent = defCloaked.toString();
  defProcessed += 1;
  defProcessedElement.textContent = defProcessed.toString();
}

function deductMercStats() {
  groupStats.attack -= mercStats.attack;
  groupStats.defense -= mercStats.defense;
  groupStats.armor -= mercStats.armor;
  groupStats.damage -= mercStats.damage;
  groupStats.hp -= mercStats.hp;
}

function calculateGroup() {
  processingStatus.textContent = 'Processing attacking group stats ... ';
  if (mercStats) {deductMercStats();}
  groupAttackElement.textContent = addCommas(groupStats.attack);
  groupDefenseElement.textContent = addCommas(groupStats.defense);
  groupArmorElement.textContent = addCommas(groupStats.armor);
  groupDamageElement.textContent = addCommas(groupStats.damage);
  groupHPElement.textContent = addCommas(groupStats.hp);

  var buffs = reduceBuffArray(player$1.buffs);

  var nightmareVisageEffect = Math.ceil(groupStats.attack *
    (fallback(buffs['Nightmare Visage'], 0) * 0.0025));
  groupStats.attack -= nightmareVisageEffect;

  var storedFlinchEffectValue = Math.ceil(groupStats.attack *
    leadDefender.flinchLevel * 0.001);
  groupAttackBuffedElement.textContent = addCommas(groupStats.attack -
    storedFlinchEffectValue);

  var defenseWithConstitution = Math.ceil(groupStats.defense *
    (1 + fallback(buffs.Constitution, 0) * 0.001));
  var totalDefense = defenseWithConstitution + nightmareVisageEffect;
  groupDefenseBuffedElement.textContent = addCommas(totalDefense);

  groupArmorBuffedElement.textContent = addCommas(groupStats.armor +
    Math.floor(groupStats.armor * fallback(buffs.Sanctuary, 0) * 0.001));

  var fortitudeBonusHP = Math.ceil(defenseWithConstitution *
    fallback(buffs.Fortitude, 0) * 0.001);
  var chiStrikeBonusDamage = Math.ceil((groupStats.hp + fortitudeBonusHP) *
    fallback(buffs['Chi Strike'], 0) * 0.001);
  var storedTerrorizeEffectValue = Math.ceil(
    groupStats.damage * leadDefender.terrorizeLevel * 0.001);
  groupDamageBuffedElement.textContent = addCommas(groupStats.damage +
    chiStrikeBonusDamage - storedTerrorizeEffectValue);
  groupHPBuffedElement.textContent = addCommas(groupStats.hp +
    fortitudeBonusHP);

  // Effect on defending group from Flinch on attacking group.
  var flinchEffectValue = Math.ceil(defBuffedAttack *
    fallback(buffs.Flinch, 0) * 0.001);
  defenseBuffedElement.textContent = addCommas(defBuffedAttack -
    flinchEffectValue);
  var terrorizeEffectValue = Math.ceil(defBuffedDamage *
    fallback(buffs.Terrorize, 0) * 0.001);
  damageBuffedElement.textContent = addCommas(defBuffedDamage -
    terrorizeEffectValue);

  processingStatus.textContent = 'Done.';
}

function doCalculations() {
  processingStatus.textContent = 'Processing defending guild stats ... ';

  defRawAttack += Math.round(leadDefender.attackValue * relicMultiplier);
  var nightmareVisageEffect = Math.ceil(defRawAttack *
    (leadDefender.nightmareVisageLevel * 0.0025));

  defRawDefense += Math.round(leadDefender.defenseValue * relicMultiplier);
  var defenseWithConstitution = Math.ceil(defRawDefense *
    (1 + leadDefender.constitutionLevel * 0.001));
  var defBuffedDefense = defenseWithConstitution + nightmareVisageEffect;

  defRawArmor += Math.round(leadDefender.armorValue * relicMultiplier);

  defRawDamage += Math.round(leadDefender.damageValue * relicMultiplier);
  defRawHp += Math.round(leadDefender.hpValue * relicMultiplier);
  var fortitudeBonusHP = Math.ceil(defenseWithConstitution *
    leadDefender.fortitudeLevel * 0.001);
  var defBuffedHp = defRawHp + fortitudeBonusHP;
  var chiStrikeBonusDamage = Math.ceil(defBuffedHp *
    leadDefender.chiStrikeLevel * 0.001);

  updateDefValues();

  defBuffedAttack = defRawAttack - nightmareVisageEffect;
  attackBuffedElement.textContent = addCommas(defBuffedAttack);
  defenseBuffedElement.textContent = addCommas(defBuffedDefense);
  dc225Element.textContent = addCommas(Math.ceil(
    defBuffedDefense * 0.55));
  dc175Element.textContent = addCommas(Math.ceil(
    defBuffedDefense * 0.65));
  armorBuffedElement.textContent = addCommas(defRawArmor +
    Math.floor(defRawArmor * leadDefender.sanctuaryLevel * 0.001));
  defBuffedDamage = defRawDamage + chiStrikeBonusDamage;
  damageBuffedElement.textContent = addCommas(defBuffedDamage);
  hpBuffedElement.textContent = addCommas(defBuffedHp);

  if (leadDefender.cloakLevel !== 0) {
    document.getElementById('LDCloaked').textContent = 'Yes';
  }

  if (player$1.hasGroup) {
    calculateGroup();
  } else {
    processingStatus.textContent = 'Done.';
  }

}

function missingMembers(membrList) {
  guildMemberList = membrList;
  var myMembers = Object.keys(guildMemberList);
  twoMinutes = nowSecs - 120;
  sevenDays = nowSecs - 604800;
  var filtered = myMembers.reduce(function(prev, key) {
    for (var i = 0; i < memberExclusions.length; i += 1) {
      if (memberExclusions[i](key)) {return prev;}
    }
    prev.push('<a href="index.php?cmd=profile&player_id=' +
      guildMemberList[key].id + '">' + key + '</a>');
    return prev;
  }, []);
  containerDiv.insertAdjacentHTML('beforeend',
    '<div class="fshFloatLeft fshRelicLowDiv"><table class="relicT">' +
    '<thead><tr><th>Offline guild members not at relic:</th></tr></thead>' +
    '<tbody><tr><td>' + filtered.join(' ') + '</td></tr></tbody>' +
    '</table></div>');
}

function setDefVars() {
  attackElement = document.getElementById('attackValue');
  attackBuffedElement = document.getElementById('attackValueBuffed');
  defenseElement = document.getElementById('defenseValue');
  defenseBuffedElement = document.getElementById('defenseValueBuffed');
  armorElement = document.getElementById('armorValue');
  armorBuffedElement = document.getElementById('armorValueBuffed');
  damageElement = document.getElementById('damageValue');
  damageBuffedElement = document.getElementById('damageValueBuffed');
  hpElement = document.getElementById('hpValue');
  hpBuffedElement = document.getElementById('hpValueBuffed');
  defCloakedElement = document.getElementById('defendersCloaked');
  defProcessedElement = document.getElementById('defendersProcessed');
}

function setAtkVars() {
  dc225Element = document.getElementById('DC225');
  dc175Element = document.getElementById('DC175');
  groupAttackElement = document.getElementById('GroupAttack');
  groupAttackBuffedElement = document.getElementById('GroupAttackBuffed');
  groupDefenseElement = document.getElementById('GroupDefense');
  groupDefenseBuffedElement = document.getElementById('GroupDefenseBuffed');
  groupArmorElement = document.getElementById('GroupArmor');
  groupArmorBuffedElement = document.getElementById('GroupArmorBuffed');
  groupDamageElement = document.getElementById('GroupDamage');
  groupDamageBuffedElement = document.getElementById('GroupDamageBuffed');
  groupHPElement = document.getElementById('GroupHP');
  groupHPBuffedElement = document.getElementById('GroupHPBuffed');
}

function prepareDivs() {
  fetchStatsBtn.classList.add('fshHide');
  hideRelicOffline = getValue('hideRelicOffline');
  if (relicData.is_owner && !hideRelicOffline) {
    getMembrList(false).done(missingMembers);
  }
  leftDiv.insertAdjacentHTML('beforeend', assets$1.proc);
  processingStatus = document.getElementById('ProcessingStatus');
  midDiv = createDiv({
    className: 'fshFloatLeft fshRelicMidDiv',
    innerHTML: assets$1.defStats
  });
  containerDiv.appendChild(midDiv);
  setDefVars();
  rightDiv = createDiv({
    className: 'fshFloatLeft fshRelicRightDiv',
    innerHTML: assets$1.atkStats
  });
  containerDiv.appendChild(rightDiv);
  setAtkVars();
}

function getGuild$1() {
  return retryAjax({
    url: 'index.php',
    data: {
      cmd: 'guild',
      subcmd: 'view',
      guild_id: relicData.controlled_by.guild_id
    }
  });
}

function calcRelicMultiplier(rels) {
  if (rels === 1) {return 1.5;}
  return Math.round((1 - rels / 10) * 100) / 100;
}

function parseGuild$1(html) {
  var doc = createDocument(html);
  var nodeList = doc.querySelectorAll('#pCC img[src*="/relics/"]');
  relicCount = nodeList.length;
  document.getElementById('relicCount').textContent = relicCount.toString();
  relicMultiplier = calcRelicMultiplier(relicCount);
  document.getElementById('LDPercentage').textContent =
    (relicMultiplier * 100).toString() + '%';
}

function parseDefender(json) {
  var defender = playerDataObject(json);
  defRawAttack += Math.round(defender.attackValue * defenderMultiplier);
  defRawDefense += Math.round(defender.defenseValue *
    defenderMultiplier);
  defRawArmor += Math.round(defender.armorValue * defenderMultiplier);
  defRawDamage += Math.round(defender.damageValue * defenderMultiplier);
  defRawHp += Math.round(defender.hpValue * defenderMultiplier);
  if (defender.cloakLevel !== 0) {defCloaked += 1;}
  updateDefValues();
}

function storeLeadDefender(json) {
  leadDefender = playerDataObject(json);
}

function getGroups() {
  return retryAjax({
    url: 'index.php',
    data: {
      cmd: 'guild',
      subcmd: 'groups'
    }
  });
}

function storeGroupStats(obj) {
  groupStats = obj;
}

function storeMercStats(obj) {
  mercStats = obj;
}

function parseGroups(html) {
  var doc = createDocument(html);
  var disband = doc.querySelector('#pCC a[href*="confirmDisband"]');
  var viewStats = disband.previousElementSibling.href;
  var prm = [getGroupStats(viewStats).done(storeGroupStats)];
  var hasMerc = disband.parentNode.parentNode.previousElementSibling
    .previousElementSibling.innerHTML.indexOf('"#000099"') !== -1;
  if (hasMerc) {
    prm.push(getMercStats().done(storeMercStats));
  }
  return $.when.apply($, prm);
}

function resetCounters() {
  defRawAttack = 0;
  defRawDefense = 0;
  defRawArmor = 0;
  defRawDamage = 0;
  defRawHp = 0;
  defCloaked = 0;
  defProcessed = 0;
}

function getStats() {
  prepareDivs();
  resetCounters();
  player$1 = GameData.player();
  var prm = [];
  prm.push(getGuild$1().done(parseGuild$1));
  if (player$1.hasGroup) {
    prm.push(getGroups().pipe(parseGroups));
  }
  for (var i = 1; i < myDefenders.length; i += 1) {
    prm.push(getProfile(myDefenders[i]).done(parseDefender)
      .fail(ajaxFailure));
  }
  prm.push(getProfile(myDefenders[0]).done(storeLeadDefender));
  $.when.apply($, prm).done(doCalculations);
}

function setup$1() {
  myDefenders = relicData.defenders.map(function(x) {
    return x.player_name;
  });
  if (containerDiv) {
    containerDiv.innerHTML = '';
  } else {
    containerDiv = createDiv({className: 'body'});
  }
  leftDiv = createDiv({className: 'fshFloatLeft fshRelicLeftDiv'});
  containerDiv.appendChild(leftDiv);
  if (relicData.is_owner) {
    leftDiv.appendChild(doBuffLinks(myDefenders));
  }
  fetchStatsBtn = createButton({
    className: 'custombutton',
    textContent: 'Fetch Stats'
  });
  fetchStatsBtn.addEventListener('click', getStats);
  leftDiv.appendChild(fetchStatsBtn);
  var dialogRelic = document.getElementById('dialog-relic');
  dialogRelic.appendChild(containerDiv);
}

function viewRelic(e, data) {
  relicData = data.response.data;
  if (relicData.defenders.length > 0) {setup$1();}
}

function injectRelic() {
  $.subscribe('9-success.action-response', viewRelic);
}

var shoppingData;
var dialog$1;
var jDialog;
var fshDiv;
var numInput;
var qbBtn;
var resultDiv;

function quickBuy() {
  return retryAjax({
    cache: false,
    url: 'fetchdata.php',
    data: {
      a: 14,
      d: 0,
      id: shoppingData.id,
      item_id: shoppingData.itemId,
      _rnd: rnd()
    },
    dataType: 'json'
  });
}

function quickDone(data) {
  var resp = data.response.response;
  var rmsg = data.response.msg;
  var msg;
  if (resp !== 0) {
    var firstTag = rmsg.indexOf('<');
    if (firstTag !== -1) {
      msg = rmsg.substring(0, firstTag);
    } else {
      msg = rmsg;
    }
  } else {
    msg = 'You purchased ' + data.response.data.name +
      ' for ' + addCommas(data.response.data.cost) + ' gold.';
  }
  resultDiv.insertAdjacentHTML('beforeend', msg + '<br>');
}

function normalBuy() {
  GameData.doAction(14, 3, {
    id: shoppingData.id,
    item_id: shoppingData.itemId
  }, 0);
  jDialog.close();
}

function qBuy() {
  var theValue = testQuant(numInput.value);
  if (!theValue) {return;}
  var prm = [];
  for (var i = 1; i < theValue; i += 1) {
    prm.push(quickBuy().done(quickDone));
  }
  $.when.apply($, prm).done(normalBuy);
}

function injectQuickBuy() {
  fshDiv = createDiv({
    className: 'fshClear',
    textContent: 'Select how many to quick-buy:'
  });
  numInput = createInput({
    id: 'buyAmount',
    className: 'fshNumberInput',
    min: 1,
    max: 99,
    value: 1,
    type: 'number'
  });
  fshDiv.appendChild(numInput);
  qbBtn = createButton({textContent: 'Quick-buy'});
  qbBtn.addEventListener('click', qBuy);
  fshDiv.appendChild(qbBtn);
  resultDiv = createDiv();
  fshDiv.appendChild(resultDiv);
  dialog$1.appendChild(fshDiv);
}

function worldDialogShop(e, data) {
  shoppingData = data;
  dialog$1 = fallback(dialog$1,
    document.getElementById('shopDialogConfirm'));
  if (!dialog$1) {return;}
  jDialog = fallback(jDialog, $(dialog$1).data('worldDialogShopConfirm'));
  if (!fshDiv) {injectQuickBuy();} else {resultDiv.textContent = '';}
}

function prepareShop() {
  $.subscribe('prompt.worldDialogShop', worldDialogShop);
}

function evalMiss(combat) {
  if (combat.numberOfCreatureHitsTillDead - combat.numberOfHitsRequired <= 1) {
    return ', dies on miss';
  }
  return ', survives a miss';
}

function canIHit(combat) {
  return combat.numberOfHitsRequired === '-' ||
    combat.numberOfHitsRequired > combat.numberOfCreatureHitsTillDead;
}

function evalPlayerHits(combat) {
  if (combat.numberOfCreatureHitsTillDead === '-') {
    return combat.numberOfHitsRequired;
  } else if (canIHit(combat)) {
    return '-';
  }
  return combat.numberOfHitsRequired;
}

function canCreatureHit(combat) {
  return combat.numberOfCreatureHitsTillDead === '-' ||
    combat.numberOfCreatureHitsTillDead > combat.numberOfHitsRequired;
}

function evalCreatureHits(combat) {
  if (combat.numberOfHitsRequired === '-') {
    return combat.numberOfCreatureHitsTillDead;
  } else if (canCreatureHit(combat)) {
    return '-';
  }
  return combat.numberOfCreatureHitsTillDead;
}

var evalFightStatus = [
  {
    test: function(combat) {
      return combat.playerHits === '-' && combat.creatureHits === '-';
    },
    fStatus: function() {return 'Unresolved';}
  },
  {
    test: function(combat) {return combat.playerHits === '-';},
    fStatus: function() {return 'Player dies';}
  },
  {
    test: function(combat) {return combat.playerHits === 1;},
    fStatus: function(combat) {return 'Player 1 hits' + evalMiss(combat);}
  },
  {
    test: function(combat) {return combat.playerHits > 1;},
    fStatus: function(combat) {return 'Player > 1 hits' + evalMiss(combat);}
  }
];

function evalAnalysis(combat) {
  // Analysis:
  combat.playerHits = evalPlayerHits(combat);
  combat.creatureHits = evalCreatureHits(combat);
  for (var i = 0; i < evalFightStatus.length; i += 1) {
    if (evalFightStatus[i].test(combat)) {
      combat.fightStatus = evalFightStatus[i].fStatus(combat);
      return combat;
    }
  }
  combat.fightStatus = 'Unknown';
  return combat;
}

function calcArm(combat) {
  if (combat.callback.groupExists) {
    return combat.callback.groupArmorValue;
  }
  return combat.player.armorValue;
}

function evalSanctuary(combat) {
  if (combat.player.sanctuaryLevel > 0) {
    combat.extraNotes += 'Sanc Bonus Armor = ' +
      Math.floor(combat.player.armorValue *
      combat.player.sanctuaryLevel * 0.001) + '<br>';
  }
}

function evalTerrorize(combat) {
  if (combat.player.terrorizeLevel > 0) {
    combat.extraNotes += 'Terrorize Creature Damage Effect = ' +
      combat.terrorizeEffect * -1 + '<br>';
  }
}

function evalArmour(combat) {
  var armorVal = calcArm(combat);
  combat.overallArmorValue = armorVal +
    Math.floor(combat.player.armorValue *
    combat.player.sanctuaryLevel * 0.001);

  evalSanctuary(combat);

  combat.terrorizeEffect = Math.floor(combat.creature.damage *
    combat.player.terrorizeLevel * 0.001);

  evalTerrorize(combat);

  combat.creature.damage -= combat.terrorizeEffect;
  combat.creatureDamageDone = Math.ceil(combat.generalVariable *
    combat.creature.damage - combat.overallArmorValue +
    combat.overallHPValue);

  if (combat.creatureHitByHowMuch >= 0) {
    var approxDmg = combat.generalVariable * combat.creature.damage;
    if (approxDmg < combat.overallArmorValue) {
      combat.numberOfCreatureHitsTillDead = combat.overallHPValue;
    } else {
      combat.numberOfCreatureHitsTillDead = Math.ceil(
        combat.overallHPValue / (approxDmg - combat.overallArmorValue));
    }
  } else {
    combat.numberOfCreatureHitsTillDead = '-';
  }

  return combat;
}

function calcAttack(combat) {
  if (combat.callback.groupExists) {
    return combat.callback.groupAttackValue;
  }
  return combat.player.attackValue;
}

function calcHitByHowMuch(combat) {
  var remainingDef = combat.creature.defense - combat.creature.defense *
    combat.player.darkCurseLevel * 0.002;
  if (combat.combatEvaluatorBias === 3) {
    return combat.overallAttackValue - Math.ceil(remainingDef) - 50;
  }
  return combat.overallAttackValue -
    Math.ceil(combat.attackVariable * remainingDef);
}

function evalAttack(combat) {
  var atkValue = calcAttack(combat);
  // Attack:
  if (combat.player.darkCurseLevel > 0) {
    combat.extraNotes += 'DC Bonus Attack = ' +
      Math.floor(combat.creature.defense *
      combat.player.darkCurseLevel * 0.002) + '<br>';
  }
  combat.nightmareVisageAttackMovedToDefense =
    Math.floor((atkValue +
    combat.counterAttackBonusAttack) *
    combat.player.nightmareVisageLevel * 0.0025);
  if (combat.player.nightmareVisageLevel > 0) {
    combat.extraNotes += 'NMV Attack moved to Defense = ' +
      combat.nightmareVisageAttackMovedToDefense + '<br>';
  }
  combat.overallAttackValue = atkValue +
    combat.counterAttackBonusAttack -
    combat.nightmareVisageAttackMovedToDefense;
  combat.hitByHowMuch = calcHitByHowMuch(combat);
  return combat;
}

function calcLowest(combat) {
  combat.lowestCALevelToStillHit = Math.max(Math.ceil((
    combat.counterAttackBonusAttack - combat.hitByHowMuch + 1) /
    combat.player.attackValue / 0.0025), 0);
  combat.lowestCALevelToStillKill = Math.max(Math.ceil((
    combat.counterAttackBonusDamage - combat.damageDone + 1) /
    combat.player.damageValue / 0.0025), 0);
}

function stamAtLowestCa(combat) {
  if (combat.player.counterAttackLevel > 0) {
    return Math.ceil((1 + combat.player.doublerLevel / 50) * 0.0025 *
      combat.lowestFeasibleCALevel);
  }
  return 0;
}

function caRunning(combat) {
  calcLowest(combat);
  combat.lowestFeasibleCALevel =
    Math.max(combat.lowestCALevelToStillHit,
      combat.lowestCALevelToStillKill);
  combat.extraNotes += 'Lowest CA to still 1-hit this creature = ' +
    combat.lowestFeasibleCALevel + '<br>';
  if (combat.lowestFeasibleCALevel !== 0) {
    combat.extraAttackAtLowestFeasibleCALevel =
      Math.floor(combat.player.attackValue * 0.0025 *
      combat.lowestFeasibleCALevel);
    combat.extraDamageAtLowestFeasibleCALevel =
      Math.floor(combat.player.damageValue * 0.0025 *
      combat.lowestFeasibleCALevel);
    combat.extraNotes +=
      'Extra CA Att/Dam at this lowered CA level = ' +
      combat.extraAttackAtLowestFeasibleCALevel + ' / ' +
      combat.extraDamageAtLowestFeasibleCALevel + '<br>';
  }
  combat.extraStaminaPerHitAtLowestFeasibleCALevel = stamAtLowestCa(combat);
  if (combat.extraStaminaPerHitAtLowestFeasibleCALevel <
    combat.extraStaminaPerHit) {
    combat.extraNotes +=
      'Extra Stam Used at this lowered CA level = ' +
      combat.extraStaminaPerHitAtLowestFeasibleCALevel + '<br>';
  } else {
    combat.extraNotes +=
      'No reduction of stam used at the lower CA level<br>';
  }
}

function needCa(combat) {
  return combat.numberOfHitsRequired === '-' ||
    combat.numberOfHitsRequired !== 1;
}

function evalCaKill(combat) {
  if (combat.lowestCALevelToStillHit > 175) {
    combat.extraNotes +=
      'Even with CA175 you cannot hit this creature<br>';
  } else if (combat.lowestCALevelToStillHit !== 0) {
    combat.extraNotes += 'You need a minimum of CA' +
      combat.lowestCALevelToStillHit +
      ' to hit this creature<br>';
  }
}

function evalCaOneHit(combat) {
  if (combat.lowestCALevelToStillKill > 175) {
    combat.extraNotes +=
      'Even with CA175 you cannot 1-hit kill this creature<br>';
  } else if (combat.lowestCALevelToStillKill !== 0) {
    combat.extraNotes += 'You need a minimum of CA' +
      combat.lowestCALevelToStillKill +
      ' to 1-hit kill this creature<br>';
  }
}

function caResult(combat) {
  calcLowest(combat);
  evalCaKill(combat);
  evalCaOneHit(combat);
}

function evalCA(combat) {
  if (combat.player.counterAttackLevel > 0 &&
      combat.numberOfHitsRequired === 1) {
    caRunning(combat);
  }
  if (needCa(combat)) {
    caResult(combat);
  }
  return combat;
}

function calcHp(combat) {
  if (combat.callback.groupExists) {
    return combat.callback.groupHPValue;
  }
  return combat.player.hpValue;
}

function calcDmg(combat) {
  if (combat.callback.groupExists) {
    return combat.callback.groupDamageValue;
  }
  return combat.player.damageValue;
}

function evalFortitude(combat) {
  var hpValue = calcHp(combat);
  var fortitudeLevel = combat.player.fortitudeLevel;
  combat.fortitudeExtraHPs = Math.floor(hpValue * fortitudeLevel * 0.001);
  if (fortitudeLevel > 0) {
    combat.extraNotes += 'Fortitude Bonus HP = ' + combat.fortitudeExtraHPs +
      '<br>';
  }
  combat.overallHPValue = hpValue + combat.fortitudeExtraHPs;
}

function evalChiStrike(combat) {
  var chiStrikeLevel = combat.player.chiStrikeLevel;
  combat.chiStrikeExtraDamage = Math.floor(combat.overallHPValue *
    chiStrikeLevel * 0.001);
  if (chiStrikeLevel > 0) {
    combat.extraNotes += 'Chi Strike Bonus Damage = ' +
      combat.chiStrikeExtraDamage + '<br>';
  }
}

function evalDamage(combat) {
  // Damage:
  evalFortitude(combat);
  evalChiStrike(combat);

  var damageValue = calcDmg(combat);
  combat.overallDamageValue = damageValue +
    combat.deathDealerBonusDamage + combat.counterAttackBonusDamage +
    combat.holyFlameBonusDamage + combat.chiStrikeExtraDamage;
  combat.damageDone = Math.floor(combat.overallDamageValue - (
    combat.generalVariable * combat.creature.armor +
    combat.hpVariable * combat.creature.hp));

  if (combat.hitByHowMuch > 0) {
    var dmgLessArmor = 1;
    if (combat.overallDamageValue >=
        combat.generalVariable * combat.creature.armor) {
      dmgLessArmor = combat.overallDamageValue - combat.generalVariable *
        combat.creature.armor;
    }
    combat.numberOfHitsRequired = Math.ceil(combat.hpVariable *
      combat.creature.hp / dmgLessArmor);
  } else {
    combat.numberOfHitsRequired = '-';
  }
  return combat;
}

function calcDef(combat) {
  if (combat.callback.groupExists) {
    return combat.callback.groupDefenseValue;
  }
  return combat.player.defenseValue;
}

function evalConstitution(combat) {
  if (combat.player.constitutionLevel > 0) {
    combat.extraNotes += 'Constitution Bonus Defense = ' +
    Math.floor(calcDef(combat) *
    combat.player.constitutionLevel * 0.001) + '<br>';
  }
}

function evalFlinch(combat) {
  if (combat.player.flinchLevel > 0) {
    combat.extraNotes += 'Flinch Bonus Attack Reduction = ' +
    Math.floor(combat.creature.attack * combat.player.flinchLevel *
    0.001) + '<br>';
  }
}

function evalDefence(combat) {
  combat.overallDefenseValue = calcDef(combat) +
    Math.floor(calcDef(combat) *
    combat.player.constitutionLevel * 0.001) +
    combat.nightmareVisageAttackMovedToDefense;

  evalConstitution(combat);
  evalFlinch(combat);

  combat.creatureHitByHowMuch = Math.floor(combat.attackVariable *
    combat.creature.attack - combat.creature.attack *
    combat.player.flinchLevel * 0.001 - combat.overallDefenseValue);

  if (combat.combatEvaluatorBias === 3) {
    combat.creatureHitByHowMuch = Math.floor(combat.creature.attack -
      combat.creature.attack * combat.player.flinchLevel * 0.001 -
      combat.overallDefenseValue - 50);
  }

  return combat;
}

function evalSes(combat) {
  if (combat.player.superEliteSlayerLevel > 0) {
    combat.extraNotes += 'SES Stat Reduction Multiplier = ' +
    combat.player.superEliteSlayerMultiplier + '<br>';
  }
}

function evalHolyFlame(combat) {
  combat.holyFlameBonusDamage = 0;
  if (combat.creature.class !== 'Undead') {return;}
  combat.holyFlameBonusDamage = Math.max(Math.floor(
    (combat.player.damageValue - combat.creature.armor) *
    combat.player.holyFlameLevel * 0.002), 0);
  if (combat.player.holyFlameLevel > 0) {
    combat.extraNotes += 'HF Bonus Damage = ' + combat.holyFlameBonusDamage +
    '<br>';
  }
}

function evalExtraStam(combat) {
  combat.extraStaminaPerHit = 0;
  if (combat.player.counterAttackLevel > 0) {
    combat.extraStaminaPerHit = Math.ceil(
      (1 + combat.player.doublerLevel / 50) *
      0.0025 * combat.player.counterAttackLevel
    );
  }
}

function evalDeathDealer(combat) {
  if (combat.player.deathDealerLevel > 0) {
    combat.extraNotes += 'DD Bonus Damage = ' +
      combat.deathDealerBonusDamage + '<br>';
  }
}

function evalCounterAttack(combat) {
  if (combat.player.counterAttackLevel > 0) {
    combat.extraNotes += 'CA Bonus Attack/Damage = ' +
      combat.counterAttackBonusAttack + ' / ' +
      combat.counterAttackBonusDamage + '<br>' +
      'CA Extra Stam Used = ' + combat.extraStaminaPerHit + '<br>';
  }
}

function evalExtraBuffs(combat) {
  combat.extraNotes = '';
  evalSes(combat);
  // math section ... analysis
  // Holy Flame adds its bonus after the
  // armor of the creature has been taken off.
  evalHolyFlame(combat);
  // Death Dealer and Counter Attack both applied at the same time
  combat.deathDealerBonusDamage =
    Math.floor(combat.player.damageValue * (Math.min(Math.floor(
      combat.player.killStreakValue / 5) * 0.01 *
      combat.player.deathDealerLevel, 20) / 100));
  combat.counterAttackBonusAttack =
    Math.floor(combat.player.attackValue * 0.0025 *
    combat.player.counterAttackLevel);
  combat.counterAttackBonusDamage =
    Math.floor(combat.player.damageValue * 0.0025 *
    combat.player.counterAttackLevel);
  evalExtraStam(combat);
  evalDeathDealer(combat);
  evalCounterAttack(combat);
  return combat;
}

function doesGroupExist(combat) {
  if (combat.callback.groupExists) {return 'Group ';}
  return '';
}

function canIHitIt(combat) {
  if (combat.hitByHowMuch > 0) {return 'Yes';}
  return 'No';
}

function willIBeHit(combat) {
  if (combat.creatureHitByHowMuch >= 0) {return 'Yes';}
  return 'No';
}

function evalHTML(combat) {
  return '<table width="100%"><tbody>' +
    '<tr><td bgcolor="#CD9E4B" colspan="4" align="center">' +
    doesGroupExist(combat) +
    'Combat Evaluation</td></tr>' +
    '<tr><td align="right"><span style="color:#333333">' +
    'Will I hit it? </td><td align="left">' +
    canIHitIt(combat) +
    '</td><td align="right"><span style="color:#333333">' +
    'Extra Attack: </td><td align="left">( ' +
    combat.hitByHowMuch + ' )</td></tr>' +
    '<tr><td align="right"><span style="color:#333333">' +
    '# Hits to kill it? </td><td align="left">' +
    combat.numberOfHitsRequired +
    '</td><td align="right"><span style="color:#333333">' +
    'Extra Damage: </td><td align="left">( ' + combat.damageDone +
    ' )</td></tr>' +
    '<tr><td align="right"><span style="color:#333333">' +
    'Will I be hit? </td><td align="left">' +
    willIBeHit(combat) +
    '</td><td align="right"><span style="color:#333333">' +
    'Extra Defense: </td><td align="left">( ' + -1 *
    combat.creatureHitByHowMuch + ' )</td></tr>' +
    '<tr><td align="right"><span style="color:#333333">' +
    '# Hits to kill me? </td><td align="left">' +
    combat.numberOfCreatureHitsTillDead +
    '</td><td align="right"><span style="color:#333333">' +
    'Extra Armor + HP: </td><td align="left">( ' + -1 *
    combat.creatureDamageDone + ' )</td></tr>' +
    '<tr><td align="right"><span style="color:#333333">' +
    '# Player Hits? </td><td align="left">' + combat.playerHits +
    '</td><td align="right"><span style="color:#333333">' +
    '# Creature Hits? </td><td align="left">' + combat.creatureHits +
    '</td></tr>' +
    '<tr><td align="right"><span style="color:#333333">' +
    'Fight Status: </span></td><td align="left" colspan="3"><span>' +
    combat.fightStatus + '</span></td></tr>' +
    '<tr><td align="right"><span style="color:#333333">' +
    'Notes: </span></td><td align="left" colspan="3">' +
    '<span style="font-size:x-small;">' + combat.extraNotes +
    '</span></td></tr>' +
    '<tr><td colspan="4"><span style="font-size:x-small; ' +
    'color:gray">*Does include CA, DD, HF, DC, Flinch, Super Elite ' +
    'Slayer, NMV, Sanctuary, Constitution, Fortitude, Chi Strike ' +
    'and Terrorize (if active) and allow for randomness (1.1053). ' +
    'Constitution, NMV, Fortitude and Chi Strike apply to group ' +
    'stats.</span></td></tr>' +
    '</tbody></table>';
}

function getBiasGeneral(combat) {
  if (assets.bias[combat.combatEvaluatorBias]) {
    return assets.bias[combat.combatEvaluatorBias].generalVariable;
  }
  return 1.1053;
}

function getBiasHp(combat) {
  if (assets.bias[combat.combatEvaluatorBias]) {
    return assets.bias[combat.combatEvaluatorBias].hpVariable;
  }
  return 1.1;
}

function creatureData(ses) { // jQuery
  var obj = {};
  obj.name = $('#dialog-viewcreature').find('h2.name').text();
  obj.class = $('#dialog-viewcreature')
    .find('span.classification')
    .text();
  obj.attack = intValue($('#dialog-viewcreature')
    .find('dd.attribute-atk').text());
  obj.defense = intValue($('#dialog-viewcreature')
    .find('dd.attribute-def').text());
  obj.armor = intValue($('#dialog-viewcreature')
    .find('dd.attribute-arm').text());
  obj.damage = intValue($('#dialog-viewcreature')
    .find('dd.attribute-dmg').text());
  obj.hp = intValue($('#dialog-viewcreature')
    .find('p.health-max').text());
  // reduce stats if critter is a SE and player has SES cast on them.
  if (obj.name.search('Super Elite') !== -1) {
    obj.attack -= Math.ceil(obj.attack * ses);
    obj.defense -= Math.ceil(obj.defense * ses);
    obj.armor -= Math.ceil(obj.armor * ses);
    obj.damage -= Math.ceil(obj.damage * ses);
    obj.hp -= Math.ceil(obj.hp * ses);
  }
  return obj;
}

function checkForCreatureEvaluatorGroup() { // Legacy
  if ($('#creatureEvaluatorGroup').length === 0) {
    $('#dialog-viewcreature')
      .append('<div id="creatureEvaluatorGroup" ' +
        'style="clear:both;"></div>');
  }
}

function checkForCreatureEvaluator() { // Legacy
  if ($('#creatureEvaluator').length === 0) {
    $('#dialog-viewcreature')
      .append('<div id="creatureEvaluator" ' +
        'style="clear:both;"></div>');
  }
}

function getCreaturePlayerData(responseText, callback) { // Legacy
  var combat = {};
  combat.callback = callback;
  // playerdata
  combat.player = playerDataString(responseText);
  combat.combatEvaluatorBias = getValue('combatEvaluatorBias');
  combat.attackVariable = 1.1053;
  combat.generalVariable = getBiasGeneral(combat);
  combat.hpVariable = getBiasHp(combat);
  combat.creature =
    creatureData(combat.player.superEliteSlayerMultiplier);
  combat = evalExtraBuffs(combat);
  combat = evalAttack(combat);
  combat = evalDamage(combat);
  combat = evalDefence(combat);
  combat = evalArmour(combat);
  combat = evalAnalysis(combat);
  combat = evalCA(combat);
  combat.evaluatorHTML = evalHTML(combat);
  var tempdata;
  if (callback.groupEvaluation) {
    checkForCreatureEvaluatorGroup();
    tempdata = combat.evaluatorHTML.replace(/'/g, '\\\'');
    $('#creatureEvaluatorGroup').html(tempdata);
  } else {
    checkForCreatureEvaluator();
    tempdata = combat.evaluatorHTML.replace(/'/g, '\\\'');
    $('#creatureEvaluator').html(tempdata);
  }
}

function getCreatureGroupData(responseText) { // Legacy
  var doc = createDocument(responseText);
  var groupAttackValue = Number(findNode('//table[@width="400"]/tbody' +
    '/tr/td[contains(.,"Attack:")]', doc).nextSibling.textContent
    .replace(/,/, ''));
  var groupDefenseValue = Number(findNode('//table[@width="400"]/tbody' +
    '/tr/td[contains(.,"Defense:")]', doc).nextSibling.textContent
    .replace(/,/, ''));
  var groupArmorValue = Number(findNode('//table[@width="400"]/tbody' +
    '/tr/td[contains(.,"Armor:")]', doc).nextSibling.textContent
    .replace(/,/, ''));
  var groupDamageValue = Number(findNode('//table[@width="400"]/tbody' +
    '/tr/td[contains(.,"Damage:")]', doc).nextSibling.textContent
    .replace(/,/, ''));
  var groupHPValue = Number(findNode('//table[@width="400"]/tbody' +
    '/tr/td[contains(.,"HP:")]', doc).nextSibling.textContent
    .replace(/,/, ''));
  xmlhttp('index.php?cmd=profile', getCreaturePlayerData, {
    groupExists: true,
    groupAttackValue: groupAttackValue,
    groupDefenseValue: groupDefenseValue,
    groupArmorValue: groupArmorValue,
    groupDamageValue: groupDamageValue,
    groupHPValue: groupHPValue,
    groupEvaluation: true
  });
}

function checkIfGroupExists(responseText) { // Hybrid
  var doc = createDocument(responseText);
  var groupExistsIMG = $(doc)
    .find('img[title="Disband Group (Cancel Attack)"]');
  if (groupExistsIMG.length > 0) {
    var groupHref = groupExistsIMG.parents('td:first').find('a:first')
      .attr('href');
    xmlhttp(groupHref, getCreatureGroupData);
  }
}

function addRemoveCreatureToDoNotKillList(evt) {
  var creatureName = evt.target.getAttribute('creatureName');
  var ind = calf.doNotKillList.indexOf(creatureName);
  if (ind !== -1) {
    calf.doNotKillList.splice(ind, 1);
    evt.target.innerHTML = 'Add to the do not kill list';
  } else {
    calf.doNotKillList.push(creatureName);
    evt.target.innerHTML = 'Remove from do not kill list';
  }
  setValue('doNotKillList', calf.doNotKillList.join());
  // refresh the action list
  window.GameData.doAction(-1);
}

function readyViewCreature() { // Hybrid
  $('#creatureEvaluator').html('');
  $('#creatureEvaluatorGroup').html('');

  xmlhttp('index.php?cmd=profile', getCreaturePlayerData, {
    groupExists: false,
    groupAttackValue: 0,
    groupDefenseValue: 0,
    groupArmorValue: 0,
    groupDamageValue: 0,
    groupHPValue: 0,
    groupEvaluation: false
  });
  xmlhttp('index.php?cmd=guild&subcmd=groups',
    checkIfGroupExists);

  $('#addRemoveCreatureToDoNotKillList').html('');
  if ($('#addRemoveCreatureToDoNotKillList').length === 0) {
    var doNotKillElement = '<div id="addRemoveCreatureToDo' +
      'NotKillList"" class="description" style="cursor:' +
      'pointer;text-decoration:underline;color:blue;"></div>';
    $(doNotKillElement).insertAfter($('#dialog-viewcreature')
      .find('p.description'));
  }
  var creatureName = $('#dialog-viewcreature').find('h2.name')
    .text();
  $('#addRemoveCreatureToDoNotKillList')
    .attr('creatureName', creatureName);
  var extraText = 'Add to the do not kill list';
  if (calf.doNotKillList.indexOf(creatureName) !== -1) {
    extraText = 'Remove from do not kill list';
  }
  $('#addRemoveCreatureToDoNotKillList').html(extraText);
  document.getElementById('addRemoveCreatureToDoNotKillList')
    .addEventListener('click',
      addRemoveCreatureToDoNotKillList, true);
}

var huntingBuffs$1;
var huntingBuffsName;
var hidePlayerActions;
var missingBuffsDiv;

function getPrefs() {
  calf.hideSubLvlCreature = getValue('hideSubLvlCreature');
  hidePlayerActions = getValue('hidePlayerActions');
  calf.showBuffs = getValue('showHuntingBuffs');
  calf.enabledHuntingMode = getValue('enabledHuntingMode');
  calf.buffs = shouldBeArray('huntingBuffs');
  calf.buffsName = getValue('huntingBuffsName');
  calf.buffs2 = shouldBeArray('huntingBuffs2');
  calf.buffs2Name = getValue('huntingBuffs2Name');
  calf.buffs3 = shouldBeArray('huntingBuffs3');
  calf.buffs3Name = getValue('huntingBuffs3Name');
  calf.doNotKillList = shouldBeArray('doNotKillList');
}

var buffLookup = {
  '1': function() {
    huntingBuffs$1 = calf.buffs;
    huntingBuffsName = calf.buffsName;
  },
  '2': function() {
    huntingBuffs$1 = calf.buffs2;
    huntingBuffsName = calf.buffs2Name;
  },
  '3': function() {
    huntingBuffs$1 = calf.buffs3;
    huntingBuffsName = calf.buffs3Name;
  }
};

function setCurrentBuffList() {
  var tmpFn = buffLookup[calf.enabledHuntingMode];
  if (typeof tmpFn === 'function') {
    tmpFn();
  }
}

function toggleSubLvlCreature() {
  calf.hideSubLvlCreature = !calf.hideSubLvlCreature;
  setValue('hideSubLvlCreature', calf.hideSubLvlCreature);
  GameData.fetch(256);
}

function toggleHidePlayerActions() {
  hidePlayerActions = !hidePlayerActions;
  setValue('hidePlayerActions', hidePlayerActions);
  GameData.fetch(256);
}

function toggleShowHuntingBuffs() {
  calf.showBuffs = !calf.showBuffs;
  setValue('showHuntingBuffs', calf.showBuffs);
  GameData.fetch(16);
}

function toggleEnabledHuntingMode(e) {
  if (e.target.name !== 'enabledHuntingMode') {return;}
  calf.enabledHuntingMode = e.target.value;
  setValue('enabledHuntingMode', calf.enabledHuntingMode);
  setCurrentBuffList();
  GameData.fetch(16);
}

var fshEvents = {
  hideSubLvlCreature: toggleSubLvlCreature,
  hidePlayerActions: toggleHidePlayerActions,
  showHuntingBuffs: toggleShowHuntingBuffs
};

function prefsClickEvent(e) {
  var tmpFn = fshEvents[e.target.name];
  if (typeof tmpFn === 'function') {
    e.target.blur();
    tmpFn(e);
  }
}

function buildFshDivs() {
  var fshDiv = createDiv({className: 'fshCenter fshFten'});
  var prefsDiv = createDiv({
    innerHTML: simpleCheckboxHtml('hideSubLvlCreature') + '&nbsp;&nbsp;' +
      simpleCheckboxHtml('hidePlayerActions') + '&nbsp;&nbsp;' +
      huntingBuffsHtml()
  });
  prefsDiv.addEventListener('click', prefsClickEvent);
  prefsDiv.addEventListener('change', toggleEnabledHuntingMode);
  fshDiv.insertAdjacentElement('beforeend', prefsDiv);
  missingBuffsDiv = createDiv();
  fshDiv.insertAdjacentElement('beforeend', missingBuffsDiv);
  var worldContainerBelow = document.getElementById('worldContainerBelow');
  worldContainerBelow.insertAdjacentElement('afterbegin', fshDiv);
}

function xhrDataFilter(data) {
  var myData = JSON.parse(data);
  if (!myData.actions || myData.actions.length === 0) {return data;}
  var realm = GameData.realm();
  myData.actions = myData.actions.filter(function(el) {
    if (el.type === 6) {
      return el.data.creature_type !== 0 || el.data.level >= realm.minlevel;
    }
    return true;
  });
  var ret = JSON.stringify(myData);
  return ret;
}

function xhrPreFilter(options, originalOptions) {
  if (!originalOptions.data || !calf.hideSubLvlCreature) {return;}
  options.dataFilter = xhrDataFilter;
}

function interceptXHR() { // jQuery.min
  $.ajaxPrefilter('JSON', xhrPreFilter);
}

function doHidePlayerActions() {
  if (!hidePlayerActions) {return;}
  var act = document.getElementById('actionList');
  var players = act.getElementsByClassName('player');
  Array.prototype.forEach.call(players, function(el) {
    var verbs = el.getElementsByClassName('verbs');
    if (verbs && verbs.length === 1) {
      verbs[0].classList.add('fshHide');
    }
  });
}

function huntingBuffsEnabled(evt, data) {
  if (!calf.showBuffs) {
    missingBuffsDiv.innerHTML = '';
    return;
  }
  var buffHash = data.b.reduce(function(prev, curr) {
    prev[curr.name] = true;
    return prev;
  }, {});
  var missingBuffs = huntingBuffs$1.reduce(function(prev, curr) {
    if (!buffHash[curr.trim()]) {prev.push(curr);}
    return prev;
  }, []);
  if (missingBuffs.length > 0) {
    missingBuffsDiv.innerHTML = 'You are missing some ' +
      huntingBuffsName + ' hunting buffs<br>(' +
      missingBuffs.join(', ') + ')';
  } else {missingBuffsDiv.innerHTML = '';}
}

function dataEventsPlayerBuffs(evt, data) {
  if (huntingBuffs$1) {huntingBuffsEnabled(evt, data);}
}

function doHuntingBuffs() { // jQuery.min
  setCurrentBuffList();
  $.subscribe(window.DATA_EVENTS.PLAYER_BUFFS.ANY,
    dataEventsPlayerBuffs);
  if (calf.showBuffs && window.initialGameData) { // HCS initial data
    dataEventsPlayerBuffs(null,
      {b: window.initialGameData.player.buffs});
  }
}

function setupPref() {
  getPrefs();
  buildFshDivs();
  interceptXHR();
  doHuntingBuffs();
  $.subscribe('after-update.actionlist', doHidePlayerActions);
  doHidePlayerActions();
}

var showCreatureInfo;
var showMonsterLog;
var monsterLog;
var actionData;
var creature;
var monster;
var generalVariable = 1.1053;
var hpVariable = 1.1;
var statLevel;
var statDefense;
var statAttack;
var statDamage;
var statArmor;
var statHp;

function updateMinMax(_logStat, creatureStat) {
  var logStat = fallback(_logStat, {});
  if (logStat.min) {
    logStat.min = Math.min(logStat.min, creatureStat);
  } else {
    logStat.min = creatureStat;
  }
  if (logStat.max) {
    logStat.max = Math.max(logStat.max, creatureStat);
  } else {
    logStat.max = creatureStat;
  }
  return logStat;
}

function processMonsterLog() {
  if (!showMonsterLog) {return;}
  monsterLog[creature.name] = fallback(monsterLog[creature.name], {});
  var logCreature = monsterLog[creature.name];
  logCreature.creature_class = fallback(logCreature.creature_class,
    creature.creature_class);
  logCreature.image_id = fallback(logCreature.image_id,
    creature.image_id);
  logCreature.level = fallback(logCreature.level,
    Number(creature.level));
  logCreature.type = fallback(logCreature.type, creature.type);
  logCreature.armor = updateMinMax(logCreature.armor,
    Number(creature.armor));
  logCreature.attack = updateMinMax(logCreature.attack,
    Number(creature.attack));
  logCreature.damage = updateMinMax(logCreature.damage,
    Number(creature.damage));
  logCreature.defense = updateMinMax(logCreature.defense,
    Number(creature.defense));
  logCreature.hp = updateMinMax(logCreature.hp,
    Number(creature.hp));
  if (creature.enhancements && creature.enhancements.length > 0) {
    logCreature.enhancements = fallback(logCreature.enhancements, {});
    var logEnh = logCreature.enhancements;
    creature.enhancements.forEach(function(e) {
      logEnh[e.name] = updateMinMax(logEnh[e.name], Number(e.value));
    });
  }
  setForage('fsh_monsterLog', monsterLog);
}

function doMouseOver() {
  var oneHitNumber = Math.ceil(creature.hp * hpVariable + creature.armor *
    generalVariable);
  var myLvlClas = 'fshYellow';
  if (statLevel > creature.level) {myLvlClas = 'fshRed';}
  var monsterTip = '<table><tr><td>' +
    '<img src="https://cdn.fallensword.com/creatures/' + creature.image_id +
    '.jpg" height="200" width="200"></td><td rowspan="2">' +
    '<table width="400"><tr>' +
    '<td class="header" colspan="4" class="fshCenter">Statistics</td></tr>' +
    '<tr><td>Class:&nbsp;</td><td width="40%">' + creature.creature_class +
    '</td><td>Level:&nbsp;</td><td width="40%">' + creature.level +
    ' (your level:<span class="' + myLvlClas + '">' +
    statLevel + '</span>)</td>' +
    '</tr><tr><td>Attack:&nbsp;</td><td width="40%">' + creature.attack +
    ' (your defense:<span class="fshYellow">' + statDefense + '</span>)</td>' +
    '<td>Defense:&nbsp;</td><td width="40%">' + creature.defense +
    ' (your attack:<span class="fshYellow">' + statAttack + '</span>)</td>' +
    '</tr><tr><td>Armor:&nbsp;</td><td width="40%">' + creature.armor +
    ' (your damage:<span class="fshYellow">' + statDamage + '</span>)</td>' +
    '<td>Damage:&nbsp;</td><td width="40%">' + creature.damage +
    ' (your armor:<span class="fshYellow">' + statArmor + '</span>)</td>' +
    '</tr><tr><td>HP:&nbsp;</td><td width="40%">' + creature.hp +
    ' (your HP:<span class="fshYellow">' + statHp + '</span>)' +
    '(1H: <span class="fshRed">' + oneHitNumber + '</span>)</td>' +
    '<td>Gold:&nbsp;</td><td width="40%">' + creature.gold + '</td></tr>' +
    '<tr><td colspan="4" height="5"></td></tr><tr>' +
    '<td class="header" colspan="4" class="fshCenter">Enhancements</td></tr>';

  if (!creature.enhancements) {
    monsterTip += '<tr><td colspan="4">[no enhancements]</td></tr>';
  } else {
    creature.enhancements.forEach(function(e) {
      monsterTip += '<tr><td colspan="2">' + e.name +
        ':</td><td colspan="2">' + e.value + '</td></tr>';
    });
  }

  monsterTip += '<tr><td colspan="4" height="5"></td></tr><tr>' +
    '<td class="header" colspan="4" class="fshCenter">Description</td>' +
    '</tr><tr><td colspan="4">' + creature.description + '</td></tr>' +
    '<tr><td colspan="4" height="5"></td></tr></table></td></tr>' +
    '<tr><td class="fshCenter"><b>' + creature.name + '</b></td></tr>' +
    '</table>';

  monster.setAttribute('data-tipped', monsterTip);
}

var bailOut$1 = [
  function(data, actions) {
    return actions.length === 1 &&
      actions[0].classList.contains('hcs-state-disabled'); // In motion
  },
  function(data, actions) {
    return actions.length - 1 < data.passback; // Not enough actions
  },
  function(data) {
    return creature.id !== actionData[data.passback].data.id.toString(); // Different action list
  }
];

function doCreatureInfo(data) {
  var actions = document.getElementById('actionList').children;
  for (var i = 0; i < bailOut$1.length; i += 1) {
    if (bailOut$1[i](data, actions)) {return;}
  }
  monster = actions[data.passback].firstElementChild.firstElementChild
    .firstElementChild;
  doMouseOver();
}

function processMouseOver(data) {
  if (showCreatureInfo) {doCreatureInfo(data);}
}

function processMonster(data) {
  creature = data.response.data;
  if (!creature) {return;} // creature is null
  processMouseOver(data);
  processMonsterLog();
}

function loopActions(e, i) { // jQuery
  if (e.type !== 6) {return;}
  retryAjax({
    url: 'fetchdata.php?a=1&d=0&id=' + e.data.id + '&passback=' + i,
    dataType: 'json'
  }).done(processMonster);
}

function getStatText(statTooltip, statClassName) {
  return statTooltip.getElementsByClassName(statClassName)[0]
    .nextElementSibling.textContent;
}

function getMyStats() {
  statLevel = intValue(getStatText(document
    .getElementById('statbar-level-tooltip-general'), 'stat-level'));
  var statTooltip = document.getElementById('statbar-character-tooltip-stats');
  statDefense = getStatText(statTooltip, 'stat-defense');
  statAttack = getStatText(statTooltip, 'stat-attack');
  statDamage = getStatText(statTooltip, 'stat-damage');
  statArmor = getStatText(statTooltip, 'stat-armor');
  statHp = getStatText(statTooltip, 'stat-hp');
}

function initMonsterLog() {
  if (showCreatureInfo) {getMyStats();}
  actionData = GameData.actions();
  actionData.forEach(loopActions);
}

var genVar = [0, 1.1, 1.053, 1.1053];
var hpVar = [0, 1.053, 1, 1];

function getBias() {
  var combatEvaluatorBias = getValue('combatEvaluatorBias');
  generalVariable = genVar[combatEvaluatorBias];
  hpVariable = hpVar[combatEvaluatorBias];
}

function startMonsterLog() { // jQuery
  showCreatureInfo = getValue('showCreatureInfo');
  showMonsterLog = getValue('showMonsterLog');
  if (!showCreatureInfo && !showMonsterLog) {return;}
  if (showCreatureInfo) {getBias();}
  $.subscribe('after-update.actionlist', initMonsterLog);
  getForage('fsh_monsterLog').done(function(data) {
    monsterLog = data || {};
  });
  initMonsterLog();
}

var def_afterUpdateActionlist = 'after-update.actionlist';

function hideGroupByType(type) { // jQuery
  $('#actionList li.creature-' + type.toString() + ' a.create-group').hide();
}

function hideGroupSubscribe(type) { // jQuery.min
  $.subscribe(def_afterUpdateActionlist, hideGroupByType.bind(null, type));
}

var hideGroupTypes = [
  'hideChampionsGroup',
  'hideElitesGroup',
  'hideSEGroup',
  'hideTitanGroup',
  'hideLegendaryGroup'
];

function hideGroupButton() {
  hideGroupTypes.forEach(function(el, i) {
    if (getValue(el)) {
      hideGroupSubscribe(i + 1);
      hideGroupByType(i + 1);
    }
  });
}

function colorType(actionList, creatureClass, colorClass) {
  var creatures = actionList.getElementsByClassName(creatureClass);
  Array.prototype.forEach.call(creatures, function(el) {
    el.classList.add(colorClass);
  });
}

function colorMonsters() {
  var act = document.getElementById('actionList');
  colorType(act, 'creature-1', 'fshGreen');
  colorType(act, 'creature-2', 'fshYellow');
  colorType(act, 'creature-3', 'fshRed');
}

function doMonsterColors() { // jQuery.min
  if (getValue('enableCreatureColoring')) {
    $.subscribe(def_afterUpdateActionlist, colorMonsters);
    colorMonsters();
  }
}

function afterUpdateActionList() {
  // color the critters in the do no kill list blue
  var act = document.getElementById('actionList');
  var creatures = act.getElementsByClassName('creature');
  Array.prototype.forEach.call(creatures, function(el) {
    if (calf.doNotKillList.indexOf(el.textContent) !== -1) {
      el.classList.add('fshBlue');
    }
  });
}

function interceptDoAction() { // jQuery
  var gameData = GameData;
  var hcs = window.HCS;
  var oldDoAction = gameData.doAction;
  gameData.doAction = function(actionCode, fetchFlags, data) {
    if (actionCode === hcs.DEFINES.ACTION.CREATURE_COMBAT) {
      // Do custom stuff e.g. do not kill list
      var creatureIcon = $('#actionList div.header')
        .eq(data.passback).find('a.icon');
      if (calf.doNotKillList.indexOf(creatureIcon.data('name')) !== -1) {
        creatureIcon.removeClass('loading');
        return;
      }
    }
    // Call standard action
    oldDoAction(actionCode, fetchFlags, data);
  };
}

function impIconColour() { // jQuery
  var imp = $('#actionlist-shield-imp');
  if (imp.length === 1) {
    imp.css('background-color',
      assets.colorHash[imp.text()] || '#ad8043');
  }
}

function fixDebuffQTip(e) { // jQuery.min
  $(e.target).qtip('hide');
}

function injectWorldNewMap(data) {
  updateSendGoldOnWorld(data);
  if (data.realm && data.realm.name) {
    injectButtons(data);
    document.getElementById('buffList')
      .addEventListener('click', fixDebuffQTip);
    if (calf.hideSubLvlCreature) {GameData.fetch(256);}
  }
}

function subscribes() { // jQuery.min
  setupPref();
  injectSendGoldOnWorld();
  // subscribe to view creature events on the new map.
  $.subscribe('ready.view-creature', readyViewCreature);
  hideGroupButton(); // Hide Create Group button
  doMonsterColors();
  // add do-not-kill list functionality
  $.subscribe(def_afterUpdateActionlist, afterUpdateActionList);
  afterUpdateActionList();
  // add monster log functionality
  startMonsterLog();
  // then intercept the action call
  interceptDoAction();
  $.subscribe(window.DATA_EVENTS.PLAYER_BUFFS.ANY,
    impIconColour);
  $.subscribe('keydown.controls', function(e, key) {
    if (key === 'ACT_REPAIR') {GameData.fetch(403);}
  });
  combatLogger();
  // on world
  if (window.initialGameData) {// HCS initial data
    injectWorldNewMap(window.initialGameData);
    impIconColour(null,
      {b: window.initialGameData.player.buffs});
  }
  $.subscribe('-1-success.action-response 5-success.action-response',
    function(e, data) { // change of information
      injectWorldNewMap(data);
    }
  );
  // somewhere near here will be multi buy on shop
  prepareShop();
  injectRelic();

  $.subscribe('level.stats-player', function(e, data) {
    console.log('level.stats-player data', data); // eslint-disable-line no-console
    // level.stats-player data Object { a: 3381, b: 3382 }
  });

}

/* fetchFlags = {
  playerStats : 1,
  playerBackpackCount : 2,
  playerBackpackItems : 4,
  playerPrefs : 8,

  playerBuffs : 16,
  worldDefines : 32,
  worldRealmStatic : 64,
  worldRealmDynamic : 128,

  worldRealmActions : 256,
  PLAYER_EQUIPMENT : 512,
  PLAYER_NOTIFICATIONS : 1024,

  all : 2047
}; */

var impStyles = [
  ' style="color:red; font-size:large; font-weight:bold"',
  ' style="color:Orangered; font-size:large; font-weight:bold"',
  ' style="color:Orangered; font-size:medium; font-weight:bold;"'
];

function getImpWarningStyle(impsRemaining) { // Legacy
  if (impsRemaining >= 0 && impsRemaining <= 2) {
    return impStyles[impsRemaining];
  }
  return ' style="color:green; font-size:medium;"';
}

function impWarning(impsRemaining) { // Legacy
  var applyImpWarningColor = getImpWarningStyle(impsRemaining);
  var recastButton = '';
  if (impsRemaining === 0) {
    recastButton = '&nbsp;<span id="Helper:recastImpAndRefresh" ' +
      'style="color: blue; cursor: pointer; text-decoration: underline; ' +
      'font-size: xx-small;">Recast</span>';
  }
  return '<tr><td' + applyImpWarningColor + '>Shield Imps Remaining: ' +
    impsRemaining + recastButton + '</td></tr>';
}

function getCaLvl(hasCounterAttack) { // Legacy
  var counterAttackLevel;
  if (hasCounterAttack.getAttribute('src').search('/skills/') !== -1) {
    var onmouseover = $(hasCounterAttack).data('tipped');
    var counterAttackRE = /<b>Counter Attack<\/b> \(Level: (\d+)\)/;
    var counterAttack = counterAttackRE.exec(onmouseover);
    if (counterAttack) {
      counterAttackLevel = counterAttack[1];
    }
  }
  return '<tr><td style="font-size:small; color:' +
    'blue">CA' + counterAttackLevel + ' active</td></tr>';
}

function hasCA() { // Legacy
  var replacementText = '';
  var hasCounterAttack = findNode('//img[contains(@src,"/54_sm.gif")]');
  if (hasCounterAttack) {
    replacementText += getCaLvl(hasCounterAttack);
  }
  return replacementText;
}

var doublerRE = /<b>Doubler<\/b> \(Level: (\d+)\)/;

function doublerLvl(onmouseover) { // Legacy
  var doubler = doublerRE.exec(onmouseover);
  if (doubler) {return doubler[1];}
}

function getDoublerLevel(hasDoubler) { // Legacy
  var doublerLevel;
  if (hasDoubler.getAttribute('src').search('/skills/') !== -1) {
    var onmouseover = $(hasDoubler).data('tipped');
    doublerLevel = doublerLvl(onmouseover);
  }
  if (doublerLevel === 200) { // ???
    return '<tr><td style="font-size:small; color:' +
      'red">Doubler ' + doublerLevel + ' active</td></tr>';
  }
  return '';
}

function hasDblr() { // Legacy
  var hasDoubler = findNode('//img[contains(@src,"/26_sm.gif")]');
  if (hasDoubler) {
    return getDoublerLevel(hasDoubler);
  }
  return '';
}

function getKillStreak(responseText) { // Hybrid
  var doc = createDocument(responseText);
  var killStreakLocation = $(doc).find('td:contains("Streak:"):last').next();
  log('killStreakLocation', killStreakLocation); // TODO WTF?
  var playerKillStreakValue;
  if (killStreakLocation.length > 0) {
    playerKillStreakValue = intValue(killStreakLocation.text());
  }
  var killStreakElement = findNode('//span[@findme="killstreak"]');
  killStreakElement.innerHTML = addCommas(playerKillStreakValue);
  setValue('lastKillStreak', playerKillStreakValue);
  var deathDealerBuff =
    findNode('//img[contains(@data-tipped,"Death Dealer")]');
  var deathDealerRE = /<b>Death Dealer<\/b> \(Level: (\d+)\)/;
  var deathDealer = deathDealerRE.exec($(deathDealerBuff).data('tipped'));
  var deathDealerPercentage;
  if (deathDealer) {
    var deathDealerLevel = deathDealer[1];
    deathDealerPercentage = Math.min(Math.round(
      Math.floor(playerKillStreakValue / 5) * deathDealerLevel
    ) * 0.01, 20);
  }
  var deathDealerPercentageElement =
    findNode('//span[@findme="damagebonus"]');
  deathDealerPercentageElement.innerHTML = deathDealerPercentage;
  setValue('lastDeathDealerPercentage', deathDealerPercentage);
}

function getLastValue(pref) {
  var val = getValue(pref);
  if (typeof val === 'undefined') {
    setValue(pref, 0);
    val = 0;
  }
  return val;
}

function getTrackText(trackKillStreak) { // Legacy
  if (trackKillStreak) {return 'ON';}
  return 'off';
}

function doDeathDealer(impsRemaining) { // Legacy
  var lastDeathDealerPercentage = getLastValue('lastDeathDealerPercentage');
  var lastKillStreak = getLastValue('lastKillStreak');
  var trackKillStreak = getValue('trackKillStreak');
  var trackText = getTrackText(trackKillStreak);
  if (impsRemaining > 0 && lastDeathDealerPercentage === 20) {
    return '<tr><td style="font-size:small; color:black"' +
      '>Kill Streak: <span findme="killstreak">&gt;' +
      addCommas(lastKillStreak) + '</span> Damage bonus: <' +
      'span findme="damagebonus">20</span>%</td></tr>';
  }
  if (!trackKillStreak) {
    return '<tr><td style="font-size:small; color:' +
      'navy" nowrap>KillStreak tracker disabled. <span style="' +
      'font-size:xx-small">Track: <span id=Helper:toggleKS' +
      'tracker style="color:navy;cursor:pointer;text-' +
      'decoration:underline;" title="Click to toggle">' +
      trackText + '</span></span></td></tr>';
  }
  xmlhttp('index.php?cmd=profile', getKillStreak);
  return '<tr><td style="font-size:small; color:' +
    'navy" nowrap>KillStreak: <span findme="killstreak">' +
    addCommas(lastKillStreak) + '</span> Damage bonus' +
    ': <span findme="damagebonus">' +
    Math.round(lastDeathDealerPercentage * 100) / 100 +
    '</span>%&nbsp;<span style="font-size:xx-small">Track: ' +
    '<span id=Helper:toggleKStracker style="color:navy;' +
    'cursor:pointer;text-decoration:underline;" title="Click' +
    ' to toggle">' + trackText + '</span></span></td></tr>';
}

function recastImpAndRefresh(responseText) { // Legacy
  var doc = createDocument(responseText);
  if (doc) {
    location.reload();
  }
}

function toggleKsTracker() { // Legacy
  var trackKS = document.getElementById('Helper:toggleKStracker');
  if (trackKS) {
    trackKS.addEventListener('click', function() {
      setValue('trackKillStreak',
        !getValue('trackKillStreak'));
      location.reload();
    }, true);
  }
}

var hasShieldImp;
var hasDeathDealer;
var impsRemaining;
var re = /(\d+) HP remaining/;

function getImpHp() { // Legacy - Old Map
  impsRemaining = 0;
  if (hasShieldImp) {
    var textToTest = $(hasShieldImp).data('tipped');
    var impsRemainingRE = re.exec(textToTest);
    impsRemaining = impsRemainingRE[1];
  }
  var ret = impWarning(impsRemaining);
  if (hasDeathDealer) {
    ret += doDeathDealer(impsRemaining);
  }
  return ret;
}

function findImps() { // Legacy - Old Map
  if (hasDeathDealer || hasShieldImp) {
    return getImpHp();
  }
  return '';
}

function impRecast() { // Legacy - Old Map
  if ((hasDeathDealer || hasShieldImp) && impsRemaining === 0) {
    var _recastImpAndRefresh = document
      .getElementById('Helper:recastImpAndRefresh');
    var impHref = 'index.php?cmd=quickbuff&subcmd=activate&target' +
      'Players=' +
      $('dt.stat-name:first').next().text().replace(/,/g, '') +
      '&skills%5B%5D=55';
    _recastImpAndRefresh.addEventListener('click', function() {
      xmlhttp(impHref, recastImpAndRefresh, true);
    }, true);
  }
}

function checkBuffs() { // Legacy - Old Map
  // extra world screen text
  var replacementText = '<td background="' + imageServer +
    '/skin/realm_right_bg.jpg"><table align="right" cellpadding="1" ' +
    'style="width:270px;margin-left:38px;margin-right:38px;font-size' +
    ':medium; border-spacing: 1px; border-collapse: collapse;"><tr><' +
    'td colspan="2" height="10"></td></tr><tr>';
  hasShieldImp = findNode('//img[contains(@src,"/55_sm.gif")]');
  hasDeathDealer = findNode('//img[contains(@src,"/50_sm.gif")]');
  replacementText += findImps();
  replacementText += hasCA();
  replacementText += hasDblr();
  if (calf.huntingMode) {
    replacementText += '<tr><td style="font-size: small; color:red">' +
      'Hunting mode enabled</td></tr>';
  }
  replacementText += '<tr><td colspan="2" height="10"></td></tr>';
  replacementText += '</td>';

  var injectHere = findNode('//div[table[@class="centered" ' +
    'and @style="width: 270px;"]]');
  if (!injectHere) {return;}
  // insert after kill all monsters image and text
  var newSpan = createDiv({innerHTML: replacementText});
  injectHere.appendChild(newSpan);

  impRecast();
  toggleKsTracker();
}

function injectOldMap() {
  checkBuffs();
}

function injectWorld() {
  // -1 = world page
  // 0 = quest responce
  // 1 = view creature
  // 2 = attack creature
  // 3 = attack player
  // 4 = move
  // 5 = use stair
  // 6 = use chest
  // 7 = take portal
  // 10 = problaby view relic
  // 11 = take relic
  // 12 = create group
  // 13 = view shop
  // 14 = purchase item
  // 15 = repair
  // 17 = login
  // 18 = username not found
  if (document.getElementById('worldPage')) { // new map
    subscribes();
  } else {
    // not new map.
    injectOldMap();
  }
}

function doinvent(recipe) {
  return callApp({
    cmd: 'inventing',
    subcmd: 'doinvent',
    recipe_id: recipe
  });
}

var itemRE$1 = /<b>([^<]+)<\/b>/i;
var plantFromComponentHash = {
  'Amber Essense': 'Amber Plant',
  'Blood Bloom Flower': 'Blood Bloom Plant',
  'Dark Shade ': 'Dark Shade Plant',
  'Snake Eye': 'Elya Snake Head',
  'Snake Venom Fang': 'Elya Snake Head',
  'Heffle Wart': 'Heffle Wart Plant',
  'Jademare Blossom': 'Jademare Plant',
  'Trinettle Leaf': 'Trinettle Plant',
  'Purplet Flower': 'Purplet Plant',
};

function quickInventDone(json) {
  var inventResult = document.getElementById('invent_Result');
  if (jsonFail(json, inventResult)) {return;}
  if (json.r.success) {
    outputResult('<span class="fshGreen">' +
      'You successfully invented the item!</span>', inventResult);
  } else {
    outputResult('<span class="fshRed">' +
      'You have failed to invent the item.</span>', inventResult);
  }
}

function quickInvent() { // Legacy
  var amountToInvent = $('#invent_amount').attr('value');
  var recipeID = $('input[name="recipe_id"]').attr('value');
  $('#invet_Result_label').html('Inventing ' + amountToInvent + ' Items');
  for (var i = 0; i < amountToInvent; i += 1) {
    doinvent(recipeID).done(quickInventDone);
  }
}

function injectInvent() { // Bad jQuery
  var selector = '<tr><td align="center">Select how many to quick ' +
    'invent<input value=1 id="invent_amount" name="invent_amount" ' +
    'size=3 class="custominput"></td></tr>' +
    '<tr><td align="center"><input id="quickInvent" value="Quick ' +
    'invent items" class="custombutton" type="submit"></td></tr>' + // button to invent
    '<tr><td colspan=6 align="center"><span id="invet_Result_label">' +
    '</span><ol id="invent_Result"></ol></td></tr>';
  $('input[name="recipe_id"]').closest('tbody').append(selector);
  document.getElementById('quickInvent').addEventListener('click',
    quickInvent, true);

}

function getItemName(responseText) { // Legacy
  var itemName = itemRE$1.exec(responseText);
  if (itemName) {return itemName[1];}
}

function injectViewRecipeLinks(responseText, callback) { // Legacy
  var itemName = getItemName(responseText);
  var plantFromComponent = fallback(plantFromComponentHash[itemName],
    itemName);
  if (itemName !== plantFromComponent) {
    var itemLinks = createTd({
      innerHTML: '<a href="' + server +
        '?cmd=auctionhouse&search_text=' +
        encodeURI(plantFromComponent) + '">AH</a>'
    });
    var counter = findNode('../../../../tr[2]/td', callback);
    counter.setAttribute('colspan', '2');
    callback.parentNode.parentNode.parentNode.appendChild(itemLinks);
  }
}

function linkFromMouseoverCustom(mouseOver) { // Legacy
  var reParams =
    /item_id=(\d+)&inv_id=([-0-9]*)&t=(\d+)&p=(\d+)&vcode=([a-z0-9]*)/i;
  var reResult = reParams.exec(mouseOver);
  if (reResult === null) {
    return null;
  }
  var itemId = reResult[1];
  var invId = reResult[2];
  var type = reResult[3];
  var pid = reResult[4];
  var vcode = reResult[5];
  var theUrl = 'fetchitem.php?item_id=' + itemId + '&inv_id=' + invId +
    '&t=' + type + '&p=' + pid + '&vcode=' + vcode;
  theUrl = server + theUrl;
  return theUrl;
}

function injectViewRecipe() { // Legacy
  var recipe = $('#pCC table table b').first();
  var name = recipe.html();
  var searchName = recipe.html().replace(/ /g, '%20');
  recipe.html('<a href="https://guide.fallensword.com/index.php?cmd=' +
    'items&subcmd=view&search_name=' + searchName + '">' + name +
    '</a>');

  var components = findNodes(
    '//b[.="Components Required"]/../../following-sibling::tr[2]//img');
  if (components) {
    for (var i = 0; i < components.length; i += 1) {
      var mo = components[i].getAttribute('data-tipped');
      xmlhttp(linkFromMouseoverCustom(mo),
        injectViewRecipeLinks, components[i]);
      var componentCountElement = components[i].parentNode.parentNode
        .parentNode.nextSibling.firstChild;
      componentCountElement.innerHTML = '<nobr>' +
        componentCountElement.innerHTML + '</nobr>';
    }
  }
}

function inventing() {
  injectViewRecipe();
  injectInvent();
}

function dontPost$2() {
  var submitButton = document.querySelector('#pCC input[type="submit"]');
  if (submitButton) {
    submitButton.addEventListener('click', function(e) {
      e.preventDefault();
      window.location = 'index.php?cmd=pvpladder&viewing_band_id=' +
        document.querySelector('#pCC select[name="viewing_band_id"]').value;
    });
  }
}

function formatLastReset(lastLadderReset) {
  var m = Math.floor((now - lastLadderReset) / 60000);
  var h = Math.floor(m / 60);
  m %= 60;
  return outputFormat(h, ' hours, ') + m + ' mins';
}

function formatTime() {
  var lastLadderReset = getValue('lastLadderReset');
  if (lastLadderReset < now - 48 * 60 * 60 * 1000) {
    return '<span class="fshLink tip-static" data-tipped="FSH has not seen ' +
      'the last ladder reset.<br>You can find it in your log if you ' +
      'qualified<br>or Tavern Rumours.">???</span>';
  }
  return formatLastReset(lastLadderReset);
}

function lastReset() {
  var topTable = document.querySelector('#pCC table');
  var newRow = createTr();
  var leftCell = newRow.insertCell(-1);
  leftCell.height = 25;
  leftCell.textContent = 'Last Reset:';
  var rightCell = newRow.insertCell(-1);
  rightCell.align = 'right';
  rightCell.innerHTML = formatTime();
  topTable.appendChild(newRow);
}

function ladder() {
  dontPost$2();
  lastReset();
}

var oldMoves = [];
var nodes;
var selectRow;

function doPickMove(moveId, slotId) {
  return retryAjax({
    url: 'index.php',
    data: {
      cmd: 'arena',
      subcmd: 'dopickmove',
      move_id: moveId,
      slot_id: slotId
    }
  });
}

function updateMoves() { // jQuery
  var newMoves = [];
  $('select', selectRow).each(function(i, e) {
    newMoves.push($(e).val());
  });
  var prm = [];
  newMoves.forEach(function(val, ind) {
    if (val === oldMoves[ind]) {return;}
    prm.push(doPickMove('x', ind));
    nodes.eq(ind).attr({
      src: imageServer + '/world/actionLoadingSpinner.gif',
      width: '25',
      height: '25'
    });
  });
  $.when.apply($, prm).done(function() {
    newMoves.forEach(function(val, ind) {
      if (val === 'x' || val === oldMoves[ind]) {return;}
      prm.push(doPickMove(val, ind));
    });
    $.when.apply($, prm).done(function() {
      window.location = 'index.php?cmd=arena&subcmd=setup';
    });
  });
}

function selectMoves(evt) { // jQuery
  $(evt.target).off();

  nodes =
    $('#pCC a[href^="index.php?cmd=arena&subcmd=pickmove&slot_id="] img');
  var table = nodes.eq(0).closest('table').parent().closest('table');

  var row = $('<tr/>');
  selectRow = row;
  row.append('<td/>');
  nodes.each(function(i, e) {
    var move = $(e).attr('src');
    if (move.indexOf('bar_icon_holder.jpg') > 0) {
      move = 'x';
    } else {
      move = move.match(/pvp\/(\d+).gif$/)[1];
    }
    var html = $(moveOptions);
    $('option[value=' + move + ']', html).prop('selected', true);
    row.append(html);
  });
  table.append(row);

  $('img[src$="pvp/bar_spacer.jpg"]', table)
    .attr({width: '15', height: '50'});

  row = $('<tr><td colspan=32 align=center ' +
    'style="padding-top: 2px;padding-bottom: 2px;">' +
    '<input class="custombutton" value="Update" type="button">' +
    '</td></tr>');
  $('input', row).click(updateMoves);
  table.append(row);
}

function setupMoves() { // jQuery
  var node = $('#pCC b:contains("Setup Combat Moves")');
  if (node.length !== 1) {return;}
  node.addClass('fshLink fshGreen');
  node.click(selectMoves);
}

function showAllQuestSteps() {
  if (!getValue('showNextQuestSteps')) {return;}
  Array.prototype.forEach.call(document.querySelectorAll('div[id^="stage"]'),
    function(e) {e.style.display = 'block';});
  document.getElementById('next_stage_button').style.display = 'none';
}

function gotMoves(_arena) { // jQuery
  var arena = _arena || {};
  arena.moves = {};
  var arenaMoves = $('#pCC img[vspace="4"]').slice(1);
  arenaMoves.each(function(i, e) {
    var self = $(e);
    var src = self.attr('src');
    var moveId = /(\d+)\.gif/.exec(src)[1];
    arena.moves[moveId] = {};
    arena.moves[moveId].count = Number(/(\d)$/
      .exec(self.closest('td').html())[1]);
    arena.moves[moveId].href = src;
  });
  setForage('fsh_arena', arena);
}

function storeMoves() { // jQuery.min
  getForage('fsh_arena').done(gotMoves);
}

var currentFSP;

function updateStamCount(evt) { // jQuery
  var target = $(evt.target);
  var amount = target.attr('amount');
  var cost = target.attr('cost');
  var quantity = target.val();
  // cap the value if the user goes over his current FSP
  var color = 'red';
  var extraStam = Math.floor(currentFSP / cost) * amount;
  if (quantity * cost <= currentFSP) {
    extraStam = quantity * amount;
    color = 'blue';
  }
  $('#pCC span[id="totalStam"][type="' + target.attr('stamtype') + '"]')
    .css('color', color)
    .html('(+' + extraStam + ' stamina)');
}

function injectUpgradeHelper(value, type) { // jQuery
  var theCells = $('#pCC tr')
    .has('input[name="upgrade_id"][value="' + value + '"]')
    .find('td');
  var cell = theCells.first();
  cell.append(' <span style="color:blue" ' +
    'id="totalStam" type="' + type + '"></span>');
  var amountRE = new RegExp('\\+(\\d+) ' + type + ' Stamina');
  var amount = cell.text().match(amountRE)[1];
  $('input[name="quantity"]', theCells)
    .attr('stamtype', type)
    .attr('amount', amount)
    .attr('cost', theCells.eq(1).text())
    .keyup(updateStamCount);
}

function injectPoints() { // jQuery
  currentFSP = intValue($('#statbar-fsp').text());
  injectUpgradeHelper(0, 'Current');
  injectUpgradeHelper(1, 'Maximum');
  $('#pCC td')
    .has('input[name="upgrade_id"][value="3"]')
    .html('<a href="' + server +
      '?cmd=marketplace">Sell at Marketplace</a>');
}

function storePlayerUpgrades() { // Legacy
  var alliesText = findNode('//td[.="+1 Max Allies"]');
  var alliesRatio = alliesText.nextSibling.nextSibling.nextSibling
    .nextSibling;
  if (alliesRatio) {
    var alliesValueRE = /(\d+) \/ 115/;
    var alliesValue = Number(alliesValueRE.exec(alliesRatio.innerHTML)[1]);
    setValue('alliestotal', alliesValue + 5);
  }
  var enemiesText = findNode('//td[.="+1 Max Enemies"]');
  var enemiesRatio = enemiesText.nextSibling.nextSibling.nextSibling
    .nextSibling;
  if (enemiesRatio) {
    var enemiesValueRE = /(\d+) \/ 115/;
    var enemiesValue = Number(enemiesValueRE.exec(enemiesRatio.innerHTML)[1]);
    setValue('enemiestotal', enemiesValue + 5);
  }
  injectPoints();
}

var normalLink;
var seasonLink;
var activeLink;
var completeLink;
var notStartedLink;
var currentPageValue;

function dontPost$3(e) {
  if (e.target.type !== 'submit') {return;}
  e.preventDefault();
  var form = e.target.form;
  var mode = form[1].value;
  var type = form[2].value;
  var letter = form[3].value;
  var sortby = form[4].value;
  var sortbydir = form[5].value;
  var page = form[6].value;
  window.location = 'index.php?cmd=questbook&type=' + type + '&mode=' + mode +
    '&page=' + page + '&letter=' + letter + '&sortby=' + sortby +
    '&sortbydir=' + sortbydir;
}

var currentLocationValue = [
  {value: 0},
  {value: 3},
  {value: 0},
  {value: 1},
  {value: 2}
];

var savePrefKey = [
  'lastNormalActiveQuestPage',
  'lastNormalCompletedQuestPage',
  'lastNormalNotStartedQuestPage',
  'lastSeasonalActiveQuestPage',
  'lastSeasonalCompletedQuestPage',
  'lastSeasonalNotStartedQuestPage'
];

function whereAmI() {
  var aLinks = pCC.getElementsByTagName('a');
  normalLink = aLinks[0];
  seasonLink = aLinks[1];
  activeLink = aLinks[2];
  completeLink = aLinks[3];
  notStartedLink = aLinks[4];
  currentPageValue = currentLocationValue.reduce(function(prev, curr, i) {
    var ret = prev;
    if (aLinks[i].firstElementChild.getAttribute('color') === '#FF0000') {
      ret += curr.value;
    }
    return ret;
  }, 0);
}

function storeLoc() {
  var lastQBPage = location.search;
  setValue('lastActiveQuestPage', lastQBPage);
  setValue(savePrefKey[currentPageValue], lastQBPage);
}

function setLink(aLink, url) {
  if (url.length > 0) {
    aLink.setAttribute('href', url);
  }
}

function updateLinks() {
  var lastNormalActiveQuestPage = getValue(savePrefKey[0]);
  var lastNormalCompletedQuestPage = getValue(savePrefKey[1]);
  var lastNormalNotStartedQuestPage = getValue(savePrefKey[2]);
  var lastSeasonalActiveQuestPage = getValue(savePrefKey[3]);
  var lastSeasonalCompletedQuestPage = getValue(savePrefKey[4]);
  var lastSeasonalNotStartedQuestPage = getValue(savePrefKey[5]);

  var oppositeTypeUrl = [
    lastSeasonalActiveQuestPage,
    lastSeasonalCompletedQuestPage,
    lastSeasonalNotStartedQuestPage,
    lastNormalActiveQuestPage,
    lastNormalCompletedQuestPage,
    lastNormalNotStartedQuestPage
  ];

  if (currentPageValue < 3) {
    setLink(seasonLink, oppositeTypeUrl[currentPageValue]);
    setLink(activeLink, lastNormalActiveQuestPage);
    setLink(completeLink, lastNormalCompletedQuestPage);
    setLink(notStartedLink, lastNormalNotStartedQuestPage);
  } else {
    setLink(normalLink, oppositeTypeUrl[currentPageValue]);
    setLink(activeLink, lastSeasonalActiveQuestPage);
    setLink(completeLink, lastSeasonalCompletedQuestPage);
    setLink(notStartedLink, lastSeasonalNotStartedQuestPage);
  }
}

function storeQuestPage() {
  if (getValue('storeLastQuestPage')) {
    whereAmI();
    storeLoc();
    updateLinks();
  }
}

function guideButtons(questID, questName) {
  return '<div class="parent">' +
    '<a href="https://guide.fallensword.com/index.php?cmd=quests&amp;' +
    'subcmd=view&amp;quest_id=' + questID + '" class="tip-static" ' +
    'data-tipped="Search for this quest on the Ultimate Fallen Sword Guide" ' +
    'style="background-image: url(\'' + imageServer +
    '/temple/1.gif\');" target="_blank"></a>&nbsp;' +
    '<a href="https://wiki.fallensword.com/index.php?title=' +
    questName.replace(/ /g, '_') + '" class="tip-static" ' +
    'data-tipped="Search for this quest on the Wiki" ' +
    'style="background-image: url(\'' + imageServer +
    '/skin/fs_wiki.gif\');" target="_blank"></a></div>';
}

function isHideQuests() {
  if (getValue('hideQuests')) {
    return getValue('hideQuestNames').split(',');
  }
  return [];
}

function doHideQuests(hideQuests, questName, aRow) {
  if (hideQuests.indexOf(questName) >= 0) {
    aRow.classList.add('fshHide');
    aRow.nextElementSibling.classList.add('fshHide');
    aRow.nextElementSibling.nextElementSibling.classList.add('fshHide');
    aRow.nextElementSibling.nextElementSibling.nextElementSibling
      .classList.add('fshHide');
  }
}

function injectQuestBookFull() {
  pCC.addEventListener('click', dontPost$3);
  storeQuestPage();
  var questTable = pCC.getElementsByTagName('table')[5];
  if (!questTable) {return;}
  var hideQuests = isHideQuests();
  for (var i = 2; i < questTable.rows.length; i += 4) {
    var aRow = questTable.rows[i];
    var questName = aRow.cells[0].textContent.replace(/ {2}/g, ' ').trim();
    doHideQuests(hideQuests, questName, aRow);
    var questID = /quest_id=(\d+)/.exec(aRow.cells[4].innerHTML)[1];
    aRow.cells[4].innerHTML = guideButtons(questID, questName);
  }
}

function injectQuestTracker() {
  var lastActiveQuestPage = getValue('lastActiveQuestPage');
  if (lastActiveQuestPage.length > 0) {
    pCC.getElementsByTagName('a')[0]
      .setAttribute('href', lastActiveQuestPage);
  }
  var questID = getUrlParameter('quest_id');
  var injectHere = pCC.getElementsByTagName('td')[0];
  var questName = injectHere.getElementsByTagName('font')[1].textContent
    .replace(/"/g, '');
  injectHere.insertAdjacentHTML('beforeend', guideButtons(questID, questName));
}

function rejected(timeStamp, buffsNotCast, buffLog) {
  if (buffsNotCast) {
    return timeStamp + ' <span style="color: red;">' +
      buffsNotCast[0] + '</span><br>' + buffLog;
  }
  return buffLog;
}

function getStamUsed(buffCast) {
  for (var j = 0; j < buffList.length; j += 1) {
    if (buffList[j].name === buffCast[1]) {
      return buffList[j].stam.toString();
    }
  }
  return '-';
}

function successfull(timeStamp, buffCast, buffLog) {
  if (buffCast) {
    return timeStamp + ' ' + buffCast[0] + ' (' + getStamUsed(buffCast) +
      ' stamina) <br>' + buffLog;
  }
  return buffLog;
}

function buffResult(_buffLog) {
  var buffLog = _buffLog;
  if (!buffLog) {buffLog = '';}
  var timeStamp = formatDateTime(new Date());
  var buffsAttempted = document.getElementById('quickbuff-report')
    .innerHTML.split('<p>');
  var buffsNotCastRE = new RegExp('The skill ([\\w ]*) of current or' +
    ' higher level is currently active on \'(\\w*)\'');
  var buffsCastRE = new RegExp('Skill ([\\w ]*) level (\\d*) was ' +
    'activated on \'(\\w*)\'');
  for (var i = 0; i < buffsAttempted.length; i += 1) {
    var buffCast = buffsCastRE.exec(buffsAttempted[i]);
    var buffNotCast = buffsNotCastRE.exec(buffsAttempted[i]);
    buffLog = successfull(timeStamp, buffCast, buffLog);
    buffLog = rejected(timeStamp, buffNotCast, buffLog);
  }
  setForage('fsh_buffLog', buffLog);
}

function updateBuffLog() {
  if (!getValue('keepBuffLog')) {return;}
  getForage('fsh_buffLog').done(buffResult);
}

var unknown = [
  {
    condition: function() {
      return document.getElementById('quickbuff-report');
    },
    result: function() {
      screenview('unknown.buffLog.updateBuffLog');
      updateBuffLog();
    }
  },
  {
    condition: function() {
      return findNode('//td[.="Quest Name"]');
    },
    result: function() {
      screenview('unknown.questBook.injectQuestBookFull');
      injectQuestBookFull();
    }
  },
  {
    condition: function() {
      return findNode('//font[@size=2 and .="Advisor"]') &&
        findNode('//a[@href="index.php?cmd=guild&amp;subcmd=manage" ' +
          'and .="Back to Guild Management"]');
    },
    result: function() {
      screenview('unknown.guildAdvisor.injectAdvisor');
      injectAdvisor();
    }
  },
  // {
  //   condition: function() {
  //     return findNode('//a[.="Back to Scavenging"]');
  //   },
  //   result: function() {
  //     screenview('unknown.scavenging.injectScavenging');
  //     FSH.scavenging.injectScavenging(); // Is this used???
  //   }
  // },
  {
    condition: function() {
      return $('#pCC img[title="Inventing"]').length > 0;
    },
    result: function() {
      screenview('unknown.recipes.inventing');
      inventing();
    }
  },
  {
    condition: function() {return true;},
    result: function() {console.log('Fell through!');} // eslint-disable-line no-console
  }
];

function unknownPage() { // Legacy
  if (typeof window.jQuery === 'undefined') {return;}
  console.log('unknownPage'); // eslint-disable-line no-console
  unknown.some(function(el) {
    if (el.condition()) {
      el.result();
      return true;
    }
    return false;
  });
}

var warehouse = [];
var collapseNewsArchive;
var lastLadderReset;

function collapseArt(article) {
  article.rows.forEach(function(el) {
    el.row.classList.add('fshHide');
  });
  article.open = false;
}

function collapseAll() {
  warehouse.forEach(function(article) {
    if (article.open) {collapseArt(article);}
  });
}

function expandArt(article) {
  article.rows.forEach(function(el) {
    el.row.classList.remove('fshHide');
  });
  article.open = true;
}

function expandAll() {
  warehouse.forEach(function(article) {
    if (!article.open) {expandArt(article);}
  });
}

function isHeader(el) {
  if (el.rowIndex % 6 === 0) {return el;}
}

function closestTr(el) {
  if (el.tagName === 'TR') {
    return isHeader(el);
  }
  if (el.tagName === 'TABLE') {return;}
  return closestTr(el.parentNode);
}

function evtEnabled(evt) {
  var myRow = closestTr(evt.target);
  if (!myRow) {return;}
  var articleNo = myRow.rowIndex / 6;
  var article = warehouse[articleNo];
  if (article.open === false) {
    collapseAll();
    expandArt(article);
  } else {
    collapseArt(article);
  }
}

function evtHdl$3(evt) {
  if (collapseNewsArchive) {evtEnabled(evt);}
}

function makeHeaderClickable(row) {
  if (collapseNewsArchive) {row.classList.add('fshPoint');}
}

function collapseDuringAnalysis(row, thisArticle) {
  if (collapseNewsArchive) {
    row.classList.add('fshHide');
    thisArticle.open = false;
  } else {
    thisArticle.open = true;
  }
}

function checkForPvPLadder(row) {
  if (row.children[1].children[0].textContent === 'PvP Ladder') {
    var logTime = parseDateAsTimestamp(
      row.children[1].children[2].textContent.replace('Posted: ', ''));
    if (logTime > lastLadderReset) {
      setValue('lastLadderReset', logTime);
      lastLadderReset = logTime;
    }
  }
}

function testRowType(row, rowType, thisArticle) {
  if (rowType === 0) {
    thisArticle.header = row;
    makeHeaderClickable(row);
    checkForPvPLadder(row);
  }
  if (rowType > 1) {
    thisArticle.rows[rowType] =
      fallback(thisArticle[rowType], {});
    thisArticle.rows[rowType].row = row;
    collapseDuringAnalysis(row, thisArticle);
  }
}

function doTagging(row) {
  var rowType = row.rowIndex % 6;
  var articleNo = (row.rowIndex - rowType) / 6;
  warehouse[articleNo] = fallback(warehouse[articleNo], {});
  var thisArticle = warehouse[articleNo];
  thisArticle.rows = thisArticle.rows || [];
  testRowType(row, rowType, thisArticle);
}

function toggleHeaderClass() {
  warehouse.forEach(function(article) {
    article.header.classList.toggle('fshPoint');
  });
}

function togglePref$3() {
  collapseNewsArchive = !collapseNewsArchive;
  setValue('collapseNewsArchive', collapseNewsArchive);
  if (collapseNewsArchive) {collapseAll();} else {expandAll();}
  toggleHeaderClass();
}

function setupPref$1(rowInjector) {
  collapseNewsArchive = getValue('collapseNewsArchive');
  rowInjector.insertAdjacentHTML('afterend',
    simpleCheckbox('collapseNewsArchive'));
  document.getElementById('collapseNewsArchive')
    .addEventListener('click', togglePref$3);
}

function viewArchive() {
  lastLadderReset = getValue('lastLadderReset');
  var theTables = pCC.getElementsByTagName('table');
  setupPref$1(theTables[0].rows[2]);
  Array.prototype.forEach.call(theTables[2].rows, doTagging);
  theTables[2].addEventListener('click', evtHdl$3);
}

function hasTextEntry() { // jQuery
  $('#pCC form').first().attr('id', 'dochat');
  $('#pCC input').slice(0, 7).each(function(i, e) {
    $(e).attr('form', 'dochat');
  });
  var theTable = $('#pCC table table').first();
  theTable.append('<tr id="fshMass"></tr>');
  $('td', theTable).eq(0).remove();
  var btnMass = $('input[value="Send As Mass"]', theTable);
  if (btnMass.length === 1) {
    btnMass.appendTo('#fshMass', theTable);
  }
  var ourTd = $('td', theTable).eq(0);
  ourTd.attr('rowspan', '2');
  $('input', ourTd).replaceWith('<textarea id="fshTxt" name="msg" cols' +
    '="72" rows="2" form="dochat" style="resize: none"></textarea>');
  var fshTxt = $('#fshTxt', ourTd);
  fshTxt.keydown(function(e) {
    if (e.keyCode === 13 && fshTxt.val() !== '') {
      $('input[value=Send]', theTable).click();
      return false;
    }
  });
}

function addChatTextArea() {
  if (!getValue('enhanceChatTextEntry') ||
      !pCC) {return;}
  hasTextEntry();
}

function result$1(stat, desc, color) {
  if (stat !== 0) {
    return desc + ':<span class="' + color + '">' +
      addCommas(stat) + ' </span>';
  }
  return '';
}

function retrievePvPCombatSummary(responseText, callback) { // Legacy
  var winner = callback.winner;
  var color;
  if (winner === 1) {
    color = 'fshGreen';
  } else {
    color = 'fshRed';
  }
  var xpGain = getIntFromRegExp(responseText,
    /var\s+xpGain=(-?[0-9]+);/i);
  var goldGain = getIntFromRegExp(responseText,
    /var\s+goldGain=(-?[0-9]+);/i);
  var prestigeGain = getIntFromRegExp(responseText,
    /var\s+prestigeGain=(-?[0-9]+);/i);
  var goldStolen = getIntFromRegExp(responseText,
    /var\s+goldStolen=(-?[0-9]+);/i);
  var pvpRatingChange = getIntFromRegExp(responseText,
    /var\s+pvpRatingChange=(-?[0-9]+);/i);
  var output = '<br> ';
  output += result$1(xpGain, 'XP stolen', color);
  output += result$1(goldGain, 'Gold lost', color);
  output += result$1(goldStolen, 'Gold stolen', color);
  output += result$1(prestigeGain, 'Prestige gain', color);
  output += result$1(pvpRatingChange, 'PvP change', color);
  // TODO did I initiate the attack?
  var specials = createDocument(responseText)
    .querySelectorAll('#specialsDiv');
  Array.prototype.forEach.call(specials, function(el) {
    if (/mesmerized|leeched/.test(el.textContent)) {
      output += '<br>' + el.innerHTML;
    }
  });
  callback.target.innerHTML = output;
}

function addPvpSummary(aRow, messageType) { // Legacy
  // add PvP combat log summary
  if (messageType === 'Combat' &&
      aRow.cells[2] &&
      calf.showPvPSummaryInLog &&
      /combat_id=/.test(aRow.cells[2].innerHTML) &&
      !/\(Guild Conflict\)/.test(aRow.cells[2].textContent)) {
    var combatID = /combat_id=(\d+)/.exec(aRow.cells[2].innerHTML)[1];
    var defeat = /You were defeated by/.test(aRow.cells[2].innerHTML);
    var _winner = 1;
    if (defeat) {_winner = 0;}
    var combatSummarySpan = createSpan({style: {color: 'gray'}});
    aRow.cells[2].appendChild(combatSummarySpan);
    xmlhttp('index.php?cmd=combat&subcmd=view&combat_id=' + combatID,
      retrievePvPCombatSummary,
      {
        target: combatSummarySpan,
        winner: _winner
      }
    );
  }
}

function processLadder(aRow, messageType) {
  if (messageType === 'Notification' &&
      aRow.cells[2].firstElementChild &&
      aRow.cells[2].firstElementChild.tagName === 'IMG' &&
      aRow.cells[2].firstElementChild.src.indexOf('pvp_icon.gif') !== -1) {
    var logTime = parseDateAsTimestamp(aRow.cells[1].textContent);
    if (logTime > calf.lastLadderReset) {
      setValue('lastLadderReset', logTime);
      calf.lastLadderReset = logTime;
    }
  }
}

var myPlayer = {};
var addAttackLinkToLog;
var memberNameString;
var listOfAllies;
var listOfEnemies;
var nickList;
var enableChatParsing;

function removeHTML(buffName) {
  return buffName.replace(/<\/?[^>]+(>|$)/g, '');
}

function reportIgnore(aRow, isGuildMate, playerName$$1) { // Legacy
  var extraPart = '';
  var dateHTML = aRow.cells[1].innerHTML;
  var dateFirstPart = dateHTML
    .substring(0, dateHTML.indexOf('>Report') + 7);
  var dateLastPart = dateHTML
    .substring(dateHTML.indexOf('Message</a>') + 11, dateHTML.length);
  if (!isGuildMate) {
    extraPart = ' | <a title="Add to Ignore List" href="index.php?cmd' +
      '=log&subcmd=doaddignore&ignore_username=' + playerName$$1 +
      '">Ignore</a>';
  }
  aRow.cells[1].innerHTML = dateFirstPart + '</a>' + extraPart +
    dateLastPart;
}

function buildNickList() {// Native
  nickList = buffList.reduce(function(prev, curr) {
    var ret = prev;
    var nicks = curr.nicks.split(',');
    nicks.forEach(function(el) {
      var nick = el.toLowerCase();
      ret[nick] = curr.id;
    });
    return ret;
  }, {});
}

function doBuffLink(_buffsSent, targetPlayerID) { // Legacy
  var quickBuff = '';
  var buffsSent = _buffsSent[0].replace('`~', '').replace('~`', '')
    .split(/\s*,\s*/);
  buffsSent.reduce(function(prev, el) {
    var ret = prev;
    var nick = el.toLowerCase();
    if (nickList[nick]) {
      ret += nickList[nick].toString() + ';';
    }
    return ret;
  }, '');
  return ' | <a ' + quickBuffHref(targetPlayerID, quickBuff) +
      '>Buff</a></span>';
}

function getAttackPart(playerName$$1) { // Legacy
  if (addAttackLinkToLog) {
    return ' | <a href="index.php?cmd=attackplayer&target_username=' +
      playerName$$1 + '">Attack</a>';
  }
  return '';
}

function isChat(aRow, isGuildMate, playerName$$1) { // Legacy
  var extraPart = '';
  reportIgnore(aRow, isGuildMate, playerName$$1);
  var messageHTML = aRow.cells[2].innerHTML;
  var firstPart = messageHTML.substring(0, messageHTML.indexOf('<small>') + 7);
  var thirdPart = messageHTML.substring(messageHTML.indexOf('>Reply</a>') + 10,
    messageHTML.indexOf('>Buff</a>') + 9);
  var targetPlayerID = /quickBuff\((\d+)\)/.exec(thirdPart)[1];
  thirdPart = ' | <a ' + quickBuffHref(targetPlayerID) +
    '>Buff</a></span>';
  var fourthPart = messageHTML.substring(messageHTML
    .indexOf('>Trade</a>') + 10, messageHTML.indexOf('</small>'));
  var lastPart = messageHTML.substring(messageHTML.indexOf('</small>'),
    messageHTML.length);
  extraPart = ' | <a href="index.php?cmd=trade&target_player=' + playerName$$1 +
    '">Trade</a> | <a title="Secure Trade" href="index.php?cmd=trade' +
    '&subcmd=createsecure&target_username=' + playerName$$1 + '">ST</a>';
  var attackPart = getAttackPart(playerName$$1);
  var buffsSent = aRow.cells[2].innerHTML.match(/`~.*?~`/);
  if (buffsSent) {
    thirdPart = doBuffLink(buffsSent, targetPlayerID);
  }
  var replyTo = '';
  if (enableChatParsing) {
    replyTo = removeHTML(firstPart.replace(/&nbsp;/g, ' ')).substr(0, 140);
  }
  var msgReplyTo = '[ <span style="cursor:pointer;text-' +
    'decoration:underline"class="a-reply" target_player="' + playerName$$1 +
    '" replyTo="' + replyTo + '...">Reply</span>';
  aRow.cells[2].innerHTML = firstPart + '<nobr>' + msgReplyTo +
    extraPart + thirdPart + attackPart + fourthPart +
    '</nobr>' + lastPart;
}

function doChat(messageType, aRow, isGuildMate, playerName$$1) { // Legacy
  if (messageType === 'Chat') {isChat(aRow, isGuildMate, playerName$$1);}
}

function isEnemy(playerName$$1, playerElement) { // Legacy
  if (listOfEnemies.indexOf(playerName$$1) !== -1) {
    playerElement.style.color = 'red';
  }
}

function isAlly(playerName$$1, playerElement) { // Legacy
  if (listOfAllies.indexOf(playerName$$1) !== -1) {
    playerElement.style.color = 'blue';
  }
}

function playerColor(colorPlayerName, playerName$$1, playerElement) { // Legacy
  if (!colorPlayerName) {return false;}
  if (memberNameString.indexOf(playerName$$1) !== -1) {
    playerElement.style.color = 'green';
    return true;
  }
  isEnemy(playerName$$1, playerElement);
  isAlly(playerName$$1, playerElement);
  return false;
}

function addExtraStuff(aRow, playerName$$1, isGuildMate) { // Legacy
  if (!isGuildMate) {
    var dateExtraText = '<nobr><span style="font-size:x-small;">' +
      '[ <a title="Add to Ignore List" href="index.php?cmd=log' +
      '&subcmd=doaddignore&ignore_username=' + playerName$$1 +
      '">Ignore</a> ]</span></nobr>';
    aRow.cells[1].innerHTML = aRow.cells[1].innerHTML + '<br>' +
      dateExtraText;
  }
  var buffingPlayerIDRE = /player_id=(\d+)/;
  var buffingPlayerID = buffingPlayerIDRE
    .exec(aRow.cells[2].innerHTML)[1];
  var buffingPlayerName = aRow.cells[2].firstChild.nextSibling
    .innerHTML;
  var extraText = ' <span style="font-size:x-small;"><nobr>' +
    '[ <span style="cursor:pointer;text-decoration:underline" ' +
    'class="a-reply" target_player="' + buffingPlayerName +
    '">Reply</span> | <a href="index.php?cmd=trade&target_player=' +
    buffingPlayerName + '">Trade</a> | <a title="Secure Trade" ' +
    'href="index.php?cmd=trade&subcmd=createsecure&target_username=' +
    buffingPlayerName + '">ST</a>';
  extraText += ' | <a ' + quickBuffHref(buffingPlayerID) +
    '>Buff</a>';
  if (addAttackLinkToLog) {
    extraText += ' | <a href="index.php?cmd=attackplayer' +
      '&target_username=' + buffingPlayerName + '">Attack</a>';
  }
  extraText += ' ]</nobr></span>';

  aRow.cells[2].innerHTML += extraText;
}

function hasPlayerLink(aRow) {
  return aRow.cells[2].firstChild.nextSibling &&
    aRow.cells[2].firstChild.nextSibling.nodeName === 'A' &&
    /player_id/.test(aRow.cells[2].firstChild.nextSibling.href);
}

function doExtraStuff(aRow, messageType, playerName$$1, isGuildMate) {
  if (messageType === 'Notification' &&
      hasPlayerLink(aRow)) {
    addExtraStuff(aRow, playerName$$1, isGuildMate);
  }
}

function doLogWidgetRow(aRow, messageType) { // Legacy
  var playerElement;
  var playerName$$1;
  var colorPlayerName = false;
  if (messageType === 'Chat') {
    playerElement = aRow.cells[2].firstChild;
    playerName$$1 = playerElement.innerHTML;
    colorPlayerName = true;
  }
  if (fallback(messageType === 'General',
    messageType === 'Notification') &&
      hasPlayerLink(aRow)) {
    playerElement = aRow.cells[2].firstChild.nextSibling;
    playerName$$1 = playerElement.innerHTML;
    colorPlayerName = true;
  }
  var isGuildMate = playerColor(colorPlayerName, playerName$$1, playerElement);
  doChat(messageType, aRow, isGuildMate, playerName$$1);
  doExtraStuff(aRow, messageType, playerName$$1, isGuildMate);
  addPvpSummary(aRow, messageType);
  processLadder(aRow, messageType);
}

function processLogWidgetRow(aRow) { // Legacy
  // Valid Types: General, Chat, Guild
  var messageType = aRow.cells[0].firstChild.getAttribute('oldtitle');
  if (messageType) {doLogWidgetRow(aRow, messageType);}
}

function foundLogTable(logTable) { // Legacy
  memberNameString = Object.keys(calf.membrList);
  listOfAllies = myPlayer._allies.map(function(obj) {
    return obj.username;
  });
  listOfEnemies = myPlayer._enemies.map(function(obj) {
    return obj.username;
  });
  calf.showPvPSummaryInLog = getValue('showPvPSummaryInLog');
  calf.lastLadderReset = getValue('lastLadderReset');
  enableChatParsing = getValue('enableChatParsing');
  var messageHeader = logTable.rows[0].cells[2];
  if (messageHeader) {
    messageHeader.insertAdjacentHTML('beforeend', '&nbsp;&nbsp;' +
      '<span class="fshWhite">(Guild mates show up in ' +
      '<span class="fshGreen">green</span>)</span>');
  }
  for (var i = 1; i < logTable.rows.length; i += 2) {
    processLogWidgetRow(logTable.rows[i]);
  }
  $('.a-reply').click(function(evt) {
    window.openQuickMsgDialog(evt.target.getAttribute('target_player'),
      '', evt.target.getAttribute('replyTo'));
  });
}

function addLogWidgetsOld() { // Legacy
  buildNickList();
  addAttackLinkToLog = getValue('addAttackLinkToLog');
  var logTable = findNode('//table[tbody/tr/td/span[contains' +
    '(.,"Currently showing:")]]');
  if (logTable) {foundLogTable(logTable);}
}

function addLogWidgets() { // jQuery
  $.when(
    getMembrList(false),
    myStats(false).done(function(data) {
      myPlayer = data;
    })
  ).done(addLogWidgetsOld);
}

function guildChat() {
  addChatTextArea();
  addLogColoring('Chat', 0);
}

function guildLog() {
  addLogColoring('GuildLog', 1);
  addGuildLogWidgets();
}

function outbox() {
  addLogColoring('OutBox', 1);
}

function playerLog() {
  addLogColoring('PlayerLog', 1);
  addLogWidgets();
}

function cancelAllAH() { // jQuery
  var cancelButtons = document.getElementById('resultRows')
    .getElementsByClassName('auctionCancel');
  if (cancelButtons.length === 0) {return;}
  var prm = [];
  for (var i = cancelButtons.length - 1; i >= 0; i -= 1) {
    var cancelButton = cancelButtons[i];
    var itemImage = cancelButton.parentNode.parentNode.firstElementChild
      .firstElementChild;
    cancelButton.outerHTML = '<img src="' + imageServer +
      '/skin/loading.gif" width="14" height="14">';
    prm.push(
      retryAjax({
        url: 'index.php?cmd=auctionhouse&subcmd=cancel',
        data: {auction_id: /inv_id=(\d+)/.exec(itemImage.dataset.tipped)[1]}
      })
    );
  }
  $.when.apply($, prm).done(function() {
    document.getElementById('refresh').click();
  });
}

function injectAuctionHouse() {
  if (!pCC) {return;}
  if (getValue('autoFillMinBidPrice')) {
    document.getElementById('auto-fill').checked = true;
  }
  document.getElementById('sort0').click();
  var cancelAll = createSpan({
    className: 'smallLink',
    textContent: 'Cancel All'
  });
  var fill = document.getElementById('fill').parentNode.parentNode
    .nextElementSibling.firstElementChild;
  fill.classList.add('fshCenter');
  fill.insertAdjacentHTML('afterbegin', ']');
  fill.insertAdjacentElement('afterbegin', cancelAll);
  fill.insertAdjacentHTML('afterbegin', '[');
  cancelAll.addEventListener('click', cancelAllAH);
}

function quickCreate$1() {
  perfFilter('auction');
}

var playerBank = {
  headText: 'Bank',
  appLink: true,
  depoPos: 2,
  balPos: 1,
  data: {
    cmd: 'bank',
    subcmd: 'transaction'
  },
  initWithdraw: ''
};
var guildBank = {
  headText: 'Guild Bank',
  appLink: false,
  depoPos: 3,
  balPos: 2,
  data: {
    cmd: 'guild',
    subcmd: 'bank',
    subcmd2: 'transaction'
  },
  initWithdraw: '1'
};
var bankSettings;

function doInfoBox(infoBox) { // jQuery
  var target = $('#pCC #info-msg');
  if (target.length === 0) {
    $('#pCC').prepend(infoBox.closest('table'));
  } else {
    target.closest('table').replaceWith(infoBox.closest('table'));
  }
}

function disableDepo(o) { // jQuery
  if ($('#pCC b').eq(o.depoPos).text() === '0') {
    $('#pCC input[value="Deposit"]').prop('disabled', true);
  }
}

function updateDepoAmount(o, doc) { // jQuery
  if (o.data.deposit_amount !== '1') {
    $('#pCC #deposit_amount').val($('#pCC #deposit_amount', doc).val());
  } else {
    $('#pCC #deposit_amount').val('1');
  }
}

function transResponse(response) { // jQuery
  var doc = createDocument(response);
  var infoBox = $('#pCC #info-msg', doc);
  if (infoBox.length === 0) {return;}
  doInfoBox(infoBox);
  $('#pH #statbar-gold').text($('#pH #statbar-gold', doc).text());
  $('#pH #statbar-gold-tooltip-general dd').text(function(index) {
    return $('#pH #statbar-gold-tooltip-general dd', doc).eq(index).text();
  });
  var o = bankSettings;
  $('#pCC b').slice(o.balPos).text(function(index) {
    return $('#pCC b', doc).slice(o.balPos).eq(index).text();
  });
  disableDepo(o);
  updateDepoAmount(o, doc);
  $('#pCC #withdraw_amount').val(o.initWithdraw);
}

function invalidAmount(o, amount) { // jQuery
  return $('#pCC b').eq(o.depoPos).text() === '0' ||
    !$.isNumeric(amount) || amount < 1;
}

function doAjax$1(oData) {
  retryAjax({url: 'index.php', data: oData}).done(transResponse);
}

function bankDeposit(e) { // jQuery
  e.preventDefault();
  var o = bankSettings;
  var amount = $('#pCC #deposit_amount').val();
  if (invalidAmount(o, amount)) {return;}
  o.data.mode = 'deposit';
  o.data.deposit_amount = amount;
  doAjax$1(o.data);
}

function bankWithdrawal(e) { // jQuery
  e.preventDefault();
  var o = bankSettings;
  var amount = $('#pCC #withdraw_amount').val();
  if (!$.isNumeric(amount) || amount < 1) {return;}
  o.data.mode = 'withdraw';
  o.data.withdraw_amount = amount;
  doAjax$1(o.data);
}

function linkToGuildBank(o, bank) { // jQuery
  if (o.appLink) {
    bank.eq(0).closest('tr').after('<tr><td colspan="3" align="center">' +
      '<a href="/index.php?cmd=guild&subcmd=bank">Go to Guild Bank</a>' +
      '</td></tr>');
  }
}

function captureButtons(o, depo, withdraw) { // jQuery
  if ($('#pCC b').eq(o.depoPos).text() === '0') { // Check Deposits Available
    depo.prop('disabled', true);
  } else {
    depo.click(bankDeposit);
  }
  withdraw.click(bankWithdrawal);
}

function appLink(o, bank) { // jQuery
  linkToGuildBank(o, bank);
  var depo = $('#pCC input[value="Deposit"]');
  if (depo.length !== 1) {return;}
  var withdraw = $('#pCC input[value="Withdraw"]');
  if (withdraw.length !== 1) {return;}
  captureButtons(o, depo, withdraw);
}

function ajaxifyBank() { // jQuery
  var o = bankSettings;
  var bank = $('#pCC b');
  if (bank.length !== 0 && bank.eq(0).text() === o.headText) {
    appLink(o, bank);
  }
}

function injectGuildBank() {
  bankSettings = guildBank;
  ajaxifyBank();
}

function injectBank() {
  bankSettings = playerBank;
  ajaxifyBank();
}

var maxGroupSizeToJoin;
var groupStats$1;

function parseMercStats$1(mercStats) {
  groupStats$1.attackElement.innerHTML = '<span class="fshBlue">' +
    addCommas(groupStats$1.attack) + '</span>' +
    ' ( ' + addCommas(groupStats$1.attack - mercStats.attack) + ' )';
  groupStats$1.defenseElement.innerHTML = '<span class="fshBlue">' +
    addCommas(groupStats$1.defense) + '</span>' +
    ' ( ' + addCommas(groupStats$1.defense - mercStats.defense) + ' )';
  groupStats$1.armorElement.innerHTML = '<span class="fshBlue">' +
    addCommas(groupStats$1.armor) + '</span>' +
    ' ( ' + addCommas(groupStats$1.armor - mercStats.armor) + ' )';
  groupStats$1.damageElement.innerHTML = '<span class="fshBlue">' +
    addCommas(groupStats$1.damage) + '</span>' +
    ' ( ' + addCommas(groupStats$1.damage - mercStats.damage) + ' )';
  groupStats$1.hpElement.innerHTML = '<span class="fshBlue">' +
    addCommas(groupStats$1.hp) + '</span>' +
    ' ( ' + addCommas(groupStats$1.hp - mercStats.hp) + ' )';
}

function injectGroupStats() { // jQuery
  groupStats$1 = groupViewStats(document);
  getMercStats().done(parseMercStats$1);
}

function displayMinGroupLevel() { // jQuery
  var minGroupLevel = getValue('minGroupLevel');
  if (minGroupLevel) {
    $('#pCC > table > tbody > tr > td > table td').first()
      .append('<span style="color:blue"> ' +
      'Current Min Level Setting: ' + minGroupLevel + '</span>');
  }
}

function filterMercs(e) {return e.search('#000099') === -1;}

function joinGroup(groupJoinURL, joinButton) { // jQuery
  return retryAjax(groupJoinURL).done(function() {
    joinButton.classList.add('fshHide');
  });
}

function doJoinUnderSize(prev, joinButton) { // Legacy
  var memList = joinButton.parentNode.parentNode.parentNode
    .previousSibling.previousSibling.previousSibling.previousSibling;
  var memListArrayWithMercs = memList.innerHTML.split(',');
  var memListArrayWithoutMercs = memListArrayWithMercs
    .filter(filterMercs);
  if (memListArrayWithoutMercs.length < maxGroupSizeToJoin) {
    var groupID = /javascript:confirmJoin\((\d+)\)/.exec(
      joinButton.parentNode.href)[1];
    var groupJoinURL = 'index.php?cmd=guild&subcmd=groups&subcmd2=join' +
      '&group_id=' + groupID;
    prev.push(joinGroup(groupJoinURL, joinButton));
  }
  return prev;
}

function joinAllGroupsUnderSize() { // Legacy
  var joinButtons = findNodes(
    '//img[contains(@src,"skin/icon_action_join.gif")]');
  if (!joinButtons) {return;}
  var prm = joinButtons.reduce(doJoinUnderSize, []);
  $.when.apply($, prm).done(function() {
    location.href = 'index.php?cmd=guild&subcmd=groups';
  });
}

function parseGroupData(linkElement, obj) {
  var extraText = '<table class="fshgrpstat">' +
    '<tr>' +
    '<td class="fshBrown">Attack</td>' +
    '<td class="fshRight">' + obj.attack + '</td>' +
    '<td class="fshBrown">Defense</td>' +
    '<td class="fshRight">' + obj.defense + '</td>' +
    '</tr><tr>' +
    '<td class="fshBrown">Armor</td>' +
    '<td class="fshRight">' + obj.armor + '</td>' +
    '<td class="fshBrown">Damage</td>' +
    '<td class="fshRight">' + obj.damage + '</td>' +
    '</tr><tr>' +
    '<td class="fshBrown">HP</td>' +
    '<td class="fshRight">' + obj.hp + '</td>' +
    '<td colspan="2"></td>' +
    '</tr></table>';
  var expiresLocation = linkElement.parentNode.parentNode
    .previousElementSibling;
  expiresLocation.insertAdjacentHTML('beforeend', extraText);
}

function fetchGroupData(evt) {
  evt.target.classList.add('fshHide');
  var allItems = document.querySelectorAll('#pCC a[href*="=viewstats&"]');
  Array.prototype.forEach.call(allItems, function(aLink) {
    getGroupStats(aLink.href).done(parseGroupData.bind(null, aLink));
  });
}

function groupButtons() { // Legacy
  var buttonElement = findNode('//td[input[@value="Join All ' +
    'Available Groups"]]');
  var enableMaxGroupSizeToJoin =
    getValue('enableMaxGroupSizeToJoin');
  if (enableMaxGroupSizeToJoin) {
    maxGroupSizeToJoin = getValue('maxGroupSizeToJoin');
    var joinAllInput = buttonElement.firstChild.nextSibling.nextSibling;
    joinAllInput.classList.add('fshHide');
    buttonElement.innerHTML += '&nbsp;<input id="joinallgroupsunder' +
      'size" type="button" value="Join All Groups < ' +
      maxGroupSizeToJoin + ' Members" class="custombutton">&nbsp;' +
      '<input id="fetchgroupstats" type="button" value="Fetch ' +
      'Group Stats" class="custombutton">';
    document.getElementById('joinallgroupsundersize')
      .addEventListener('click', joinAllGroupsUnderSize, true);
  } else {
    buttonElement.innerHTML += '&nbsp;<input id="fetchgroupstats" ' +
      'type="button" value="Fetch Group Stats" class="custombutton">';
  }
  document.getElementById('fetchgroupstats')
    .addEventListener('click', fetchGroupData);

  if (calf.subcmd2 === 'joinallgroupsundersize') {
    joinAllGroupsUnderSize();
  }
}

function fixTable() { // jQuery
  // Cows don't add!
  var tds = $('#pCC td.header-dark');
  tds.eq(0).attr('width', '20%');
  tds.eq(1).attr('width', '51%');
  tds.eq(2).attr('width', '22%');
  tds.eq(3).attr('width', '7%');
}

function groupLocalTime(theDateCell) { // jQuery
  var xRE = /([a-zA-Z]+), (\d+) ([a-zA-Z]+) (\d+):(\d+):(\d+) UTC/;
  var x = xRE.exec(theDateCell.text());
  var month = months.indexOf(x[3]);
  var curYear = new Date().getFullYear(); // Boundary condition
  var groupDate = new Date();
  groupDate.setUTCDate(x[2]);
  groupDate.setUTCMonth(month);
  groupDate.setUTCFullYear(curYear);
  groupDate.setUTCHours(x[4]);
  groupDate.setUTCMinutes(x[5]);
  theDateCell.append('<br><span style="color:blue; font-size:x-small">' +
    'Local: ' + groupDate.toString().substr(0, 21) + '</span>');
}

function getCreator(membrlist, creator) {
  if (membrlist[creator]) {
    return onlineDot({last_login: membrlist[creator].last_login}) +
      '&nbsp;<a href="' + server + 'index.php?cmd=profile&player_id=' +
      membrlist[creator].id + '"><b>' + creator + '</b></a> [' +
      membrlist[creator].level + ']';
  }
  return '<b>' + creator + '</b>';
}

function memberLevel(membrlist, member) {
  if (membrlist[member]) {return membrlist[member].level;}
  return 0;
}

function byMember(membrlist, a, b) {
  return memberLevel(membrlist, b) - memberLevel(membrlist, a);
}

function doGroupRow(row, membrlist) { // jQuery
  var creator = $('b', row).text();
  var td = $('td', row).first();
  td.html(getCreator(membrlist, creator));
  var td2 = $('td', row).eq(1);
  var theList = td2.html();
  var listArr = theList.split(', ');
  if (listArr.length > 1) {listArr.sort(byMember.bind(null, membrlist));}
  var buffList = listArr.filter(function(name) {
    return name !== '[none]' && name.indexOf('<font') === -1;
  });
  if (buffList.length > 0) {td.append(doBuffLinks(buffList));}
  td.append('<span class="fshXSmall">Members: ' +
    buffList.length + '</span>');
  listArr = listArr.map(function(name) {
    if (!membrlist[name]) {return name;}
    return '<a href="index.php?cmd=profile&player_id=' +
      membrlist[name].id + '">' + name + '</a>';
  });
  td2.html('<span>' + listArr.join(', ') + '</span>');
  groupLocalTime($('td', row).eq(2));
}

function doGroupPaint(m) { // jQuery

  time('groups.doGroupPaint');

  $('#pCC table table table tr').has('.group-action-container')
    .each(function(i, e) {
      doGroupRow(e, m);
    });

  timeEnd('groups.doGroupPaint');

}

function injectGroups() { // jQuery
  getMembrList(false)
    .done(doGroupPaint);
  displayMinGroupLevel();
  groupButtons();
  fixTable();
}

var invItems$2;
var type;
var itemId;

function tickElement(o, el) {
  el.checked = !el.disabled && !el.checked;
}

var types = [
  {
    c: function() {return type === 'guild';},
    r: function(o, el) {
      el.checked = !el.disabled && invItems$2[o.invid].guild_tag !== '-1';
    }
  },
  {
    c: function(o) {
      return type === 'item' && invItems$2[o.invid].item_id === itemId;
    },
    r: tickElement
  },
  {
    c: function() {return type === 'checkAll';},
    r: tickElement
  }
];

function testType(o, el) {
  types.some(function(test) {
    if (test.c(o)) {
      test.r(o, el);
      return true;
    }
    return false;
  });
}

function doCheckboxes(itemsAry, invItems_, type_, itemId_) {
  invItems$2 = invItems_;
  type = type_;
  itemId = itemId_;
  itemsAry.forEach(function(o) {
    var tr = o.injectHere.parentNode;
    if (tr.classList.contains('fshHide')) {return;}
    var el = o.el.parentNode.parentNode.previousElementSibling
      .firstElementChild;
    testType(o, el);
  });
}

function makeFolderSpans$1(folders) {
  return '<span class="fshLink folder" data-folder="0">All</span>' +
    ' &ensp;<span class="fshLink folder" data-folder="-1">Main</span>' +
    Object.keys(folders).reduce(function(prev, key) {
      return prev + ' &ensp;<span class="fshLink fshNoWrap folder" ' +
        'data-folder="' + key + '">' + folders[key] + '</span>';
    }, '');
}

function extraButtons() {
  var tRows = pCC.getElementsByTagName('table')[0].rows;
  tRows[tRows.length - 2].cells[0].insertAdjacentHTML('afterbegin',
    '<input id="fshChkAll" value="Check All" type="button">&nbsp;');
}

function doFolderButtons(folders) {
  if (calf.subcmd2 === 'storeitems') {
    var formNode = pCC.getElementsByTagName('form')[0];
    var tr = createTr({className: 'fshCenter'});
    var insertHere = createTd({colSpan: 3});
    tr.appendChild(insertHere);
    formNode.parentNode.insertBefore(tr, formNode);
    insertHere.innerHTML = makeFolderSpans$1(folders);
    extraButtons();
  }
}

var insertHere;

function showHideLabel(pref) {
  if (pref) {return 'Hide';}
  return 'Show';
}

function doToggleButtons(showExtraLinks, showQuickDropLinks) {
  // Option toggle buttons for both screens
  if (!insertHere) {
    insertHere = pCC.getElementsByTagName('form')[0]
      .previousElementSibling.firstElementChild;
  }
  var inject = '[<span id="fshShowExtraLinks" class="sendLink">' +
    showHideLabel(showExtraLinks) +
    ' AH and UFSG links</span>]&nbsp;' +
    '[<span id="fshShowQuickDropLinks" class="sendLink">' +
    showHideLabel(showQuickDropLinks) +
    ' Quick Drop links</span>]&nbsp;';
  if (calf.subcmd2 === 'storeitems') {
    inject += '[<span id="fshSelectAllGuildLocked" class="sendLink">' +
      ' Select All Guild Locked</span>]&nbsp;';
  }
  insertHere.innerHTML = inject;
}

function getItemImg(pCC) {
  var allTables = pCC.getElementsByTagName('table');
  var lastTable = allTables[allTables.length - 1];
  return lastTable.getElementsByTagName('img');
}

function hideFolders$1(itemsAry, invItems, self) {
  var folderId = self.dataset.folder;
  itemsAry.forEach(function(o) {
    o.el.parentNode.parentNode.previousElementSibling.firstElementChild
      .checked = false;
    var tr = o.injectHere.parentNode;
    var separator = tr.nextElementSibling;
    if (folderId === '0') {
      tr.classList.remove('fshHide');
      separator.classList.remove('fshHide');
    } else {
      var folder = invItems[o.invid].folder_id;
      var force = folderId !== folder;
      toggleForce(tr, force);
      toggleForce(separator, force);
    }
  });
}

function injectMoveItems() {
  var flrRow = pCC.getElementsByTagName('form')[0]
    .nextElementSibling.nextElementSibling.nextElementSibling;
  var folders = flrRow.getElementsByTagName('img');
  var flrEnabled;
  var oFlr;
  var options = '<tr><td class="fshCenter">Move selected items to: ' +
    '<select name="folder" id="selectFolderId" class="customselect">';
  Array.prototype.forEach.call(folders, function(e) {
    var src = e.getAttribute('src');
    if (src.indexOf('/folder_on.gif') !== -1) {flrEnabled = true;}
    if (src.indexOf('/folder.gif') !== -1) {
      oFlr = true;
      options += '<option value=' + e.parentNode.href
        .match(/&folder_id=(-*\d+)/i)[1] + '>' +
        e.parentNode.parentNode.textContent + '</option>';
    }
  });
  if (!flrEnabled || !oFlr) {return;}
  options += '</select>&nbsp;<input type="button" class="custombutton" ' +
    'id="fshMove" value="Move"></td></tr>';
  flrRow.insertAdjacentHTML('afterend', options);
}

function moveItemsToFolder(itemsAry) { // jQuery.min
  var folderId = document.getElementById('selectFolderId').value;
  var batchNo;
  var counter = 0;
  var invList = [];
  var prm = [];
  itemsAry.forEach(function(o) {
    var el = o.injectHere.previousElementSibling.previousElementSibling
      .firstElementChild;
    if (el.checked) {
      batchNo = Math.floor(counter / 50);
      invList[batchNo] = fallback(invList[batchNo], []);
      invList[batchNo].push(o.invid);
      counter += 1;
      if (counter % 50 === 0) {
        prm.push(moveItem(invList[batchNo], folderId));
      }
    }
  });
  if (counter % 50 !== 0) {
    prm.push(moveItem(invList[batchNo], folderId));
  }
  $.when.apply($, prm).done(function() {location.reload();}); // TODO ajaxify this
}

function anotherSpinner$1(self) {
  self.innerHTML = '<img class="quickActionSpinner" src="' +
    imageServer +
    '/skin/loading.gif" width="15" height="15">';
}

function quickAction(self, fn, success, otherClass) { // jQuery.min
  self.className = 'quickAction';
  var itemInvId = self.getAttribute('itemInvId');
  fn([itemInvId]).done(function(data) {
    if (data.r === 1) {return;}
    self.style.color = 'green';
    self.innerHTML = success;
  });
  $(self).qtip('hide');
  anotherSpinner$1(self);
  var theTd = self.parentNode;
  var otherButton = theTd.querySelector(otherClass);
  if (otherButton) {
    otherButton.className = 'quickAction';
    otherButton.innerHTML = '';
  }
  var checkbox = theTd.parentNode.firstElementChild.firstElementChild;
  checkbox.checked = false;
  checkbox.disabled = true;
}

var disableItemColoring;
var showExtraLinks;
var showQuickDropLinks$1;
var showQuickSendLinks$1;
var extraLinks;
var paintCount;
var itemsAry;
var checkAll;
var itemsHash;
var dropLinks;
var invItems$1;
var colouring;
var sendLinks;

function afterbegin(o, item) {
  if (fallback(extraLinks, !showExtraLinks)) {
    return;
  }
  var pattern = '<span><span class="aHLink">';
  if (!item.bound) {
    pattern += '[<a href="index.php?cmd=auctionhouse&search_text=' +
      encodeURIComponent(item.item_name) + '">AH</a>]';
  }
  pattern += '</span>[<a href="https://guide.fallensword.com/' +
    'index.php?cmd=items&subcmd=view&item_id=' + item.item_id +
    '" target="_blank">UFSG</a>]</span>';
  o.injectHere.insertAdjacentHTML('afterbegin', pattern);
}

var buildTrailer = [
  {
    condition: function(item) {
      return !checkAll && itemsHash[item.item_id] !== 1;
    },
    result: function(o, item) {
      return ' [<span linkto="' + item.item_id +
        '" class="fshLink">Check all</span>]';
    }
  },
  {
    condition: function(item) {
      return !sendLinks && showQuickSendLinks$1 &&
        !item.bound;
    },
    result: function(o) {
      return ' <span class="quickAction sendLink tip-static" ' +
        'itemInvId="' + o.invid + '" data-tipped="INSTANTLY SENDS THE ' +
        'ITEM. NO REFUNDS OR DO-OVERS! Use at own risk.">[Quick Send]</span>';
    }
  },
  {
    condition: function(item) {
      return !dropLinks && showQuickDropLinks$1 &&
        item.guild_tag === '-1';
    },
    result: function(o) {
      return ' <span class="quickAction dropLink tip-static" itemInvId="' +
        o.invid + '" data-tipped="INSTANTLY DROP THE ITEM. NO REFUNDS ' +
        'OR DO-OVERS! Use at own risk.">[Quick Drop]</span>';
    }
  }
];

function beforeend(o, item) {
  if (!colouring && !disableItemColoring) {
    o.injectHere.classList.add(rarity[item.rarity].clas);
  }
  var pattern = buildTrailer.reduce(function(prev, el) {
    var ret = prev;
    if (el.condition(item)) {
      ret += el.result(o, item);
    }
    return ret;
  }, '');
  if (pattern !== '') {o.injectHere.insertAdjacentHTML('beforeend', pattern);}
}

function doneInvPaint() {
  if (showExtraLinks) {extraLinks = true;}
  checkAll = true;
  colouring = true;
  if (showQuickDropLinks$1) {dropLinks = true;}
  sendLinks = true;
}

function invPaint() { // Native - abstract this pattern
  var limit = performance.now() + 5;
  while (performance.now() < limit &&
      paintCount < itemsAry.length) {
    var o = itemsAry[paintCount];
    var item = invItems$1[o.invid];
    afterbegin(o, item);
    beforeend(o, item);
    paintCount += 1;
  }
  if (paintCount < itemsAry.length) {
    add(3, invPaint);
  } else {
    doneInvPaint();
  }
}

function toggleShowExtraLinks() {
  showExtraLinks = !showExtraLinks;
  setValue('showExtraLinks', showExtraLinks);
  doToggleButtons(showExtraLinks, showQuickDropLinks$1);
  if (!extraLinks) {
    paintCount = 0;
    add(3, invPaint);
  } else {
    itemsAry.forEach(function(o) {
      var el = o.injectHere.firstElementChild;
      el.classList.toggle('fshHide');
    });
  }
}

function toggleShowQuickDropLinks() {
  showQuickDropLinks$1 = !showQuickDropLinks$1;
  setValue('showQuickDropLinks', showQuickDropLinks$1);
  doToggleButtons(showExtraLinks, showQuickDropLinks$1);
  if (!dropLinks) {
    paintCount = 0;
    add(3, invPaint);
  } else {
    itemsAry.forEach(function(o) {
      var el = o.injectHere.querySelector('.dropLink');
      el.classList.toggle('fshHide');
    });
  }
}

var evts$1 = [
  {
    condition: function(self) {return self.id === 'fshShowExtraLinks';},
    result: toggleShowExtraLinks
  },
  {
    condition: function(self) {return self.id === 'fshShowQuickDropLinks';},
    result: toggleShowQuickDropLinks
  },
  {
    condition: function(self) {return self.id === 'fshSelectAllGuildLocked';},
    result: function() {doCheckboxes(itemsAry, invItems$1, 'guild');}
  },
  {
    condition: function(self) {return self.id === 'fshMove';},
    result: function() {moveItemsToFolder(itemsAry);}
  },
  {
    condition: function(self) {return self.hasAttribute('linkto');},
    result: function(self) {
      doCheckboxes(itemsAry, invItems$1, 'item', self.getAttribute('linkto'));
    }
  },
  {
    condition: function(self) {return self.classList.contains('sendLink');},
    result: function(self) {
      quickAction(self, sendItem, 'Sent', '.dropLink');
    }
  },
  {
    condition: function(self) {return self.classList.contains('dropLink');},
    result: function(self) {
      quickAction(self, dropItem, 'Dropped', '.sendLink');
    }
  },
  {
    condition: function(self) {return self.classList.contains('folder');},
    result: function(self) {
      hideFolders$1(itemsAry, invItems$1, self);
    }
  },
  {
    condition: function(self) {return self.id === 'fshChkAll';},
    result: function() {
      doCheckboxes(itemsAry, invItems$1, 'checkAll');
    }
  }
];

function evtHandler(evt) {
  var self = evt.target;
  evts$1.some(function(el) {
    if (el.condition(self)) {
      el.result(self);
      return true;
    }
    return false;
  });
}

function getItems() {
  addStatTotalToMouseover();
  disableItemColoring = getValue('disableItemColoring');
  showExtraLinks = getValue('showExtraLinks');
  showQuickDropLinks$1 = getValue('showQuickDropLinks');
  showQuickSendLinks$1 = getValue('showQuickSendLinks');
  doToggleButtons(showExtraLinks, showQuickDropLinks$1);
  pCC.addEventListener('click', evtHandler);
  var imgList = getItemImg(pCC);
  itemsAry = [];
  itemsHash = {};
  Array.prototype.forEach.call(imgList, function(el) {
    var tipped = el.getAttribute('data-tipped');
    var matches = tipped.match(itemRE);
    itemsHash[matches[1]] = (itemsHash[matches[1]] || 0) + 1;
    var injectHere = el.parentNode.parentNode.nextElementSibling;
    itemsAry.push({
      el: el,
      invid: matches[2],
      injectHere: injectHere
    });
  });
  // Exclude composed pots
  itemsHash[13699] = 1;
}

function inventory$1(data) {
  extraLinks = false;
  checkAll = false;
  invItems$1 = data.items;
  colouring = false;
  dropLinks = false;
  sendLinks = false;
  paintCount = 0;
  add(3, invPaint);
  doFolderButtons(data.folders);
}

function injectStoreItems() {
  getInventoryById().done(inventory$1);
  add(3, getItems);
}

function injectProfileDropItems() {
  injectStoreItems();
  injectMoveItems();
}

var maxcharacters;
var textArea$1;
var shoutboxPreview;

function updateShoutboxPreview() {
  var textContent = textArea$1.value;
  var chars = textContent.length;
  if (chars > maxcharacters) {
    textContent = textContent.substring(0, maxcharacters);
    textArea$1.value = textContent;
    chars = maxcharacters;
  }
  if (!shoutboxPreview) {
    shoutboxPreview = textArea$1.parentNode.parentNode.parentNode.parentNode
      .insertRow().insertCell();
  }
  shoutboxPreview.innerHTML = '<table class="sbpTbl"><tbody><tr>' +
    '<td class="sbpHdr">Preview (' + chars + '/' + maxcharacters +
    ' characters)</td></tr><tr><td class="sbpMsg"><span>' + textContent +
    '</span></td></tr></tbody></table>';
}

function injectShoutboxWidgets() {
  textArea$1 = document.getElementById('textInputBox');
  textArea$1.addEventListener('keyup', updateShoutboxPreview);
}

function newsFsbox() {
  maxcharacters = 100;
  injectShoutboxWidgets();
}

function newsShoutbox() {
  maxcharacters = 150;
  injectShoutboxWidgets();
}

var pageSwitcher = {
  settings: {'-': {'-': {'-': {'-': injectSettings}}}},
  world: {'-': {'-': {'-': {'-': injectWorld}}}},
  news: {
    fsbox: {'-': {'-': {'-': newsFsbox}}},
    shoutbox: {'-': {'-': {'-': newsShoutbox}}}
  },
  blacksmith: {repairall: {'-': {'-': {'1': injectWorld}}}},
  arena: {
    '-': {'-': {'-': {'-': injectArena}}},
    join: {'-': {'-': {'-': injectArena}}},
    completed: {'-': {'-': {'-': completedArenas}}},
    pickmove: {'-': {'-': {'-': storeMoves}}},
    setup: {'-': {'-': {'-': setupMoves}}}
  },
  questbook: {
    '-': {'-': {'-': {'-': injectQuestBookFull}}},
    atoz: {'-': {'-': {'-': injectQuestBookFull}}},
    viewquest: {'-': {'-': {'-': injectQuestTracker}}}
  },
  profile: {
    '-': {'-': {'-': {'-': injectProfile}}},
    managecombatset: {'-': {'-': {'-': injectProfile}}},
    report: {'-': {'-': {'-': injectProfile}}},
    equipitem: {'-': {'-': {'-': injectProfile}}},
    useitem: {'-': {'-': {'-': injectProfile}}},
    changebio: {'-': {'-': {'-': injectBioWidgets}}},
    dropitems: {'-': {'-': {'-': injectProfileDropItems}}}
  },
  auctionhouse: {
    '-': {'-': {'-': {'-': injectAuctionHouse}}},
    quickcreate: {'-': {'-': {'-': quickCreate$1}}}
  },
  guild: {
    inventory: {
      report: {'-': {'-': injectReportPaint}},
      addtags: {'-': {'-': injectGuildAddTagsWidgets}},
      removetags: {'-': {'-': injectGuildAddTagsWidgets}},
      storeitems: {'-': {'-': injectStoreItems}}
    },
    chat: {'-': {'-': {'-': guildChat}}},
    log: {'-': {'-': {'-': guildLog}}},
    groups: {
      viewstats: {'-': {'-': injectGroupStats}},
      joinallgroupsundersize: {'-': {'-': injectGroups}},
      joinall: {'-': {'-': injectGroups}},
      '-': {'-': {'-': injectGroups}}
    },
    manage: {'-': {'-': {'-': injectGuild}}},
    advisor: {
      '-': {'-': {'-': injectAdvisor}},
      weekly: {'-': {'-': injectAdvisor}}
    },
    history: {'-': {'-': {'-': addHistoryWidgets}}},
    view: {'-': {'-': {'-': injectViewGuild}}},
    scouttower: {'-': {'-': {'-': injectScouttower}}},
    mailbox: {'-': {'-': {'-': guildMailbox}}},
    ranks: {'-': {'-': {'-': injectGuildRanks}}},
    conflicts: {rpupgrades: {'-': {'-': injectRPUpgrades}}},
    bank: {'-': {'-': {'-': injectGuildBank}}}
  },
  bank: {'-': {'-': {'-': {'-': injectBank}}}},
  log: {
    '-': {'-': {'-': {'-': playerLog}}},
    outbox: {'-': {'-': {'-': outbox}}}
  },
  potionbazaar: {'-': {'-': {'-': {'-': injectBazaar}}}},
  marketplace: {createreq: {'-': {'-': {'-': addMarketplaceWidgets}}}},
  quickbuff: {'-': {'-': {'-': {'-': injectQuickBuff}}}}, // No ga
  notepad: {
    showlogs: {'-': {'-': {'-': injectNotepadShowLogs}}}, // done
    invmanagernew: {'-': {'-': {'-': refresh}}},
    guildinvmgr: {'-': {'-': {'-': refresh}}},
    recipemanager: {'-': {'-': {'-': injectRecipeManager}}}, // done
    auctionsearch: {'-': {'-': {'-': injectAuctionSearch}}},
    onlineplayers: {'-': {'-': {'-': injectOnlinePlayers}}}, // done
    quicklinkmanager: {'-': {'-': {'-': injectQuickLinkManager}}}, // done
    monsterlog: {'-': {'-': {'-': injectMonsterLog}}}, // done
    quickextract: {'-': {'-': {'-': insertQuickExtract}}}, // done
    quickwear: {'-': {'-': {'-': insertQuickWear}}}, // done
    fsboxcontent: {'-': {'-': {'-': injectFsBoxContent}}}, // done
    bufflogcontent: {'-': {'-': {'-': injectBuffLog}}}, // done
    newguildlog: {'-': {'-': {'-': injectNewGuildLog}}},
    findbuffs: {'-': {'-': {'-': injectFindBuffs}}}, // done
    findother: {'-': {'-': {'-': injectFindOther}}}, // done
    savesettings: {'-': {'-': {'-': injectSaveSettings}}},
    '-': {'-': {'-': {'-': injectNotepad}}}
  },
  points: {
    '-': {
      '-': {
        '-': {'-': storePlayerUpgrades},
        '0': {'-': storePlayerUpgrades},
        '1': {'-': parseGoldUpgrades}
      }
    }
  },
  trade: {
    '-': {'-': {'-': {'-': injectTrade}}},
    createsecure: {'-': {'-': {'-': injectTrade}}},
    docreatesecure: {'-': {'-': {'-': injectTrade}}}
  },
  titan: {'-': {'-': {'-': {'-': injectTitan}}}},
  toprated: {
    xp: {'-': {'-': {'-': injectTopRated}}},
    monthlyxp: {'-': {'-': {'-': injectTopRated}}},
    gold: {'-': {'-': {'-': injectTopRated}}},
    killstreak: {'-': {'-': {'-': injectTopRated}}},
    bounties: {'-': {'-': {'-': injectTopRated}}},
    risingstars: {'-': {'-': {'-': injectTopRated}}},
    arena: {'-': {'-': {'-': injectTopRated}}},
    superelites: {'-': {'-': {'-': injectTopRated}}},
    smasher: {'-': {'-': {'-': injectTopRated}}},
    globalquest: {'-': {'-': {'-': globalQuest}}}
  },
  inventing: {viewrecipe: {'-': {'-': {'-': inventing}}}},
  tempinv: {'-': {'-': {'-': {'-': injectMailbox}}}},
  findplayer: {'-': {'-': {'-': {'-': injectFindPlayer}}}},
  quests: { // UFSG
    '-': {'-': {'-': {'-': allowBack}}},
    view: {'-': {'-': {'-': showAllQuestSteps}}}
  },
  items: {'-': {'-': {'-': {'-': allowBack}}}}, // UFSG
  creatures: {'-': {'-': {'-': {'-': allowBack}}}}, // UFSG
  masterrealms: {'-': {'-': {'-': {'-': allowBack}}}}, // UFSG
  realms: {'-': {'-': {'-': {'-': allowBack}}}}, // UFSG
  relics: {'-': {'-': {'-': {'-': allowBack}}}}, // UFSG
  shops: {'-': {'-': {'-': {'-': allowBack}}}}, // UFSG
  scavenging: {'-': {'-': {'-': {'-': injectScavenging}}}},
  temple: {'-': {'-': {'-': {'-': parseTemplePage}}}},
  composing: {
    '-': {'-': {'-': {'-': injectComposing}}},
    breakdown: {'-': {'-': {'-': composingBreakdown}}},
    create: {'-': {'-': {'-': composingCreate}}}
  },
  pvpladder: {'-': {'-': {'-': {'-': ladder}}}},
  '-': {
    viewupdatearchive: {'-': {'-': {'-': viewArchive}}},
    viewarchive: {'-': {'-': {'-': viewArchive}}},
    '-': {'-': {'-': {'-': unknownPage}}}
  }
};

var coreFunction;
var functionPath;

function getType(cmd) {
  var type = '-';
  if (cmd === 'points') {
    type = fallback(getUrlParameter('type'), '-');
  }
  return type;
}

function newSelector(selector) {
  var test_cmd = document.querySelector(selector);
  return test_cmd && test_cmd.value || '-';
}

function testCoreFunction(cmd, subcmd, subcmd2, type, fromWorld) {
  if (pageSwitcher[cmd] &&
      pageSwitcher[cmd][subcmd] &&
      pageSwitcher[cmd][subcmd][subcmd2] &&
      pageSwitcher[cmd][subcmd][subcmd2][type] &&
      pageSwitcher[cmd][subcmd][subcmd2][type][fromWorld]) {
    return pageSwitcher[cmd][subcmd][subcmd2][type][fromWorld];
  }
}

function getCoreFunction() {
  var cmd;
  var subcmd;
  var subcmd2;
  var type;
  var fromWorld;
  if (document.location.search !== '') {
    cmd = fallback(getUrlParameter('cmd'), '-');
    subcmd = fallback(getUrlParameter('subcmd'), '-');
    subcmd2 = fallback(getUrlParameter('subcmd2'), '-');
    type = getType(cmd);
    fromWorld = fallback(getUrlParameter('fromworld'), '-');
  } else {
    cmd = newSelector('input[name="cmd"]');
    subcmd = newSelector('input[name="subcmd"]');
    if (subcmd === 'dochat') {
      cmd = '-';
      subcmd = '-';
    }
    subcmd2 = newSelector('input[name="subcmd2"]');
    type = '-';
    fromWorld = '-';
  }
  calf.cmd = cmd;
  calf.subcmd = subcmd;
  calf.subcmd2 = subcmd2;
  functionPath = cmd + '/' + subcmd + '/' + subcmd2 + '/' + type + '/' +
    fromWorld;

  coreFunction = testCoreFunction(cmd, subcmd, subcmd2, type, fromWorld);
}

function devHooks() {
  /* eslint-disable no-console */
  console.log('functionPath', functionPath);
  if (!coreFunction) {
    console.log('No Core Function.');
  } else if (typeof coreFunction !== 'function') {
    console.log('Not Core Function.');
  }
  /* eslint-enable no-console */
}

function asyncDispatcher() {
  devHooks();
  if (typeof coreFunction === 'function') {
    screenview(functionPath);
    start('JS Perf', functionPath);
    coreFunction();
    end('JS Perf', functionPath);
  }
}

// main event dispatcher
FSH.dispatch = function dispatch() {

  setup();
  start('JS Perf', 'FSH.dispatch');

  getCoreFunction();
  lookForHcsData();
  add(3, asyncDispatcher);

  if (typeof window.jQuery === 'undefined') {return;}

  isMessageSound();

  /* This must be at the end in order not to
  screw up other findNode calls (Issue 351) */
  doQuickLinks();

  end('JS Perf', 'FSH.dispatch');

};

window.FSH = window.FSH || {};
window.FSH.calf = '9';

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZlN5c3RlbS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZHVsZXMvc3VwcG9ydC9ET01QYXJzZXIuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9zdXBwb3J0L3BlcmZvcm1hbmNlTm93LmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvc3VwcG9ydC9kZWJ1Zy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3N1cHBvcnQvZ21BcGkuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9zdXBwb3J0L2NhbGYuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9hamF4L3JldHJ5QWpheC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3N1cHBvcnQvZGF0YU9iai5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3N1cHBvcnQvc3lzdGVtLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvc3VwcG9ydC9zY2guanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9zdXBwb3J0L3Rhc2suanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9jb21tb24vZHJhZ1N0YXJ0LmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY2hyb21lL2RvUXVpY2tMaW5rcy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2Nocm9tZS9pc01lc3NhZ2VTb3VuZC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2Nocm9tZS9jaGFuZ2VHdWlsZExvZ0hSRUYuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9hamF4L2dldEZvcmFnZS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2NvbW1vbi9jRWxlbWVudC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2FwcC9jYWxsQXBwLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvYXBwL2d1aWxkL21hbmFnZS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2FqYXgvc2V0Rm9yYWdlLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvZ3VpbGQvZ3VpbGRUcmFja2VyL2luZGV4Q29uc3RhbnRzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvZ3VpbGQvZ3VpbGRBY3Rpdml0eS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3N1cHBvcnQvbGF5b3V0LmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY29tcG9zaW5nL2NvbXBvc2luZy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL21pc2MuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9jaHJvbWUvalF1ZXJ5RGlhbG9nLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY2hyb21lL2luamVjdEZTQm94TG9nLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvYnVmZkxvZy9pbmplY3RCdWZmTG9nLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvbW9uc3RvckxvZy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2NvbWJhdExvZy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL29ubGluZVBsYXllcnMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9yZWNpcGVNZ3IvcmVjaXBlTWdyLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvYWpheC9nZXRJbnZlbnRvcnkuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9jb21tb24vb3V0cHV0UmVzdWx0LmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY29tbW9uL2pzb25GYWlsLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvYXBwL3Byb2ZpbGUvdXNlaXRlbS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3F1aWNrRXh0cmFjdC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3F1aWNrV2Vhci9jcmVhdGVRdWlja1dlYXIuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9hcHAvcHJvZmlsZS9sb2FkSW52ZW50b3J5LmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvcXVpY2tXZWFyL3Nob3dBSEludk1hbmFnZXIuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy9zaW1wbGUuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy9zZXR0aW5nT2JqLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvc2V0dGluZ3MvYm91bnR5UHJlZnMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy9lcXVpcFByZWZzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvc2V0dGluZ3MvZ2VuZXJhbFByZWZzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvc2V0dGluZ3MvZ3VpbGRQcmVmcy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3NldHRpbmdzL2xvZ1ByZWZzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvc2V0dGluZ3Mvb3RoZXJQcmVmcy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3NldHRpbmdzL3dvcmxkUHJlZnMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy9wcm9maWxlUHJlZnMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy9xdWVzdFByZWZzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvc2V0dGluZ3MvY29uZmlnRGF0YS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3NldHRpbmdzL3NldHRpbmdzUGFnZS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2NvbW1vbi90b2dnbGVGb3JjZS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3N1cHBvcnQvYWpheC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3F1aWNrV2Vhci9xdWlja1dlYXIuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9zdXBwb3J0L2ZzaEdhLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvbGlzdHMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9zdXBwb3J0L2J1ZmZPYmouanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9maW5kQnVmZnMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9jaHJvbWUvaGVscGVyTWVudS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL25ld3MvaW5qZWN0SG9tZVBhZ2VUd29MaW5rLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY2hyb21lL2FjY29yZGlvbi5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2Nocm9tZS9tZXNzYWdpbmcuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9hamF4L2dldFByb2ZpbGUuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9hamF4L215U3RhdHMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9jaHJvbWUvYWxseUVuZW15LmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY2hyb21lL2FjdGl2ZVdhbnRlZEJvdW50aWVzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvbmV3TWFwL3NlbmRHb2xkLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY2hyb21lL2tleUhhbmRsZXIuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9jaHJvbWUvc3RhdEJhci5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2NvbW1vbi91cGRhdGVIQ1NRdWlja0J1ZmZMaW5rcy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2Nocm9tZS93aWRnZXRzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvbm90aWZpY2F0aW9uLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY2hyb21lL2NhbGMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9jaHJvbWUvbG9va0Zvckhjc0RhdGEuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9ndWlsZC9hZGRIaXN0b3J5V2lkZ2V0cy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2d1aWRlL2FsbG93QmFjay5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2FyZW5hL2Fzc2V0cy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2FyZW5hL2NvbXBsZXRlZEFyZW5hcy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2FqYXgvZ2V0SW52ZW50b3J5QnlJZC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2NvbW1vbi9wZXJmRmlsdGVyLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY29tcG9zaW5nL2JyZWFrZG93bi5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3RvcFJhdGVkL2dsb2JhbFF1ZXN0LmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY29tbW9uL2Nsb3Nlc3QuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9tYWlsYm94L2d1aWxkTWFpbGJveC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2FqYXgvZ2V0TWVtYnJMaXN0LmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvZ3VpbGRBZHZpc29yLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvYXJlbmEvYXJlbmEuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9hcHAvcG90aW9uYmF6YWFyL2J1eWl0ZW0uanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9iYXphYXIuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9wcm9maWxlL2Jpby9iaW9FdnRIZGwuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9wcm9maWxlL2Jpby9yZW5kZXIuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9wcm9maWxlL2Jpby9iaW9XaWRnZXRzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY29tbW9uL2FscGhhLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY29tbW9uL2Zvcm1hdERhdGVUaW1lLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvZ3VpbGQvZ3VpbGRUcmFja2VyL3RyYWNrZXJUYWJsZS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2NvbW1vbi9qc29uUGFyc2UuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9ndWlsZC9ndWlsZFRyYWNrZXIvcmF3RGF0YS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2d1aWxkL2d1aWxkVHJhY2tlci9ndWlsZFRyYWNrZXIuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9ndWlsZC9ndWlsZFV0aWxzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvZ3VpbGQvZ3VpbGQuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9ndWlsZC9pbmplY3RHdWlsZEFkZFRhZ3NXaWRnZXRzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvcmFuay5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2ludmVudG9yeS93ZWFyVXNlUmVuZGVyLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvaW52ZW50b3J5L2Fzc2V0cy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2ludmVudG9yeS9yZW5kZXIuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9pbnZlbnRvcnkvdGFibGUuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9hamF4L2Ryb3BJdGVtLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvYWpheC9tb3ZlSXRlbS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2FqYXgvc2VuZEl0ZW0uanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9pbnZlbnRvcnkvZmlsdGVycy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2ludmVudG9yeS9pbnZlbnRvcnkuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9tYWlsYm94L21haWxib3guanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9sb2dzL2FkZEd1aWxkTG9nV2lkZ2V0cy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2xvZ3MvYWRkTG9nQ29sb3JpbmcuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9uZXdHdWlsZExvZy9wcm9maWxlci5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL25ld0d1aWxkTG9nL2Fzc2V0cy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL25ld0d1aWxkTG9nL25ld0d1aWxkTG9nLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY29tbW9uL2FkZFN0YXRUb3RhbFRvTW91c2VvdmVyLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvcHJvZmlsZS9kZWJ1ZmYuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9wcm9maWxlL2Zhc3RXZWFyLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvYXBwL3Byb2ZpbGUvdW5lcXVpcGl0ZW0uanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9wcm9maWxlL25la2lkQnRuLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvcHJvZmlsZS9jb21wb25lbnRzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvcHJvZmlsZS9wcm9maWxlQWxseUVuZW15LmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvcHJvZmlsZS9iaW8vYmlvLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvcHJvZmlsZS9wcm9maWxlLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvcXVpY2tCdWZmLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY29tbW9uL3JlZHVjZUJ1ZmZBcnJheS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2d1aWxkL2luamVjdFJQVXBncmFkZXMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9ndWlsZFJlcG9ydC9ldmVudEhhbmRsZXJzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvZ3VpbGRSZXBvcnQvcG90UmVwb3J0LmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvZ3VpbGRSZXBvcnQvcHJlcGFyZUNoaWxkUm93cy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2d1aWxkUmVwb3J0L3JlcG9ydEhlYWRlci5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2d1aWxkUmVwb3J0L3NlYXJjaFVzZXIuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9ndWlsZFJlcG9ydC9ndWlsZFJlcG9ydC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3NldHRpbmdzL2xvYWQuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9zY2F2ZW5naW5nLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvc2NvdXRUb3dlci9pbmplY3RTY291dHRvd2VyQnVmZkxpbmtzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvc2NvdXRUb3dlci9pbmplY3RTY291dHRvd2VyLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvc2NvdXRUb3dlci9pbmplY3RUaXRhbi5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2FwcC9ndWlsZC92aWV3LmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY29tbW9uL2NvbW1vbi5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3RvcFJhdGVkL3RvcHJhdGVkLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvdHJhZGUuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9ndWlsZC9pbmplY3RWaWV3R3VpbGQuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9uZXdNYXAvYXNzZXRzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvbmV3TWFwL2NvbWJhdExvZ2dlci5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL25ld01hcC9idXR0b25zLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvbmV3TWFwL3JlbGljL2Fzc2V0cy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2FqYXgvZ3JvdXBWaWV3U3RhdHMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9hamF4L2dldEdyb3VwU3RhdHMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9hamF4L2dldE1lcmNTdGF0cy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL25ld01hcC9yZWxpYy9yZWxpYy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL25ld01hcC9zaG9wLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvbmV3TWFwL3ZpZXdDcmVhdHVyZS9ldmFsQW5hbHlzaXMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9uZXdNYXAvdmlld0NyZWF0dXJlL2V2YWxBcm1vdXIuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9uZXdNYXAvdmlld0NyZWF0dXJlL2V2YWxBdHRhY2suanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9uZXdNYXAvdmlld0NyZWF0dXJlL2V2YWxDYS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL25ld01hcC92aWV3Q3JlYXR1cmUvZXZhbERhbWFnZS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL25ld01hcC92aWV3Q3JlYXR1cmUvZXZhbERlZmVuY2UuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9uZXdNYXAvdmlld0NyZWF0dXJlL2V2YWxFeHRyYUJ1ZmZzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvbmV3TWFwL3ZpZXdDcmVhdHVyZS9ldmFsSHRtbC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL25ld01hcC92aWV3Q3JlYXR1cmUvdmlld0NyZWF0dXJlLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvbmV3TWFwL3N1YkxldmVsLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvbmV3TWFwL21vbnN0ZXJMb2cuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9uZXdNYXAvbmV3TWFwLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvbGVnYWN5LmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvYXBwL2ludmVudGluZy9kb2ludmVudC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3JlY2lwZXMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9sYWRkZXIuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9hcmVuYS9zZXR1cC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2d1aWRlL3Nob3dBbGxRdWVzdFN0ZXBzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvYXJlbmEvc3RvcmUuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy91cGdyYWRlcy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL3F1ZXN0Qm9vay5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2J1ZmZMb2cvdXBkYXRlQnVmZkxvZy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2Nocm9tZS91bmtub3duUGFnZS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL25ld3Mvdmlld0FyY2hpdmUuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9sb2dzL2FkZENoYXRUZXh0QXJlYS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2xvZ3MvYWRkUHZwU3VtbWFyeS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2xvZ3MvcHJvY2Vzc0xhZGRlci5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2xvZ3MvYWRkTG9nV2lkZ2V0cy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2xvZ3MvbG9ncy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2F1Y3Rpb25Ib3VzZS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2JhbmsuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9ncm91cHMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9kcm9wSXRlbXMvZG9DaGVja2JveGVzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY29tbW9uL21ha2VGb2xkZXJTcGFucy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2Ryb3BJdGVtcy9kb0ZvbGRlckJ1dHRvbnMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9kcm9wSXRlbXMvZG9Ub2dnbGVCdXR0b25zLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvY29tbW9uL2dldEl0ZW1JbWcuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9kcm9wSXRlbXMvaGlkZUZvbGRlcnMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9kcm9wSXRlbXMvaW5qZWN0TW92ZUl0ZW1zLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvZHJvcEl0ZW1zL21vdmVJdGVtc1RvRm9sZGVyLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvZHJvcEl0ZW1zL3F1aWNrQWN0aW9uLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvZHJvcEl0ZW1zL2Ryb3BJdGVtcy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL25ld3MvbmV3cy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2Nocm9tZS9wYWdlU3dpdGNoZXIuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9jaHJvbWUvZW52aXJvbm1lbnQuanMiLCIuLi8uLi9zcmMvY2FsZlN5c3RlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBET01QYXJzZXIgSFRNTCBleHRlbnNpb25cclxuICogMjAxMi0wOS0wNFxyXG4gKlxyXG4gKiBCeSBFbGkgR3JleSwgaHR0cDovL2VsaWdyZXkuY29tXHJcbiAqIFB1YmxpYyBkb21haW4uXHJcbiAqIE5PIFdBUlJBTlRZIEVYUFJFU1NFRCBPUiBJTVBMSUVELiBVU0UgQVQgWU9VUiBPV04gUklTSy5cclxuICovXHJcblxyXG4vKiAhIEBzb3VyY2UgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTEyOTAzMSAqL1xyXG4vKiBnbG9iYWwgZG9jdW1lbnQsIERPTVBhcnNlciovXHJcblxyXG4oZnVuY3Rpb24oRE9NUGFyc2VyKSB7XHJcbiAgdmFyIERPTVBhcnNlcl9wcm90byA9IERPTVBhcnNlci5wcm90b3R5cGU7XHJcbiAgdmFyIHJlYWxfcGFyc2VGcm9tU3RyaW5nID0gRE9NUGFyc2VyX3Byb3RvLnBhcnNlRnJvbVN0cmluZztcclxuXHJcbiAgLy8gRmlyZWZveC9PcGVyYS9JRSB0aHJvdyBlcnJvcnMgb24gdW5zdXBwb3J0ZWQgdHlwZXNcclxuICB0cnkge1xyXG4gICAgLy8gV2ViS2l0IHJldHVybnMgbnVsbCBvbiB1bnN1cHBvcnRlZCB0eXBlc1xyXG4gICAgaWYgKChuZXcgRE9NUGFyc2VyKCkpLnBhcnNlRnJvbVN0cmluZygnJywgJ3RleHQvaHRtbCcpKSB7XHJcbiAgICAgIC8vIHRleHQvaHRtbCBwYXJzaW5nIGlzIG5hdGl2ZWx5IHN1cHBvcnRlZFxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXgpIHtcclxuICAgIC8vIE5vdGhpbmdcclxuICB9XHJcblxyXG4gIERPTVBhcnNlcl9wcm90by5wYXJzZUZyb21TdHJpbmcgPSBmdW5jdGlvbihtYXJrdXAsIHR5cGUpIHtcclxuICAgIGlmICgvXlxccyp0ZXh0XFwvaHRtbFxccyooPzo7fCQpL2kudGVzdCh0eXBlKSkge1xyXG4gICAgICB2YXIgZG9jID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCcnKTtcclxuICAgICAgaWYgKG1hcmt1cC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJzwhZG9jdHlwZScpID4gLTEpIHtcclxuICAgICAgICBkb2MuZG9jdW1lbnRFbGVtZW50LmlubmVySFRNTCA9IG1hcmt1cDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBkb2MuYm9keS5pbm5lckhUTUwgPSBtYXJrdXA7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGRvYztcclxuICAgIH1cclxuICAgIHJldHVybiByZWFsX3BhcnNlRnJvbVN0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH07XHJcbn0oRE9NUGFyc2VyKSk7XHJcbiIsIi8qXHJcbi8vIEBsaWNlbnNlIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy8gY29weXJpZ2h0IFBhdWwgSXJpc2ggMjAxNVxyXG4qL1xyXG5cclxuaWYgKCdwZXJmb3JtYW5jZScgaW4gd2luZG93ID09PSBmYWxzZSkge1xyXG4gIHdpbmRvdy5wZXJmb3JtYW5jZSA9IHt9O1xyXG59XHJcblxyXG5pZiAoJ25vdycgaW4gd2luZG93LnBlcmZvcm1hbmNlID09PSBmYWxzZSkge1xyXG5cclxuICB2YXIgbm93T2Zmc2V0ID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgaWYgKHBlcmZvcm1hbmNlLnRpbWluZyAmJiBwZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0KSB7XHJcbiAgICBub3dPZmZzZXQgPSBwZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0O1xyXG4gIH1cclxuXHJcbiAgd2luZG93LnBlcmZvcm1hbmNlLm5vdyA9IGZ1bmN0aW9uIG5vdygpIHtcclxuICAgIHJldHVybiBEYXRlLm5vdygpIC0gbm93T2Zmc2V0O1xyXG4gIH07XHJcbn1cclxuIiwidmFyIHRpbWVycyA9IHt9O1xyXG52YXIgZm9vdFdyYXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9vdC13cmFwJyk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9nKHRleHQsIHZhbHVlKSB7XHJcbiAgaWYgKGZvb3RXcmFwKSB7XHJcbiAgICBmb290V3JhcC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsXHJcbiAgICAgICc8YnI+JyArIHRleHQgKyAnOiAnICsgdmFsdWUgKyAnICgnICsgdHlwZW9mIHZhbHVlICsgJyknKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0aW1lKG5hbWUpIHtcclxuICBpZiAobmFtZSkge3RpbWVyc1tuYW1lXSA9IHBlcmZvcm1hbmNlLm5vdygpICogMTAwMDt9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0aW1lRW5kKG5hbWUpIHtcclxuICBpZiAodGltZXJzW25hbWVdKSB7XHJcbiAgICBsb2cobmFtZSwgTWF0aC5yb3VuZChwZXJmb3JtYW5jZS5ub3coKSAqIDEwMDAgLVxyXG4gICAgICB0aW1lcnNbbmFtZV0pIC8gMTAwMCArICdtcycpO1xyXG4gICAgZGVsZXRlIHRpbWVyc1tuYW1lXTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtsb2d9IGZyb20gJy4vZGVidWcnO1xyXG5cclxuLy8gR01fQXBpQnJvd3NlckNoZWNrXHJcbi8vIEBhdXRob3IgICAgICAgIEdJSm9lXHJcbi8vIEBsaWNlbnNlICAgICAgIGh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC9cclxuLy8gR2xvYmFsIHZhcmlhYmxlc1xyXG52YXIgZ3ZhciA9IHt9O1xyXG52YXIgR01TVE9SQUdFX1BBVEggPSAnR01fJztcclxuXHJcbmZ1bmN0aW9uIHN0b3JJdGVtKG5hbWUsIHR5cGUsIHZhbHVlKSB7XHJcbiAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKEdNU1RPUkFHRV9QQVRIICsgbmFtZSwgdHlwZSArIHZhbHVlKTtcclxufVxyXG5cclxudmFyIHJldml2ZXIgPSBbXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiAnU10nLFxyXG4gICAgcmVzdWx0OiBmdW5jdGlvbih2YWx1ZSkge3JldHVybiB2YWx1ZS5zdWJzdHIoMik7fVxyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiAnTl0nLFxyXG4gICAgcmVzdWx0OiBmdW5jdGlvbih2YWx1ZSkge3JldHVybiBwYXJzZUludCh2YWx1ZS5zdWJzdHIoMiksIDEwKTt9XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246ICdCXScsXHJcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKHZhbHVlKSB7cmV0dXJuIHZhbHVlLnN1YnN0cigyKSA9PT0gJ3RydWUnO31cclxuICB9XHJcbl07XHJcbnZhciBjb2xkID0gW1xyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogJ3N0cmluZycsXHJcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7c3Rvckl0ZW0obmFtZSwgJ1NdJywgdmFsdWUpO31cclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogJ251bWJlcicsXHJcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgIGlmICh2YWx1ZS50b1N0cmluZygpLmluZGV4T2YoJy4nKSA8IDApIHtzdG9ySXRlbShuYW1lLCAnTl0nLCB2YWx1ZSk7fVxyXG4gICAgfVxyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiAnYm9vbGVhbicsXHJcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7c3Rvckl0ZW0obmFtZSwgJ0JdJywgdmFsdWUpO31cclxuICB9XHJcbl07XHJcblxyXG5mdW5jdGlvbiByZXRyaWV2ZSh2YWx1ZSkge1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV2aXZlci5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgdmFyIHRlc3QgPSByZXZpdmVyW2ldO1xyXG4gICAgaWYgKHZhbHVlLnN1YnN0cigwLCAyKSA9PT0gdGVzdC5jb25kaXRpb24pIHtyZXR1cm4gdGVzdC5yZXN1bHQodmFsdWUpO31cclxuICB9XHJcbiAgcmV0dXJuIHZhbHVlO1xyXG59XHJcblxyXG4vLyBZb3UgY2FuIGNoYW5nZSBpdCB0byBhdm9pZCBjb25mbGljdCB3aXRoIG90aGVycyBzY3JpcHRzXHJcbnZhciBuZWVkQXBpVXBncmFkZSA9IGZhbHNlO1xyXG5pZiAod2luZG93Lm5hdmlnYXRvci5hcHBOYW1lLm1hdGNoKC9eb3BlcmEvaSkgJiZcclxuICAgIHR5cGVvZiB3aW5kb3cub3BlcmEgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbmVlZEFwaVVwZ3JhZGUgPSB0cnVlO1xyXG4gIGd2YXIuaXNPcGVyYSA9IHRydWU7XHJcbiAgd2luZG93LkdNX2xvZyA9IHdpbmRvdy5vcGVyYS5wb3N0RXJyb3I7XHJcbn1cclxuaWYgKHR5cGVvZiBHTV9zZXRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICB2YXIgZ3N2O1xyXG4gIHRyeSB7XHJcbiAgICBnc3YgPSB3aW5kb3cuR01fc2V0VmFsdWUudG9TdHJpbmcoKTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICBnc3YgPSAnc3RhdGljQXJncyc7XHJcbiAgfVxyXG4gIGlmIChnc3YuaW5kZXhPZignc3RhdGljQXJncycpID4gMCkge1xyXG4gICAgZ3Zhci5pc0dyZWFzZU1vbmtleSA9IHRydWU7XHJcbiAgLy8gdGVzdCBHTV9oaXRjaFxyXG4gIH0gZWxzZSBpZiAoZ3N2Lm1hdGNoKC9ub3RcXHMrc3VwcG9ydGVkLykpIHtcclxuICAgIG5lZWRBcGlVcGdyYWRlID0gdHJ1ZTtcclxuICAgIGd2YXIuaXNCdWdnZWRDaHJvbWUgPSB0cnVlO1xyXG4gIH1cclxufSBlbHNlIHtcclxuICBuZWVkQXBpVXBncmFkZSA9IHRydWU7XHJcbn1cclxuXHJcbmlmIChuZWVkQXBpVXBncmFkZSkge1xyXG4gIHZhciB3cyA9IG51bGw7XHJcbiAgdmFyIHVpZCA9IG5ldyBEYXRlKCkudG9TdHJpbmcoKTtcclxuICB2YXIgcmVzdWx0O1xyXG4gIHRyeSB7XHJcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0odWlkLCB1aWQpO1xyXG4gICAgcmVzdWx0ID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKHVpZCkgPT09IHVpZDtcclxuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh1aWQpO1xyXG4gICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICB3cyA9IHR5cGVvZiB3aW5kb3cubG9jYWxTdG9yYWdlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbG9nKCdUaGVyZSBpcyBhIHByb2JsZW0gd2l0aCB5b3VyIGxvY2FsIHN0b3JhZ2UuICcgK1xyXG4gICAgICAgICdGU0ggY2Fubm90IHBlcnNpc3QgeW91ciBzZXR0aW5ncy4nKTtcclxuICAgICAgd3MgPSBudWxsO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHdzID0gbnVsbDtcclxuICB9XHJcbiAgLy8gQ2F0Y2ggU2VjdXJpdHkgZXJyb3JcclxuICBpZiAod3MgPT09ICdvYmplY3QnKSB7XHJcbiAgICB3aW5kb3cuR01fZ2V0VmFsdWUgPSBmdW5jdGlvbihuYW1lLCBkZWZWYWx1ZSkge1xyXG4gICAgICB2YXIgdmFsdWUgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oR01TVE9SQUdFX1BBVEggKyBuYW1lKTtcclxuICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtyZXR1cm4gZGVmVmFsdWU7fVxyXG4gICAgICByZXR1cm4gcmV0cmlldmUodmFsdWUpO1xyXG4gICAgfTtcclxuICAgIHdpbmRvdy5HTV9zZXRWYWx1ZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sZC5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgIHZhciBzdG9yVHlwZSA9IGNvbGRbaV07XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gc3RvclR5cGUuY29uZGl0aW9uKSB7XHJcbiAgICAgICAgICBzdG9yVHlwZS5yZXN1bHQobmFtZSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9IGVsc2UgaWYgKCFndmFyLmlzT3BlcmEgfHwgdHlwZW9mIEdNX3NldFZhbHVlID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgZ3Zhci50ZW1wb3JhcmlseVN0b3JhZ2UgPSBbXTtcclxuICAgIHdpbmRvdy5HTV9nZXRWYWx1ZSA9IGZ1bmN0aW9uKG5hbWUsIGRlZlZhbHVlKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgZ3Zhci50ZW1wb3JhcmlseVN0b3JhZ2VbR01TVE9SQUdFX1BBVEggKyBuYW1lXSA9PT1cclxuICAgICAgICAndW5kZWZpbmVkJykge3JldHVybiBkZWZWYWx1ZTt9XHJcbiAgICAgIHJldHVybiBndmFyLnRlbXBvcmFyaWx5U3RvcmFnZVtHTVNUT1JBR0VfUEFUSCArIG5hbWVdO1xyXG4gICAgfTtcclxuICAgIHdpbmRvdy5HTV9zZXRWYWx1ZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgIGlmIChbJ3N0cmluZycsICdib29sZWFuJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSAhPT0gLTEpIHtcclxuICAgICAgICBndmFyLnRlbXBvcmFyaWx5U3RvcmFnZVtHTVNUT1JBR0VfUEFUSCArIG5hbWVdID0gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB3aW5kb3cuR01fbGlzdFZhbHVlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGxpc3QgPSBbXTtcclxuICAgIHZhciByZUtleSA9IG5ldyBSZWdFeHAoJ14nICsgR01TVE9SQUdFX1BBVEgpO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gd2luZG93LmxvY2FsU3RvcmFnZS5sZW5ndGg7IGkgPCBpbDsgaSArPSAxKSB7XHJcbiAgICAgIHZhciBrZXkgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmtleShpKTtcclxuICAgICAgaWYgKGtleS5tYXRjaChyZUtleSkpIHtcclxuICAgICAgICBsaXN0LnB1c2goa2V5LnJlcGxhY2UoR01TVE9SQUdFX1BBVEgsICcnKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBsaXN0O1xyXG4gIH07XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQge307XHJcbiIsInZhciBjb25jdXJyZW50ID0gMDtcclxudmFyIHBhdXNlZCA9IHRydWU7XHJcbnZhciBxdWV1ZSA9IFtdO1xyXG5cclxuZnVuY3Rpb24gYmVmb3JlU2VuZCh4aHIpIHtcclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgZnVuY3Rpb24oKSB7XHJcbiAgICB4aHIuYWJvcnQoKTtcclxuICAgIHF1ZXVlID0gW107XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvQWpheChvcHRpb25zLCByZXRyaWVzLCBkZnIpIHtcclxuICB2YXIgb3B0O1xyXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcclxuICAgIG9wdCA9IHt1cmw6IG9wdGlvbnN9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBvcHQgPSBvcHRpb25zO1xyXG4gIH1cclxuICBvcHQuYmVmb3JlU2VuZCA9IGJlZm9yZVNlbmQ7XHJcbiAgcmV0dXJuICQuYWpheChvcHQpLnBpcGUoZGZyLnJlc29sdmUsXHJcbiAgICBmdW5jdGlvbihqcVhociwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcclxuICAgICAgaWYgKHJldHJpZXMgPiAwICYmIGpxWGhyLnN0YXR1cyA9PT0gNTAzKSB7XHJcbiAgICAgICAgc2V0VGltZW91dChkb0FqYXgsIDEwMCwgb3B0LCByZXRyaWVzIC0gMSwgZGZyKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBkZnIucmVqZWN0KGpxWGhyLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0YXNrUnVubmVyKCkge1xyXG4gIGlmIChxdWV1ZS5sZW5ndGggPT09IDApIHtcclxuICAgIHBhdXNlZCA9IHRydWU7XHJcbiAgfSBlbHNlIHtcclxuICAgIHBhdXNlZCA9IGZhbHNlO1xyXG4gICAgaWYgKGNvbmN1cnJlbnQgPCA0KSB7XHJcbiAgICAgIGNvbmN1cnJlbnQgKz0gMTtcclxuICAgICAgdmFyIG9wdHMgPSBxdWV1ZS5zaGlmdCgpO1xyXG4gICAgICBkb0FqYXguYXBwbHkobnVsbCwgb3B0cykuYWx3YXlzKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNvbmN1cnJlbnQgLT0gMTtcclxuICAgICAgICB0YXNrUnVubmVyKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0YXNrUnVubmVyKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBhZGQob3B0aW9ucywgcmV0cmllcywgZGZyKSB7XHJcbiAgcXVldWUucHVzaChbb3B0aW9ucywgcmV0cmllcywgZGZyXSk7XHJcbiAgaWYgKHBhdXNlZCkge3Rhc2tSdW5uZXIoKTt9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJldHJ5QWpheChvcHRpb25zKSB7XHJcbiAgdmFyIGRmciA9ICQuRGVmZXJyZWQoKTtcclxuICBhZGQob3B0aW9ucywgMTAsIGRmcik7XHJcbiAgcmV0dXJuIGRmcjtcclxufVxyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGluZXMgKi9cclxuZXhwb3J0IHZhciBkZWZhdWx0cyA9IHtcclxuICBsYXN0QWN0aXZlUXVlc3RQYWdlOiAnJyxcclxuICBsYXN0Tm9ybWFsQWN0aXZlUXVlc3RQYWdlOiAnJyxcclxuICBsYXN0Tm9ybWFsQ29tcGxldGVkUXVlc3RQYWdlOiAnJyxcclxuICBsYXN0Tm9ybWFsTm90U3RhcnRlZFF1ZXN0UGFnZTogJycsXHJcbiAgbGFzdFNlYXNvbmFsQWN0aXZlUXVlc3RQYWdlOiAnJyxcclxuICBsYXN0U2Vhc29uYWxDb21wbGV0ZWRRdWVzdFBhZ2U6ICcnLFxyXG4gIGxhc3RTZWFzb25hbE5vdFN0YXJ0ZWRRdWVzdFBhZ2U6ICcnLFxyXG5cclxuICBlbmFibGVMb2dDb2xvcmluZzogZmFsc2UsXHJcbiAgZW5hYmxlQ2hhdFBhcnNpbmc6IGZhbHNlLFxyXG4gIGVuYWJsZUNyZWF0dXJlQ29sb3Jpbmc6IGZhbHNlLFxyXG4gIHNob3dDb21iYXRMb2c6IGZhbHNlLFxyXG4gIHNob3dDcmVhdHVyZUluZm86IGZhbHNlLFxyXG4gIGtlZXBMb2dzOiBmYWxzZSxcclxuXHJcbiAgc2hvd0V4dHJhTGlua3M6IGZhbHNlLFxyXG4gIGh1bnRpbmdCdWZmczogJ0RvdWJsZXIsTGlicmFyaWFuLEFkZXB0IExlYXJuZXIsTWVyY2hhbnQsJyArXHJcbiAgICAnVHJlYXN1cmUgSHVudGVyLEFuaW1hbCBNYWduZXRpc20sQ29uc2VydmUnLFxyXG4gIGh1bnRpbmdCdWZmc05hbWU6ICdkZWZhdWx0JyxcclxuICBodW50aW5nQnVmZnMyOiAnRGVmbGVjdCcsXHJcbiAgaHVudGluZ0J1ZmZzMk5hbWU6ICdQdlAnLFxyXG4gIGh1bnRpbmdCdWZmczM6ICdTdXBlciBFbGl0ZSBTbGF5ZXInLFxyXG4gIGh1bnRpbmdCdWZmczNOYW1lOiAnU0UnLFxyXG4gIHNob3dIdW50aW5nQnVmZnM6IGZhbHNlLFxyXG4gIG1vdmVGU0JveDogZmFsc2UsXHJcblxyXG4gIGd1aWxkU2VsZjogJycsXHJcbiAgZ3VpbGRTZWxmTWVzc2FnZTogJ01lbWJlciBvZiB5b3VyIG93biBndWlsZCEnLFxyXG4gIGd1aWxkRnJuZDogJycsXHJcbiAgZ3VpbGRGcm5kTWVzc2FnZTogJ0RvIG5vdCBhdHRhY2sgLSBHdWlsZCBpcyBmcmllbmRseSEnLFxyXG4gIGd1aWxkUGFzdDogJycsXHJcbiAgZ3VpbGRQYXN0TWVzc2FnZTogJ0RvIG5vdCBhdHRhY2sgLSBZb3VcXCd2ZSBiZWVuIGluIHRoYXQgZ3VpbGQgb25jZSEnLFxyXG4gIGd1aWxkRW5teTogJycsXHJcbiAgZ3VpbGRFbm15TWVzc2FnZTogJ0VuZW15IGd1aWxkLiBBdHRhY2sgYXQgd2lsbCEnLFxyXG4gIGdvbGRSZWNpcGllbnQ6ICcnLFxyXG4gIGdvbGRBbW91bnQ6ICcnLFxyXG4gIHNlbmRHb2xkb25Xb3JsZDogZmFsc2UsXHJcblxyXG4gIGhpZGVRdWVzdHM6IGZhbHNlLFxyXG4gIGhpZGVRdWVzdE5hbWVzOiAnJyxcclxuICBoaWRlUmVjaXBlczogZmFsc2UsXHJcbiAgaGlkZVJlY2lwZU5hbWVzOiAnJyxcclxuICBlbmFibGVHdWlsZEluZm9XaWRnZXRzOiBmYWxzZSxcclxuICBlbmFibGVPbmxpbmVBbGxpZXNXaWRnZXRzOiBmYWxzZSxcclxuICBndWlsZE9ubGluZVJlZnJlc2hUaW1lOiAzMDAsXHJcbiAgaGlkZUd1aWxkSW5mb1NlY3VyZVRyYWRlOiBmYWxzZSxcclxuICBoaWRlR3VpbGRJbmZvVHJhZGU6IGZhbHNlLFxyXG4gIGhpZGVHdWlsZEluZm9NZXNzYWdlOiBmYWxzZSxcclxuICBoaWRlR3VpbGRJbmZvQnVmZjogZmFsc2UsXHJcblxyXG4gIGJ1eUJ1ZmZzR3JlZXRpbmc6ICdIZWxsbyB7cGxheWVybmFtZX0sIGNhbiBJIGJ1eSB7YnVmZnN9IGZvciB7Y29zdH0gcGxlYXNlPycsXHJcbiAgcmVuZGVyU2VsZkJpbzogZmFsc2UsXHJcbiAgYmlvRWRpdExpbmVzOiAxMCxcclxuICByZW5kZXJPdGhlckJpb3M6IGZhbHNlLFxyXG4gIHBsYXlOZXdNZXNzYWdlU291bmQ6IGZhbHNlLFxyXG4gIHNob3dTcGVha2VyT25Xb3JsZDogZmFsc2UsXHJcbiAgZGVmYXVsdE1lc3NhZ2VTb3VuZDogJ2h0dHBzOi8vZmFsbGVuc3dvcmRoZWxwZXIuZ2l0aHViLmlvL2ZhbGxlbnN3b3JkaGVscGVyL2F1ZGlvL3Ntcy1hbGVydC0yLWRhbmllbF9zaW1vbi53YXYnLFxyXG4gIGhpZ2hsaWdodFBsYXllcnNOZWFyTXlMdmw6IGZhbHNlLFxyXG4gIGhpZ2hsaWdodEd2R1BsYXllcnNOZWFyTXlMdmw6IGZhbHNlLFxyXG4gIGRldGFpbGVkQ29uZmxpY3RJbmZvOiBmYWxzZSxcclxuICBnYW1lSGVscExpbms6IHRydWUsXHJcbiAgbmF2aWdhdGVUb0xvZ0FmdGVyTXNnOiBmYWxzZSxcclxuXHJcbiAgZW5hYmxlQWxseU9ubGluZUxpc3Q6IGZhbHNlLFxyXG4gIGVuYWJsZUVuZW15T25saW5lTGlzdDogZmFsc2UsXHJcbiAgYWxseUVuZW15T25saW5lUmVmcmVzaFRpbWU6IDMwMCxcclxuICBtb3ZlR3VpbGRMaXN0OiBmYWxzZSxcclxuICBtb3ZlT25saW5lQWxsaWVzTGlzdDogZmFsc2UsXHJcblxyXG4gIGhpZGVNYXRjaGVzRm9yQ29tcGxldGVkTW92ZXM6IGZhbHNlLFxyXG4gIGRvTm90S2lsbExpc3Q6ICcnLFxyXG4gIGVuYWJsZUJpb0NvbXByZXNzb3I6IGZhbHNlLFxyXG4gIG1heENvbXByZXNzZWRDaGFyYWN0ZXJzOiAyNTAsXHJcbiAgbWF4Q29tcHJlc3NlZExpbmVzOiAxMCxcclxuXHJcbiAgY3VycmVudEdvbGRTZW50VG90YWw6IDAsXHJcbiAga2VlcEJ1ZmZMb2c6IGZhbHNlLFxyXG4gIGJ1ZmZMb2c6ICcnLFxyXG5cclxuICBlbmFibGVBY3RpdmVCb3VudHlMaXN0OiBmYWxzZSxcclxuICBib3VudHlMaXN0UmVmcmVzaFRpbWU6IDMwMCxcclxuICBlbmFibGVXYW50ZWRMaXN0OiBmYWxzZSxcclxuICB3YW50ZWROYW1lczogJycsXHJcbiAgYndOZWVkc1JlZnJlc2g6IHRydWUsXHJcblxyXG4gIGZzYm94bG9nOiBmYWxzZSxcclxuICBmc2JveGNvbnRlbnQ6ICcnLFxyXG4gIGl0ZW1SZWNpcGllbnQ6ICcnLFxyXG4gIHF1aWNrTGlua3M6ICdbXScsXHJcbiAgZW5hYmxlQXR0YWNrSGVscGVyOiBmYWxzZSxcclxuICBtaW5Hcm91cExldmVsOiAxLFxyXG4gIGNvbWJhdEV2YWx1YXRvckJpYXM6IDAsXHJcbiAgaHVudGluZ01vZGU6IGZhbHNlLFxyXG4gIGVuYWJsZWRIdW50aW5nTW9kZTogJzEnLFxyXG4gIGhpZGVSZWxpY09mZmxpbmU6IGZhbHNlLFxyXG5cclxuICBlbnRlckZvclNlbmRNZXNzYWdlOiBmYWxzZSxcclxuICB0cmFja0tpbGxTdHJlYWs6IGZhbHNlLFxyXG4gIHN0b3JlTGFzdFF1ZXN0UGFnZTogZmFsc2UsXHJcbiAgYWRkQXR0YWNrTGlua1RvTG9nOiBmYWxzZSxcclxuICBzaG93U3RhdEJvbnVzVG90YWw6IGZhbHNlLFxyXG5cclxuICBuZXdHdWlsZExvZ0hpc3RvcnlQYWdlczogMyxcclxuICB1c2VOZXdHdWlsZExvZzogZmFsc2UsXHJcbiAgZW5oYW5jZUNoYXRUZXh0RW50cnk6IGZhbHNlLFxyXG5cclxuICBhamF4aWZ5UmFua0NvbnRyb2xzOiBmYWxzZSxcclxuXHJcbiAgZW5hYmxlTWF4R3JvdXBTaXplVG9Kb2luOiBmYWxzZSxcclxuICBtYXhHcm91cFNpemVUb0pvaW46IDExLFxyXG5cclxuICBlbmFibGVUZW1wbGVBbGVydDogZmFsc2UsXHJcbiAgZW5hYmxlVXBncmFkZUFsZXJ0OiBmYWxzZSxcclxuICBlbmFibGVDb21wb3NpbmdBbGVydDogZmFsc2UsXHJcbiAgYXV0b0ZpbGxNaW5CaWRQcmljZTogZmFsc2UsXHJcbiAgc2hvd1B2UFN1bW1hcnlJbkxvZzogZmFsc2UsXHJcbiAgZW5hYmxlUXVpY2tEcmluazogZmFsc2UsXHJcbiAgZW5oYW5jZU9ubGluZURvdHM6IGZhbHNlLFxyXG4gIGhpZGVCdWZmU2VsZWN0ZWQ6IGZhbHNlLFxyXG4gIGhpZGVIZWxwZXJNZW51OiBmYWxzZSxcclxuICBrZWVwSGVscGVyTWVudU9uU2NyZWVuOiB0cnVlLFxyXG4gIGRyYWdnYWJsZUhlbHBlck1lbnU6IGZhbHNlLFxyXG4gIHF1aWNrTGlua3NUb3BQeDogMjIsXHJcbiAgcXVpY2tMaW5rc0xlZnRQeDogMCxcclxuICBkcmFnZ2FibGVRdWlja0xpbmtzOiBmYWxzZSxcclxuICBzaG93TmV4dFF1ZXN0U3RlcHM6IHRydWUsXHJcblxyXG4gIHNob3dSZWNhbGxNZXNzYWdlczogdHJ1ZSxcclxuICBzaG93UmVsaWNNZXNzYWdlczogdHJ1ZSxcclxuICBzaG93TWVyY2VuYXJ5TWVzc2FnZXM6IHRydWUsXHJcbiAgc2hvd0dyb3VwQ29tYmF0TWVzc2FnZXM6IHRydWUsXHJcbiAgc2hvd0RvbmF0aW9uTWVzc2FnZXM6IHRydWUsXHJcbiAgc2hvd1JhbmtpbmdNZXNzYWdlczogdHJ1ZSxcclxuICBzaG93R3ZHTWVzc2FnZXM6IHRydWUsXHJcbiAgc2hvd1RhZ2dpbmdNZXNzYWdlczogdHJ1ZSxcclxuICBzaG93VGl0YW5NZXNzYWdlczogdHJ1ZSxcclxuXHJcbiAgc2hvd1F1aWNrRHJvcExpbmtzOiBmYWxzZSxcclxuXHJcbiAgaW52ZW50b3J5TWluTHZsOiAxLFxyXG4gIGludmVudG9yeU1heEx2bDogOTk5OSxcclxuICBvbmxpbmVQbGF5ZXJNaW5Mdmw6IDEsXHJcbiAgb25saW5lUGxheWVyTWF4THZsOiA5OTk5LFxyXG4gIGFyZW5hTWluTHZsOiAxLFxyXG4gIGFyZW5hTWF4THZsOiA5OTk5LFxyXG4gIHNob3dNb25zdGVyTG9nOiBmYWxzZSxcclxuICBsYXN0VGVtcGxlQ2hlY2s6IDAsXHJcbiAgbmVlZFRvUHJheTogZmFsc2UsXHJcbiAgbGFzdENoYXRDaGVjazogJzAnLFxyXG4gIGxhc3RHdWlsZExvZ0NoZWNrOiAnMCcsXHJcbiAgbGFzdE91dEJveENoZWNrOiAnMCcsXHJcbiAgbGFzdFBsYXllckxvZ0NoZWNrOiAnMCcsXHJcbiAgc2hvd0FkbWluOiBmYWxzZSxcclxuICBhbGxpZXN0b3RhbDogMCxcclxuICBlbmVtaWVzdG90YWw6IDAsXHJcbiAgZm9vdHByaW50czogZmFsc2UsXHJcbiAgaGlkZU5vblBsYXllckd1aWxkTG9nTWVzc2FnZXM6IGZhbHNlLFxyXG4gIGxpc3RPZkFsbGllczogJycsXHJcbiAgbGlzdE9mRW5lbWllczogJycsXHJcbiAgY29udGFjdExpc3Q6ICcnLFxyXG4gIGxhc3RVcGdyYWRlQ2hlY2s6IDAsXHJcbiAgbmVlZFRvRG9VcGdyYWRlOiBmYWxzZSxcclxuICBjaGFyYWN0ZXJWaXJ0dWFsTGV2ZWw6IDAsXHJcbiAgZ3VpbGRMb2dvQ29udHJvbDogZmFsc2UsXHJcbiAgc3RhdGlzdGljc0NvbnRyb2w6IGZhbHNlLFxyXG4gIGd1aWxkU3RydWN0dXJlQ29udHJvbDogZmFsc2UsXHJcbiAgbGFzdE1lbWJyTGlzdENoZWNrOiAwLFxyXG4gIGRpc2FibGVJdGVtQ29sb3Jpbmc6IHRydWUsXHJcbiAgc2hvd1F1aWNrU2VuZExpbmtzOiBmYWxzZSxcclxuICBuZWVkVG9Db21wb3NlOiBmYWxzZSxcclxuICBsYXN0Q29tcG9zZUNoZWNrOiAwLFxyXG4gIGxhc3RPbmxpbmVDaGVjazogMCxcclxuICBib3VudHlMaXN0OiAnJyxcclxuICB3YW50ZWRMaXN0OiAnJyxcclxuICBpbnZlbnRvcnlDaGVja2VkRWxlbWVudHM6IHtcclxuICAgICcwJzogMSxcclxuICAgICcxJzogMSxcclxuICAgICcyJzogMSxcclxuICAgICczJzogMSxcclxuICAgICc0JzogMSxcclxuICAgICc1JzogMSxcclxuICAgICc2JzogMSxcclxuICAgICc3JzogMSxcclxuICAgICc4JzogMSxcclxuICAgICcxMDAnOiAxLFxyXG4gICAgJzEwMSc6IDEsXHJcbiAgICAnMTAyJzogMSxcclxuICAgICcxMDMnOiAxLFxyXG4gICAgJzEwNCc6IDEsXHJcbiAgICAnMTA1JzogMSxcclxuICAgICcxMDYnOiAxXHJcbiAgfSxcclxuICBsb3dlc3RMZXZlbEluVG9wMjUwOiAwLFxyXG5cclxuICBxdWlja01zZzogJ1tcIlRoYW5rIHlvdSB2ZXJ5IG11Y2ggXl9eXCIsXCJIYXBweSBodW50aW5nLCB7cGxheWVybmFtZX1cIl0nLFxyXG5cclxuICBzZW5kQ2xhc3NlczogJ1tcIkNvbXBvc2VkIFBvdHNcIiwgXCIxMzY5OVwiXSwgW1wiQW1iZXJcIiwgXCI1NjExXCJdLCAnICtcclxuICAgICdbXCJBbWV0aHlzdCBXZWVkXCIsIFwiOTE0NVwiXSwgW1wiQmxvb2QgQmxvb21cIiwgXCI1NTYzXCJdLCAnICtcclxuICAgICdbXCJDZXJ1bGVhbiBSb3NlXCIsIFwiOTE1NlwiXSwgW1wiQ29sZW9wdGVyYSBCb2R5XCIsIFwiOTI4N1wiXSwgJyArXHJcbiAgICAnW1wiRGFyayBTaGFkZVwiLCBcIjU1NjRcIl0sIFtcIkRlYXRoYmxvb21cIiwgXCI5MTQwXCJdLCAnICtcclxuICAgICdbXCJEZWF0aGx5IE1vbGRcIiwgXCI5MTUzXCJdLCBbXCJHcmVlbnNraW5cXHUwMEEwRnVuZ3VzXCIsIFwiOTE0OFwiXSwgJyArXHJcbiAgICAnW1wiSGVmZmxlXCIsIFwiNTU2NVwiXSwgW1wiSmFkZW1hcmVcIiwgXCI1NTY2XCJdLCAnICtcclxuICAgICdbXCJSdWJ5IFRoaXN0bGVcIiwgXCI5MTQzXCJdLCBbXCJUb2FkIENvcnBzZVwiLFwiOTI4OFwiXSwgJyArXHJcbiAgICAnW1wiVHJpbmV0dGxlXCIsIFwiNTU2N1wiXSwgW1wiVmlyaWRpYW5cXHUwMEEwVmluZVwiLCBcIjkxNTFcIl0sICcgK1xyXG4gICAgJ1tcIk1vcnRhciAmIFBlc3RsZVwiLCBcIjkxNTdcIl0sIFtcIkJlZXRsZSBKdWljZVwiLCBcIjkxNThcIl0nLFxyXG5cclxuICBxdWlja1NlYXJjaExpc3Q6XHJcbiAgICAnW3tcImNhdGVnb3J5XCI6XCJQbGFudHNcIixcInNlYXJjaG5hbWVcIjpcIkFtYmVyXCIsXCJuaWNrbmFtZVwiOlwiXCJ9LCcgK1xyXG4gICAgJ3tcImNhdGVnb3J5XCI6XCJQbGFudHNcIixcInNlYXJjaG5hbWVcIjpcIkJsb29kIEJsb29tXCIsXCJuaWNrbmFtZVwiOlwiXCJ9LCcgK1xyXG4gICAgJ3tcImNhdGVnb3J5XCI6XCJQbGFudHNcIixcInNlYXJjaG5hbWVcIjpcIkphZGVtYXJlXCIsXCJuaWNrbmFtZVwiOlwiXCJ9LCcgK1xyXG4gICAgJ3tcImNhdGVnb3J5XCI6XCJQbGFudHNcIixcInNlYXJjaG5hbWVcIjpcIkRhcmsgU2hhZGVcIixcIm5pY2tuYW1lXCI6XCJcIn0sJyArXHJcbiAgICAne1wiY2F0ZWdvcnlcIjpcIlBsYW50c1wiLFwic2VhcmNobmFtZVwiOlwiVHJpbmV0dGxlXCIsXCJuaWNrbmFtZVwiOlwiXCJ9LCcgK1xyXG4gICAgJ3tcImNhdGVnb3J5XCI6XCJQbGFudHNcIixcInNlYXJjaG5hbWVcIjpcIkhlZmZsZSBXYXJ0XCIsXCJuaWNrbmFtZVwiOlwiXCJ9LCcgK1xyXG4gICAgJ3tcImNhdGVnb3J5XCI6XCJQb3Rpb25zXCIsXCJzZWFyY2huYW1lXCI6XCJTbHVkZ2UgQnJld1wiLCcgK1xyXG4gICAgICAnXCJuaWNrbmFtZVwiOlwiREMgMjAwXCIsXCJkaXNwbGF5T25BSFwiOnRydWV9LCcgK1xyXG4gICAgJ3tcImNhdGVnb3J5XCI6XCJQb3Rpb25zXCIsXCJzZWFyY2huYW1lXCI6XCJQb3Rpb24gb2YgQmxhY2sgRGVhdGhcIiwnICtcclxuICAgICAgJ1wibmlja25hbWVcIjpcIkRDIDIyNVwiLFwiZGlzcGxheU9uQUhcIjp0cnVlfSwnICtcclxuICAgICd7XCJjYXRlZ29yeVwiOlwiUG90aW9uc1wiLFwic2VhcmNobmFtZVwiOlwiUG90aW9uIG9mIEFpZFwiLCcgK1xyXG4gICAgICAnXCJuaWNrbmFtZVwiOlwiQXNzaXN0XCIsXCJkaXNwbGF5T25BSFwiOnRydWV9LCcgK1xyXG4gICAgJ3tcImNhdGVnb3J5XCI6XCJQb3Rpb25zXCIsXCJzZWFyY2huYW1lXCI6XCJQb3Rpb24gb2YgU3VwcmVtZSBEb3VibGluZ1wiLCcgK1xyXG4gICAgICAnXCJuaWNrbmFtZVwiOlwiREIgNDUwXCIsXCJkaXNwbGF5T25BSFwiOnRydWV9LCcgK1xyXG4gICAgJ3tcImNhdGVnb3J5XCI6XCJQb3Rpb25zXCIsXCJzZWFyY2huYW1lXCI6XCJQb3Rpb24gb2YgQWNjZWxlcmF0aW9uXCIsJyArXHJcbiAgICAgICdcIm5pY2tuYW1lXCI6XCJEQiA1MDBcIixcImRpc3BsYXlPbkFIXCI6dHJ1ZX0sJyArXHJcbiAgICAne1wiY2F0ZWdvcnlcIjpcIlBvdGlvbnNcIixcInNlYXJjaG5hbWVcIjpcIlBvdGlvbiBvZiBMZXNzZXIgRGVhdGggRGVhbGVyXCIsJyArXHJcbiAgICAgICdcIm5pY2tuYW1lXCI6XCJERFwiLFwiZGlzcGxheU9uQUhcIjp0cnVlfSwnICtcclxuICAgICd7XCJjYXRlZ29yeVwiOlwiUG90aW9uc1wiLFwic2VhcmNobmFtZVwiOlwiUnVuaWMgUG90aW9uXCIsJyArXHJcbiAgICAgICdcIm5pY2tuYW1lXCI6XCJGSSAyNTBcIixcImRpc3BsYXlPbkFIXCI6dHJ1ZX0sJyArXHJcbiAgICAne1wiY2F0ZWdvcnlcIjpcIlBvdGlvbnNcIixcInNlYXJjaG5hbWVcIjpcIlBvdGlvbiBvZiB0aGUgQm9va3dvcm1cIiwnICtcclxuICAgICAgJ1wibmlja25hbWVcIjpcIkxpYiAyMjVcIixcImRpc3BsYXlPbkFIXCI6dHJ1ZX0sJyArXHJcbiAgICAne1wiY2F0ZWdvcnlcIjpcIlBvdGlvbnNcIixcInNlYXJjaG5hbWVcIjpcIlBvdGlvbiBvZiBUcnV0aFwiLCcgK1xyXG4gICAgICAnXCJuaWNrbmFtZVwiOlwiRVcgMWtcIixcImRpc3BsYXlPbkFIXCI6dHJ1ZX0sJyArXHJcbiAgICAne1wiY2F0ZWdvcnlcIjpcIlBvdGlvbnNcIixcInNlYXJjaG5hbWVcIjpcIkR1bGwgRWRnZVwiLCcgK1xyXG4gICAgICAnXCJuaWNrbmFtZVwiOlwiREUgMjVcIixcImRpc3BsYXlPbkFIXCI6dHJ1ZX0sJyArXHJcbiAgICAne1wiY2F0ZWdvcnlcIjpcIlBvdGlvbnNcIixcInNlYXJjaG5hbWVcIjpcIk5vdGNoZWQgQmxhZGVcIiwnICtcclxuICAgICAgJ1wibmlja25hbWVcIjpcIkRFIDgwXCIsXCJkaXNwbGF5T25BSFwiOnRydWV9LCcgK1xyXG4gICAgJ3tcImNhdGVnb3J5XCI6XCJQb3Rpb25zXCIsXCJzZWFyY2huYW1lXCI6XCJQb3Rpb24gb2YgRGVhdGhcIiwnICtcclxuICAgICAgJ1wibmlja25hbWVcIjpcIkRXIDEyNVwiLFwiZGlzcGxheU9uQUhcIjp0cnVlfSwnICtcclxuICAgICd7XCJjYXRlZ29yeVwiOlwiUG90aW9uc1wiLFwic2VhcmNobmFtZVwiOlwiUG90aW9uIG9mIERlY2F5XCIsJyArXHJcbiAgICAgICdcIm5pY2tuYW1lXCI6XCJXSSAxNTBcIixcImRpc3BsYXlPbkFIXCI6dHJ1ZX0sJyArXHJcbiAgICAne1wiY2F0ZWdvcnlcIjpcIlBvdGlvbnNcIixcInNlYXJjaG5hbWVcIjpcIlBvdGlvbiBvZiBGYXRhbGl0eVwiLCcgK1xyXG4gICAgICAnXCJuaWNrbmFtZVwiOlwiV0kgMzUwXCIsXCJkaXNwbGF5T25BSFwiOnRydWV9LCcgK1xyXG4gICAgJ3tcImNhdGVnb3J5XCI6XCJQb3Rpb25zXCIsXCJzZWFyY2huYW1lXCI6XCJQb3Rpb24gb2YgQW5uaWhpbGF0aW9uXCIsJyArXHJcbiAgICAgICdcIm5pY2tuYW1lXCI6XCJEVyAxNTBcIixcImRpc3BsYXlPbkFIXCI6dHJ1ZX0sJyArXHJcbiAgICAne1wiY2F0ZWdvcnlcIjpcIlBvdGlvbnNcIixcInNlYXJjaG5hbWVcIjpcIlBvdGlvbiBvZiB0aGUgV2lzZVwiLCcgK1xyXG4gICAgICAnXCJuaWNrbmFtZVwiOlwiTGliIDIwMFwiLFwiZGlzcGxheU9uQUhcIjp0cnVlfSwnICtcclxuICAgICd7XCJjYXRlZ29yeVwiOlwiUG90aW9uc1wiLFwic2VhcmNobmFtZVwiOlwiUG90aW9uIG9mIFNoYXR0ZXJpbmdcIiwnICtcclxuICAgICAgJ1wibmlja25hbWVcIjpcIlNBXCIsXCJkaXNwbGF5T25BSFwiOnRydWV9LCcgK1xyXG4gICAgJ3tcImNhdGVnb3J5XCI6XCJQb3Rpb25zXCIsXCJzZWFyY2huYW1lXCI6XCJEcmFnb25zIEJsb29kIFBvdGlvblwiLCcgK1xyXG4gICAgICAnXCJuaWNrbmFtZVwiOlwiWksgMjAwXCIsXCJkaXNwbGF5T25BSFwiOnRydWV9LCcgK1xyXG4gICAgJ3tcImNhdGVnb3J5XCI6XCJQb3Rpb25zXCIsXCJzZWFyY2huYW1lXCI6XCJCZXJzZXJrZXJzIFBvdGlvblwiLCcgK1xyXG4gICAgICAnXCJuaWNrbmFtZVwiOlwiWksgMzAwXCIsXCJkaXNwbGF5T25BSFwiOnRydWV9LCcgK1xyXG4gICAgJ3tcImNhdGVnb3J5XCI6XCJQb3Rpb25zXCIsXCJzZWFyY2huYW1lXCI6XCJQb3Rpb24gb2YgRnVyeVwiLCcgK1xyXG4gICAgICAnXCJuaWNrbmFtZVwiOlwiWksgMzUwXCIsXCJkaXNwbGF5T25BSFwiOnRydWV9LCcgK1xyXG4gICAgJ3tcImNhdGVnb3J5XCI6XCJQb3Rpb25zXCIsXCJzZWFyY2huYW1lXCI6XCJQb3Rpb24gb2YgU3VwcmVtZSBMdWNrXCIsJyArXHJcbiAgICAgICdcIm5pY2tuYW1lXCI6XCJGSSAxa1wiLFwiZGlzcGxheU9uQUhcIjp0cnVlfV0nLFxyXG5cclxuICBhcmVuYU1vdmVzOiAnW10nLFxyXG4gIGFyZW5hTWF0Y2hlczogJ1tdJyxcclxuICBDb21iYXRMb2c6ICcnLFxyXG4gIGhpZGVDaGFtcGlvbnNHcm91cDogZmFsc2UsXHJcbiAgaGlkZUVsaXRlc0dyb3VwOiBmYWxzZSxcclxuICBoaWRlU0VHcm91cDogZmFsc2UsXHJcbiAgaGlkZVRpdGFuR3JvdXA6IGZhbHNlLFxyXG4gIGhpZGVMZWdlbmRhcnlHcm91cDogZmFsc2UsXHJcbiAgZGlzYWJsZURlYWN0aXZhdGVQcm9tcHRzOiBmYWxzZSxcclxuICBtb3ZlQ29tcG9zaW5nQnV0dG9uczogZmFsc2UsXHJcbiAgZXhwYW5kTWVudU9uS2V5UHJlc3M6IGZhbHNlLFxyXG4gIGRpc2FibGVCcmVha2Rvd25Qcm9tcHRzOiBmYWxzZSxcclxuICBjb2xsYXBzZU5ld3NBcmNoaXZlOiBmYWxzZSxcclxuICBsYXN0bXlHdWlsZExvZ0NoZWNrOiAwLFxyXG4gIGhpZGVTdWJMdmxDcmVhdHVyZTogZmFsc2UsXHJcbiAgaGlkZVBsYXllckFjdGlvbnM6IGZhbHNlLFxyXG4gIGV4dHJhUHJvZmlsZTogJycsXHJcbiAgdGV4dFRvU2VhcmNoRm9yOiAnJyxcclxuICBsYXN0TGFkZGVyUmVzZXQ6IDAsXHJcbiAgZGlzYWJsZVF1aWNrV2VhclByb21wdHM6IGZhbHNlLFxyXG4gIGVuYWJsZUd1aWxkQWN0aXZpdHlUcmFja2VyOiBmYWxzZVxyXG59O1xyXG5cclxuZXhwb3J0IHZhciByYXJpdHkgPSBbXHJcbiAge2NvbG91cjogJyNmZmZmZmYnLCBjbGFzOiAnZnNoQ29tbW9uJ30sXHJcbiAge2NvbG91cjogJyMwMDk5ZmYnLCBjbGFzOiAnZnNoUmFyZSd9LFxyXG4gIHtjb2xvdXI6ICcjY2MwMGZmJywgY2xhczogJ2ZzaFVuaXF1ZSd9LFxyXG4gIHtjb2xvdXI6ICcjZmZmZjMzJywgY2xhczogJ2ZzaExlZ2VuZGFyeSd9LFxyXG4gIHtjb2xvdXI6ICcjY2MwMDMzJywgY2xhczogJ2ZzaFN1cGVyJ30sXHJcbiAge2NvbG91cjogJyM2NjMzZmYnLCBjbGFzOiAnZnNoQ3J5c3RhbCd9LFxyXG4gIHtjb2xvdXI6ICcjMDA5OTAwJywgY2xhczogJ2ZzaEVwaWMnfVxyXG5dO1xyXG5cclxuZXhwb3J0IHZhciBwbGFjZXMgPSBbJ2ZpcnN0JywgJ3NlY29uZCcsICd0aGlyZCcsICdmb3VydGgnLCAnZmlmdGgnLCAnc2l4dGgnLFxyXG4gICdzZXZlbnRoJywgJ2VpZ2h0aCcsICduaW50aCcsICd0ZW50aCcsICdlbGV2ZW50aCcsICd0d2VsZnRoJywgJ3RoaXJ0ZWVudGgnLFxyXG4gICdmb3VydGVlbnRoJ107XHJcblxyXG5leHBvcnQgdmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsXHJcbiAgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddO1xyXG5cclxuZXhwb3J0IHZhciBtZXJjUkUgPSBbXHJcbiAgLzx0ZD5BdHRhY2s6PFxcL3RkPjx0ZD4oXFxkKyk8XFwvdGQ+LyxcclxuICAvPHRkPkRlZmVuc2U6PFxcL3RkPjx0ZD4oXFxkKyk8XFwvdGQ+LyxcclxuICAvPHRkPkFybW9yOjxcXC90ZD48dGQ+KFxcZCspPFxcL3RkPi8sXHJcbiAgLzx0ZD5EYW1hZ2U6PFxcL3RkPjx0ZD4oXFxkKyk8XFwvdGQ+LyxcclxuICAvPHRkPkhQOjxcXC90ZD48dGQ+KFxcZCspPFxcL3RkPi9cclxuXTtcclxuXHJcbmV4cG9ydCB2YXIgbGFzdEFjdGl2aXR5UkUgPVxyXG4gIC88dGQ+TGFzdCBBY3Rpdml0eTo8XFwvdGQ+PHRkPihcXGQrKWQgKFxcZCspaCAoXFxkKyltIChcXGQrKXM8XFwvdGQ+LztcclxuXHJcbmV4cG9ydCB2YXIgaXRlbVJFID0gL2l0ZW1faWQ9KFxcZCspJmludl9pZD0oXFxkKykvO1xyXG5leHBvcnQgdmFyIGRlZmVuZGVyTXVsdGlwbGllciA9IDAuMjtcclxuZXhwb3J0IHZhciBub3cgPSBEYXRlLm5vdygpO1xyXG5leHBvcnQgdmFyIG5vd1NlY3MgPSBNYXRoLmZsb29yKG5vdyAvIDEwMDApO1xyXG5leHBvcnQgdmFyIG5ld0d1aWxkTG9nTG9jID0gJz9jbWQ9bm90ZXBhZCZibGFuaz0xJnN1YmNtZD1uZXdndWlsZGxvZyc7XHJcbmV4cG9ydCB2YXIgbmV3R3VpbGRMb2dVcmwgPSAnaW5kZXgucGhwJyArIG5ld0d1aWxkTG9nTG9jO1xyXG4iLCJpbXBvcnQgY2FsZiBmcm9tICcuL2NhbGYnO1xyXG5pbXBvcnQgcmV0cnlBamF4IGZyb20gJy4uL2FqYXgvcmV0cnlBamF4JztcclxuaW1wb3J0IHtkZWZhdWx0cywgbW9udGhzLCBub3dTZWNzfSBmcm9tICcuL2RhdGFPYmonO1xyXG5cclxuZXhwb3J0IHZhciBzZXJ2ZXIgPSBkb2N1bWVudC5sb2NhdGlvbi5wcm90b2NvbCArICcvLycgK1xyXG4gIGRvY3VtZW50LmxvY2F0aW9uLmhvc3QgKyAnLyc7XHJcbmV4cG9ydCB2YXIgaW1hZ2VTZXJ2ZXIgPSB3aW5kb3cuSENTICYmIHdpbmRvdy5IQ1MuZGVmaW5lcyAmJlxyXG4gIHdpbmRvdy5IQ1MuZGVmaW5lcy5maWxlc2VydmVyICYmXHJcbiAgd2luZG93LkhDUy5kZWZpbmVzLmZpbGVzZXJ2ZXIuc2xpY2UoMCwgLTEpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZhbGxiYWNrKGEsIGIpIHtcclxuICByZXR1cm4gYSB8fCBiO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWUobmFtZSkge1xyXG4gIC8vI2lmIF9ERVYgIC8vICBObyBkZWZhdWx0IHNldHRpbmcgYXZhaWxhYmxlXHJcbiAgaWYgKHR5cGVvZiBkZWZhdWx0c1tuYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXHJcbiAgICBjb25zb2xlLmxvZyhuYW1lLCBkZWZhdWx0c1tuYW1lXSk7XHJcbiAgfVxyXG4gIC8vI2VuZGlmXHJcbiAgcmV0dXJuIEdNX2dldFZhbHVlKG5hbWUsIGRlZmF1bHRzW25hbWVdKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmV2aXZlcihrZXksIHZhbHVlKSB7XHJcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgIHZhciBhID1cclxuICAgICAgL14oXFxkezR9KS0oXFxkezJ9KS0oXFxkezJ9KVQoXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KD86XFwuXFxkKik/KVokL1xyXG4gICAgICAgIC5leGVjKHZhbHVlKTtcclxuICAgIGlmIChhKSB7XHJcbiAgICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyhOdW1iZXIoYVsxXSksIE51bWJlcihhWzJdKSAtIDEsIE51bWJlcihhWzNdKSxcclxuICAgICAgICBOdW1iZXIoYVs0XSksIE51bWJlcihhWzVdKSwgTnVtYmVyKGFbNl0pKSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB2YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlSlNPTihuYW1lKSB7XHJcbiAgdmFyIHJlc3VsdEpTT04gPSBnZXRWYWx1ZShuYW1lKTtcclxuICB2YXIgcmVzdWx0O1xyXG4gIGlmIChyZXN1bHRKU09OKSB7cmVzdWx0ID0gSlNPTi5wYXJzZShyZXN1bHRKU09OLCByZXZpdmVyKTt9XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFZhbHVlSlNPTihuYW1lLCB2YWx1ZSkge1xyXG4gIEdNX3NldFZhbHVlKG5hbWUsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRWYWx1ZShuYW1lLCB2YWx1ZSkge1xyXG4gIEdNX3NldFZhbHVlKG5hbWUsIHZhbHVlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VGFyZ2V0KGRvYykge1xyXG4gIGlmIChkb2MgaW5zdGFuY2VvZiBIVE1MRG9jdW1lbnQpIHtyZXR1cm4gZG9jO31cclxuICByZXR1cm4gZG9jdW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhdGNoWFBhdGgoeHBhdGgpIHtcclxuICBpZiAoeHBhdGguaW5kZXhPZignLycpID09PSAwKSB7XHJcbiAgICByZXR1cm4gJy4nICsgeHBhdGg7XHJcbiAgICAvLyBUT0RPIHRoaXMgaXMgbGlrZWx5IHRvIGJlIGJhZFxyXG4gICAgLy8gdGhpcyBpcyBhIGNocm9tZSBmaXggLSBuZWVkcyBhIC4vLyBmb3IgeHBhdGhcclxuICAgIC8vIHdoZXJlIGFzIGZpcmVmb3ggY2FuIGZ1bmN0aW9uIHdpdGhvdXQgaXQuXHJcbiAgICAvLyBmaXJlZm94IHN0aWxsIHdvcmtzIHdpdGggLi8vXHJcbiAgfVxyXG4gIHJldHVybiB4cGF0aDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmROb2Rlcyh4cGF0aCwgZG9jKSB7XHJcbiAgdmFyIF94cGF0aCA9IHBhdGNoWFBhdGgoeHBhdGgpO1xyXG4gIHZhciBub2RlcyA9IFtdO1xyXG4gIHZhciB0YXJnZXQ7XHJcbiAgLy8gV2UgbWF5IGhhdmUgcGFzc2VkIGluIGEgSFRNTERvY3VtZW50IG9iamVjdCBhcyB0aGUgY29udGV4dFxyXG4gIC8vIFNlZSBjcmVhdGVEb2N1bWVudCB3aXRoIERPTVBhcnNlciBiZWxvd1xyXG4gIC8vIFRoaXMgb25seSBtYXR0ZXJzIGluIEZpcmVmb3guIGV2YWx1YXRlIHdpbGwgZmFpbCBzaWxlbnRseSBpZlxyXG4gIC8vIHRoZSBjb250ZXh0IGlzIG5vdCBwYXJ0IG9mIHRoZSBjYWxsaW5nIG9iamVjdC5cclxuICB2YXIgX2RvYyA9IGZhbGxiYWNrKGRvYywgZG9jdW1lbnQpO1xyXG4gIHRhcmdldCA9IGdldFRhcmdldChfZG9jKTtcclxuICB2YXIgZmluZFEgPSB0YXJnZXQuZXZhbHVhdGUoX3hwYXRoLCBfZG9jLCBudWxsLFxyXG4gICAgWFBhdGhSZXN1bHQuVU5PUkRFUkVEX05PREVfU05BUFNIT1RfVFlQRSwgbnVsbCk7XHJcbiAgaWYgKGZpbmRRLnNuYXBzaG90TGVuZ3RoID09PSAwKSB7cmV0dXJuIG51bGw7fVxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZmluZFEuc25hcHNob3RMZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgbm9kZXMucHVzaChmaW5kUS5zbmFwc2hvdEl0ZW0oaSkpO1xyXG4gIH1cclxuICByZXR1cm4gbm9kZXM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kTm9kZSh4cGF0aCwgZG9jKSB7XHJcbiAgdmFyIG5vZGVzID0gZmluZE5vZGVzKHhwYXRoLCBkb2MpO1xyXG4gIGlmICghbm9kZXMpIHtyZXR1cm4gbnVsbDt9XHJcbiAgcmV0dXJuIG5vZGVzWzBdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRG9jdW1lbnQoZGV0YWlscykge1xyXG4gIC8vIFVzZSBET01QYXJzZXIgdG8gcHJldmVudCBpbWcgc3JjIHRhZ3MgZG93bmxvYWRpbmdcclxuICB2YXIgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xyXG4gIHZhciBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGRldGFpbHMsICd0ZXh0L2h0bWwnKTtcclxuICByZXR1cm4gZG9jO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24geG1saHR0cCh0aGVVcmwsIGZ1bmMsIHRoZUNhbGxiYWNrKSB7XHJcbiAgcmV0dXJuIHJldHJ5QWpheCh0aGVVcmwpLmRvbmUoZnVuY3Rpb24ocmVzcG9uc2VEZXRhaWxzKSB7XHJcbiAgICBpZiAoZnVuYykge1xyXG4gICAgICBmdW5jKHJlc3BvbnNlRGV0YWlscywgdGhlQ2FsbGJhY2spO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW50VmFsdWUodGhlVGV4dCkge1xyXG4gIGlmICghdGhlVGV4dCkge3JldHVybiAwO31cclxuICByZXR1cm4gcGFyc2VJbnQodGhlVGV4dC5yZXBsYWNlKC8sL2csICcnKSwgMTApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW50RnJvbVJlZ0V4cCh0aGVUZXh0LCByeFNlYXJjaCkge1xyXG4gIHZhciByZXN1bHQ7XHJcbiAgdmFyIG1hdGNoZXMgPSB0aGVUZXh0LnJlcGxhY2UoLywvZywgJycpLm1hdGNoKHJ4U2VhcmNoKTtcclxuICBpZiAobWF0Y2hlcykge1xyXG4gICAgcmVzdWx0ID0gcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXN1bHQgPSAwO1xyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkQ29tbWFzKHgpIHtcclxuICByZXR1cm4geC50b1N0cmluZygpLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csICcsJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VGV4dFRvSHRtbChpbnB1dFRleHQpIHtcclxuICByZXR1cm4gaW5wdXRUZXh0XHJcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0JylcclxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3QnKVxyXG4gICAgLnJlcGxhY2UoL1xcbi9nLCAnPGJyPicpXHJcbiAgICAucmVwbGFjZSgvXFxbXFwvKFthLXpdKVxcXS9nLCAnPC8kMT4nKVxyXG4gICAgLnJlcGxhY2UoL1xcWyhbYS16XSlcXF0vZywgJzwkMT4nKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRGF0ZUFzVGltZXN0YW1wKHRleHREYXRlKSB7XHJcbiAgdmFyIGRhdGVBcnkgPSB0ZXh0RGF0ZS5zcGxpdCgvWzogL1tdLyk7XHJcbiAgcmV0dXJuIERhdGUuVVRDKE51bWJlcihkYXRlQXJ5WzRdKSwgbW9udGhzLmluZGV4T2YoZGF0ZUFyeVszXSksXHJcbiAgICBOdW1iZXIoZGF0ZUFyeVsyXSksIE51bWJlcihkYXRlQXJ5WzBdKSwgTnVtYmVyKGRhdGVBcnlbMV0pLCAwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRGF0ZSh0ZXh0RGF0ZSkge1xyXG4gIHJldHVybiBuZXcgRGF0ZShwYXJzZURhdGVBc1RpbWVzdGFtcCh0ZXh0RGF0ZSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlVmlzaWJpbHR5KGV2dCkge1xyXG4gIHZhciBhbkl0ZW1JZCA9IGV2dC50YXJnZXQuZ2V0QXR0cmlidXRlKCdsaW5rdG8nKTtcclxuICB2YXIgYW5JdGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYW5JdGVtSWQpO1xyXG4gIHZhciBjdXJyZW50VmlzaWJpbGl0eSA9IGFuSXRlbS5jbGFzc0xpc3QuY29udGFpbnMoJ2ZzaEhpZGUnKTtcclxuICBhbkl0ZW0uY2xhc3NMaXN0LnRvZ2dsZSgnZnNoSGlkZScpO1xyXG4gIGlmIChjdXJyZW50VmlzaWJpbGl0eSkge1xyXG4gICAgc2V0VmFsdWUoYW5JdGVtSWQsICcnKTtcclxuICB9IGVsc2Uge1xyXG4gICAgc2V0VmFsdWUoYW5JdGVtSWQsICdPTicpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gb3V0cHV0UGFyYW1WYWwocGFyYW0pIHtcclxuICBpZiAodHlwZW9mIHBhcmFtID09PSAndW5kZWZpbmVkJykge3JldHVybiB0cnVlO31cclxuICByZXR1cm4gcGFyYW07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXN0b21VcmxQYXJhbWV0ZXIoc1BhZ2VVUkwsIHNQYXJhbSkge1xyXG4gIHZhciBzVVJMVmFyaWFibGVzID0gc1BhZ2VVUkwuc3BsaXQoJyYnKTtcclxuICB2YXIgc1BhcmFtZXRlck5hbWU7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzVVJMVmFyaWFibGVzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICBzUGFyYW1ldGVyTmFtZSA9IHNVUkxWYXJpYWJsZXNbaV0uc3BsaXQoJz0nKTtcclxuICAgIGlmIChzUGFyYW1ldGVyTmFtZVswXSA9PT0gc1BhcmFtKSB7XHJcbiAgICAgIHJldHVybiBvdXRwdXRQYXJhbVZhbChzUGFyYW1ldGVyTmFtZVsxXSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXJsUGFyYW1ldGVyKHNQYXJhbSkge1xyXG4gIHZhciBzUGFnZVVSTCA9IGRlY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSk7XHJcbiAgcmV0dXJuIGdldEN1c3RvbVVybFBhcmFtZXRlcihzUGFnZVVSTCwgc1BhcmFtKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG91dHB1dEZvcm1hdCh2YWx1ZSwgc3VmZml4KSB7XHJcbiAgaWYgKHZhbHVlID09PSAwKSB7cmV0dXJuICcnO31cclxuICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKSArIHN1ZmZpeDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdExhc3RBY3Rpdml0eShsYXN0X2xvZ2luKSB7XHJcbiAgdmFyIHMgPSBNYXRoLmFicyhub3dTZWNzIC0gbGFzdF9sb2dpbik7XHJcbiAgdmFyIG0gPSBNYXRoLmZsb29yKHMgLyA2MCk7XHJcbiAgcyAlPSA2MDtcclxuICB2YXIgaCA9IE1hdGguZmxvb3IobSAvIDYwKTtcclxuICBtICU9IDYwO1xyXG4gIHZhciBkID0gTWF0aC5mbG9vcihoIC8gMjQpO1xyXG4gIGggJT0gMjQ7XHJcbiAgcmV0dXJuIG91dHB1dEZvcm1hdChkLCAnIGRheXMsICcpICsgb3V0cHV0Rm9ybWF0KGgsICcgaG91cnMsICcpICtcclxuICAgIG91dHB1dEZvcm1hdChtLCAnIG1pbnMsICcpICsgcyArICcgc2Vjcyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFBhdGgob2JqLCBhUGF0aCwgZGVmKSB7XHJcbiAgdmFyIF9vYmogPSBvYmo7XHJcbiAgdmFyIF9wYXRoID0gYVBhdGguc3BsaXQoJy4nKTtcclxuICB2YXIgbGVuID0gX3BhdGgubGVuZ3RoO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcclxuICAgIGlmIChmYWxsYmFjayghX29iaiwgdHlwZW9mIF9vYmogIT09ICdvYmplY3QnKSkge3JldHVybiBkZWY7fVxyXG4gICAgX29iaiA9IF9vYmpbX3BhdGhbaV1dO1xyXG4gIH1cclxuICByZXR1cm4gX29iajtcclxufVxyXG5cclxuZnVuY3Rpb24gcGF0aChvYmosIGFQYXRoLCBkZWYpIHtcclxuICB2YXIgX29iaiA9IGdldFBhdGgob2JqLCBhUGF0aCwgZGVmKTtcclxuICBpZiAodHlwZW9mIF9vYmogPT09ICd1bmRlZmluZWQnKSB7cmV0dXJuIGRlZjt9XHJcbiAgcmV0dXJuIF9vYmo7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNvcnREZXNjKHJlc3VsdCkge1xyXG4gIGlmIChjYWxmLnNvcnRBc2MpIHtyZXR1cm4gcmVzdWx0O31cclxuICByZXR1cm4gLXJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ1NvcnQoYSwgYikge1xyXG4gIHZhciByZXN1bHQgPSAwO1xyXG4gIHZhciBfYSA9IHBhdGgoYSwgY2FsZi5zb3J0QnksICdhJyk7XHJcbiAgdmFyIF9iID0gcGF0aChiLCBjYWxmLnNvcnRCeSwgJ2EnKTtcclxuICBpZiAoX2EudG9Mb3dlckNhc2UoKSA8IF9iLnRvTG93ZXJDYXNlKCkpIHtyZXN1bHQgPSAtMTt9XHJcbiAgaWYgKF9hLnRvTG93ZXJDYXNlKCkgPiBfYi50b0xvd2VyQ2FzZSgpKSB7cmVzdWx0ID0gMTt9XHJcbiAgcmV0dXJuIHNvcnREZXNjKHJlc3VsdCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGludEZyb21TdHJpbmcodmFsKSB7XHJcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICByZXR1cm4gcGFyc2VJbnQodmFsLnJlcGxhY2UoLyx8Iy9nLCAnJyksIDEwKTtcclxuICB9XHJcbiAgcmV0dXJuIHZhbDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG51bWJlclNvcnQoYSwgYikge1xyXG4gIGlmICh0eXBlb2YgYS50eXBlICE9PSAndW5kZWZpbmVkJyAmJiBhLnR5cGUgPiA4KSB7cmV0dXJuIDE7fSAvLyBub24gZXF1aXBtZW50IGl0ZW1zXHJcbiAgaWYgKHR5cGVvZiBhLnR5cGUgIT09ICd1bmRlZmluZWQnICYmIGIudHlwZSA+IDgpIHtyZXR1cm4gLTE7fVxyXG4gIHZhciB2YWx1ZUEgPSBwYXRoKGEsIGNhbGYuc29ydEJ5LCAxKTtcclxuICB2YXIgdmFsdWVCID0gcGF0aChiLCBjYWxmLnNvcnRCeSwgMSk7XHJcbiAgdmFsdWVBID0gaW50RnJvbVN0cmluZyh2YWx1ZUEpO1xyXG4gIHZhbHVlQiA9IGludEZyb21TdHJpbmcodmFsdWVCKTtcclxuICB2YXIgcmVzdWx0ID0gdmFsdWVBIC0gdmFsdWVCO1xyXG4gIHJldHVybiBzb3J0RGVzYyhyZXN1bHQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGVzdFJhbmdlKGFWYWx1ZSwgbWluLCBtYXgpIHtcclxuICB2YXIgdGhlVmFsdWUgPSBwYXJzZUludChhVmFsdWUsIDEwKTtcclxuICBpZiAoIWlzTmFOKHRoZVZhbHVlKSAmJiB0aGVWYWx1ZSA+IG1pbiAmJiB0aGVWYWx1ZSA8IG1heCkge1xyXG4gICAgcmV0dXJuIHRoZVZhbHVlO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRlc3RRdWFudChhVmFsdWUpIHtcclxuICByZXR1cm4gdGVzdFJhbmdlKGFWYWx1ZSwgMCwgMTAwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmRvbUludChfbWluLCBfbWF4KSB7XHJcbiAgdmFyIG1pbiA9IE1hdGguY2VpbChfbWluKTtcclxuICB2YXIgbWF4ID0gTWF0aC5mbG9vcihfbWF4KTtcclxuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm5kKCkge1xyXG4gIHJldHVybiBnZXRSYW5kb21JbnQoMTAwMDAwMDAwMCwgOTk5OTk5OTk5OCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVIdG1sKHVuc2FmZSkge1xyXG4gIHJldHVybiB1bnNhZmVcclxuICAgIC5yZXBsYWNlKC8mL2csICcmYW1wOycpXHJcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXHJcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXHJcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpXHJcbiAgICAucmVwbGFjZSgvJy9nLCAnJiMwMzk7Jyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1NlbGVjdGVkKHZhbCwgdGVzdCkge1xyXG4gIGlmICh2YWwgPT09IHRlc3QpIHtyZXR1cm4gJyBzZWxlY3RlZCc7fVxyXG4gIHJldHVybiAnJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZEJlQXJyYXkocHJlZikge1xyXG4gIHZhciBzdG9yZWQgPSBnZXRWYWx1ZShwcmVmKTtcclxuICBpZiAoc3RvcmVkICYmIHN0b3JlZCAhPT0gJycpIHtyZXR1cm4gc3RvcmVkLnNwbGl0KC9cXHMqLFxccyovKTt9XHJcbiAgcmV0dXJuIFtdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNDaGVja2VkKHByZWYpIHtcclxuICBpZiAocHJlZikge3JldHVybiAnIGNoZWNrZWQnO31cclxuICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYWRaKG4pIHtcclxuICB2YXIgcmV0ID0gbi50b1N0cmluZygpO1xyXG4gIGlmIChuIDwgMTApIHtyZXQgPSAnMCcgKyByZXQ7fVxyXG4gIHJldHVybiByZXQ7XHJcbn1cclxuIiwiLypcclxuQmFzZWQgb25cclxuZmlkZGxlLmpzaGVsbC5uZXQvR1JJRkZuRE9PUi9yN3R2Zy9cclxuKi9cclxuXHJcbnZhciBoZWFwID0gW251bGxdO1xyXG5cclxuZnVuY3Rpb24gY21wKGksIGopIHtcclxuICByZXR1cm4gaGVhcFtpXSAmJiBoZWFwW2ldLnByaW9yaXR5IDwgaGVhcFtqXS5wcmlvcml0eTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3dwKGksIGopIHtcclxuICB2YXIgdGVtcCA9IGhlYXBbaV07XHJcbiAgaGVhcFtpXSA9IGhlYXBbal07XHJcbiAgaGVhcFtqXSA9IHRlbXA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGNDaGlsZEluZGV4KGxlZnRIaWdoZXIsIGkpIHtcclxuICBpZiAobGVmdEhpZ2hlcikge3JldHVybiBpICogMjt9XHJcbiAgcmV0dXJuIGkgKiAyICsgMTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2luayhqKSB7XHJcbiAgdmFyIGkgPSBqO1xyXG4gIHdoaWxlIChpICogMiA8IGhlYXAubGVuZ3RoKSB7XHJcbiAgICB2YXIgbGVmdEhpZ2hlciA9ICFjbXAoaSAqIDIgKyAxLCBpICogMik7XHJcbiAgICB2YXIgY2hpbGRJbmRleCA9IGNhbGNDaGlsZEluZGV4KGxlZnRIaWdoZXIsIGkpO1xyXG4gICAgaWYgKGNtcChpLCBjaGlsZEluZGV4KSkge2JyZWFrO31cclxuICAgIHN3cChpLCBjaGlsZEluZGV4KTtcclxuICAgIGkgPSBjaGlsZEluZGV4O1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYnViYmxlKGopIHtcclxuICB2YXIgaSA9IGo7XHJcbiAgd2hpbGUgKGkgPiAxKSB7XHJcbiAgICAvKiBqc2hpbnQgLVcwMTYgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXHJcbiAgICB2YXIgcGFyZW50SW5kZXggPSBpID4+IDE7XHJcbiAgICAvKiBqc2hpbnQgK1cwMTYgKi9cclxuICAgIGlmICghY21wKGksIHBhcmVudEluZGV4KSkge2JyZWFrO31cclxuICAgIHN3cChpLCBwYXJlbnRJbmRleCk7XHJcbiAgICBpID0gcGFyZW50SW5kZXg7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcG9wKCkge1xyXG4gIGlmIChoZWFwLmxlbmd0aCA9PT0gMSkge3JldHVybjt9XHJcbiAgdmFyIHRvcFZhbCA9IGhlYXBbMV0uZGF0YTtcclxuICB2YXIgbGFzdCA9IGhlYXAucG9wKCk7XHJcbiAgaWYgKGhlYXAubGVuZ3RoID4gMSkge1xyXG4gICAgaGVhcFsxXSA9IGxhc3Q7XHJcbiAgICBzaW5rKDEpO1xyXG4gIH1cclxuICByZXR1cm4gdG9wVmFsO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHVzaChkYXRhLCBwcmlvcml0eSkge1xyXG4gIGJ1YmJsZShoZWFwLnB1c2goe2RhdGE6IGRhdGEsIHByaW9yaXR5OiBwcmlvcml0eX0pIC0gMSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMZW5ndGgoKSB7XHJcbiAgcmV0dXJuIGhlYXAubGVuZ3RoIC0gMTtcclxufVxyXG4iLCJpbXBvcnQge2ZhbGxiYWNrfSBmcm9tICcuL3N5c3RlbSc7XHJcbmltcG9ydCB7bG9nfSBmcm9tICcuL2RlYnVnJztcclxuaW1wb3J0IHtnZXRMZW5ndGgsIHBvcCwgcHVzaH0gZnJvbSAnLi9zY2gnO1xyXG5cclxudmFyIHBhdXNlZCA9IHRydWU7XHJcbnZhciBtZXNzYWdlID0gJ2ZzaE1lc3NhZ2UnO1xyXG5cclxuZnVuY3Rpb24gdGFza1J1bm5lcigpIHtcclxuICBpZiAoZ2V0TGVuZ3RoKCkgPT09IDApIHtcclxuICAgIHBhdXNlZCA9IHRydWU7XHJcbiAgfSBlbHNlIHtcclxuICAgIHBhdXNlZCA9IGZhbHNlO1xyXG4gICAgd2luZG93LnBvc3RNZXNzYWdlKG1lc3NhZ2UsICcqJyk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkZXZMb2coYXJncykge1xyXG4gIGlmIChhcmdzICYmICFBcnJheS5pc0FycmF5KGFyZ3MpKSB7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxyXG4gICAgY29uc29sZS5sb2coJ2FkZFRhc2sgQXJyYXkuaXNBcnJheShhcmdzKScsIEFycmF5LmlzQXJyYXkoYXJncykpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkKHByaW9yaXR5LCBmbiwgYXJncywgc2NvcGUpIHtcclxuICAvLyNpZiBfREVWICAvLyAgTm90IHNlbmRpbmcgYXJncyBhcyBBcnJheVxyXG4gIGRldkxvZyhhcmdzKTtcclxuICAvLyNlbmRpZlxyXG4gIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcclxuICAgIHZhciBfc2NvcGUgPSBmYWxsYmFjayhzY29wZSwgd2luZG93KTtcclxuICAgIHZhciBfYXJncyA9IGZhbGxiYWNrKGFyZ3MsIFtdKTtcclxuICAgIHB1c2goZm4uYmluZC5hcHBseShmbiwgW19zY29wZV0uY29uY2F0KF9hcmdzKSksIHByaW9yaXR5KTtcclxuICAgIGlmIChwYXVzZWQpIHt0YXNrUnVubmVyKCk7fVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYXN5bmNUYXNrKCkge1xyXG4gIHRyeSB7XHJcbiAgICBwb3AoKSgpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBsb2coJ1VuaGFuZGxlZCBFeGNlcHRpb246JywgZXJyb3IpO1xyXG4gICAgLy8jaWYgX0RFViAgLy8gIFVuaGFuZGxlZCBFeGNlcHRpb25cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXHJcbiAgICBjb25zb2xlLmxvZygnVW5oYW5kbGVkIEV4Y2VwdGlvbjonLCBlcnJvcik7XHJcbiAgICAvLyNlbmRpZlxyXG4gIH1cclxuICB0YXNrUnVubmVyKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGxiYWNrKGV2ZW50KSB7XHJcbiAgdmFyIGtleSA9IGV2ZW50LmRhdGE7XHJcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5pbmRleE9mKG1lc3NhZ2UpID09PSAwKSB7XHJcbiAgICBhc3luY1Rhc2soKTtcclxuICB9XHJcbn1cclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgY2FsbGJhY2spO1xyXG4iLCJ2YXIgZHJhZ1RhcmdldDtcclxuXHJcbmZ1bmN0aW9uIGRyYWdPdmVyKGV2ZW50KSB7XHJcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYWdEcm9wKGV2ZW50KSB7XHJcbiAgdmFyIG9mZnNldCA9IGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKCd0ZXh0L3BsYWluJykuc3BsaXQoJywnKTtcclxuICBkcmFnVGFyZ2V0LnN0eWxlLmxlZnQgPVxyXG4gICAgZXZlbnQuY2xpZW50WCArIHBhcnNlSW50KG9mZnNldFswXSwgMTApICsgJ3B4JztcclxuICBkcmFnVGFyZ2V0LnN0eWxlLnRvcCA9XHJcbiAgICBldmVudC5jbGllbnRZICsgcGFyc2VJbnQob2Zmc2V0WzFdLCAxMCkgKyAncHgnO1xyXG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCBkcmFnT3ZlciwgZmFsc2UpO1xyXG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJvcCcsIGRyYWdEcm9wLCBmYWxzZSk7XHJcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYWdTdGFydChwYXJlbnQsIGV2ZW50KSB7XHJcbiAgaWYgKHBhcmVudCkge1xyXG4gICAgZHJhZ1RhcmdldCA9IHBhcmVudDtcclxuICB9IGVsc2Uge1xyXG4gICAgZHJhZ1RhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuICB9XHJcbiAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZHJhZ1RhcmdldCwgbnVsbCk7XHJcbiAgZXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoJ3RleHQvcGxhaW4nLFxyXG4gICAgcGFyc2VJbnQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnbGVmdCcpLCAxMCkgLSBldmVudC5jbGllbnRYICsgJywnICtcclxuICAgIChwYXJzZUludChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0b3AnKSwgMTApIC0gZXZlbnQuY2xpZW50WSkpO1xyXG4gIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCBkcmFnT3ZlciwgZmFsc2UpO1xyXG4gIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIGRyYWdEcm9wLCBmYWxzZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRyYWdnYWJsZShlbGVtZW50LCBwYXJlbnQpIHtcclxuICBlbGVtZW50LmRyYWdnYWJsZSA9IHRydWU7XHJcbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBkcmFnU3RhcnQuYmluZChudWxsLCBwYXJlbnQpKTtcclxufVxyXG4iLCJpbXBvcnQgYWRkIGZyb20gJy4uL3N1cHBvcnQvdGFzayc7XHJcbmltcG9ydCBjYWxmIGZyb20gJy4uL3N1cHBvcnQvY2FsZic7XHJcbmltcG9ydCBkcmFnZ2FibGUgZnJvbSAnLi4vY29tbW9uL2RyYWdTdGFydCc7XHJcbmltcG9ydCB7XHJcbiAgZXNjYXBlSHRtbCxcclxuICBmYWxsYmFjayxcclxuICBnZXRWYWx1ZSxcclxuICBnZXRWYWx1ZUpTT04sXHJcbiAgaW1hZ2VTZXJ2ZXJcclxufSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG5mdW5jdGlvbiByZXRCb29sKGJvb2wsIGlmVHJ1ZSwgaWZGYWxzZSkge1xyXG4gIGlmIChib29sKSB7XHJcbiAgICByZXR1cm4gaWZUcnVlO1xyXG4gIH1cclxuICByZXR1cm4gaWZGYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmV0T3B0aW9uKG9wdGlvbiwgaWZUcnVlLCBpZkZhbHNlKSB7XHJcbiAgcmV0dXJuIHJldEJvb2woZ2V0VmFsdWUob3B0aW9uKSwgaWZUcnVlLCBpZkZhbHNlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNEcmFnZ2FibGUoZHJhZ2dhYmxlUXVpY2tMaW5rcykge1xyXG4gIGlmIChkcmFnZ2FibGVRdWlja0xpbmtzKSB7XHJcbiAgICBkcmFnZ2FibGUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZzaFF1aWNrTGlua3MnKSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYXZlTm9kZShub2RlLCBxdWlja0xpbmtzKSB7IC8vIE5hdGl2ZSA/XHJcbiAgdmFyIHF1aWNrTGlua3NUb3BQeCA9IGdldFZhbHVlKCdxdWlja0xpbmtzVG9wUHgnKTtcclxuICB2YXIgcXVpY2tMaW5rc0xlZnRQeCA9IGdldFZhbHVlKCdxdWlja0xpbmtzTGVmdFB4Jyk7XHJcbiAgdmFyIGRyYWdnYWJsZVF1aWNrTGlua3MgPSBnZXRWYWx1ZSgnZHJhZ2dhYmxlUXVpY2tMaW5rcycpO1xyXG4gIHZhciBkcmFnZ2FibGVRdWlja0xpbmtzQ2xhc3MgPSByZXRCb29sKGRyYWdnYWJsZVF1aWNrTGlua3MsICcgZnNoTW92ZScsICcnKTtcclxuICB2YXIgaHRtbCA9ICc8ZGl2IHN0eWxlPVwidG9wOicgKyBxdWlja0xpbmtzVG9wUHggKyAncHg7IGxlZnQ6JyArXHJcbiAgICBxdWlja0xpbmtzTGVmdFB4ICsgJ3B4OyBiYWNrZ3JvdW5kLWltYWdlOnVybChcXCcnICsgaW1hZ2VTZXJ2ZXIgK1xyXG4gICAgJy9za2luL2lubmVyX2JnLmpwZ1xcJyk7XCIgaWQ9XCJmc2hRdWlja0xpbmtzXCIgY2xhc3M9XCJmc2hRdWlja0xpbmtzJyArXHJcbiAgICByZXRPcHRpb24oJ2tlZXBIZWxwZXJNZW51T25TY3JlZW4nLCAnIGZzaEZpeGVkJywgJycpICtcclxuICAgIGRyYWdnYWJsZVF1aWNrTGlua3NDbGFzcyArICdcIj4nO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVpY2tMaW5rcy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgdmFyIG5ld1dpbmRvdyA9IHJldEJvb2wocXVpY2tMaW5rc1tpXS5uZXdXaW5kb3csICcgdGFyZ2V0PVwibmV3XCInLCAnJyk7XHJcbiAgICBodG1sICs9ICc8bGk+PGEgaHJlZj1cIicgKyBlc2NhcGVIdG1sKHF1aWNrTGlua3NbaV0udXJsKSArICdcIicgK1xyXG4gICAgICBuZXdXaW5kb3cgKyAnPicgKyBxdWlja0xpbmtzW2ldLm5hbWUgKyAnPC9hPjwvbGk+JztcclxuICB9XHJcbiAgaHRtbCArPSAnPC9kaXY+JztcclxuICBkb2N1bWVudC5ib2R5Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgaHRtbCk7XHJcbiAgaXNEcmFnZ2FibGUoZHJhZ2dhYmxlUXVpY2tMaW5rcyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluamVjdFF1aWNrTGlua3MoKSB7IC8vIE5hdGl2ZSA/XHJcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGJhci1jb250YWluZXInKTtcclxuICBpZiAoIW5vZGUpIHtyZXR1cm47fVxyXG4gIHZhciBxdWlja0xpbmtzID0gZmFsbGJhY2soZ2V0VmFsdWVKU09OKCdxdWlja0xpbmtzJyksIFtdKTtcclxuICBpZiAocXVpY2tMaW5rcy5sZW5ndGggPD0gMCkge3JldHVybjt9XHJcbiAgaGF2ZU5vZGUobm9kZSwgcXVpY2tMaW5rcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRvUXVpY2tMaW5rcygpIHtcclxuICBpZiAoIWNhbGYuaHVudGluZ01vZGUpIHtcclxuICAgIGFkZCgzLCBpbmplY3RRdWlja0xpbmtzKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGFkZCBmcm9tICcuLi9zdXBwb3J0L3Rhc2snO1xyXG5pbXBvcnQge2dldFZhbHVlfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG5mdW5jdGlvbiBkb01zZ1NvdW5kKCkgeyAvLyBqUXVlcnlcclxuICB2YXIgc291bmRMb2NhdGlvbiA9IGdldFZhbHVlKCdkZWZhdWx0TWVzc2FnZVNvdW5kJyk7XHJcbiAgJCgnYTpjb250YWlucyhcIk5ldyBsb2cgbWVzc2FnZXNcIik6Zmlyc3QnKS5lYWNoKGZ1bmN0aW9uKGksIGUpIHtcclxuICAgICQoZSkuYWZ0ZXIoJzxhdWRpbyBzcmM9XCInICsgc291bmRMb2NhdGlvbiArXHJcbiAgICAnXCIgYXV0b3BsYXk9dHJ1ZSAvPicpO1xyXG4gIH0pO1xyXG4gICQoJ2E6Y29udGFpbnMoXCJOZXcgR3VpbGQgY2hhdCBtZXNzYWdlXCIpOmZpcnN0JykuZWFjaChmdW5jdGlvbihpLCBlKSB7XHJcbiAgICAkKGUpLmFmdGVyKCc8YXVkaW8gc3JjPVwiJyArIHNvdW5kTG9jYXRpb24gK1xyXG4gICAgJ1wiIGF1dG9wbGF5PXRydWUgLz4nKTtcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNNZXNzYWdlU291bmQoKSB7XHJcbiAgaWYgKGdldFZhbHVlKCdwbGF5TmV3TWVzc2FnZVNvdW5kJykpIHtcclxuICAgIGFkZCgzLCBkb01zZ1NvdW5kKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtnZXRWYWx1ZX0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5pbXBvcnQge25ld0d1aWxkTG9nTG9jLCBuZXdHdWlsZExvZ1VybH0gZnJvbSAnLi4vc3VwcG9ydC9kYXRhT2JqJztcclxuXHJcbmZ1bmN0aW9uIHRlc3RGb3JHdWlsZExvZ01zZyhndWlsZExvZ05vZGUpIHtcclxuICByZXR1cm4gbG9jYXRpb24uc2VhcmNoICE9PSBuZXdHdWlsZExvZ0xvYyB8fFxyXG4gICAgZ3VpbGRMb2dOb2RlLnBhcmVudE5vZGUuaWQgIT09ICdub3RpZmljYXRpb24tZ3VpbGQtbG9nJztcclxufVxyXG5cclxuZnVuY3Rpb24gaGlkZUd1aWxkTG9nTXNnKGd1aWxkTG9nTm9kZSkge1xyXG4gIC8vIGhpZGUgdGhlIGxocyBib3hcclxuICBpZiAodGVzdEZvckd1aWxkTG9nTXNnKGd1aWxkTG9nTm9kZSkpIHtyZXR1cm47fVxyXG4gIHZhciBtZXNzYWdlQm94ID0gZ3VpbGRMb2dOb2RlLnBhcmVudE5vZGU7XHJcbiAgaWYgKG1lc3NhZ2VCb3gpIHtcclxuICAgIG1lc3NhZ2VCb3guY2xhc3NMaXN0LmFkZCgnZnNoSGlkZScpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ290R3VpbGRMb2dOb2RlcyhndWlsZExvZ05vZGVzKSB7XHJcbiAgdmFyIGd1aWxkTG9nTm9kZTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGd1aWxkTG9nTm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgIGd1aWxkTG9nTm9kZSA9IGd1aWxkTG9nTm9kZXNbaV07XHJcbiAgICBndWlsZExvZ05vZGUuaHJlZiA9IG5ld0d1aWxkTG9nVXJsO1xyXG4gIH1cclxuICBoaWRlR3VpbGRMb2dNc2coZ3VpbGRMb2dOb2RlKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2hhbmdlR3VpbGRMb2dIUkVGKCkge1xyXG4gIGlmICghZ2V0VmFsdWUoJ3VzZU5ld0d1aWxkTG9nJykpIHtyZXR1cm47fVxyXG4gIHZhciBndWlsZExvZ05vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcclxuICAgICcjcENMIGFbaHJlZj1cImluZGV4LnBocD9jbWQ9Z3VpbGQmc3ViY21kPWxvZ1wiXScpO1xyXG4gIGlmIChndWlsZExvZ05vZGVzKSB7Z290R3VpbGRMb2dOb2RlcyhndWlsZExvZ05vZGVzKTt9XHJcbn1cclxuIiwiaW1wb3J0IHtsb2d9IGZyb20gJy4uL3N1cHBvcnQvZGVidWcnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Rm9yYWdlKGZvcmFnZSkge1xyXG4gIC8vIFdyYXAgaW4galF1ZXJ5IERlZmVycmVkIGJlY2F1c2Ugd2UncmUgdXNpbmcgMS43XHJcbiAgLy8gcmF0aGVyIHRoYW4gdXNpbmcgRVM2IHByb21pc2VcclxuICB2YXIgZGZyID0gJC5EZWZlcnJlZCgpO1xyXG4gIGxvY2FsZm9yYWdlLmdldEl0ZW0oZm9yYWdlLCBmdW5jdGlvbiBnZXRJdGVtQ2FsbGJhY2soZXJyLCBkYXRhKSB7XHJcbiAgICBpZiAoZXJyKSB7XHJcbiAgICAgIGxvZyhmb3JhZ2UgKyAnIGZvcmFnZSBlcnJvcicsIGVycik7XHJcbiAgICAgIGRmci5yZWplY3QoZXJyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIHJldHVybnMgbnVsbCBpZiBrZXkgZG9lcyBub3QgZXhpc3RcclxuICAgICAgZGZyLnJlc29sdmUoZGF0YSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIGRmci5wcm9taXNlKCk7XHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIG1peGluKG9iaiwgbWl4aW5zKSB7XHJcbiAgT2JqZWN0LmtleXMobWl4aW5zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xyXG4gICAgaWYgKHR5cGVvZiBtaXhpbnNba2V5XSA9PT0gJ29iamVjdCcgJiYgbWl4aW5zW2tleV0gIT09IG51bGwpIHtcclxuICAgICAgbWl4aW4ob2JqW2tleV0sIG1peGluc1trZXldKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG9ialtrZXldID0gbWl4aW5zW2tleV07XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNFbGVtZW50KHR5cGUsIHByb3BzKSB7XHJcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlKTtcclxuICBpZiAocHJvcHMpIHttaXhpbihlbCwgcHJvcHMpO31cclxuICByZXR1cm4gZWw7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXYocHJvcHMpIHtcclxuICByZXR1cm4gY0VsZW1lbnQoJ2RpdicsIHByb3BzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNwYW4ocHJvcHMpIHtcclxuICByZXR1cm4gY0VsZW1lbnQoJ3NwYW4nLCBwcm9wcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUYWJsZShwcm9wcykge1xyXG4gIHJldHVybiBjRWxlbWVudCgndGFibGUnLCBwcm9wcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUQm9keShwcm9wcykge1xyXG4gIHJldHVybiBjRWxlbWVudCgndGJvZHknLCBwcm9wcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUcihwcm9wcykge1xyXG4gIHJldHVybiBjRWxlbWVudCgndHInLCBwcm9wcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUZChwcm9wcykge1xyXG4gIHJldHVybiBjRWxlbWVudCgndGQnLCBwcm9wcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVURm9vdChwcm9wcykge1xyXG4gIHJldHVybiBjRWxlbWVudCgndGZvb3QnLCBwcm9wcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbChwcm9wcykge1xyXG4gIHJldHVybiBjRWxlbWVudCgndWwnLCBwcm9wcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMaShwcm9wcykge1xyXG4gIHJldHVybiBjRWxlbWVudCgnbGknLCBwcm9wcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCdXR0b24ocHJvcHMpIHtcclxuICByZXR1cm4gY0VsZW1lbnQoJ2J1dHRvbicsIHByb3BzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJyKCkge1xyXG4gIHJldHVybiBjRWxlbWVudCgnYnInKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFuY2hvcihwcm9wcykge1xyXG4gIHJldHVybiBjRWxlbWVudCgnYScsIHByb3BzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUlucHV0KHByb3BzKSB7XHJcbiAgcmV0dXJuIGNFbGVtZW50KCdpbnB1dCcsIHByb3BzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRleHRBcmVhKHByb3BzKSB7XHJcbiAgcmV0dXJuIGNFbGVtZW50KCd0ZXh0YXJlYScsIHByb3BzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRoKHByb3BzKSB7XHJcbiAgcmV0dXJuIGNFbGVtZW50KCd0aCcsIHByb3BzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxhYmVsKHByb3BzKSB7XHJcbiAgcmV0dXJuIGNFbGVtZW50KCdsYWJlbCcsIHByb3BzKTtcclxufVxyXG4iLCJpbXBvcnQge21peGlufSBmcm9tICcuLi9jb21tb24vY0VsZW1lbnQnO1xyXG5pbXBvcnQgcmV0cnlBamF4IGZyb20gJy4uL2FqYXgvcmV0cnlBamF4JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhbGxBcHAoZGF0YSkge1xyXG4gIG1peGluKGRhdGEsIHthcHA6IDF9KTtcclxuICByZXR1cm4gcmV0cnlBamF4KHtcclxuICAgIHVybDogJ2FwcC5waHAnLFxyXG4gICAgZGF0YTogZGF0YSxcclxuICAgIGRhdGFUeXBlOiAnanNvbidcclxuICB9KTtcclxufVxyXG4iLCJpbXBvcnQgY2FsbEFwcCBmcm9tICcuLi9jYWxsQXBwJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGd1aWxkTWFuYWdlKCkge1xyXG4gIHJldHVybiBjYWxsQXBwKHtjbWQ6ICdndWlsZCcsIHN1YmNtZDogJ21hbmFnZSd9KTtcclxufVxyXG4iLCJpbXBvcnQge2xvZ30gZnJvbSAnLi4vc3VwcG9ydC9kZWJ1Zyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRGb3JhZ2UoZm9yYWdlLCBkYXRhKSB7XHJcbiAgLy8gV3JhcCBpbiBqUXVlcnkgRGVmZXJyZWQgYmVjYXVzZSB3ZSdyZSB1c2luZyAxLjdcclxuICAvLyByYXRoZXIgdGhhbiB1c2luZyBFUzYgcHJvbWlzZVxyXG4gIHZhciBkZnIgPSAkLkRlZmVycmVkKCk7XHJcbiAgbG9jYWxmb3JhZ2Uuc2V0SXRlbShmb3JhZ2UsIGRhdGEsIGZ1bmN0aW9uIHNldEl0ZW1DYWxsYmFjayhlcnIsIF9kYXRhKSB7XHJcbiAgICBpZiAoZXJyKSB7XHJcbiAgICAgIGxvZyhmb3JhZ2UgKyAnIGZvcmFnZSBlcnJvcicsIGVycik7XHJcbiAgICAgIGRmci5yZWplY3QoZXJyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRmci5yZXNvbHZlKF9kYXRhKTtcclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gZGZyLnByb21pc2UoKTtcclxufVxyXG4iLCJleHBvcnQgdmFyIGFjdCA9IDA7XHJcbmV4cG9ydCB2YXIgY3VyID0gMTtcclxuZXhwb3J0IHZhciBsdmwgPSAyO1xyXG5leHBvcnQgdmFyIG1heCA9IDM7XHJcbmV4cG9ydCB2YXIgdXRjID0gNDtcclxuZXhwb3J0IHZhciB2bCA9IDU7XHJcbmV4cG9ydCB2YXIgZ3hwID0gNjtcclxuIiwiaW1wb3J0IGdldEZvcmFnZSBmcm9tICcuLi9hamF4L2dldEZvcmFnZSc7XHJcbmltcG9ydCBndWlsZE1hbmFnZSBmcm9tICcuLi9hcHAvZ3VpbGQvbWFuYWdlJztcclxuaW1wb3J0IHtub3dTZWNzfSBmcm9tICcuLi9zdXBwb3J0L2RhdGFPYmonO1xyXG5pbXBvcnQgc2V0Rm9yYWdlIGZyb20gJy4uL2FqYXgvc2V0Rm9yYWdlJztcclxuaW1wb3J0IHthY3QsIGN1ciwgZ3hwLCBsdmwsIG1heCwgdXRjLCB2bH0gZnJvbSAnLi9ndWlsZFRyYWNrZXIvaW5kZXhDb25zdGFudHMnO1xyXG5pbXBvcnQge2ZhbGxiYWNrLCBnZXRWYWx1ZX0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5cclxudmFyIG9sZEFyY2hpdmU7XHJcbnZhciBndWlsZDtcclxuXHJcbmZ1bmN0aW9uIHB1c2hOZXdSZWNvcmQobWVtYmVyKSB7XHJcbiAgb2xkQXJjaGl2ZS5tZW1iZXJzW21lbWJlci5uYW1lXS5wdXNoKFtcclxuICAgIE1hdGguZmxvb3IobWVtYmVyLmxhc3RfYWN0aXZpdHkgLyA4NjQwMCksXHJcbiAgICBtZW1iZXIuY3VycmVudF9zdGFtaW5hLFxyXG4gICAgbWVtYmVyLmxldmVsLFxyXG4gICAgbWVtYmVyLm1heF9zdGFtaW5hLFxyXG4gICAgbm93U2VjcyxcclxuICAgIG1lbWJlci52bCxcclxuICAgIG1lbWJlci5ndWlsZF94cCxcclxuICBdKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdE1lbWJlcihtZW1iZXIpIHtcclxuICBpZiAoIW9sZEFyY2hpdmUubWVtYmVyc1ttZW1iZXIubmFtZV0pIHtcclxuICAgIG9sZEFyY2hpdmUubWVtYmVyc1ttZW1iZXIubmFtZV0gPSBbXTtcclxuICAgIHB1c2hOZXdSZWNvcmQobWVtYmVyKTtcclxuICB9XHJcbn1cclxuXHJcbnZhciB0eXBlMnRlc3RzID0gW1xyXG4gIGZ1bmN0aW9uKGFyY2hpdmUsIGN1cnJlbnQpIHtcclxuICAgIC8vIEhhcyBjdXJyZW50IHN0YW0gY2hhbmdlZCA/XHJcbiAgICByZXR1cm4gY3VycmVudC5jdXJyZW50X3N0YW1pbmEgIT09IGFyY2hpdmVbY3VyXTsgLy8gcHJvYmFibHkgd2FudCBhIHdlaWdodGVkIHBlcmNlbnRhZ2UgaGVyZVxyXG4gICAgLy8gTWlnaHQgb25seSBjYXJlIGlmIGl0IGhhcyBkcm9wcGVkIHNpZ25pZmljYW50bHkgP1xyXG4gIH0sXHJcbiAgZnVuY3Rpb24oYXJjaGl2ZSwgY3VycmVudCkge1xyXG4gICAgLy8gSGFzIE1heCBTdGFtIGluY3JlYXNlZCA/XHJcbiAgICByZXR1cm4gY3VycmVudC5tYXhfc3RhbWluYSA+IGFyY2hpdmVbbWF4XTsgLy8gcHJvYmFibHkgd2FudCBhIHdlaWdodGVkIHBlcmNlbnRhZ2UgaGVyZVxyXG4gIH0sXHJcbiAgZnVuY3Rpb24oYXJjaGl2ZSwgY3VycmVudCkge1xyXG4gICAgLy8gSGFzIGxldmVsIGNoYW5nZWQgP1xyXG4gICAgcmV0dXJuIGN1cnJlbnQubGV2ZWwgIT09IGFyY2hpdmVbbHZsXTtcclxuICB9LFxyXG4gIGZ1bmN0aW9uKGFyY2hpdmUsIGN1cnJlbnQpIHtcclxuICAgIC8vIEhhcyBWTCBjaGFuZ2VkID9cclxuICAgIHJldHVybiBjdXJyZW50LnZsICE9PSBhcmNoaXZlW3ZsXTtcclxuICB9LFxyXG4gIGZ1bmN0aW9uKGFyY2hpdmUsIGN1cnJlbnQpIHtcclxuICAgIC8vIEhhcyBHWFAgY2hhbmdlZCA/XHJcbiAgICByZXR1cm4gY3VycmVudC5ndWlsZF94cCAhPT0gYXJjaGl2ZVtneHBdOyAvLyBwcm9iYWJseSB3YW50IGEgd2VpZ2h0ZWQgcGVyY2VudGFnZSBoZXJlXHJcbiAgfVxyXG5dO1xyXG5cclxuZnVuY3Rpb24gZG9NZXJnZSgpIHtcclxuICB2YXIgbmV3QXJjaGl2ZSA9IHtsYXN0VXBkYXRlOiBub3dTZWNzLCBtZW1iZXJzOiB7fX07XHJcbiAgZ3VpbGQuci5tZW1iZXJzLmZvckVhY2goZnVuY3Rpb24obWVtYmVyKSB7XHJcbiAgICBpbml0TWVtYmVyKG1lbWJlcik7XHJcbiAgICB2YXIgYXJjaGl2ZU1lbWJlciA9IG9sZEFyY2hpdmUubWVtYmVyc1ttZW1iZXIubmFtZV07XHJcbiAgICB2YXIgYXJjaGl2ZUxlbmd0aCA9IGFyY2hpdmVNZW1iZXIubGVuZ3RoO1xyXG4gICAgdmFyIGFyY2hpdmVSZWNvcmQgPSBhcmNoaXZlTWVtYmVyW2FyY2hpdmVMZW5ndGggLSAxXTtcclxuICAgIHZhciBhcmNoaXZlQWdlID0gbm93U2VjcyAtIGFyY2hpdmVSZWNvcmRbdXRjXTtcclxuICAgIGlmIChhcmNoaXZlQWdlID49IDg2MTAwKSB7XHJcbiAgICAgIHZhciB0eXBlMmNoYW5nZSA9IHR5cGUydGVzdHMuc29tZShmdW5jdGlvbih0ZXN0KSB7XHJcbiAgICAgICAgaWYgKHRlc3QoYXJjaGl2ZVJlY29yZCwgbWVtYmVyKSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfSk7XHJcbiAgICAgIGlmICh0eXBlMmNoYW5nZSkge1xyXG4gICAgICAgIHB1c2hOZXdSZWNvcmQobWVtYmVyKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhcmNoaXZlUmVjb3JkW2FjdF0gPSBNYXRoLmZsb29yKG1lbWJlci5sYXN0X2FjdGl2aXR5IC8gODY0MDApO1xyXG4gICAgICAgIGFyY2hpdmVSZWNvcmRbdXRjXSA9IG5vd1NlY3M7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIG5ld0FyY2hpdmUubWVtYmVyc1ttZW1iZXIubmFtZV0gPSBvbGRBcmNoaXZlLm1lbWJlcnNbbWVtYmVyLm5hbWVdO1xyXG4gIH0pO1xyXG4gIHNldEZvcmFnZSgnZnNoX2d1aWxkQWN0aXZpdHknLCBuZXdBcmNoaXZlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ290R3VpbGQoZGF0YSkge1xyXG4gIGd1aWxkID0gZGF0YTtcclxuICBkb01lcmdlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdvdEFjdGl2aXR5KGRhdGEpIHtcclxuICBpZiAoZGF0YSkge1xyXG4gICAgb2xkQXJjaGl2ZSA9IGRhdGE7XHJcbiAgICAvLyBvbGRBcmNoaXZlID0gdHJhbnNmb3JtQWN0aXZpdHkoZGF0YSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIG9sZEFyY2hpdmUgPSB7bGFzdFVwZGF0ZTogMCwgbWVtYmVyczoge319O1xyXG4gIH1cclxuICBpZiAobm93U2VjcyA+IGZhbGxiYWNrKG9sZEFyY2hpdmUubGFzdFVwZGF0ZSwgMCkgKyAzMDApIHsgLy8gNSBtaW5zIC0gcHJvYmFibHkgd2FudCB0byBpbmNyZWFzZVxyXG4gICAgZ3VpbGRNYW5hZ2UoKS5kb25lKGdvdEd1aWxkKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGd1aWxkQWN0aXZpdHkoKSB7XHJcbiAgaWYgKGdldFZhbHVlKCdlbmFibGVHdWlsZEFjdGl2aXR5VHJhY2tlcicpKSB7XHJcbiAgICBnZXRGb3JhZ2UoJ2ZzaF9ndWlsZEFjdGl2aXR5JykuZG9uZShnb3RBY3Rpdml0eSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBhZGQgZnJvbSAnLi90YXNrJztcclxuaW1wb3J0IHtcclxuICBjcmVhdGVCdXR0b24sXHJcbiAgY3JlYXRlRGl2LFxyXG4gIGNyZWF0ZUxpLFxyXG4gIGNyZWF0ZVVsXHJcbn0gZnJvbSAnLi4vY29tbW9uL2NFbGVtZW50JztcclxuaW1wb3J0IHtjcmVhdGVEb2N1bWVudCwgZmFsbGJhY2ssIGdldFZhbHVlLCBzZXRWYWx1ZX0gZnJvbSAnLi9zeXN0ZW0nO1xyXG5pbXBvcnQge2xhc3RBY3Rpdml0eVJFLCBub3dTZWNzLCBwbGFjZXN9IGZyb20gJy4vZGF0YU9iaic7XHJcblxyXG52YXIgZG90TGlzdDtcclxudmFyIGRvdENvdW50O1xyXG52YXIgcmVkRG90ID1cclxuICAnPHNwYW4gY2xhc3M9XCJmc2hEb3QgcmVkRG90IHRpcC1zdGF0aWNcIiBkYXRhLXRpcHBlZD1cIk9mZmxpbmVcIj48L3NwYW4+JztcclxudmFyIGdyZWVuRGlhbW9uZCA9XHJcbiAgJzxzcGFuIGNsYXNzPVwiZnNoRG90IGdyZWVuRGlhbW9uZCB0aXAtc3RhdGljXCIgZGF0YS10aXBwZWQ9XCJPbmxpbmVcIj48L3NwYW4+JztcclxudmFyIHllbGxvd0RpYW1vbmQgPVxyXG4gICc8c3BhbiBjbGFzcz1cImZzaERvdCB5ZWxsb3dEaWFtb25kIHRpcC1zdGF0aWNcIiBkYXRhLXRpcHBlZD1cIk9mZmxpbmVcIj48L3NwYW4+JztcclxudmFyIG9yYW5nZURpYW1vbmQgPVxyXG4gICc8c3BhbiBjbGFzcz1cImZzaERvdCBvcmFuZ2VEaWFtb25kIHRpcC1zdGF0aWNcIiBkYXRhLXRpcHBlZD1cIk9mZmxpbmVcIj48L3NwYW4+JztcclxudmFyIG9mZmxpbmVEb3QgPVxyXG4gICc8c3BhbiBjbGFzcz1cImZzaERvdCBvZmZsaW5lRG90IHRpcC1zdGF0aWNcIiBkYXRhLXRpcHBlZD1cIk9mZmxpbmVcIj48L3NwYW4+JztcclxudmFyIHNldmVuRGF5RG90ID1cclxuICAnPHNwYW4gY2xhc3M9XCJmc2hEb3Qgc2V2ZW5EYXlEb3QgdGlwLXN0YXRpY1wiIGRhdGEtdGlwcGVkPVwiT2ZmbGluZVwiPjwvc3Bhbj4nO1xyXG5cclxuZXhwb3J0IHZhciBwQ0MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncENDJyk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYnVmZkFsbEhyZWYoc2hvcnRMaXN0KSB7IC8vIEJhZCBQYXR0ZXJuXHJcbiAgdmFyIF9zaG9ydExpc3QgPSBzaG9ydExpc3Quam9pbignLCcpLnJlcGxhY2UoL1xccy9nLCAnJyk7XHJcbiAgdmFyIGogPSAnamF2YSc7XHJcbiAgcmV0dXJuIGogKyAnc2NyaXB0Om9wZW5XaW5kb3coXFwnaW5kZXgucGhwP2NtZD1xdWlja2J1ZmYmdD0nICsgX3Nob3J0TGlzdCArXHJcbiAgICAnXFwnLCBcXCdmc1F1aWNrQnVmZlxcJywgNjE4LCAxMDAwLCBcXCcsc2Nyb2xsYmFyc1xcJyknO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcXVpY2tCdWZmSHJlZihhUGxheWVySWQsIGJ1ZmZMaXN0KSB7IC8vIEJhZCBQYXR0ZXJuXHJcbiAgdmFyIHBhc3N0aHJ1ID0gJyc7XHJcbiAgaWYgKGJ1ZmZMaXN0KSB7cGFzc3RocnUgPSAnJmJsaXN0PScgKyBidWZmTGlzdDt9XHJcbiAgcmV0dXJuICdocmVmPVxcJ2phdmFzY3JpcHQ6d2luZG93Lm9wZW5XaW5kb3coXCJpbmRleC5waHA/Y21kPScgK1xyXG4gICAgJ3F1aWNrYnVmZiZ0aWQ9JyArIGFQbGF5ZXJJZCArIHBhc3N0aHJ1ICtcclxuICAgICdcIiwgXCJmc1F1aWNrQnVmZlwiLCA2MTgsIDEwMDAsIFwiLHNjcm9sbGJhcnNcIilcXCcnO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb3BlblF1aWNrQnVmZkJ5SWQoYVBsYXllcklkKSB7XHJcbiAgd2luZG93Lm9wZW5XaW5kb3coJ2luZGV4LnBocD9jbWQ9cXVpY2tidWZmJnRpZD0nICsgYVBsYXllcklkLFxyXG4gICAgJ2ZzUXVpY2tCdWZmJywgNjE4LCAxMDAwLCAnLHNjcm9sbGJhcnMnKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9wZW5RdWlja0J1ZmZCeU5hbWUoYVBsYXllck5hbWUpIHtcclxuICB3aW5kb3cub3BlbldpbmRvdygnaW5kZXgucGhwP2NtZD1xdWlja2J1ZmYmdD0nICsgYVBsYXllck5hbWUsXHJcbiAgICAnZnNRdWlja0J1ZmYnLCA2MTgsIDEwMDAsICcsc2Nyb2xsYmFycycpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZG9CdWZmTGlua3MobWVtYmVycykge1xyXG4gIC8vIHF1aWNrIGJ1ZmYgb25seSBzdXBwb3J0cyAxNlxyXG4gIHZhciBzaG9ydExpc3QgPSBtZW1iZXJzLnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXJyLCBpKSB7XHJcbiAgICB2YXIgc2xvdCA9IE1hdGguZmxvb3IoaSAvIDE2KTtcclxuICAgIHByZXZbc2xvdF0gPSBmYWxsYmFjayhwcmV2W3Nsb3RdLCBbXSk7XHJcbiAgICBwcmV2W3Nsb3RdLnB1c2goY3Vycik7XHJcbiAgICByZXR1cm4gcHJldjtcclxuICB9LCBbXSkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cnIsIGkpIHtcclxuICAgIHZhciB0aGVOYW1lcyA9IGN1cnIuam9pbignLCcpO1xyXG4gICAgdmFyIG1vZGlmaWVyV29yZCA9IHBsYWNlc1tpXTtcclxuICAgIHZhciBsaSA9IGNyZWF0ZUxpKCk7XHJcbiAgICB2YXIgYnRuID0gY3JlYXRlQnV0dG9uKHtcclxuICAgICAgY2xhc3NOYW1lOiAnZnNoQmwgZnNoQmxzIHRpcC1zdGF0aWMnLFxyXG4gICAgICBkYXRhc2V0OiB7dGlwcGVkOiAnUXVpY2sgYnVmZiBmdW5jdGlvbmFsaXR5IGZyb20gSENTIG9ubHkgZG9lcyAxNid9LFxyXG4gICAgICB0ZXh0Q29udGVudDogJ0J1ZmYgJyArIG1vZGlmaWVyV29yZCArICcgMTYnXHJcbiAgICB9KTtcclxuICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsXHJcbiAgICAgIG9wZW5RdWlja0J1ZmZCeU5hbWUuYmluZChudWxsLCB0aGVOYW1lcykpO1xyXG4gICAgbGkuYXBwZW5kQ2hpbGQoYnRuKTtcclxuICAgIHByZXYuYXBwZW5kQ2hpbGQobGkpO1xyXG4gICAgcmV0dXJuIHByZXY7XHJcbiAgfSwgY3JlYXRlVWwoKSk7XHJcbiAgcmV0dXJuIHNob3J0TGlzdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluZm9Cb3goZG9jdW1lbnRUZXh0KSB7XHJcbiAgdmFyIGRvYyA9IGNyZWF0ZURvY3VtZW50KGRvY3VtZW50VGV4dCk7XHJcbiAgdmFyIHJlc3VsdDtcclxuICB2YXIgaW5mb01zZyA9IGRvYy5nZXRFbGVtZW50QnlJZCgnaW5mby1tc2cnKTtcclxuICBpZiAoaW5mb01zZykge1xyXG4gICAgdmFyIGluZm9NYXRjaCA9IGluZm9Nc2cuaW5uZXJIVE1MO1xyXG4gICAgcmVzdWx0ID0gJyc7XHJcbiAgICBpZiAoaW5mb01hdGNoKSB7XHJcbiAgICAgIGluZm9NYXRjaCA9IGluZm9NYXRjaC5yZXBsYWNlKC88YnIuKi8sICcnKTtcclxuICAgICAgcmVzdWx0ID0gaW5mb01hdGNoO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGxheWVySWQoKSB7XHJcbiAgdmFyIHRoZVBsYXllcklkID0gcGFyc2VJbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hvbGR0ZXh0JylcclxuICAgIC50ZXh0Q29udGVudC5tYXRjaCgvZmFsbGVuc3dvcmQuY29tXFwvXFw/cmVmPShcXGQrKS8pWzFdLCAxMCk7XHJcbiAgc2V0VmFsdWUoJ3BsYXllcklEJywgdGhlUGxheWVySWQpO1xyXG4gIHJldHVybiB0aGVQbGF5ZXJJZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBsYXllck5hbWUoKSB7XHJcbiAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0YmFyLWNoYXJhY3RlcicpLnRleHRDb250ZW50O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWFrZVBhZ2VIZWFkZXIodGl0bGUsIGNvbW1lbnQsIHNwYW5JZCwgYnV0dG9uKSB7XHJcbiAgdmFyIF9jb21tZW50ID0gJyc7XHJcbiAgaWYgKGNvbW1lbnQgIT09ICcnKSB7X2NvbW1lbnQgPSAnJm5ic3A7KCcgKyBjb21tZW50ICsgJyknO31cclxuICB2YXIgX3NwYW4gPSAnJztcclxuICBpZiAoc3BhbklkKSB7XHJcbiAgICBfc3BhbiA9ICdbPHNwYW4gY2xhc3M9XCJmc2hMaW5rXCIgaWQ9XCInICtcclxuICAgICAgc3BhbklkICsgJ1wiPicgKyBidXR0b24gKyAnPC9zcGFuPl0nO1xyXG4gIH1cclxuICByZXR1cm4gJzx0YWJsZSB3aWR0aD0xMDAlPjx0Ym9keT48dHIgY2xhc3M9XCJmc2hIZWFkZXJcIj4nICtcclxuICAgICc8dGQgd2lkdGg9XCI5MCVcIj48Yj4mbmJzcDsnICsgdGl0bGUgKyAnPC9iPicgKyBfY29tbWVudCArXHJcbiAgICAnPHRkIHdpZHRoPVwiMTAlXCIgY2xhc3M9XCJmc2hCdG5Cb3hcIj4nICsgX3NwYW4gK1xyXG4gICAgJzwvdGQ+PC90cj48dGJvZHk+PC90YWJsZT4nO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWFrZVBhZ2VUZW1wbGF0ZSh0aXRsZSwgY29tbWVudCwgc3BhbklkLCBidXR0b24sIGRpdklkKSB7XHJcbiAgcmV0dXJuIG1ha2VQYWdlSGVhZGVyKHRpdGxlLCBjb21tZW50LCBzcGFuSWQsIGJ1dHRvbikgK1xyXG4gICAgJzxkaXYgY2xhc3M9XCJmc2hTbWFsbFwiIGlkPVwiJyArIGRpdklkICsgJ1wiPjwvZGl2Pic7XHJcbn1cclxuXHJcbnZhciBnZXRNaW5zID0gW1xyXG4gIGZ1bmN0aW9uKG9iaiwgbWluKSB7XHJcbiAgICBpZiAob2JqLmRheSkge3JldHVybiBtaW4gKyBwYXJzZUludChvYmouZGF5LCAxMCkgKiAxNDQwO31cclxuICAgIHJldHVybiBtaW47XHJcbiAgfSxcclxuICBmdW5jdGlvbihvYmosIG1pbikge1xyXG4gICAgaWYgKG9iai5ob3VyKSB7cmV0dXJuIG1pbiArIHBhcnNlSW50KG9iai5ob3VyLCAxMCkgKiA2MDt9XHJcbiAgICByZXR1cm4gbWluO1xyXG4gIH0sXHJcbiAgZnVuY3Rpb24ob2JqLCBtaW4pIHtcclxuICAgIGlmIChvYmoubWluKSB7cmV0dXJuIG1pbiArIHBhcnNlSW50KG9iai5taW4sIDEwKTt9XHJcbiAgICByZXR1cm4gbWluO1xyXG4gIH0sXHJcbiAgZnVuY3Rpb24ob2JqLCBtaW4pIHtcclxuICAgIGlmIChvYmoubGFzdF9sb2dpbikge1xyXG4gICAgICByZXR1cm4gTWF0aC5mbG9vcigobm93U2VjcyAtIG9iai5sYXN0X2xvZ2luKSAvIDYwKTtcclxuICAgIH1cclxuICAgIHJldHVybiBtaW47XHJcbiAgfSxcclxuICBmdW5jdGlvbihvYmosIG1pbikge1xyXG4gICAgLy8gbGFzdF9sb2dpbiBpcyAnZmFsc2UnIG92ZXIgMzAgZGF5c1xyXG4gICAgaWYgKCdsYXN0X2xvZ2luJyBpbiBvYmogJiYgIW9iai5sYXN0X2xvZ2luKSB7cmV0dXJuIDk5OTk5O31cclxuICAgIHJldHVybiBtaW47XHJcbiAgfVxyXG5dO1xyXG5cclxudmFyIGdldERvdCA9IFtcclxuICB7Y29uZGl0aW9uOiAyLCByZXN1bHQ6IGdyZWVuRGlhbW9uZH0sXHJcbiAge2NvbmRpdGlvbjogNSwgcmVzdWx0OiB5ZWxsb3dEaWFtb25kfSxcclxuICB7Y29uZGl0aW9uOiAzMCwgcmVzdWx0OiBvcmFuZ2VEaWFtb25kfSxcclxuICB7Y29uZGl0aW9uOiAxMDA4MCwgcmVzdWx0OiBvZmZsaW5lRG90fSxcclxuICB7Y29uZGl0aW9uOiA0NDY0MCwgcmVzdWx0OiBzZXZlbkRheURvdH1cclxuXTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvbmxpbmVEb3Qob2JqKSB7XHJcbiAgdmFyIG1pbiA9IGdldE1pbnMucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cnIpIHtcclxuICAgIHJldHVybiBjdXJyKG9iaiwgcHJldik7XHJcbiAgfSwgMCk7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZXREb3QubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgIHZhciBlbCA9IGdldERvdFtpXTtcclxuICAgIGlmIChtaW4gPCBlbC5jb25kaXRpb24pIHtyZXR1cm4gZWwucmVzdWx0O31cclxuICB9XHJcbiAgcmV0dXJuIHJlZERvdDtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hhbmdlT25saW5lRG90KGNvbnRhY3RMaW5rKSB7XHJcbiAgdmFyIGxhc3RBY3Rpdml0eSA9IGxhc3RBY3Rpdml0eVJFXHJcbiAgICAuZXhlYyhjb250YWN0TGluay5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwcGVkJykpO1xyXG4gIGNvbnRhY3RMaW5rLnBhcmVudE5vZGUucHJldmlvdXNTaWJsaW5nLmlubmVySFRNTCA9XHJcbiAgICBvbmxpbmVEb3Qoe1xyXG4gICAgICBtaW46IGxhc3RBY3Rpdml0eVszXSxcclxuICAgICAgaG91cjogbGFzdEFjdGl2aXR5WzJdLFxyXG4gICAgICBkYXk6IGxhc3RBY3Rpdml0eVsxXVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJhdGNoRG90cygpIHtcclxuICB2YXIgbGltaXQgPSBwZXJmb3JtYW5jZS5ub3coKSArIDU7XHJcbiAgd2hpbGUgKHBlcmZvcm1hbmNlLm5vdygpIDwgbGltaXQgJiZcclxuICAgICAgZG90Q291bnQgPCBkb3RMaXN0Lmxlbmd0aCkge1xyXG4gICAgY2hhbmdlT25saW5lRG90KGRvdExpc3RbZG90Q291bnRdKTtcclxuICAgIGRvdENvdW50ICs9IDE7XHJcbiAgfVxyXG4gIGlmIChkb3RDb3VudCA8IGRvdExpc3QubGVuZ3RoKSB7XHJcbiAgICBhZGQoMywgYmF0Y2hEb3RzKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb2xvdXJlZERvdHMoKSB7XHJcbiAgaWYgKCFnZXRWYWx1ZSgnZW5oYW5jZU9ubGluZURvdHMnKSkge3JldHVybjt9XHJcbiAgZG90TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAnI3BDQyBhW2RhdGEtdGlwcGVkKj1cIkxhc3QgQWN0aXZpdHlcIl0nKTtcclxuICBkb3RDb3VudCA9IDA7XHJcbiAgYWRkKDMsIGJhdGNoRG90cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBqQ29uZmlybSh0aXRsZSwgbXNnVGV4dCwgZm4pIHsgLy8galF1ZXJ5XHJcbiAgdmFyIGZzaE1zZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmc2htc2cnKTtcclxuICBpZiAoIWZzaE1zZykge1xyXG4gICAgZnNoTXNnID0gY3JlYXRlRGl2KHtpZDogJ2ZzaG1zZyd9KTtcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZnNoTXNnKTtcclxuICAgICQoZnNoTXNnKS5kaWFsb2coe1xyXG4gICAgICBhdXRvT3BlbjogZmFsc2UsXHJcbiAgICAgIGRpYWxvZ0NsYXNzOiAnbm8tY2xvc2UnLFxyXG4gICAgICBkcmFnZ2FibGU6IGZhbHNlLFxyXG4gICAgICBtb2RhbDogdHJ1ZSxcclxuICAgICAgcmVzaXphYmxlOiBmYWxzZSxcclxuICAgIH0pO1xyXG4gIH1cclxuICBmc2hNc2cudGV4dENvbnRlbnQgPSBtc2dUZXh0O1xyXG4gICQoZnNoTXNnKS5kaWFsb2coJ29wdGlvbicsIHtcclxuICAgIGJ1dHRvbnM6IHtcclxuICAgICAgWWVzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBmbigpO1xyXG4gICAgICAgICQodGhpcykuZGlhbG9nKCdjbG9zZScpO1xyXG4gICAgICB9LFxyXG4gICAgICBObzogZnVuY3Rpb24oKSB7JCh0aGlzKS5kaWFsb2coJ2Nsb3NlJyk7fVxyXG4gICAgfSxcclxuICAgIHRpdGxlOiB0aXRsZVxyXG4gIH0pLmRpYWxvZygnb3BlbicpO1xyXG59XHJcbiIsImltcG9ydCBhZGQgZnJvbSAnLi4vc3VwcG9ydC90YXNrJztcclxuaW1wb3J0IGNhbGYgZnJvbSAnLi4vc3VwcG9ydC9jYWxmJztcclxuaW1wb3J0IHtub3d9IGZyb20gJy4uL3N1cHBvcnQvZGF0YU9iaic7XHJcbmltcG9ydCB7cENDfSBmcm9tICcuLi9zdXBwb3J0L2xheW91dCc7XHJcbmltcG9ydCByZXRyeUFqYXggZnJvbSAnLi4vYWpheC9yZXRyeUFqYXgnO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZURvY3VtZW50LFxyXG4gIGdldFJhbmRvbUludCxcclxuICBnZXRWYWx1ZSxcclxuICBpbWFnZVNlcnZlcixcclxuICBybmQsXHJcbiAgc2V0VmFsdWVcclxufSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG52YXIgY29tcG9zZU1zZyA9XHJcbiAgJzxsaSBjbGFzcz1cIm5vdGlmaWNhdGlvblwiPjxhIGhyZWY9XCJpbmRleC5waHA/Y21kPWNvbXBvc2luZ1wiPjxzcGFuJyArXHJcbiAgJyBjbGFzcz1cIm5vdGlmaWNhdGlvbi1pY29uXCI+PC9zcGFuPjxwIGNsYXNzPVwibm90aWZpY2F0aW9uLWNvbnRlbnRcIj4nICtcclxuICAnQ29tcG9zaW5nIHRvIGRvPC9wPjwvYT48L2xpPic7XHJcblxyXG5mdW5jdGlvbiBkaXNwbGF5Q29tcG9zZU1zZygpIHtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbm90aWZpY2F0aW9ucycpXHJcbiAgICAuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgY29tcG9zZU1zZyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldERvYyhkYXRhKSB7XHJcbiAgaWYgKGNhbGYuY21kICE9PSAnY29tcG9zaW5nJykge1xyXG4gICAgcmV0dXJuIGNyZWF0ZURvY3VtZW50KGRhdGEpO1xyXG4gIH1cclxuICByZXR1cm4gZG9jdW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlQ29tcG9zaW5nKGRhdGEpIHtcclxuICB2YXIgZG9jID0gZ2V0RG9jKGRhdGEpO1xyXG4gIHZhciB0aW1lUkUgPSAvRVRBOlxccyooXFxkKyloXFxzKihcXGQrKW1cXHMqKFxcZCspcy87XHJcbiAgdmFyIHRpbWVzID0gW107XHJcbiAgdmFyIG9wZW5TbG90cyA9IGRvYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb21wb3NpbmctcG90aW9uLXRpbWUnKTtcclxuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKG9wZW5TbG90cywgZnVuY3Rpb24oZWwpIHtcclxuICAgIGlmIChlbC50ZXh0Q29udGVudCA9PT0gJ0VUQTogUmVhZHkgdG8gQ29sbGVjdCEnIHx8XHJcbiAgICAgICAgZWwudGV4dENvbnRlbnQgPT09ICdFVEE6IG4vYScpIHtcclxuICAgICAgdGltZXMucHVzaCgwKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciB0aW1lQXJyID0gdGltZVJFLmV4ZWMoZWwudGV4dENvbnRlbnQpO1xyXG4gICAgICB2YXIgbWlsbGkgPSAodGltZUFyclsxXSAqIDM2MDAgKyB0aW1lQXJyWzJdICogNjAgKyBOdW1iZXIodGltZUFyclszXSkpICpcclxuICAgICAgICAxMDAwICsgbm93O1xyXG4gICAgICB0aW1lcy5wdXNoKG1pbGxpKTtcclxuICAgIH1cclxuICB9KTtcclxuICB2YXIgZXRhID0gTWF0aC5taW4uYXBwbHkobnVsbCwgdGltZXMpO1xyXG4gIGlmIChldGEgPT09IDApIHtcclxuICAgIGlmIChjYWxmLmNtZCAhPT0gJ2NvbXBvc2luZycpIHtkaXNwbGF5Q29tcG9zZU1zZygpO31cclxuICAgIHNldFZhbHVlKCduZWVkVG9Db21wb3NlJywgdHJ1ZSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHNldFZhbHVlKCduZWVkVG9Db21wb3NlJywgZmFsc2UpO1xyXG4gICAgc2V0VmFsdWUoJ2xhc3RDb21wb3NlQ2hlY2snLCBldGEpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlU3VjY2Vzcyh0ZW1wLCB0ZXh0U3RhdHVzKSB7XHJcbiAgdmFyIHBvdE5hbWUgPSB0ZW1wW3RlbXAuc2VsZWN0ZWRJbmRleF0udGV4dDtcclxuICB2YXIgbXlQYXJlbnQgPSB0ZW1wLnBhcmVudE5vZGU7XHJcbiAgdmFyIGluZm9EaXYgPSBteVBhcmVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XHJcbiAgaW5mb0Rpdi5jaGlsZHJlblswXS5pbm5lckhUTUwgPSAnJztcclxuICBpbmZvRGl2LmNoaWxkcmVuWzBdLmNsYXNzTGlzdC5hZGQoJ2ZzaFBvdCcpO1xyXG4gIGluZm9EaXYuY2hpbGRyZW5bMF0uc3R5bGUuYmFja2dyb3VuZEltYWdlID0gJ3VybCgnICsgaW1hZ2VTZXJ2ZXIgK1xyXG4gICAgJy9jb21wb3NpbmcvcG90aW9ucy8nICsgZ2V0UmFuZG9tSW50KDEsIDExKSArICdfJyArXHJcbiAgICBnZXRSYW5kb21JbnQoMSwgNTEpICsgJy5naWYpJztcclxuICBpbmZvRGl2LmNoaWxkcmVuWzJdLmlubmVySFRNTCA9ICdDcmVhdGluZyBcXCc8c3BhbiBjbGFzcz1cImZzaEJvbGRcIj4nICtcclxuICAgIHBvdE5hbWUgKyAnPC9zcGFuPlxcJyBQb3Rpb24nO1xyXG4gIGluZm9EaXYuY2hpbGRyZW5bM10uaW5uZXJIVE1MID0gJyc7XHJcbiAgbXlQYXJlbnQuaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9XCJmc2hTY3NcIj4nICsgdGV4dFN0YXR1cyArICc8L2Rpdj4nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVQb3Rpb24odGVtcCkgeyAvLyBqUXVlcnlcclxuICByZXRyeUFqYXgoe1xyXG4gICAgY2FjaGU6IGZhbHNlLFxyXG4gICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgIHVybDogJ2luZGV4LnBocCcsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIGNtZDogJ2NvbXBvc2luZycsXHJcbiAgICAgIHN1YmNtZDogJ2NyZWF0ZWFqYXgnLFxyXG4gICAgICB0ZW1wbGF0ZV9pZDogdGVtcC52YWx1ZSxcclxuICAgICAgX3JuZDogcm5kKClcclxuICAgIH1cclxuICB9KS5kb25lKGZ1bmN0aW9uIHBvdGlvbkRvbmUoZGF0YSwgdGV4dFN0YXR1cykge1xyXG4gICAgaWYgKGRhdGEuZXJyb3IgIT09ICcnKSB7XHJcbiAgICAgIHRlbXAucGFyZW50Tm9kZS5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz1cImZzaFNjc1wiPicgK1xyXG4gICAgICAgIGRhdGEuZXJyb3IgKyAnPC9kaXY+JztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNyZWF0ZVN1Y2Nlc3ModGVtcCwgdGV4dFN0YXR1cyk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHF1aWNrQ3JlYXRlQmFpbE91dCh0YXJnZXQpIHtcclxuICByZXR1cm4gdGFyZ2V0LnRhZ05hbWUgIT09ICdTUEFOJyB8fCB0YXJnZXQuY2xhc3NOYW1lICE9PSAncXVpY2tDcmVhdGUnO1xyXG59XHJcblxyXG5mdW5jdGlvbiBxdWlja0NyZWF0ZShldnQpIHtcclxuICB2YXIgdGFyZ2V0ID0gZXZ0LnRhcmdldDtcclxuICBpZiAocXVpY2tDcmVhdGVCYWlsT3V0KHRhcmdldCkpIHtyZXR1cm47fVxyXG4gIHZhciB0ZW1wID0gdGFyZ2V0LnByZXZpb3VzRWxlbWVudFNpYmxpbmcucHJldmlvdXNFbGVtZW50U2libGluZztcclxuICBpZiAodGVtcCAmJiB0ZW1wLnZhbHVlICE9PSAnbm9uZScpIHtcclxuICAgIGNyZWF0ZVBvdGlvbih0ZW1wKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrTGFzdENvbXBvc2UoKSB7IC8vIGpRdWVyeVxyXG4gIHZhciBsYXN0Q29tcG9zZUNoZWNrID0gZ2V0VmFsdWUoJ2xhc3RDb21wb3NlQ2hlY2snKTtcclxuICBpZiAobGFzdENvbXBvc2VDaGVjayAmJiBub3cgPCBsYXN0Q29tcG9zZUNoZWNrKSB7cmV0dXJuO31cclxuICByZXRyeUFqYXgoJ2luZGV4LnBocD9jbWQ9Y29tcG9zaW5nJykuZG9uZShmdW5jdGlvbihkYXRhKSB7XHJcbiAgICBhZGQoMywgcGFyc2VDb21wb3NpbmcsIFtkYXRhXSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbXBvc2VBbGVydCgpIHtcclxuICB2YXIgbmVlZFRvQ29tcG9zZSA9IGdldFZhbHVlKCduZWVkVG9Db21wb3NlJyk7XHJcbiAgaWYgKG5lZWRUb0NvbXBvc2UpIHtcclxuICAgIGRpc3BsYXlDb21wb3NlTXNnKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGNoZWNrTGFzdENvbXBvc2UoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdENvbXBvc2VBbGVydCgpIHtcclxuICBpZiAoY2FsZi5jbWQgIT09ICdjb21wb3NpbmcnKSB7Y29tcG9zZUFsZXJ0KCk7fVxyXG59XHJcblxyXG5mdW5jdGlvbiBtb3ZlQnV0dG9ucygpIHtcclxuICBpZiAoZ2V0VmFsdWUoJ21vdmVDb21wb3NpbmdCdXR0b25zJykpIHtcclxuICAgIHZhciBidXR0b25EaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tcG9zaW5nLWVycm9yLWRpYWxvZycpXHJcbiAgICAgIC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xyXG4gICAgYnV0dG9uRGl2LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAndGV4dC1hbGlnbjogcmlnaHQ7IHBhZGRpbmc6IDAgMzhweCAwIDAnKTtcclxuICAgIHZhciB0b3AgPSBwQ0MuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY29tcG9zaW5nLWxldmVsJylbMF1cclxuICAgICAgLnBhcmVudE5vZGU7XHJcbiAgICB0b3AuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdiZWZvcmViZWdpbicsIGJ1dHRvbkRpdik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0Q29tcG9zaW5nKCkge1xyXG4gIGlmICghcENDKSB7cmV0dXJuO31cclxuICBpZiAoY2FsZi5lbmFibGVDb21wb3NpbmdBbGVydCkge1xyXG4gICAgcGFyc2VDb21wb3NpbmcoKTtcclxuICB9XHJcblxyXG4gIHZhciBidXR0b25zID0gcENDXHJcbiAgICAucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbaWRePWNyZWF0ZS1dOm5vdCgjY3JlYXRlLW11bHRpKScpO1xyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYnV0dG9ucywgZnVuY3Rpb24oZWwpIHtcclxuICAgIGVsLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJlbmQnLFxyXG4gICAgICAnJm5ic3A7WzxzcGFuIGNsYXNzPVwicXVpY2tDcmVhdGVcIj5RdWljayBDcmVhdGU8L3NwYW4+XScpO1xyXG4gIH0pO1xyXG4gIHBDQy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHF1aWNrQ3JlYXRlKTtcclxuICBtb3ZlQnV0dG9ucygpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29tcG9zaW5nQ3JlYXRlKCkge1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb21wb3NpbmctYWRkLXNraWxsJylcclxuICAgIC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tcG9zaW5nLXNraWxsLWxldmVsLWlucHV0JykudmFsdWUgPVxyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb21wb3Npbmctc2tpbGwtbGV2ZWwtbWF4JykudGV4dENvbnRlbnQ7XHJcbiAgICB9KTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tcG9zaW5nLXNraWxsLXNlbGVjdCcpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb21wb3Npbmctc2tpbGwtbGV2ZWwtaW5wdXQnKS52YWx1ZSA9XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbXBvc2luZy1za2lsbC1sZXZlbC1tYXgnKS50ZXh0Q29udGVudDtcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCBnZXRGb3JhZ2UgZnJvbSAnLi9hamF4L2dldEZvcmFnZSc7XHJcbmltcG9ydCBzZXRGb3JhZ2UgZnJvbSAnLi9hamF4L3NldEZvcmFnZSc7XHJcbmltcG9ydCB7XHJcbiAgYWRkQ29tbWFzLFxyXG4gIGZhbGxiYWNrLFxyXG4gIGZpbmROb2RlLFxyXG4gIGdldFZhbHVlLFxyXG4gIGludFZhbHVlXHJcbn0gZnJvbSAnLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCB7bWFrZVBhZ2VUZW1wbGF0ZSwgcENDLCBxdWlja0J1ZmZIcmVmfSBmcm9tICcuL3N1cHBvcnQvbGF5b3V0JztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RGaW5kUGxheWVyKCkgeyAvLyBCYWQgalF1ZXJ5XHJcbiAgdmFyIGZpbmRQbGF5ZXJCdXR0b24gPSAkKCdpbnB1dFt2YWx1ZT1cIkZpbmQgUGxheWVyXCJdJyk7XHJcbiAgdmFyIGxldmVsVG9UZXN0ID0gaW50VmFsdWUoJCgnZHQuc3RhdC1sZXZlbDpmaXJzdCcpLm5leHQoKVxyXG4gICAgLnRleHQoKSk7XHJcbiAgdmFyIGNoYXJhY3RlclZpcnR1YWxMZXZlbCA9IGdldFZhbHVlKCdjaGFyYWN0ZXJWaXJ0dWFsTGV2ZWwnKTtcclxuICBsZXZlbFRvVGVzdCA9IGZhbGxiYWNrKGNoYXJhY3RlclZpcnR1YWxMZXZlbCwgbGV2ZWxUb1Rlc3QpO1xyXG4gIHZhciBwdnBMb3dlckxldmVsTW9kaWZpZXIgPSA1O1xyXG4gIGlmIChsZXZlbFRvVGVzdCA+IDIwNSkge3B2cExvd2VyTGV2ZWxNb2RpZmllciA9IDEwO31cclxuICB2YXIgcHZwVXBwZXJMZXZlbE1vZGlmaWVyID0gNTtcclxuICBpZiAobGV2ZWxUb1Rlc3QgPj0gMjAwKSB7cHZwVXBwZXJMZXZlbE1vZGlmaWVyID0gMTA7fVxyXG4gIGZpbmRQbGF5ZXJCdXR0b24ucGFyZW50KCkuYXBwZW5kKCcmbmJzcDs8YSBocmVmPVwiaW5kZXgucGhwPycgK1xyXG4gICAgJ2NtZD1maW5kcGxheWVyJnNlYXJjaF9hY3RpdmU9MSZzZWFyY2hfdXNlcm5hbWU9JnNlYXJjaF9sZXZlbF9taW49JyArXHJcbiAgICAobGV2ZWxUb1Rlc3QgLSBwdnBMb3dlckxldmVsTW9kaWZpZXIpICsgJyZzZWFyY2hfbGV2ZWxfbWF4PScgK1xyXG4gICAgKGxldmVsVG9UZXN0ICsgcHZwVXBwZXJMZXZlbE1vZGlmaWVyKSArICcmc2VhcmNoX2luX2d1aWxkPTBcIj48c3BhbiAnICtcclxuICAgICdzdHlsZT1cImNvbG9yOmJsdWU7XCI+R2V0IFB2UCB0YXJnZXRzPC9zcGFuPjwvYT4mbmJzcDs8YSBocmVmPVwiJyArXHJcbiAgICAnaW5kZXgucGhwP2NtZD1maW5kcGxheWVyJnNlYXJjaF9hY3RpdmU9MSZzZWFyY2hfdXNlcm5hbWU9JicgK1xyXG4gICAgJ3NlYXJjaF9sZXZlbF9taW49JyArIChsZXZlbFRvVGVzdCAtIDI1KSArICcmc2VhcmNoX2xldmVsX21heD0nICtcclxuICAgIChsZXZlbFRvVGVzdCArIDI1KSArICcmc2VhcmNoX2luX2d1aWxkPTBcIj48c3BhbiBzdHlsZT1cImNvbG9yOmJsdWU7XCI+JyArXHJcbiAgICAnR2V0IEd2RyB0YXJnZXRzPC9zcGFuPjwvYT4nKTtcclxuXHJcbiAgJCgndGFibGVbY2xhc3M9XCJ3aWR0aF9mdWxsXCJdJykuZmluZCgnYVtocmVmKj1cInBsYXllcl9pZFwiXScpXHJcbiAgICAuZWFjaChmdW5jdGlvbihpLCBlKSB7XHJcbiAgICAgIHZhciBpZCA9IC9wbGF5ZXJfaWQ9KFswLTldKikvLmV4ZWMoJChlKS5hdHRyKCdocmVmJykpO1xyXG4gICAgICAkKGUpLmFmdGVyKCc8YSBzdHlsZT1cImNvbG9yOmJsdWU7Zm9udC1zaXplOjEwcHg7XCIgJyArXHJcbiAgICAgICAgcXVpY2tCdWZmSHJlZihpZFsxXSkgKyAnPltiXTwvYT4nKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYXJrZXRwbGFjZVdhcm5pbmcoc2VsbFByaWNlKSB7IC8vIExlZ2FjeVxyXG4gIHZhciB3YXJuaW5nQ29sb3IgPSAnZ3JlZW4nO1xyXG4gIHZhciB3YXJuaW5nVGV4dCA9XHJcbiAgICAnPC9iPjxicj5UaGlzIGlzIHByb2JhYmx5IGFuIG9mZmVyIHRoYXQgd2lsbCBwbGVhc2Ugc29tZW9uZS4nO1xyXG4gIGlmIChzZWxsUHJpY2UgPCAxMDAwMDApIHtcclxuICAgIHdhcm5pbmdDb2xvciA9ICdicm93bic7XHJcbiAgICB3YXJuaW5nVGV4dCA9ICc8L2I+PGJyPlRoaXMgaXMgdG9vIGxvdyAuLi4gaXQganVzdCBhaW5cInQgZ29ubmEgc2VsbC4nO1xyXG4gIH1cclxuICBpZiAoc2VsbFByaWNlID4gMjUwMDAwKSB7XHJcbiAgICB3YXJuaW5nQ29sb3IgPSAncmVkJztcclxuICAgIHdhcm5pbmdUZXh0ID0gJzwvYj48YnI+SG9sZCB1cCB0aGVyZSAuLi4gdGhpcyBpcyB3YXkgdG8gaGlnaCBhICcgK1xyXG4gICAgICAncHJpY2UgLi4uIHlvdSBzaG91bGQgcmVjb25zaWRlci4nO1xyXG4gIH1cclxuICB2YXIgYW1vdW50ID0gZmluZE5vZGUoJy8vaW5wdXRbQGlkPVwiYW1vdW50XCJdJykudmFsdWU7XHJcbiAgdmFyIHdhcm5pbmdGaWVsZCA9IGZpbmROb2RlKCcvL3RkW0BpZD1cIndhcm5pbmdmaWVsZFwiXScpO1xyXG4gIHdhcm5pbmdGaWVsZC5pbm5lckhUTUwgPSAnPHNwYW4gc3R5bGU9XCJjb2xvcjonICsgd2FybmluZ0NvbG9yICtcclxuICAgICc7XCI+WW91IGFyZSBvZmZlcmluZyB0byBidXkgPGI+JyArIGFtb3VudCArXHJcbiAgICAnPC9iPiBGU1AgZm9yID4+IDxiPicgKyBhZGRDb21tYXMoc2VsbFByaWNlKSArXHJcbiAgICB3YXJuaW5nVGV4dCArICcgKFRvdGFsOiAnICtcclxuICAgIGFkZENvbW1hcyhhbW91bnQgKiBzZWxsUHJpY2UgK1xyXG4gICAgTWF0aC5jZWlsKGFtb3VudCAqIHNlbGxQcmljZSAqIDAuMDA1KSkgKyAnKTwvc3Bhbj4nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRNYXJrZXRwbGFjZVdhcm5pbmcoKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBnb2xkUGVyUG9pbnQgPSBmaW5kTm9kZSgnLy9pbnB1dFtAaWQ9XCJwcmljZVwiXScpO1xyXG4gIHZhciBzZWxsUHJpY2UgPSBnb2xkUGVyUG9pbnQudmFsdWU7XHJcbiAgaWYgKHNlbGxQcmljZS5zZWFyY2goL15bMC05XSokLykgIT09IC0xKSB7XHJcbiAgICBtYXJrZXRwbGFjZVdhcm5pbmcoc2VsbFByaWNlKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRNYXJrZXRwbGFjZVdpZGdldHMoKSB7IC8vIExlZ2FjeVxyXG4gIHZhciByZXF1ZXN0VGFibGUgPSBmaW5kTm9kZShcclxuICAgICcvL3RhYmxlW3Rib2R5L3RyL3RkL2lucHV0W0B2YWx1ZT1cIkNvbmZpcm0gUmVxdWVzdFwiXV0nKTtcclxuICB2YXIgbmV3Um93ID0gcmVxdWVzdFRhYmxlLmluc2VydFJvdygyKTtcclxuICB2YXIgbmV3Q2VsbCA9IG5ld1Jvdy5pbnNlcnRDZWxsKDApO1xyXG4gIG5ld0NlbGwuaWQgPSAnd2FybmluZ2ZpZWxkJztcclxuICBuZXdDZWxsLmNvbFNwYW4gPSAnMic7XHJcbiAgbmV3Q2VsbC5hbGlnbiA9ICdjZW50ZXInO1xyXG5cclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJpY2UnKS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsXHJcbiAgICBhZGRNYXJrZXRwbGFjZVdhcm5pbmcsIHRydWUpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbW91bnQnKS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsXHJcbiAgICBhZGRNYXJrZXRwbGFjZVdhcm5pbmcsIHRydWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0Tm90ZXBhZCgpIHsgLy8galF1ZXJ5XHJcbiAgJCgnI25vdGVwYWRfbm90ZXMnKVxyXG4gICAgLmF0dHIoJ2NvbHMnLCAnOTAnKVxyXG4gICAgLmF0dHIoJ3Jvd3MnLCAnMzAnKVxyXG4gICAgLmNzcygncmVzaXplJywgJ25vbmUnKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdEZzQm94Q29udGVudChpbmplY3RvcikgeyAvLyBqUXVlcnlcclxuICB2YXIgY29udGVudCA9IGluamVjdG9yIHx8IHBDQztcclxuICBjb250ZW50LmlubmVySFRNTCA9IG1ha2VQYWdlVGVtcGxhdGUoJ0ZTIEJveCBMb2cnLCAnJyxcclxuICAgICdmc2JveGNsZWFyJywgJ0NsZWFyJywgJ2ZzYm94ZGV0YWlsJyk7XHJcbiAgZ2V0Rm9yYWdlKCdmc2hfZnNib3hjb250ZW50JykuZG9uZShmdW5jdGlvbihmc2JveGNvbnRlbnQpIHtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmc2JveGRldGFpbCcpLmlubmVySFRNTCA9IGZzYm94Y29udGVudDtcclxuICB9KTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnNib3hjbGVhcicpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgc2V0Rm9yYWdlKCdmc2hfZnNib3hjb250ZW50JywgJycpO1xyXG4gICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgIH0sIHRydWUpO1xyXG59XHJcbiIsImltcG9ydCB7Y3JlYXRlRGl2fSBmcm9tICcuLi9jb21tb24vY0VsZW1lbnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24galF1ZXJ5RGlhbG9nKGZuKSB7IC8vIGpRdWVyeVxyXG4gIHZhciBjb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKTtcclxuICBpZiAoY29udGVudCkge2NvbnRlbnQuaW5uZXJIVE1MID0gJyc7fSBlbHNlIHtcclxuICAgIGNvbnRlbnQgPSBjcmVhdGVEaXYoe1xyXG4gICAgICBpZDogJ2NvbnRlbnQnLFxyXG4gICAgICBzdHlsZToge2Rpc3BsYXk6ICdub25lJ31cclxuICAgIH0pO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250ZW50KTtcclxuICB9XHJcbiAgJChjb250ZW50KS5kaWFsb2coe1xyXG4gICAgd2lkdGg6IDY0MCxcclxuICAgIG1vZGFsOiB0cnVlLFxyXG4gICAgcG9zaXRpb246IHtteTogJ3RvcCcsIGF0OiAndG9wJywgb2Zmc2V0OiAnMCA2MCcsIGNvbGxpc2lvbjogJ25vbmUnfSxcclxuICAgIHJlc2l6YWJsZTogZmFsc2VcclxuICB9KTtcclxuICBmbihjb250ZW50KTtcclxufVxyXG4iLCJpbXBvcnQge2NyZWF0ZVNwYW59IGZyb20gJy4uL2NvbW1vbi9jRWxlbWVudCc7XHJcbmltcG9ydCBnZXRGb3JhZ2UgZnJvbSAnLi4vYWpheC9nZXRGb3JhZ2UnO1xyXG5pbXBvcnQge2luamVjdEZzQm94Q29udGVudH0gZnJvbSAnLi4vbWlzYyc7XHJcbmltcG9ydCBqUXVlcnlEaWFsb2cgZnJvbSAnLi9qUXVlcnlEaWFsb2cnO1xyXG5pbXBvcnQgc2V0Rm9yYWdlIGZyb20gJy4uL2FqYXgvc2V0Rm9yYWdlJztcclxuXHJcbmZ1bmN0aW9uIGdldEJveExpc3QoYm94TGlzdCkge1xyXG4gIGlmIChib3hMaXN0KSB7cmV0dXJuIGJveExpc3Q7fVxyXG4gIHJldHVybiAnJztcclxufVxyXG5cclxuZnVuY3Rpb24gc3RvcmVGU0JveChfYm94TGlzdCkge1xyXG4gIHZhciBib3hMaXN0ID0gZ2V0Qm94TGlzdChfYm94TGlzdCk7XHJcbiAgdmFyIGZzYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21pbmlib3gtZnNib3gnKVxyXG4gICAgLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21lc3NhZ2UnKVswXS5pbm5lckhUTUw7XHJcbiAgaWYgKGJveExpc3QuaW5kZXhPZihmc2JveCkgPCAwKSB7Ym94TGlzdCA9ICc8YnI+JyArIGZzYm94ICsgYm94TGlzdDt9XHJcbiAgaWYgKGJveExpc3QubGVuZ3RoID4gMTAwMDApIHtib3hMaXN0ID0gYm94TGlzdC5zdWJzdHJpbmcoMCwgMTAwMDApO31cclxuICBzZXRGb3JhZ2UoJ2ZzaF9mc2JveGNvbnRlbnQnLCBib3hMaXN0KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0RlNCb3hMb2coKSB7XHJcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWluaWJveC1mc2JveCcpO1xyXG4gIGlmICghbm9kZSkge3JldHVybjt9XHJcbiAgdmFyIG5vZGVkaXYgPSBub2RlLmxhc3RFbGVtZW50Q2hpbGQ7XHJcbiAgdmFyIHBsYXllck5hbWUgPSBub2RlZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJyk7XHJcbiAgaWYgKHBsYXllck5hbWUubGVuZ3RoID09PSAwKSB7cmV0dXJuO31cclxuICBnZXRGb3JhZ2UoJ2ZzaF9mc2JveGNvbnRlbnQnKS5kb25lKHN0b3JlRlNCb3gpO1xyXG4gIHBsYXllck5hbWUgPSBwbGF5ZXJOYW1lWzBdLnRleHRDb250ZW50O1xyXG4gIG5vZGVkaXYuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLFxyXG4gICAgJzxicj48c3BhbiBjbGFzcz1cImZzaFBhbGVWaW9sZXRSZWRcIj4nICtcclxuICAgICdbIDxhIGhyZWY9XCJpbmRleC5waHA/Y21kPWxvZyZzdWJjbWQ9ZG9hZGRpZ25vcmUmaWdub3JlX3VzZXJuYW1lPScgK1xyXG4gICAgcGxheWVyTmFtZSArICdcIj5JZ25vcmU8L2E+IF08L3NwYW4+ICcpO1xyXG4gIHZhciBsb2cgPSBjcmVhdGVTcGFuKHtcclxuICAgIGNsYXNzTmFtZTogJ2ZzaFllbGxvdycsXHJcbiAgICBpbm5lckhUTUw6ICdbIDxzcGFuIGNsYXNzPVwiZnNoTGlua1wiPkxvZzwvc3Bhbj4gXSdcclxuICB9KTtcclxuICBsb2cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtqUXVlcnlEaWFsb2coaW5qZWN0RnNCb3hDb250ZW50KTt9KTtcclxuICBub2RlZGl2LmFwcGVuZENoaWxkKGxvZyk7XHJcbn1cclxuIiwiaW1wb3J0IGdldEZvcmFnZSBmcm9tICcuLi9hamF4L2dldEZvcmFnZSc7XHJcbmltcG9ydCBzZXRGb3JhZ2UgZnJvbSAnLi4vYWpheC9zZXRGb3JhZ2UnO1xyXG5pbXBvcnQge21ha2VQYWdlVGVtcGxhdGUsIHBDQ30gZnJvbSAnLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5cclxuZnVuY3Rpb24gZGlzcGxheUJ1ZmZMb2coYnVmZkxvZykge1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidWZmbG9nJykuaW5uZXJIVE1MID0gYnVmZkxvZztcclxufVxyXG5cclxuZnVuY3Rpb24gY2xlYXJCdWZmTG9nKCkge1xyXG4gIHNldEZvcmFnZSgnZnNoX2J1ZmZMb2cnLCAnJykuZG9uZShkaXNwbGF5QnVmZkxvZyk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluamVjdEJ1ZmZMb2coaW5qZWN0b3IpIHtcclxuICB2YXIgY29udGVudCA9IGluamVjdG9yIHx8IHBDQztcclxuICBjb250ZW50LmlubmVySFRNTCA9IG1ha2VQYWdlVGVtcGxhdGUoJ0J1ZmYgTG9nJywgJycsXHJcbiAgICAnY2xlYXJCdWZmcycsICdDbGVhcicsICdidWZmbG9nJyk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NsZWFyQnVmZnMnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsZWFyQnVmZkxvZyk7XHJcbiAgZ2V0Rm9yYWdlKCdmc2hfYnVmZkxvZycpLmRvbmUoZGlzcGxheUJ1ZmZMb2cpO1xyXG59XHJcbiIsImltcG9ydCBjYWxmIGZyb20gJy4vc3VwcG9ydC9jYWxmJztcclxuaW1wb3J0IGdldEZvcmFnZSBmcm9tICcuL2FqYXgvZ2V0Rm9yYWdlJztcclxuaW1wb3J0IHtwQ0N9IGZyb20gJy4vc3VwcG9ydC9sYXlvdXQnO1xyXG5pbXBvcnQgc2V0Rm9yYWdlIGZyb20gJy4vYWpheC9zZXRGb3JhZ2UnO1xyXG5pbXBvcnQge2FkZENvbW1hcywgaW1hZ2VTZXJ2ZXIsIG51bWJlclNvcnQsIHN0cmluZ1NvcnR9IGZyb20gJy4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5cclxudmFyIGNvbnRlbnQ7XHJcbnZhciBtb25zdGVyQXJ5O1xyXG5cclxuZnVuY3Rpb24gbm9Nb2JzKCkge1xyXG4gIGNvbnRlbnQuaW5uZXJIVE1MID0gJzxzcGFuPk5vIG1vbnN0ZXIgaW5mb3JtYXRpb24hICcgK1xyXG4gICAgJ1BsZWFzZSBlbmFibGUgZW50aXR5IGxvZyBhbmQgdHJhdmVsIGEgYml0IHRvIHNlZSB0aGUgd29ybGQ8L3NwYW4+JztcclxufVxyXG5cclxuZnVuY3Rpb24gbW9iUm93cygpIHtcclxuICB2YXIgcmVzdWx0ID0gJyc7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb25zdGVyQXJ5Lmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICByZXN1bHQgKz0gJzx0cj4nICtcclxuICAgICAgJzx0ZCBjbGFzcz1cImZzaENlbnRlclwiPicgKyBtb25zdGVyQXJ5W2ldLmltYWdlICsgJzwvdGQ+JyArXHJcbiAgICAgICc8dGQ+JyArIG1vbnN0ZXJBcnlbaV0ubmFtZSArICc8L3RkPicgK1xyXG4gICAgICAnPHRkIGNsYXNzPVwiZnNoQ2VudGVyXCI+JyArIG1vbnN0ZXJBcnlbaV0uY3JlYXR1cmVfY2xhc3MgKyAnPC90ZD4nICtcclxuICAgICAgJzx0ZCBjbGFzcz1cImZzaENlbnRlclwiPicgKyBtb25zdGVyQXJ5W2ldLmxldmVsICsgJzwvdGQ+JyArXHJcbiAgICAgICc8dGQgY2xhc3M9XCJmc2hDZW50ZXJcIj4nICsgbW9uc3RlckFyeVtpXS5hdHRhY2sgKyAnPC90ZD4nICtcclxuICAgICAgJzx0ZCBjbGFzcz1cImZzaENlbnRlclwiPicgKyBtb25zdGVyQXJ5W2ldLmRlZmVuc2UgKyAnPC90ZD4nICtcclxuICAgICAgJzx0ZCBjbGFzcz1cImZzaENlbnRlclwiPicgKyBtb25zdGVyQXJ5W2ldLmFybW9yICsgJzwvdGQ+JyArXHJcbiAgICAgICc8dGQgY2xhc3M9XCJmc2hDZW50ZXJcIj4nICsgbW9uc3RlckFyeVtpXS5kYW1hZ2UgKyAnPC90ZD4nICtcclxuICAgICAgJzx0ZCBjbGFzcz1cImZzaENlbnRlclwiPicgKyBtb25zdGVyQXJ5W2ldLmhwICsgJzwvdGQ+JyArXHJcbiAgICAgICc8dGQgY2xhc3M9XCJmc2hDZW50ZXJcIj4nICsgbW9uc3RlckFyeVtpXS5lbmhhbmNlbWVudHMgKyAnPC90ZD48L3RyPic7XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdNb2JzKCkge1xyXG4gIHZhciBpbmplY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW50aXR5VGFibGVPdXRwdXQnKTtcclxuICBpZiAoIW1vbnN0ZXJBcnkgfHwgIWluamVjdCkge3JldHVybjt9XHJcbiAgaW5qZWN0LmlubmVySFRNTCA9IG1vYlJvd3MoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZFNvcnRUeXBlKHRhcmdldCkge1xyXG4gIHJldHVybiB0YXJnZXQuZ2V0QXR0cmlidXRlKCdzb3J0VHlwZScpIHx8ICdzdHJpbmcnO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzb3J0TW9uc3RlckFyeShzb3J0VHlwZSkge1xyXG4gIGlmIChzb3J0VHlwZSA9PT0gJ3N0cmluZycpIHtcclxuICAgIG1vbnN0ZXJBcnkuc29ydChzdHJpbmdTb3J0KTtcclxuICB9IGVsc2Uge1xyXG4gICAgbW9uc3RlckFyeS5zb3J0KG51bWJlclNvcnQpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc29ydENvbCh0YXJnZXQpIHtcclxuICB2YXIgaGVhZGVyQ2xpY2tlZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ3NvcnRLZXknKTtcclxuICBpZiAodHlwZW9mIGNhbGYuc29ydEFzYyA9PT0gJ3VuZGVmaW5lZCcpIHtjYWxmLnNvcnRBc2MgPSB0cnVlO31cclxuICBpZiAoY2FsZi5zb3J0QnkgJiYgY2FsZi5zb3J0QnkgPT09IGhlYWRlckNsaWNrZWQpIHtcclxuICAgIGNhbGYuc29ydEFzYyA9ICFjYWxmLnNvcnRBc2M7XHJcbiAgfVxyXG4gIGNhbGYuc29ydEJ5ID0gaGVhZGVyQ2xpY2tlZDtcclxuICB2YXIgc29ydFR5cGUgPSBmaW5kU29ydFR5cGUodGFyZ2V0KTtcclxuICBzb3J0TW9uc3RlckFyeShzb3J0VHlwZSk7XHJcbiAgZHJhd01vYnMoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZG9IYW5kbGVycyhldnQpIHtcclxuICB2YXIgdGFyZ2V0ID0gZXZ0LnRhcmdldDtcclxuICBpZiAodGFyZ2V0LmlkID09PSAnY2xlYXJFbnRpdHlMb2cnKSB7XHJcbiAgICBzZXRGb3JhZ2UoJ2ZzaF9tb25zdGVyTG9nJywgJycpO1xyXG4gICAgbm9Nb2JzKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGlmICghdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZnNoTGluaycpKSB7cmV0dXJuO31cclxuICBzb3J0Q29sKHRhcmdldCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdUYWJsZSgpIHtcclxuICBpZiAoIW1vbnN0ZXJBcnkpIHtyZXR1cm47fVxyXG4gIGNvbnRlbnQuaW5uZXJIVE1MID0gJzx0YWJsZSBjZWxsc3BhY2luZz1cIjBcIiBjZWxscGFkZGluZz1cIjBcIiBib3JkZXI9XCIwXCIgJyArXHJcbiAgICAnd2lkdGg9XCIxMDAlXCI+PHRyIGNsYXNzPVwiZnNoQmxhY2sgZnNoV2hpdGVcIj4nICtcclxuICAgICc8dGQgd2lkdGg9XCI5MCVcIiBjbGFzcz1cImZzaENlbnRlclwiPjxiPkVudGl0eSBJbmZvcm1hdGlvbjwvYj48L3RkPicgK1xyXG4gICAgJzx0ZCB3aWR0aD1cIjEwJVwiPls8c3BhbiBpZD1cImNsZWFyRW50aXR5TG9nXCIgY2xhc3M9XCJmc2hQb2ludFwiPkNsZWFyJyArXHJcbiAgICAnPC9zcGFuPl08L3RkPjwvdHI+PC90YWJsZT4nICtcclxuICAgICc8dGFibGUgY2VsbHNwYWNpbmc9XCIxXCIgY2VsbHBhZGRpbmc9XCIyXCIgYm9yZGVyPVwiMFwiPjx0aGVhZD4nICtcclxuICAgICc8dHIgY2xhc3M9XCJmc2hWZXJ5U29mdE9yYW5nZVwiPicgK1xyXG4gICAgJzx0aCB3aWR0aD1cIjI1JVwiIGNsYXNzPVwiZnNoTGlua1wiIHNvcnRrZXk9XCJuYW1lXCIgY29sc3Bhbj1cIjJcIj5FbnRpdHk8L3RoPicgK1xyXG4gICAgJzx0aCBjbGFzcz1cImZzaENlbnRlciBmc2hMaW5rXCIgc29ydGtleT1cImNyZWF0dXJlX2NsYXNzXCI+Q2xhc3M8L3RoPicgK1xyXG4gICAgJzx0aCBjbGFzcz1cImZzaENlbnRlciBmc2hMaW5rXCIgc29ydGtleT1cImxldmVsXCIgc29ydHR5cGU9XCJudW1iZXJcIj5Mdmw8L3RoPicgK1xyXG4gICAgJzx0aCBjbGFzcz1cImZzaENlbnRlclwiPkF0dGFjazwvdGg+JyArXHJcbiAgICAnPHRoIGNsYXNzPVwiZnNoQ2VudGVyXCI+RGVmZW5jZTwvdGg+JyArXHJcbiAgICAnPHRoIGNsYXNzPVwiZnNoQ2VudGVyXCI+QXJtb3I8L3RoPicgK1xyXG4gICAgJzx0aCBjbGFzcz1cImZzaENlbnRlclwiPkRhbWFnZTwvdGg+JyArXHJcbiAgICAnPHRoIGNsYXNzPVwiZnNoQ2VudGVyXCI+SFA8L3RoPicgK1xyXG4gICAgJzx0aCBjbGFzcz1cImZzaENlbnRlclwiPkVuaGFuY2VtZW50czwvdGg+JyArXHJcbiAgICAnPC90cj48L3RoZWFkPjx0Ym9keSBpZD1cImVudGl0eVRhYmxlT3V0cHV0XCI+PC90Ym9keT48L3RhYmxlPic7XHJcbiAgY29udGVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGRvSGFuZGxlcnMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcmVwTW9uc3RlcihkYXRhKSB7XHJcbiAgbW9uc3RlckFyeSA9IE9iamVjdC5rZXlzKGRhdGEpLnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXJyKSB7XHJcbiAgICB2YXIgdG1wT2JqID0gZGF0YVtjdXJyXTtcclxuICAgIHRtcE9iai5uYW1lID0gY3VycjtcclxuICAgIHRtcE9iai5pbWFnZSA9ICc8aW1nIGNsYXNzPVwidGlwLXN0YXRpY1wiIHNyYz1cIicgKyBpbWFnZVNlcnZlciArXHJcbiAgICAgICcvY3JlYXR1cmVzLycgKyB0bXBPYmouaW1hZ2VfaWQgKyAnLmpwZ1wiIGRhdGEtdGlwcGVkPVwiPGltZyBzcmM9XFwnJyArXHJcbiAgICAgIGltYWdlU2VydmVyICsgJy9jcmVhdHVyZXMvJyArIHRtcE9iai5pbWFnZV9pZCArXHJcbiAgICAgICcuanBnXFwnIHdpZHRoPTIwMCBoZWlnaHQ9MjAwPlwiIHdpZHRoPTQwIGhlaWdodD00MD4nO1xyXG4gICAgdG1wT2JqLmxldmVsID0gYWRkQ29tbWFzKHRtcE9iai5sZXZlbCk7XHJcbiAgICB0bXBPYmouYXR0YWNrID0gdG1wT2JqLmF0dGFjay5taW4gKyAnIC0gJyArIHRtcE9iai5hdHRhY2subWF4O1xyXG4gICAgdG1wT2JqLmRlZmVuc2UgPSB0bXBPYmouZGVmZW5zZS5taW4gKyAnIC0gJyArIHRtcE9iai5kZWZlbnNlLm1heDtcclxuICAgIHRtcE9iai5hcm1vciA9IHRtcE9iai5hcm1vci5taW4gKyAnIC0gJyArIHRtcE9iai5hcm1vci5tYXg7XHJcbiAgICB0bXBPYmouZGFtYWdlID0gdG1wT2JqLmRhbWFnZS5taW4gKyAnIC0gJyArIHRtcE9iai5kYW1hZ2UubWF4O1xyXG4gICAgdG1wT2JqLmhwID0gdG1wT2JqLmhwLm1pbiArICcgLSAnICsgdG1wT2JqLmhwLm1heDtcclxuICAgIHZhciBlbmhhbmNlbWVudHM7XHJcbiAgICBpZiAodG1wT2JqLmVuaGFuY2VtZW50cykge2VuaGFuY2VtZW50cyA9IE9iamVjdC5rZXlzKHRtcE9iai5lbmhhbmNlbWVudHMpO31cclxuICAgIGlmIChlbmhhbmNlbWVudHMgJiYgZW5oYW5jZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgdmFyIHRtcCA9ICc8c3BhbiBjbGFzcz1cImZzaFhYU21hbGxcIj4nO1xyXG4gICAgICB0bXAgKz0gZW5oYW5jZW1lbnRzLnJlZHVjZShmdW5jdGlvbihfcHJldiwgX2N1cnIpIHtcclxuICAgICAgICByZXR1cm4gX3ByZXYgKyAnPHNwYW4gY2xhc3M9XCJmc2hOb1dyYXBcIj4nICsgX2N1cnIgKyAnOiAnICtcclxuICAgICAgICAgIHRtcE9iai5lbmhhbmNlbWVudHNbX2N1cnJdLm1pbiArICcgLSAnICtcclxuICAgICAgICAgIHRtcE9iai5lbmhhbmNlbWVudHNbX2N1cnJdLm1heCArICc8L3NwYW4+PGJyPic7XHJcbiAgICAgIH0sICcnKTtcclxuICAgICAgdG1wT2JqLmVuaGFuY2VtZW50cyA9IHRtcC5zbGljZSgwLCAtNCkgKyAnPC9zcGFuPic7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0bXBPYmouZW5oYW5jZW1lbnRzID0gJzxzcGFuIGNsYXNzPVwiZnNoR3JleVwiPioqTWlzc2luZyoqPC9zcGFuPic7XHJcbiAgICB9XHJcbiAgICBwcmV2LnB1c2godG1wT2JqKTtcclxuICAgIHJldHVybiBwcmV2O1xyXG4gIH0sIFtdKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcHJlcEFyeShkYXRhKSB7XHJcbiAgaWYgKCFkYXRhIHx8IGRhdGEgPT09ICcnKSB7XHJcbiAgICBub01vYnMoKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgcHJlcE1vbnN0ZXIoZGF0YSk7XHJcbiAgY2FsZi5zb3J0QnkgPSAnbGV2ZWwnO1xyXG4gIGNhbGYuc29ydEFzYyA9IHRydWU7XHJcbiAgbW9uc3RlckFyeS5zb3J0KG51bWJlclNvcnQpO1xyXG4gIGRyYXdUYWJsZSgpO1xyXG4gIGRyYXdNb2JzKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluamVjdE1vbnN0ZXJMb2coaW5qZWN0b3IpIHtcclxuICBjb250ZW50ID0gaW5qZWN0b3IgfHwgcENDO1xyXG4gIGlmICghY29udGVudCkge3JldHVybjt9XHJcbiAgZ2V0Rm9yYWdlKCdmc2hfbW9uc3RlckxvZycpLmRvbmUocHJlcEFyeSk7XHJcbn1cclxuIiwiaW1wb3J0IGdldEZvcmFnZSBmcm9tICcuL2FqYXgvZ2V0Rm9yYWdlJztcclxuaW1wb3J0IHNldEZvcmFnZSBmcm9tICcuL2FqYXgvc2V0Rm9yYWdlJztcclxuaW1wb3J0IHtqQ29uZmlybSwgcENDfSBmcm9tICcuL3N1cHBvcnQvbGF5b3V0JztcclxuXHJcbnZhciBjb250ZW50O1xyXG52YXIgY29tYmF0TG9nID0gW107XHJcbnZhciB0ZXh0QXJlYTtcclxuXHJcbmZ1bmN0aW9uIG5vdGVwYWRDb3B5TG9nKCkge1xyXG4gIHRleHRBcmVhLmZvY3VzKCk7XHJcbiAgdGV4dEFyZWEuc2VsZWN0KCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsZWFyQ29tYmF0TG9nKCkge1xyXG4gIGNvbWJhdExvZyA9IFtdO1xyXG4gIHRleHRBcmVhLnZhbHVlID0gJ1tdJztcclxuICBzZXRGb3JhZ2UoJ2ZzaF9jb21iYXRMb2cnLCBjb21iYXRMb2cpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBub3RlcGFkQ2xlYXJMb2coKSB7IC8vIGpRdWVyeVxyXG4gIGpDb25maXJtKCdDbGVhciBDb21iYXQgTG9nJyxcclxuICAgICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY2xlYXIgeW91ciBsb2c/JywgY2xlYXJDb21iYXRMb2dcclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnb3RDb21iYXRMb2coZGF0YSkge1xyXG4gIGlmIChkYXRhKSB7Y29tYmF0TG9nID0gZGF0YTt9XHJcbiAgdmFyIHl1dXpQYXJzZXIgPSAnPHRyPjx0ZCBhbGlnbj1cImNlbnRlclwiIGNvbHNwYW49XCI0XCI+PGI+TG9nIFBhcnNlcjwvYj4nICtcclxuICAgICc8L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZCBjb2xzcGFuPVwiNFwiIGFsaWduPVwiY2VudGVyXCI+V0FSTklORzogdGhpcyBsaW5rcyB0byBhbiAnICtcclxuICAgICdleHRlcm5hbCBzaXRlIG5vdCByZWxhdGVkIHRvIEhDUy48YnIgLz4nICtcclxuICAgICdJZiB5b3Ugd2lzaCB0byB2aXNpdCBzaXRlIGRpcmVjdGx5IFVSTCBpczogaHR0cDovL2V2b2x1dGlvbnMuJyArXHJcbiAgICAneXZvbmcuY29tL2ZzaGxvZ3BhcnNlci5waHA8YnIgLz4nICtcclxuICAgICc8dHI+PHRkIGNvbHNwYW49NCBhbGlnbj1cImNlbnRlclwiPjxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgdmFsdWU9XCJ0cnVlXCIgJyArXHJcbiAgICAnbmFtZT1cInN1Ym1pdFwiPjxpbnB1dCB0eXBlPVwic3VibWl0XCIgdmFsdWU9XCJBbmFseXplIVwiPjwvdGQ+PC90cj4nO1xyXG4gIGNvbnRlbnQuaW5uZXJIVE1MID0gJzxoMT5Db21iYXQgTG9nczwvaDE+PGJyIC8+PGZvcm0gYWN0aW9uPVwiaHR0cDovLycgK1xyXG4gICAgJ2V2b2x1dGlvbnMueXZvbmcuY29tL2ZzaGxvZ3BhcnNlci5waHBcIiBtZXRob2Q9XCJwb3N0XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JyArXHJcbiAgICAnPGRpdiBhbGlnbj1cImNlbnRlclwiPjx0ZXh0YXJlYSBhbGlnbj1cImNlbnRlclwiIGNvbHM9XCI4MFwiIHJvd3M9XCIyNVwiICcgK1xyXG4gICAgJ3JlYWRvbmx5IHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjp3aGl0ZTtmb250LWZhbWlseTpDb25zb2xhcyxcXCcnICtcclxuICAgICdMdWNpZGEgQ29uc29sZVxcJyxcXCdDb3VyaWVyIE5ld1xcJyxtb25vc3BhY2U7XCIgaWQ9XCJjb21iYXRMb2dcIiAnICtcclxuICAgICduYW1lPVwibG9nc1wiPicgKyBKU09OLnN0cmluZ2lmeShjb21iYXRMb2cpICsgJzwvdGV4dGFyZWE+PC9kaXY+JyArXHJcbiAgICAnPGJyIC8+PGJyIC8+PHRhYmxlIHdpZHRoPVwiMTAwJVwiPjx0cj4nICtcclxuICAgICc8dGQgY29sc3Bhbj1cIjJcIiBhbGlnbj1jZW50ZXI+JyArXHJcbiAgICAnPGlucHV0IHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImN1c3RvbWJ1dHRvblwiIHZhbHVlPVwiU2VsZWN0IEFsbFwiICcgK1xyXG4gICAgJ2lkPVwiY29weUxvZ1wiPjwvdGQ+JyArXHJcbiAgICAnPHRkIGNvbHNwYW49XCIyXCIgYWxpZ249Y2VudGVyPicgK1xyXG4gICAgJzxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJjdXN0b21idXR0b25cIiB2YWx1ZT1cIkNsZWFyXCIgJyArXHJcbiAgICAnaWQ9XCJjbGVhckxvZ1wiPjwvdGQ+JyArXHJcbiAgICAnPC90cj4nICsgeXV1elBhcnNlciArICc8L3RhYmxlPjwvZGl2PicgK1xyXG4gICAgJzwvZm9ybT4nO1xyXG4gIHRleHRBcmVhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbWJhdExvZycpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3B5TG9nJylcclxuICAgIC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG5vdGVwYWRDb3B5TG9nKTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xlYXJMb2cnKVxyXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbm90ZXBhZENsZWFyTG9nKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0Tm90ZXBhZFNob3dMb2dzKGluamVjdG9yKSB7IC8vIGpRdWVyeS5taW5cclxuICBjb250ZW50ID0gaW5qZWN0b3IgfHwgcENDO1xyXG4gIGdldEZvcmFnZSgnZnNoX2NvbWJhdExvZycpLmRvbmUoZ290Q29tYmF0TG9nKTtcclxufVxyXG4iLCJpbXBvcnQgZ2V0Rm9yYWdlIGZyb20gJy4vYWpheC9nZXRGb3JhZ2UnO1xyXG5pbXBvcnQgcmV0cnlBamF4IGZyb20gJy4vYWpheC9yZXRyeUFqYXgnO1xyXG5pbXBvcnQgc2V0Rm9yYWdlIGZyb20gJy4vYWpheC9zZXRGb3JhZ2UnO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZURvY3VtZW50LFxyXG4gIGZhbGxiYWNrLFxyXG4gIGdldFZhbHVlLFxyXG4gIGludFZhbHVlLFxyXG4gIHNldFZhbHVlXHJcbn0gZnJvbSAnLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCB7ZGVmYXVsdHMsIG5vd30gZnJvbSAnLi9zdXBwb3J0L2RhdGFPYmonO1xyXG5cclxudmFyIGNvbnRleHQ7XHJcbnZhciBvbmxpbmVQbGF5ZXJzO1xyXG52YXIgb25saW5lRGF0YTtcclxudmFyIGhpZ2hsaWdodFBsYXllcnNOZWFyTXlMdmw7XHJcbnZhciBsdmxEaWZmVG9IaWdobGlnaHQ7XHJcbnZhciBsZXZlbFRvVGVzdDtcclxudmFyIG9ubGluZVBhZ2VzO1xyXG52YXIgbGFzdFBhZ2U7XHJcbnZhciB0YWJsZTtcclxuXHJcbmZ1bmN0aW9uIGJ1aWxkT25saW5lUGxheWVyRGF0YSgpIHsgLy8galF1ZXJ5XHJcbiAgb25saW5lRGF0YSA9IFtdO1xyXG4gIE9iamVjdC5rZXlzKG9ubGluZVBsYXllcnMpLmZvckVhY2goZnVuY3Rpb24ocGxheWVyKSB7XHJcbiAgICB2YXIgZ3VpbGRJbWFnZSA9ICQoJzxkaXYvPicpXHJcbiAgICAgIC5hcHBlbmQob25saW5lUGxheWVyc1twbGF5ZXJdWzBdKTtcclxuICAgICQoJ2ltZycsIGd1aWxkSW1hZ2UpLmFkZENsYXNzKCdmc2hJbWdDbnRyJyk7XHJcbiAgICBvbmxpbmVEYXRhLnB1c2goW1xyXG4gICAgICBndWlsZEltYWdlLmh0bWwoKSxcclxuICAgICAgb25saW5lUGxheWVyc1twbGF5ZXJdWzFdLFxyXG4gICAgICBvbmxpbmVQbGF5ZXJzW3BsYXllcl1bMl0sXHJcbiAgICAgIG9ubGluZVBsYXllcnNbcGxheWVyXVszXSAqIDEwMCArXHJcbiAgICAgIG9ubGluZVBsYXllcnNbcGxheWVyXVs0XSArIDEsXHJcbiAgICBdKTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2F2ZVZhbChrZXksIHZhbCkge1xyXG4gIGlmICghaXNOYU4odmFsKSkge3NldFZhbHVlKGtleSwgdmFsKTt9XHJcbn1cclxuXHJcbnZhciBsdmxUZXN0cyA9IFtcclxuICBmdW5jdGlvbihsZXZlbCwgbWluLCBtYXgpIHtyZXR1cm4gaXNOYU4obWluKSAmJiBpc05hTihtYXgpO30sXHJcbiAgZnVuY3Rpb24obGV2ZWwsIG1pbiwgbWF4KSB7cmV0dXJuIGlzTmFOKG1pbikgJiYgbGV2ZWwgPD0gbWF4O30sXHJcbiAgZnVuY3Rpb24obGV2ZWwsIG1pbiwgbWF4KSB7cmV0dXJuIG1pbiA8PSBsZXZlbCAmJiBpc05hTihtYXgpO30sXHJcbiAgZnVuY3Rpb24obGV2ZWwsIG1pbiwgbWF4KSB7cmV0dXJuIG1pbiA8PSBsZXZlbCAmJiBsZXZlbCA8PSBtYXg7fVxyXG5dO1xyXG5cclxuZnVuY3Rpb24gZGF0YVRhYmxlU2VhcmNoKF9zZXR0aW5ncywgZGF0YSkgeyAvLyBqUXVlcnlcclxuICAvKiBDdXN0b20gZmlsdGVyaW5nIGZ1bmN0aW9uIHdoaWNoIHdpbGwgc2VhcmNoXHJcbiAgZGF0YSBpbiBjb2x1bW4gdGhyZWUgYmV0d2VlbiB0d28gdmFsdWVzICovXHJcbiAgdmFyIG1pbiA9IHBhcnNlSW50KCQoJyNmc2hNaW5MdmwnLCBjb250ZXh0KS52YWwoKSwgMTApOyAvLyBjb250ZXh0XHJcbiAgdmFyIG1heCA9IHBhcnNlSW50KCQoJyNmc2hNYXhMdmwnLCBjb250ZXh0KS52YWwoKSwgMTApOyAvLyBjb250ZXh0XHJcbiAgc2F2ZVZhbCgnb25saW5lUGxheWVyTWluTHZsJywgbWluKTtcclxuICBzYXZlVmFsKCdvbmxpbmVQbGF5ZXJNYXhMdmwnLCBtYXgpO1xyXG4gIHZhciBsZXZlbCA9IGZhbGxiYWNrKGludFZhbHVlKGRhdGFbMl0pLCAwKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGx2bFRlc3RzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICBpZiAobHZsVGVzdHNbaV0obGV2ZWwsIG1pbiwgbWF4KSkge3JldHVybiB0cnVlO31cclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaWx0ZXJIZWFkZXJPbmxpbmVQbGF5ZXJzKCkgeyAvLyBqUXVlcnlcclxuICBoaWdobGlnaHRQbGF5ZXJzTmVhck15THZsID1cclxuICAgIGdldFZhbHVlKCdoaWdobGlnaHRQbGF5ZXJzTmVhck15THZsJyk7XHJcbiAgbHZsRGlmZlRvSGlnaGxpZ2h0ID0gMTA7XHJcbiAgbGV2ZWxUb1Rlc3QgPSBpbnRWYWx1ZSgkKCdkdC5zdGF0LWxldmVsOmZpcnN0JylcclxuICAgIC5uZXh0KCkudGV4dCgpKTtcclxuICB2YXIgY2hhcmFjdGVyVmlydHVhbExldmVsID0gZ2V0VmFsdWUoJ2NoYXJhY3RlclZpcnR1YWxMZXZlbCcpO1xyXG4gIGlmIChjaGFyYWN0ZXJWaXJ0dWFsTGV2ZWwpIHtsZXZlbFRvVGVzdCA9IGNoYXJhY3RlclZpcnR1YWxMZXZlbDt9XHJcbiAgaWYgKGxldmVsVG9UZXN0IDw9IDIwNSkge2x2bERpZmZUb0hpZ2hsaWdodCA9IDU7fVxyXG4gICQoJyNmc2hPdXRwdXQnLCBjb250ZXh0KS5odG1sKCAvLyBjb250ZXh0XHJcbiAgICAnPGRpdiBhbGlnbj1yaWdodD4nICtcclxuICAgICdNaW4gbHZsOjxpbnB1dCB2YWx1ZT1cIicgKyBnZXRWYWx1ZSgnb25saW5lUGxheWVyTWluTHZsJykgK1xyXG4gICAgICAnXCIgc2l6ZT01IGlkPVwiZnNoTWluTHZsXCIgLz4gJyArXHJcbiAgICAnTWF4IGx2bDo8aW5wdXQgdmFsdWU9XCInICsgZ2V0VmFsdWUoJ29ubGluZVBsYXllck1heEx2bCcpICtcclxuICAgICAgJ1wiIHNpemU9NSBpZD1cImZzaE1heEx2bFwiIC8+ICcgK1xyXG4gICAgJzxpbnB1dCBpZD1cImZzaFJlc2V0XCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiUmVzZXRcIi8+JyArXHJcbiAgICAnPC9kaXY+PHRhYmxlIGlkPVwiZnNoSW52XCIgY2xhc3M9XCJhbGxvdyBzdHJpcGUgaG92ZXJcIj48L3RhYmxlPicpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnb3RPbmxpbmVQbGF5ZXJzKCkgeyAvLyBqUXVlcnlcclxuICBidWlsZE9ubGluZVBsYXllckRhdGEoKTtcclxuICAkLmZuLmRhdGFUYWJsZS5leHQuc2VhcmNoLnB1c2goZGF0YVRhYmxlU2VhcmNoKTtcclxuICBmaWx0ZXJIZWFkZXJPbmxpbmVQbGF5ZXJzKCk7XHJcblxyXG4gIHRhYmxlID0gJCgnI2ZzaEludicsIGNvbnRleHQpLmRhdGFUYWJsZSh7IC8vIGNvbnRleHRcclxuICAgIGRhdGE6IG9ubGluZURhdGEsXHJcbiAgICBwYWdlTGVuZ3RoOiAzMCxcclxuICAgIGxlbmd0aE1lbnU6IFtbMzAsIDYwLCAtMV0sIFszMCwgNjAsICdBbGwnXV0sXHJcbiAgICBjb2x1bW5zOiBbXHJcbiAgICAgIHt0aXRsZTogJ0d1aWxkJywgJ2NsYXNzJzogJ2R0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2V9LFxyXG4gICAgICB7dGl0bGU6ICdOYW1lJywgJ2NsYXNzJzogJ2R0LWNlbnRlcid9LFxyXG4gICAgICB7dGl0bGU6ICdMZXZlbCcsICdjbGFzcyc6ICdkdC1jZW50ZXInfSxcclxuICAgICAge3RpdGxlOiAnUGFnZS9JbmRleCcsICdjbGFzcyc6ICdkdC1jZW50ZXInfVxyXG4gICAgXSxcclxuICAgIGNyZWF0ZWRSb3c6IGZ1bmN0aW9uKHJvdywgZGF0YSkge1xyXG4gICAgICBpZiAoaGlnaGxpZ2h0UGxheWVyc05lYXJNeUx2bCAmJlxyXG4gICAgICAgIE1hdGguYWJzKGludFZhbHVlKGRhdGFbMl0pIC0gbGV2ZWxUb1Rlc3QpIDw9XHJcbiAgICAgICAgbHZsRGlmZlRvSGlnaGxpZ2h0KSB7XHJcbiAgICAgICAgJCgndGQnLCByb3cpLmVxKDIpLmFkZENsYXNzKCdsdmxIaWdobGlnaHQnKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9yZGVyOiBbMywgJ2Rlc2MnXSxcclxuICAgIHN0YXRlU2F2ZTogdHJ1ZSxcclxuICAgIHN0YXRlRHVyYXRpb246IDBcclxuICB9KS5hcGkoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tMYXN0UGFnZSgpIHtcclxuICBpZiAob25saW5lUGFnZXMgPT09IGxhc3RQYWdlKSB7XHJcbiAgICBzZXRGb3JhZ2UoJ2ZzaF9vbmxpbmVQbGF5ZXJzJywgb25saW5lUGxheWVycyk7XHJcbiAgICBnb3RPbmxpbmVQbGF5ZXJzKCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRPbmxpbmVQbGF5ZXJzKGRhdGEpIHsgLy8gQmFkIGpRdWVyeVxyXG4gICQoJyNmc2hPdXRwdXQnLCBjb250ZXh0KS5hcHBlbmQoJyAnICtcclxuICAgIChvbmxpbmVQYWdlcyArIDEpKTsgLy8gY29udGV4dFxyXG4gIHZhciBkb2MgPSBjcmVhdGVEb2N1bWVudChkYXRhKTtcclxuICB2YXIgaW5wdXQgPSAkKCcjcENDIGlucHV0LmN1c3RvbWlucHV0JywgZG9jKS5maXJzdCgpO1xyXG4gIHZhciB0aGVQYWdlID0gaW5wdXQuYXR0cigndmFsdWUnKTtcclxuICB2YXIgdGhlUm93cyA9ICQoJyNwQ0MgaW1nW3NyYyQ9XCIvc2tpbi9pY29uX2FjdGlvbl92aWV3LmdpZicsXHJcbiAgICBkb2MpLnBhcmVudCgpLnBhcmVudCgpLnBhcmVudCgpO1xyXG4gIHRoZVJvd3MuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xyXG4gICAgdmFyIHRkcyA9ICQoJ3RkJywgJChlbGVtZW50KSk7XHJcbiAgICB2YXIgcGxheWVyID0gdGRzLmVxKDEpLnRleHQoKTtcclxuICAgIGlmIChvbmxpbmVQbGF5ZXJzW3BsYXllcl0gJiZcclxuICAgICAgICBvbmxpbmVQbGF5ZXJzW3BsYXllcl1bM10gPiB0aGVQYWdlKSB7cmV0dXJuO31cclxuICAgIG9ubGluZVBsYXllcnNbcGxheWVyXSA9IFtcclxuICAgICAgdGRzLmVxKDApLmh0bWwoKSxcclxuICAgICAgdGRzLmVxKDEpLmh0bWwoKSxcclxuICAgICAgdGRzLmVxKDIpLnRleHQoKSxcclxuICAgICAgdGhlUGFnZSxcclxuICAgICAgaW5kZXhcclxuICAgIF07XHJcbiAgfSk7XHJcbiAgb25saW5lUGFnZXMgKz0gMTtcclxuICBpZiAob25saW5lUGFnZXMgPT09IDEpIHtcclxuICAgIGlucHV0ID0gaW5wdXQucGFyZW50KCkudGV4dCgpO1xyXG4gICAgbGFzdFBhZ2UgPSBwYXJzZUludChpbnB1dC5tYXRjaCgvKFxcZCspL2cpWzBdLCAxMCk7XHJcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8PSBsYXN0UGFnZTsgaSArPSAxKSB7XHJcbiAgICAgIHJldHJ5QWpheCgnaW5kZXgucGhwP2NtZD1vbmxpbmVwbGF5ZXJzJnBhZ2U9JyArIGkpLmRvbmUoZ2V0T25saW5lUGxheWVycyk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNoZWNrTGFzdFBhZ2UoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVmcmVzaEV2dCgpIHsgLy8gQmFkIGpRdWVyeVxyXG4gICQoJyNmc2hSZWZyZXNoJywgY29udGV4dCkuaGlkZSgpO1xyXG4gIG9ubGluZVBhZ2VzID0gMDtcclxuICBvbmxpbmVQbGF5ZXJzID0ge307XHJcbiAgcmV0cnlBamF4KCdpbmRleC5waHA/Y21kPW9ubGluZXBsYXllcnMmcGFnZT0xJykuZG9uZShnZXRPbmxpbmVQbGF5ZXJzKTtcclxuICBzZXRWYWx1ZSgnbGFzdE9ubGluZUNoZWNrJywgbm93KTtcclxuICAkKCcjZnNoT3V0cHV0JywgY29udGV4dCkuYXBwZW5kKCdQYXJzaW5nIG9ubGluZSBwbGF5ZXJzLi4uJyk7IC8vIGNvbnRleHRcclxufVxyXG5cclxuZnVuY3Rpb24gY2hhbmdlTHZsKGUpIHsgLy8galF1ZXJ5XHJcbiAgaWYgKGUudGFyZ2V0LmlkID09PSAnZnNoTWluTHZsJyB8fCBlLnRhcmdldC5pZCA9PT0gJ2ZzaE1heEx2bCcpIHtcclxuICAgIHRhYmxlLmRyYXcoKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0RXZ0KCkgeyAvLyBjb250ZXh0XHJcbiAgc2V0VmFsdWUoJ29ubGluZVBsYXllck1pbkx2bCcsXHJcbiAgICBkZWZhdWx0cy5vbmxpbmVQbGF5ZXJNaW5MdmwpO1xyXG4gIHNldFZhbHVlKCdvbmxpbmVQbGF5ZXJNYXhMdmwnLFxyXG4gICAgZGVmYXVsdHMub25saW5lUGxheWVyTWF4THZsKTtcclxuICAkKCcjZnNoTWluTHZsJywgY29udGV4dCkudmFsKFxyXG4gICAgZGVmYXVsdHMub25saW5lUGxheWVyTWluTHZsKTsgLy8gY29udGV4dFxyXG4gICQoJyNmc2hNYXhMdmwnLCBjb250ZXh0KS52YWwoXHJcbiAgICBkZWZhdWx0cy5vbmxpbmVQbGF5ZXJNYXhMdmwpOyAvLyBjb250ZXh0XHJcbiAgdGFibGUuZHJhdygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb09ubGluZVBsYXllckV2ZW50SGFuZGxlcnMoZSkge1xyXG4gIGlmIChlLnRhcmdldC5pZCA9PT0gJ2ZzaFJlZnJlc2gnKSB7cmVmcmVzaEV2dCgpO31cclxuICBpZiAoZS50YXJnZXQuaWQgPT09ICdmc2hSZXNldCcpIHtyZXNldEV2dCgpO31cclxufVxyXG5cclxuZnVuY3Rpb24gaW5qZWN0T25saW5lUGxheWVyc05ldygpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIGxhc3RDaGVjayA9IGdldFZhbHVlKCdsYXN0T25saW5lQ2hlY2snKTtcclxuICB2YXIgcmVmcmVzaEJ1dHRvbjtcclxuICBpZiAobm93IC0gbGFzdENoZWNrID4gMzAwMDAwKSB7XHJcbiAgICByZWZyZXNoQnV0dG9uID0gJzxzcGFuPiAodGFrZXMgYSB3aGlsZSB0byByZWZyZXNoIHNvIG9ubHkgZG8gaXQgJyArXHJcbiAgICAgICdpZiB5b3UgcmVhbGx5IG5lZWQgdG8pIDwvc3Bhbj48c3BhbiBpZD1cImZzaFJlZnJlc2hcIiBjbGFzcz1cImZzaExpbmtcIicgK1xyXG4gICAgICAnPltSZWZyZXNoXTwvc3Bhbj4nO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZWZyZXNoQnV0dG9uID0gJzxzcGFuPlsgV2FpdCAnICsgTWF0aC5yb3VuZCgzMDAgLSAobm93IC1cclxuICAgICAgbGFzdENoZWNrKSAvIDEwMDApICsgJ3MgXTwvc3Bhbj4nO1xyXG4gIH1cclxuICBjb250ZXh0Lmh0bWwoXHJcbiAgICAnPHNwYW4+PGI+T25saW5lIFBsYXllcnM8L2I+PC9zcGFuPicgKyByZWZyZXNoQnV0dG9uICtcclxuICAgICc8ZGl2IGlkPVwiZnNoT3V0cHV0XCI+PC9kaXY+Jyk7XHJcbiAgZ2V0Rm9yYWdlKCdmc2hfb25saW5lUGxheWVycycpLmRvbmUoZnVuY3Rpb24odmFsdWUpIHtcclxuICAgIG9ubGluZVBsYXllcnMgPSB2YWx1ZSB8fCB7fTtcclxuICAgIGdvdE9ubGluZVBsYXllcnMoKTtcclxuICB9KTtcclxuICBjb250ZXh0WzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZG9PbmxpbmVQbGF5ZXJFdmVudEhhbmRsZXJzKTtcclxuICBjb250ZXh0WzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgY2hhbmdlTHZsKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0T25saW5lUGxheWVycyhjb250ZW50KSB7IC8vIGpRdWVyeVxyXG4gIGlmIChjb250ZW50KSB7XHJcbiAgICBjb250ZXh0ID0gJChjb250ZW50KTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29udGV4dCA9ICQoJyNwQ0MnKTtcclxuICB9XHJcbiAgaW5qZWN0T25saW5lUGxheWVyc05ldygpO1xyXG59XHJcbiIsImltcG9ydCBjYWxmIGZyb20gJy4uL3N1cHBvcnQvY2FsZic7XHJcbmltcG9ydCB7Y3JlYXRlRGl2fSBmcm9tICcuLi9jb21tb24vY0VsZW1lbnQnO1xyXG5pbXBvcnQgZ2V0Rm9yYWdlIGZyb20gJy4uL2FqYXgvZ2V0Rm9yYWdlJztcclxuaW1wb3J0IHJldHJ5QWpheCBmcm9tICcuLi9hamF4L3JldHJ5QWpheCc7XHJcbmltcG9ydCBzZXRGb3JhZ2UgZnJvbSAnLi4vYWpheC9zZXRGb3JhZ2UnO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZURvY3VtZW50LFxyXG4gIGdldEN1c3RvbVVybFBhcmFtZXRlcixcclxuICBnZXRWYWx1ZSxcclxuICBudW1iZXJTb3J0LFxyXG4gIHNob3VsZEJlQXJyYXksXHJcbiAgc3RyaW5nU29ydFxyXG59IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtwQ0MsIHBsYXllcklkfSBmcm9tICcuLi9zdXBwb3J0L2xheW91dCc7XHJcblxyXG52YXIgY29udGVudDtcclxudmFyIHJlY2lwZWJvb2s7XHJcbnZhciBoaWRlUmVjaXBlcyA9IFtdO1xyXG52YXIgb3V0cHV0O1xyXG52YXIgaXRtUkUgPVxyXG4gIC9mZXRjaGl0ZW0ucGhwXFw/aXRlbV9pZD0oXFxkKykmaW52X2lkPS0xJnQ9MiZwPShcXGQrKSZ2Y29kZT0oW2EtejAtOV0rKS9pO1xyXG52YXIgY3VycmVudFBsYXllcklkO1xyXG5cclxuZnVuY3Rpb24gc3RvcmVSZWNpcGVCb29rKCkge1xyXG4gIHNldEZvcmFnZSgnZnNoX3JlY2lwZUJvb2snLCByZWNpcGVib29rKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UmVjaXBlSXRlbXMocmVjaXBlKSB7XHJcbiAgaWYgKHJlY2lwZS5pdGVtcykge1xyXG4gICAgcmV0dXJuIHJlY2lwZS5pdGVtcy5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgaXRtKSB7XHJcbiAgICAgIHJldHVybiBwcmV2ICsgJzxkaXYgY2xhc3M9XCJybUl0ZW1cIj48aW1nIGNsYXNzPVwidGlwLWR5bmFtaWNcIiAnICtcclxuICAgICAgICAnZGF0YS10aXBwZWQ9XCJmZXRjaGl0ZW0ucGhwP2l0ZW1faWQ9JyArXHJcbiAgICAgICAgaXRtLmlkICsgJyZpbnZfaWQ9LTEmdD0yJnA9JyArXHJcbiAgICAgICAgY3VycmVudFBsYXllcklkICsgJyZ2Y29kZT0nICtcclxuICAgICAgICBpdG0udmVyaWZ5ICsgJ1wiIHNyYz1cIicgK1xyXG4gICAgICAgIGl0bS5pbWcgKyAnXCIgaGVpZ2h0PVwiMjBweFwiIHdpZHRoPVwiMjBweFwiPjxwPicgK1xyXG4gICAgICAgIGl0bS5hbW91bnRQcmVzZW50ICsgJy8nICtcclxuICAgICAgICBpdG0uYW1vdW50TmVlZGVkICsgJzwvcD48L2Rpdj4nO1xyXG4gICAgfSwgJycpO1xyXG4gIH1cclxuICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENvbXBvbmVudHMocmVjaXBlKSB7XHJcbiAgaWYgKHJlY2lwZS5jb21wb25lbnRzKSB7XHJcbiAgICByZXR1cm4gcmVjaXBlLmNvbXBvbmVudHMucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGNvbXApIHtcclxuICAgICAgcmV0dXJuIHByZXYgKyAnPGRpdiBjbGFzcz1cInJtSXRlbVwiPjxpbWcgY2xhc3M9XCJ0aXAtZHluYW1pY1wiICcgK1xyXG4gICAgICAgICdkYXRhLXRpcHBlZD1cImZldGNoaXRlbS5waHA/aXRlbV9pZD0nICtcclxuICAgICAgICBjb21wLmlkICsgJyZpbnZfaWQ9LTEmdD0yJnA9JyArXHJcbiAgICAgICAgY3VycmVudFBsYXllcklkICsgJyZ2Y29kZT0nICtcclxuICAgICAgICBjb21wLnZlcmlmeSArICdcIiBzcmM9XCInICtcclxuICAgICAgICBjb21wLmltZyArICdcIiBoZWlnaHQ9XCIyMHB4XCIgd2lkdGg9XCIyMHB4XCI+PHA+JyArXHJcbiAgICAgICAgY29tcC5hbW91bnRQcmVzZW50ICsgJy8nICtcclxuICAgICAgICBjb21wLmFtb3VudE5lZWRlZCArICc8L3A+PC9kaXY+JztcclxuICAgIH0sICcnKTtcclxuICB9XHJcbiAgcmV0dXJuICcnO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRJbWcocmVjaXBlKSB7XHJcbiAgaWYgKHJlY2lwZS50YXJnZXQpIHtcclxuICAgIHJldHVybiAnIDxpbWcgY2xhc3M9XCJ0aXAtZHluYW1pY1wiICcgK1xyXG4gICAgICAnZGF0YS10aXBwZWQ9XCJmZXRjaGl0ZW0ucGhwP2l0ZW1faWQ9JyArXHJcbiAgICAgIHJlY2lwZS50YXJnZXQuaWQgKyAnJmludl9pZD0tMSZ0PTImcD0nICsgY3VycmVudFBsYXllcklkICtcclxuICAgICAgJyZ2Y29kZT0nICsgcmVjaXBlLnRhcmdldC52ZXJpZnkgKyAnXCIgJyArXHJcbiAgICAgICdzcmM9XCInICsgcmVjaXBlLnRhcmdldC5pbWcgK1xyXG4gICAgICAnXCIgaGVpZ2h0PVwiMzBweFwiIHdpZHRoPVwiMzBweFwiPjxici8+JztcclxuICB9XHJcbiAgcmV0dXJuICcnO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3UmVjaXBlVGFibGUoKSB7IC8vIExlZ2FjeVxyXG4gIGN1cnJlbnRQbGF5ZXJJZCA9IHBsYXllcklkKCk7XHJcbiAgdmFyIGk7XHJcbiAgdmFyIHJlc3VsdCA9ICc8dGFibGUgd2lkdGg9XCIxMDAlXCI+PHRyIGNsYXNzPVwicm1UaFwiPjx0aD5SZWNpcGU8L3RoPicgK1xyXG4gICAgJzx0aD48c3BhbiBpZD1cInNvcnROYW1lXCIgY2xhc3M9XCJmc2hMaW5rXCIgc29ydGtleT1cIm5hbWVcIj5OYW1lPC9zcGFuPicgK1xyXG4gICAgJzwvdGg+PHRoPkl0ZW1zPC90aD48dGg+Q29tcG9uZW50czwvdGg+PHRoPlRhcmdldDwvdGg+PC90cj4nO1xyXG4gIHZhciByZWNpcGU7XHJcbiAgZm9yIChpID0gMDsgaSA8IHJlY2lwZWJvb2sucmVjaXBlLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICByZWNpcGUgPSByZWNpcGVib29rLnJlY2lwZVtpXTtcclxuICAgIGlmIChoaWRlUmVjaXBlcy5pbmRleE9mKHJlY2lwZS5uYW1lKSAhPT0gLTEpIHtjb250aW51ZTt9XHJcbiAgICByZXN1bHQgKz0gJzx0ciBjbGFzcz1cInJtVHJcIj48dGQgY2xhc3M9XCJybVRkXCI+PGEgaHJlZj1cIicgKyByZWNpcGUubGluayArXHJcbiAgICAgICdcIj48aW1nIHNyYz1cIicgKyByZWNpcGUuaW1nICtcclxuICAgICAgJ1wiIGhlaWdodD1cIjMwcHhcIiB3aWR0aD1cIjMwcHhcIj48L2E+PC90ZD48dGQgY2xhc3M9XCJybVRkXCI+PGEgaHJlZj1cIicgK1xyXG4gICAgICByZWNpcGUubGluayArICdcIj4nICsgcmVjaXBlLm5hbWUgKyAnPC9hPjwvdGQ+PHRkIGNsYXNzPVwicm1UZFwiPic7XHJcbiAgICByZXN1bHQgKz0gZ2V0UmVjaXBlSXRlbXMocmVjaXBlKTtcclxuICAgIHJlc3VsdCArPSAnPC90ZD48dGQgY2xhc3M9XCJybVRkXCI+JztcclxuICAgIHJlc3VsdCArPSBnZXRDb21wb25lbnRzKHJlY2lwZSk7XHJcbiAgICByZXN1bHQgKz0gJzwvdGQ+PHRkIGNsYXNzPVwicm1UZFwiPic7XHJcbiAgICByZXN1bHQgKz0gZ2V0SW1nKHJlY2lwZSk7XHJcbiAgICByZXN1bHQgKz0gJzwvdGQ+PC90cj4nO1xyXG4gIH1cclxuICByZXN1bHQgKz0gJzwvdGFibGU+JztcclxuICBvdXRwdXQuaW5uZXJIVE1MID0gcmVzdWx0O1xyXG4gIHJlY2lwZWJvb2subGFzdFVwZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgc3RvcmVSZWNpcGVCb29rKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlUmVjaXBlVGFibGUoKSB7IC8vIExlZ2FjeVxyXG4gIGlmIChyZWNpcGVib29rKSB7ZHJhd1JlY2lwZVRhYmxlKCk7fVxyXG59XHJcblxyXG5mdW5jdGlvbiB0ZXN0U29ydFR5cGUoZXZ0KSB7XHJcbiAgdmFyIHNvcnRUeXBlID0gZXZ0LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ3NvcnR0eXBlJyk7XHJcbiAgaWYgKCFzb3J0VHlwZSkge3NvcnRUeXBlID0gJ3N0cmluZyc7fVxyXG4gIHNvcnRUeXBlID0gc29ydFR5cGUudG9Mb3dlckNhc2UoKTtcclxuICByZXR1cm4gc29ydFR5cGU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNvcnRSZWNpcGVCb29rKHNvcnRUeXBlKSB7XHJcbiAgaWYgKHNvcnRUeXBlID09PSAnbnVtYmVyJykge1xyXG4gICAgcmVjaXBlYm9vay5yZWNpcGUuc29ydChudW1iZXJTb3J0KTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmVjaXBlYm9vay5yZWNpcGUuc29ydChzdHJpbmdTb3J0KTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNvcnRSZWNpcGVUYWJsZShldnQpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIGhlYWRlckNsaWNrZWQgPSBldnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnc29ydEtleScpO1xyXG4gIHZhciBzb3J0VHlwZSA9IHRlc3RTb3J0VHlwZShldnQpO1xyXG4gIGlmICh0eXBlb2YgY2FsZi5zb3J0QXNjID09PSAndW5kZWZpbmVkJykge2NhbGYuc29ydEFzYyA9IHRydWU7fVxyXG4gIGlmIChjYWxmLnNvcnRCeSAmJiBjYWxmLnNvcnRCeSA9PT0gaGVhZGVyQ2xpY2tlZCkge1xyXG4gICAgY2FsZi5zb3J0QXNjID0gIWNhbGYuc29ydEFzYztcclxuICB9XHJcbiAgY2FsZi5zb3J0QnkgPSBoZWFkZXJDbGlja2VkO1xyXG4gIHNvcnRSZWNpcGVCb29rKHNvcnRUeXBlKTtcclxuICBnZW5lcmF0ZVJlY2lwZVRhYmxlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhc0Ftb3VudHMocmVzdWx0LCBhbW91bnRzKSB7XHJcbiAgaWYgKGFtb3VudHMpIHtcclxuICAgIHZhciByZXN1bHRBbW91bnRzID0gYW1vdW50cy50ZXh0Q29udGVudC5zcGxpdCgnLycpO1xyXG4gICAgcmVzdWx0LmFtb3VudFByZXNlbnQgPSBwYXJzZUludChyZXN1bHRBbW91bnRzWzBdLCAxMCk7XHJcbiAgICByZXN1bHQuYW1vdW50TmVlZGVkID0gcGFyc2VJbnQocmVzdWx0QW1vdW50c1sxXSwgMTApO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVkdWNlSXRlbU9yQ29tcG9uZW50KGJnR2lmLCBwcmV2LCBlbCkge1xyXG4gIHZhciBiYWNrZ3JvdW5kID0gZWwuZ2V0QXR0cmlidXRlKCdiYWNrZ3JvdW5kJyk7XHJcbiAgaWYgKCFiYWNrZ3JvdW5kIHx8IGJhY2tncm91bmQuaW5kZXhPZihiZ0dpZikgPT09IC0xKSB7cmV0dXJuIHByZXY7fVxyXG4gIHZhciBpbWcgPSBlbC5jaGlsZHJlblswXS5jaGlsZHJlblswXTtcclxuICB2YXIgbW91c2VPdmVyID0gaW1nLmdldEF0dHJpYnV0ZSgnZGF0YS10aXBwZWQnKTtcclxuICB2YXIgbW91c2VPdmVyUlggPSBtb3VzZU92ZXIubWF0Y2goaXRtUkUpO1xyXG4gIHZhciByZXN1bHQgPSB7XHJcbiAgICBpbWc6IGltZy5nZXRBdHRyaWJ1dGUoJ3NyYycpLFxyXG4gICAgaWQ6IG1vdXNlT3ZlclJYWzFdLFxyXG4gICAgdmVyaWZ5OiBtb3VzZU92ZXJSWFszXVxyXG4gIH07XHJcbiAgaGFzQW1vdW50cyhyZXN1bHQsIGVsLnBhcmVudE5vZGUubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuICBwcmV2LnB1c2gocmVzdWx0KTtcclxuICByZXR1cm4gcHJldjtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VSZWNpcGVJdGVtT3JDb21wb25lbnQoYmdHaWYsIGRvYykge1xyXG4gIHZhciB0YmxDZWxscyA9IGRvYy5nZXRFbGVtZW50QnlJZCgncENDJykuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RkJyk7XHJcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UuY2FsbCh0YmxDZWxscyxcclxuICAgIHJlZHVjZUl0ZW1PckNvbXBvbmVudC5iaW5kKG51bGwsIGJnR2lmKSwgW10pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzUmVjaXBlKHJlY2lwZSwgZGF0YSkge1xyXG4gIHZhciBkb2MgPSBjcmVhdGVEb2N1bWVudChkYXRhKTtcclxuICBvdXRwdXQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLFxyXG4gICAgJ1BhcnNpbmcgYmx1ZXByaW50ICcgKyByZWNpcGUubmFtZSArICcuLi48YnI+Jyk7XHJcbiAgcmVjaXBlLml0ZW1zID0gcGFyc2VSZWNpcGVJdGVtT3JDb21wb25lbnQoJy9pbnZlbnRvcnkvMngzLmdpZicsIGRvYyk7XHJcbiAgcmVjaXBlLmNvbXBvbmVudHMgPSBwYXJzZVJlY2lwZUl0ZW1PckNvbXBvbmVudCgnL2ludmVudG9yeS8xeDFtaW5pLmdpZicsIGRvYyk7XHJcbiAgcmVjaXBlLnRhcmdldCA9IHBhcnNlUmVjaXBlSXRlbU9yQ29tcG9uZW50KCcvaGVsbGZvcmdlLzJ4My5naWYnLCBkb2MpWzBdO1xyXG4gIHJlY2lwZWJvb2sucmVjaXBlLnB1c2gocmVjaXBlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc0ZvbGRlckFueVBhZ2UoZGF0YSkgeyAvLyBqUXVlcnkubWluXHJcbiAgdmFyIGRvYyA9IGNyZWF0ZURvY3VtZW50KGRhdGEpO1xyXG4gIHZhciBpbm5lclBjYyA9IGRvYy5nZXRFbGVtZW50QnlJZCgncENDJyk7XHJcbiAgdmFyIHNjb3BlID0gaW5uZXJQY2MuZmlyc3RFbGVtZW50Q2hpbGQucm93c1s2XS5jZWxsc1swXVxyXG4gICAgLmZpcnN0RWxlbWVudENoaWxkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJyk7XHJcbiAgdmFyIHBybSA9IEFycmF5LnByb3RvdHlwZS5yZWR1Y2UuY2FsbChzY29wZSwgZnVuY3Rpb24ocHJldiwgZWwpIHtcclxuICAgIG91dHB1dC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsXHJcbiAgICAgICdGb3VuZCBibHVlcHJpbnQgXCInICsgZWwudGV4dENvbnRlbnQgKyAnXCIuPGJyPicpO1xyXG4gICAgdmFyIHJlY2lwZSA9IHtcclxuICAgICAgaW1nOiBlbC5wYXJlbnROb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuZmlyc3RFbGVtZW50Q2hpbGRcclxuICAgICAgICAuZ2V0QXR0cmlidXRlKCdzcmMnKSxcclxuICAgICAgbGluazogZWwuaHJlZixcclxuICAgICAgbmFtZTogZWwudGV4dENvbnRlbnQsXHJcbiAgICAgIGlkOiBnZXRDdXN0b21VcmxQYXJhbWV0ZXIoZWwuaHJlZiwgJ3JlY2lwZV9pZCcpXHJcbiAgICB9O1xyXG4gICAgcHJldi5wdXNoKHJldHJ5QWpheChlbC5ocmVmKS5waXBlKHByb2Nlc3NSZWNpcGUuYmluZChudWxsLCByZWNpcGUpKSk7XHJcbiAgICByZXR1cm4gcHJldjtcclxuICB9LCBbXSk7XHJcbiAgcmV0dXJuICQud2hlbi5hcHBseSgkLCBwcm0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzRm9sZGVyRmlyc3RQYWdlKGRhdGEpIHsgLy8galF1ZXJ5Lm1pblxyXG4gIHZhciBwcm0gPSBbXTtcclxuICB2YXIgZG9jID0gY3JlYXRlRG9jdW1lbnQoZGF0YSk7XHJcbiAgdmFyIGlubmVyUGNjID0gZG9jLmdldEVsZW1lbnRCeUlkKCdwQ0MnKTtcclxuICB2YXIgc2NvcGUgPSBpbm5lclBjYy5maXJzdEVsZW1lbnRDaGlsZC5yb3dzWzRdLmNlbGxzWzBdXHJcbiAgICAuZmlyc3RFbGVtZW50Q2hpbGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ltZycpO1xyXG4gIHZhciB0aGlzRm9sZGVyID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKHNjb3BlLCBmdW5jdGlvbihlbCkge1xyXG4gICAgcmV0dXJuIC9cXC9mb2xkZXJfb25cXC5naWYvLnRlc3QoZWwuZ2V0QXR0cmlidXRlKCdzcmMnKSk7XHJcbiAgfSlbMF07XHJcbiAgdmFyIHBhZ2VzID0gaW5uZXJQY2MuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY3VzdG9tc2VsZWN0JylbMF1cclxuICAgIC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnb3B0aW9uJykubGVuZ3RoO1xyXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgcGFnZXM7IGkgKz0gMSkge1xyXG4gICAgcHJtLnB1c2gocmV0cnlBamF4KHRoaXNGb2xkZXIucGFyZW50Tm9kZS5ocmVmICsgJyZwYWdlPScgKyBpKVxyXG4gICAgICAucGlwZShwcm9jZXNzRm9sZGVyQW55UGFnZSkpO1xyXG4gIH1cclxuICBwcm0ucHVzaCgkLndoZW4oZGF0YSkucGlwZShwcm9jZXNzRm9sZGVyQW55UGFnZSkpO1xyXG4gIHJldHVybiAkLndoZW4uYXBwbHkoJCwgcHJtKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVkdWNlRm9sZGVycyhwcmV2LCBlbCkgeyAvLyBqUXVlcnkubWluXHJcbiAgdmFyIGhyZWYgPSBlbC5wYXJlbnROb2RlLmhyZWY7XHJcbiAgdmFyIGZvbGRlck5hbWUgPSBlbC5wYXJlbnROb2RlLm5leHRFbGVtZW50U2libGluZy5uZXh0RWxlbWVudFNpYmxpbmdcclxuICAgIC5maXJzdENoaWxkLnRleHRDb250ZW50O1xyXG4gIGlmIChnZXRDdXN0b21VcmxQYXJhbWV0ZXIoaHJlZiwgJ2ZvbGRlcl9pZCcpID09PSAnLTEnKSB7XHJcbiAgICByZXR1cm4gcHJldjtcclxuICB9XHJcbiAgaWYgKC9xdWVzdC9pLnRlc3QoZm9sZGVyTmFtZSkpIHtcclxuICAgIG91dHB1dC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsICdTa2lwcGluZyBmb2xkZXIgXCInICtcclxuICAgICAgZm9sZGVyTmFtZSArICdcIiAgYXMgaXQgaGFzIHRoZSB3b3JkIFwicXVlc3RcIiBpbiBmb2xkZXIgbmFtZS48YnI+Jyk7XHJcbiAgICByZXR1cm4gcHJldjtcclxuICB9XHJcbiAgcHJldi5wdXNoKHJldHJ5QWpheChocmVmKS5waXBlKHByb2Nlc3NGb2xkZXJGaXJzdFBhZ2UpKTtcclxuICByZXR1cm4gcHJldjtcclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc0ZpcnN0UGFnZShkYXRhKSB7IC8vIGpRdWVyeS5taW5cclxuICB2YXIgZG9jID0gY3JlYXRlRG9jdW1lbnQoZGF0YSk7XHJcbiAgdmFyIHNjb3BlID0gZG9jLmdldEVsZW1lbnRCeUlkKCdwQ0MnKS5maXJzdEVsZW1lbnRDaGlsZC5yb3dzWzRdLmNlbGxzWzBdXHJcbiAgICAuZmlyc3RFbGVtZW50Q2hpbGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ltZycpO1xyXG4gIHZhciBwcm0gPSBBcnJheS5wcm90b3R5cGUucmVkdWNlLmNhbGwoc2NvcGUsIHJlZHVjZUZvbGRlcnMsIFtdKTtcclxuICBwcm0ucHVzaCgkLndoZW4oZGF0YSkucGlwZShwcm9jZXNzRm9sZGVyRmlyc3RQYWdlKSk7XHJcbiAgcmV0dXJuICQud2hlbi5hcHBseSgkLCBwcm0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkaXNwbGF5U3R1ZmYoKSB7XHJcbiAgb3V0cHV0Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgJ0ZpbmlzaGVkIHBhcnNpbmcgLi4uIGZvcm1hdHRpbmcgLi4uJyk7XHJcbiAgc3RvcmVSZWNpcGVCb29rKCk7XHJcbiAgZ2VuZXJhdGVSZWNpcGVUYWJsZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUludmVudGluZ1N0YXJ0KCkgeyAvLyBqUXVlcnkubWluXHJcbiAgcmVjaXBlYm9vayA9IHt9O1xyXG4gIHJlY2lwZWJvb2sucmVjaXBlID0gW107XHJcbiAgb3V0cHV0LmlubmVySFRNTCA9ICc8YnI+UGFyc2luZyBpbnZlbnRpbmcgc2NyZWVuIC4uLjxicj4nO1xyXG4gIHJldHJ5QWpheCgnaW5kZXgucGhwP2NtZD1pbnZlbnRpbmcnKS5waXBlKHByb2Nlc3NGaXJzdFBhZ2UpXHJcbiAgICAuZG9uZShkaXNwbGF5U3R1ZmYpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnb3RSZWNpcGVCb29rKGRhdGEpIHtcclxuICByZWNpcGVib29rID0gZGF0YTtcclxuICBpZiAoZ2V0VmFsdWUoJ2hpZGVSZWNpcGVzJykpIHtcclxuICAgIGhpZGVSZWNpcGVzID0gc2hvdWxkQmVBcnJheSgnaGlkZVJlY2lwZU5hbWVzJyk7XHJcbiAgfVxyXG4gIGNvbnRlbnQuaW5uZXJIVE1MID0gJzx0YWJsZSBjbGFzcz1cImZzaEludkZpbHRlclwiPjx0aGVhZD48dHI+JyArXHJcbiAgICAnPHRoIHdpZHRoPVwiOTAlXCI+PGI+Jm5ic3A7UmVjaXBlIE1hbmFnZXI8L2I+PC90aD4nICtcclxuICAgICc8dGggd2lkdGg9XCIxMCVcIiBjbGFzcz1cImZzaEJ0bkJveFwiPlsnICtcclxuICAgICc8c3BhbiBpZD1cInJmc2hcIiBjbGFzcz1cImZzaExpbmtcIj4nICtcclxuICAgICdSZWZyZXNoPC9zcGFuPl08L3RoPicgK1xyXG4gICAgJzwvdHI+PC90aGVhZD48L3RhYmxlPic7XHJcbiAgb3V0cHV0ID0gY3JlYXRlRGl2KCk7XHJcbiAgY29udGVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZWVuZCcsIG91dHB1dCk7XHJcbiAgaWYgKCFyZWNpcGVib29rKSB7XHJcbiAgICBwYXJzZUludmVudGluZ1N0YXJ0KCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGdlbmVyYXRlUmVjaXBlVGFibGUoKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJtRXZ0SGRsKGV2dCkge1xyXG4gIGlmIChldnQudGFyZ2V0LmlkID09PSAncmZzaCcpIHtcclxuICAgIHBhcnNlSW52ZW50aW5nU3RhcnQoKTtcclxuICB9XHJcbiAgaWYgKGV2dC50YXJnZXQuaWQgPT09ICdzb3J0TmFtZScpIHtcclxuICAgIHNvcnRSZWNpcGVUYWJsZShldnQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0UmVjaXBlTWFuYWdlcihpbmplY3RvcikgeyAvLyBqUXVlcnkubWluXHJcbiAgY29udGVudCA9IGluamVjdG9yIHx8IHBDQztcclxuICBnZXRGb3JhZ2UoJ2ZzaF9yZWNpcGVCb29rJykuZG9uZShnb3RSZWNpcGVCb29rKTtcclxuICBjb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcm1FdnRIZGwpO1xyXG59XHJcbiIsImltcG9ydCBjYWxmIGZyb20gJy4uL3N1cHBvcnQvY2FsZic7XHJcbmltcG9ydCByZXRyeUFqYXggZnJvbSAnLi9yZXRyeUFqYXgnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SW52ZW50b3J5KCkge1xyXG4gIHZhciBzdWJjbWQgPSAnaW52ZW50b3J5JztcclxuICBpZiAoY2FsZi5zdWJjbWQgPT09ICdndWlsZGludm1ncicpIHtcclxuICAgIHN1YmNtZCA9ICdndWlsZF9zdG9yZSZpbmNfdGFnZ2VkPTEnO1xyXG4gIH1cclxuICByZXR1cm4gcmV0cnlBamF4KHtcclxuICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICB1cmw6ICdpbmRleC5waHA/Y21kPWV4cG9ydCZzdWJjbWQ9JyArIHN1YmNtZFxyXG4gIH0pO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG91dHB1dFJlc3VsdChyZXN1bHQsIGhhbmRsZSkge1xyXG4gIGhhbmRsZS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsXHJcbiAgICAnPGxpIGNsYXNzPVwiZnNoTmJyTGlzdFwiPicgKyByZXN1bHQgKyAnPC9saT4nKTtcclxufVxyXG4iLCJpbXBvcnQgb3V0cHV0UmVzdWx0IGZyb20gJy4vb3V0cHV0UmVzdWx0JztcclxuXHJcbnZhciBsYXN0TXNnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ganNvbkZhaWwoanNvbiwgaGFuZGxlKSB7XHJcbiAgaWYgKCFqc29uLnMgJiYgbGFzdE1zZyAhPT0ganNvbi5lLm1lc3NhZ2UpIHtcclxuICAgIGxhc3RNc2cgPSBqc29uLmUubWVzc2FnZTtcclxuICAgIG91dHB1dFJlc3VsdChqc29uLmUubWVzc2FnZSwgaGFuZGxlKTtcclxuICB9XHJcbiAgaWYgKCFqc29uLnMpIHtyZXR1cm4gdHJ1ZTt9XHJcbn1cclxuIiwiaW1wb3J0IGNhbGxBcHAgZnJvbSAnLi4vY2FsbEFwcCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VpdGVtKGl0ZW0pIHtcclxuICByZXR1cm4gY2FsbEFwcCh7XHJcbiAgICBjbWQ6ICdwcm9maWxlJyxcclxuICAgIHN1YmNtZDogJ3VzZWl0ZW0nLFxyXG4gICAgaW52ZW50b3J5X2lkOiBpdGVtXHJcbiAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHtjcmVhdGVUYWJsZX0gZnJvbSAnLi9jb21tb24vY0VsZW1lbnQnO1xyXG5pbXBvcnQgZ2V0SW52ZW50b3J5IGZyb20gJy4vYWpheC9nZXRJbnZlbnRvcnknO1xyXG5pbXBvcnQge2ltYWdlU2VydmVyfSBmcm9tICcuL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IGpzb25GYWlsIGZyb20gJy4vY29tbW9uL2pzb25GYWlsJztcclxuaW1wb3J0IG91dHB1dFJlc3VsdCBmcm9tICcuL2NvbW1vbi9vdXRwdXRSZXN1bHQnO1xyXG5pbXBvcnQgdXNlaXRlbSBmcm9tICcuL2FwcC9wcm9maWxlL3VzZWl0ZW0nO1xyXG5pbXBvcnQge2pDb25maXJtLCBwQ0N9IGZyb20gJy4vc3VwcG9ydC9sYXlvdXQnO1xyXG5cclxudmFyIGV4dFRibDtcclxudmFyIHBsYXllcklkO1xyXG52YXIgZXh0cmFjdEludjtcclxudmFyIHNlbGVjdFNUO1xyXG52YXIgc2VsZWN0TWFpbjtcclxudmFyIHJlc291cmNlTGlzdDtcclxudmFyIGJ1eVJlc3VsdDtcclxuXHJcbmZ1bmN0aW9uIGJhY2twYWNrUmVtb3ZlKGludklkKSB7XHJcbiAgZXh0cmFjdEludi5zb21lKGZ1bmN0aW9uKGVsLCBpLCBhcnkpIHtcclxuICAgIGlmIChlbC5pbnZfaWQgPT09IGludklkKSB7XHJcbiAgICAgIGFyeS5zcGxpY2UoaSwgMSk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBxdWlja0RvbmVFeHRyYWN0ZWQoaW52SWQsIGpzb24pIHtcclxuICBpZiAoanNvbkZhaWwoanNvbiwgYnV5UmVzdWx0KSkge3JldHVybjt9XHJcbiAgYmFja3BhY2tSZW1vdmUoaW52SWQpO1xyXG4gIG91dHB1dFJlc3VsdCgnSXRlbSBFeHRyYWN0ZWQuJywgYnV5UmVzdWx0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZG9FeHRyYWN0KHRhcmdldCkge1xyXG4gIHZhciBJbnZlbnRvcnlJRHMgPSByZXNvdXJjZUxpc3RbdGFyZ2V0LmlkLnJlcGxhY2UoJ2ZzaEV4dHInLCAnJyldLmludklEcztcclxuICB0YXJnZXQucGFyZW50Tm9kZS5pbm5lckhUTUwgPSAnZXh0cmFjdGluZyBhbGwgJyArXHJcbiAgICBJbnZlbnRvcnlJRHMubGVuZ3RoICsgJyByZXNvdXJjZXMnO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgSW52ZW50b3J5SURzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICB1c2VpdGVtKEludmVudG9yeUlEc1tpXSlcclxuICAgICAgLmRvbmUocXVpY2tEb25lRXh0cmFjdGVkLmJpbmQobnVsbCwgSW52ZW50b3J5SURzW2ldKSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBleHRyYWN0QWxsU2ltaWxhcihldnQpIHtcclxuICBqQ29uZmlybSgnRXh0cmFjdCBSZXNvdXJjZXMnLFxyXG4gICAgJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBleHRyYWN0IGFsbCBzaW1pbGFyIGl0ZW1zPycsXHJcbiAgICBkb0V4dHJhY3QuYmluZChudWxsLCBldnQudGFyZ2V0KVxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrRmxhZ3MoaXRlbSkge1xyXG4gIHJldHVybiBzZWxlY3RNYWluICYmIGl0ZW0uZm9sZGVyX2lkICE9PSAnLTEnIHx8XHJcbiAgICAhc2VsZWN0U1QgJiYgaXRlbS5pc19pbl9zdDtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVzb3VyY2VzKHByZXYsIGl0ZW0pIHtcclxuICBpZiAoY2hlY2tGbGFncyhpdGVtKSkge3JldHVybiBwcmV2O31cclxuICBpZiAocHJldltpdGVtLml0ZW1faWRdKSB7XHJcbiAgICBwcmV2W2l0ZW0uaXRlbV9pZF0uaW52SURzLnB1c2goaXRlbS5pbnZfaWQpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBwcmV2W2l0ZW0uaXRlbV9pZF0gPSB7XHJcbiAgICAgIGludklEczogW2l0ZW0uaW52X2lkXSxcclxuICAgICAgaW52X2lkOiBpdGVtLmludl9pZCxcclxuICAgICAgaXRlbV9uYW1lOiBpdGVtLml0ZW1fbmFtZVxyXG4gICAgfTtcclxuICB9XHJcbiAgcmV0dXJuIHByZXY7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRhYmxlUm93cyhwcmV2LCBpdGVtX2lkKSB7XHJcbiAgdmFyIHJlcyA9IHJlc291cmNlTGlzdFtpdGVtX2lkXTtcclxuICByZXR1cm4gcHJldiArICc8dHI+PHRkIGNsYXNzPVwiZnNoQ2VudGVyXCI+PHNwYW4gY2xhc3M9XCJzbWFsbExpbmtcIicgK1xyXG4gICAgJyBpZD1cImZzaEV4dHInICsgaXRlbV9pZCArXHJcbiAgICAnXCI+RXh0cmFjdCBhbGwgJyArIHJlcy5pbnZJRHMubGVuZ3RoICsgJzwvc3Bhbj48L3RkPicgK1xyXG4gICAgJzx0ZD48aW1nIHNyYz1cIicgKyBpbWFnZVNlcnZlciArICcvaXRlbXMvJyArXHJcbiAgICBpdGVtX2lkICsgJy5naWZcIiBjbGFzcz1cInRpcC1keW5hbWljXCIgZGF0YS10aXBwZWQ9XCInICtcclxuICAgICdmZXRjaGl0ZW0ucGhwP2l0ZW1faWQ9JyArIGl0ZW1faWQgKyAnJmludl9pZD0nICtcclxuICAgIHJlcy5pbnZfaWQgKyAnJnQ9MSZwPScgKyBwbGF5ZXJJZCArXHJcbiAgICAnXCIgYm9yZGVyPTA+PC90ZD48dGQ+JyArIHJlcy5pdGVtX25hbWUgKyAnPC90ZD48L3RyPic7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dRdWlja0V4dHJhY3QoKSB7XHJcbiAgcmVzb3VyY2VMaXN0ID0gZXh0cmFjdEludi5yZWR1Y2UocmVzb3VyY2VzLCB7fSk7XHJcbiAgdmFyIG91dHB1dCA9ICc8dHI+PHRoIHdpZHRoPVwiMjAlXCI+QWN0aW9uczwvdGg+PHRoPkl0ZW1zPC90aD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQgY29sc3Bhbj1cIjJcIj48b2wgaWQ9XCJxZXJlc3VsdFwiPjwvb2w+PC90ZD48L3RyPic7XHJcbiAgb3V0cHV0ICs9IE9iamVjdC5rZXlzKHJlc291cmNlTGlzdCkucmVkdWNlKHRhYmxlUm93cywgJycpO1xyXG4gIGV4dFRibC5pbm5lckhUTUwgPSBvdXRwdXQ7XHJcbiAgYnV5UmVzdWx0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3FlcmVzdWx0Jyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzRXh0cmFjdGFibGUoY3Vycikge1xyXG4gIHJldHVybiBjdXJyLml0ZW1fbmFtZSA9PT0gJ1pvbWJpZSBDb2ZmaW4nIHx8XHJcbiAgICBjdXJyLnR5cGUgPT09ICcxMicgfHxcclxuICAgIGN1cnIudHlwZSA9PT0gJzE2JztcclxufVxyXG5cclxuZnVuY3Rpb24gcHJlcEludihkYXRhKSB7XHJcbiAgcGxheWVySWQgPSBkYXRhLnBsYXllcl9pZDtcclxuICBleHRyYWN0SW52ID0gZGF0YS5pdGVtcy5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3Vycikge1xyXG4gICAgaWYgKGlzRXh0cmFjdGFibGUoY3VycikpIHtwcmV2LnB1c2goY3Vycik7fVxyXG4gICAgcmV0dXJuIHByZXY7XHJcbiAgfSwgW10pO1xyXG4gIHNob3dRdWlja0V4dHJhY3QoKTtcclxufVxyXG5cclxudmFyIGV4dHJhY3RFdmVudHMgPSBbXHJcbiAge1xyXG4gICAgdGVzdDogZnVuY3Rpb24oZSkge3JldHVybiBlLnRhcmdldC5pZCA9PT0gJ2ZzaEluU3QnO30sXHJcbiAgICBmbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHNlbGVjdFNUID0gIXNlbGVjdFNUO1xyXG4gICAgICBzaG93UXVpY2tFeHRyYWN0KCk7XHJcbiAgICB9XHJcbiAgfSxcclxuICB7XHJcbiAgICB0ZXN0OiBmdW5jdGlvbihlKSB7cmV0dXJuIGUudGFyZ2V0LmlkID09PSAnZnNoSW5NYWluJzt9LFxyXG4gICAgZm46IGZ1bmN0aW9uKCkge1xyXG4gICAgICBzZWxlY3RNYWluID0gIXNlbGVjdE1haW47XHJcbiAgICAgIHNob3dRdWlja0V4dHJhY3QoKTtcclxuICAgIH1cclxuICB9LFxyXG4gIHtcclxuICAgIHRlc3Q6IGZ1bmN0aW9uKGUpIHtyZXR1cm4gZS50YXJnZXQuaWQuaW5kZXhPZignZnNoRXh0cicpID09PSAwO30sXHJcbiAgICBmbjogZnVuY3Rpb24oZSkge1xyXG4gICAgICBleHRyYWN0QWxsU2ltaWxhcihlKTtcclxuICAgIH1cclxuICB9XHJcbl07XHJcblxyXG5mdW5jdGlvbiBsaXN0ZW4oZSkge1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZXh0cmFjdEV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgaWYgKGV4dHJhY3RFdmVudHNbaV0udGVzdChlKSkge1xyXG4gICAgICBleHRyYWN0RXZlbnRzW2ldLmZuKGUpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbnNlcnRRdWlja0V4dHJhY3QoaW5qZWN0b3IpIHsgLy8galF1ZXJ5Lm1pblxyXG4gIHZhciBjb250ZW50ID0gaW5qZWN0b3IgfHwgcENDO1xyXG4gIGNvbnRlbnQuaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9XCJxZUhlYWRcIj48Yj5RdWljayBFeHRyYWN0PC9iPjwvZGl2PicgK1xyXG4gICAgJ1NlbGVjdCB3aGljaCB0eXBlIG9mIHBsYW50cyB5b3Ugd2lzaCB0byBleHRyYWN0IGFsbCBvZi4gT25seSAnICtcclxuICAgICdzZWxlY3QgZXh0cmFjdGFibGUgcmVzb3VyY2VzLjxicj4nICtcclxuICAgICc8bGFiZWw+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwiZnNoSW5TdFwiIGNoZWNrZWQ+JyArXHJcbiAgICAnIFNlbGVjdCBpdGVtcyBpbiBTVDwvbGFiZWw+Jm5ic3A7Jm5ic3A7JyArXHJcbiAgICAnPGxhYmVsPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cImZzaEluTWFpblwiIGNoZWNrZWQ+JyArXHJcbiAgICAnIE9ubHkgZXh0cmFjdCBpdGVtcyBpbiBNYWluIEZvbGRlcjwvbGFiZWw+JztcclxuICBleHRUYmwgPSBjcmVhdGVUYWJsZSh7d2lkdGg6ICcxMDAlJ30pO1xyXG4gIGNvbnRlbnQuYXBwZW5kQ2hpbGQoZXh0VGJsKTtcclxuICBzZWxlY3RTVCA9IHRydWU7XHJcbiAgc2VsZWN0TWFpbiA9IHRydWU7XHJcbiAgY29udGVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGxpc3Rlbik7XHJcbiAgZ2V0SW52ZW50b3J5KCkuZG9uZShwcmVwSW52KTtcclxufVxyXG4iLCJpbXBvcnQge2ltYWdlU2VydmVyfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCB7cGxheWVySWR9IGZyb20gJy4uL3N1cHBvcnQvbGF5b3V0JztcclxuaW1wb3J0IHtjcmVhdGVEaXYsIGNyZWF0ZVRCb2R5LCBjcmVhdGVUYWJsZX0gZnJvbSAnLi4vY29tbW9uL2NFbGVtZW50JztcclxuXHJcbmZ1bmN0aW9uIGFscGhhKGEsIGIpIHtcclxuICBpZiAoYS5uLnRvTG93ZXJDYXNlKCkgPCBiLm4udG9Mb3dlckNhc2UoKSkge3JldHVybiAtMTt9XHJcbiAgaWYgKGEubi50b0xvd2VyQ2FzZSgpID4gYi5uLnRvTG93ZXJDYXNlKCkpIHtyZXR1cm4gMTt9XHJcbiAgcmV0dXJuIDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzVXNlYWJsZShpdGVtKSB7XHJcbiAgaWYgKFsxMCwgMTIsIDE1LCAxNl0uaW5kZXhPZihpdGVtLnQpICE9PSAtMSB8fFxyXG4gICAgICBpdGVtLm4gPT09ICdab21iaWUgQ29mZmluJykge1xyXG4gICAgcmV0dXJuICdzbWFsbExpbmsnO1xyXG4gIH1cclxuICByZXR1cm4gJ25vdExpbmsnO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpdGVtSW1hZ2UoaXRlbSkge1xyXG4gIHZhciByZXQgPSBpbWFnZVNlcnZlciArICcvJztcclxuICBpZiAoaXRlbS5iID09PSAxMzY5OSkge1xyXG4gICAgcmV0ICs9ICdjb21wb3NpbmcvcG90aW9ucy8nICsgaXRlbS5leHRyYS5kZXNpZ24gKyAnXycgK1xyXG4gICAgICBpdGVtLmV4dHJhLmNvbG9yICsgJy5naWYnO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXQgKz0gJ2l0ZW1zLycgKyBpdGVtLmIgKyAnLmdpZic7XHJcbiAgfVxyXG4gIHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRhYmxlUm93cyh0YmwsIGN1cnJlbnRQbGF5ZXJJZCwgaXRlbSkge1xyXG4gIHZhciBuZXdSb3cgPSB0YmwuaW5zZXJ0Um93KC0xKTtcclxuICBpdGVtLmRvbSA9IG5ld1JvdztcclxuICB2YXIgZXF1aXBDbGFzcyA9ICdmc2hFcSAnO1xyXG4gIHZhciB1c2VDbGFzcyA9ICdmc2hVc2UgJztcclxuICBpZiAoaXRlbS50IDwgOSkge2VxdWlwQ2xhc3MgKz0gJ3NtYWxsTGluayc7fSBlbHNlIHtlcXVpcENsYXNzICs9ICdub3RMaW5rJzt9XHJcbiAgdXNlQ2xhc3MgKz0gaXNVc2VhYmxlKGl0ZW0pO1xyXG4gIG5ld1Jvdy5pbm5lckhUTUwgPSAnPHRkIGNsYXNzPVwiZnNoQ2VudGVyXCI+PHNwYW4gY2xhc3M9XCInICsgZXF1aXBDbGFzcyArXHJcbiAgICAnXCIgZGF0YS1pdGVtaWQ9XCInICsgaXRlbS5hICsgJ1wiPldlYXI8L3NwYW4+Jm5ic3A7fCZuYnNwOzxzcGFuIGNsYXNzPVwiJyArXHJcbiAgICB1c2VDbGFzcyArICdcIiBkYXRhLWl0ZW1pZD1cIicgKyBpdGVtLmEgK1xyXG4gICAgJ1wiPlVzZS9FeHQ8L3NwYW4+PC90ZD48dGQ+PGltZyBzcmM9XCInICsgaXRlbUltYWdlKGl0ZW0pICtcclxuICAgICdcIiBjbGFzcz1cInRpcC1keW5hbWljXCIgZGF0YS10aXBwZWQ9XCJmZXRjaGl0ZW0ucGhwP2l0ZW1faWQ9JyArIGl0ZW0uYiArXHJcbiAgICAnJmFtcDtpbnZfaWQ9JyArIGl0ZW0uYSArICcmYW1wO3Q9MSZhbXA7cD0nICsgY3VycmVudFBsYXllcklkICtcclxuICAgICcmYW1wO2N1cnJlbnRQbGF5ZXJJZD0nICsgY3VycmVudFBsYXllcklkICtcclxuICAgICdcIiB3aWR0aD1cIjMwXCIgaGVpZ2h0PVwiMzBcIiBib3JkZXI9XCIwXCI+PC90ZD48dGQgd2lkdGg9XCI5MCVcIj4mbmJzcDsnICtcclxuICAgIGl0ZW0ubiArICc8L3RkPic7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1ha2VGb2xkZXJTcGFucyhhcHBJbnYpIHtcclxuICByZXR1cm4gJzxzcGFuIGNsYXNzPVwiZnNoTGluayBmb2xkZXJcIiBkYXRhLWZvbGRlcj1cIjBcIj5BbGw8L3NwYW4+JyArXHJcbiAgICAvLyAnICZlbnNwOzxzcGFuIGNsYXNzPVwiZnNoTGluayBmb2xkZXJcIiBkYXRhLWZvbGRlcj1cIi0xXCI+TWFpbjwvc3Bhbj4nICtcclxuICAgIGFwcEludi5yLnJlZHVjZShmdW5jdGlvbihwcmV2LCBmb2xkZXJPYmopIHtcclxuICAgICAgcmV0dXJuIHByZXYgKyAnICZlbnNwOzxzcGFuIGNsYXNzPVwiZnNoTGluayBmc2hOb1dyYXAgZm9sZGVyXCIgJyArXHJcbiAgICAgICAgJ2RhdGEtZm9sZGVyPVwiJyArIGZvbGRlck9iai5pZC50b1N0cmluZygpICsgJ1wiPicgK1xyXG4gICAgICAgIGZvbGRlck9iai5uYW1lICsgJzwvc3Bhbj4nO1xyXG4gICAgfSwgJycpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVRdWlja1dlYXIoYXBwSW52KSB7XHJcbiAgdmFyIGN1cnJlbnRQbGF5ZXJJZCA9IHBsYXllcklkKCk7XHJcbiAgdmFyIHRibCA9IGNyZWF0ZVRhYmxlKHtcclxuICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICBpbm5lckhUTUw6ICc8dGhlYWQ+PHRyPjx0aCBjbGFzcz1cImZzaENlbnRlclwiIGNvbHNwYW49XCIzXCI+JyArXHJcbiAgICAgIG1ha2VGb2xkZXJTcGFucyhhcHBJbnYpICsgJzwvdGg+PC90cj4nICtcclxuICAgICAgJzx0ciBjbGFzcz1cImZzaEhlYWRlclwiPjx0aCBjbGFzcz1cImZzaENlbnRlclwiIHdpZHRoPVwiMjAlXCI+QWN0aW9uczwvdGg+JyArXHJcbiAgICAgICc8dGggY29sc3Bhbj1cIjJcIj5JdGVtczwvdGg+PC90cj48L3RoZWFkPidcclxuICB9KTtcclxuICB2YXIgdGJvZHkgPSBjcmVhdGVUQm9keSgpO1xyXG4gIHRibC5hcHBlbmRDaGlsZCh0Ym9keSk7XHJcbiAgYXBwSW52LnIuZm9yRWFjaChmdW5jdGlvbihhRm9sZGVyKSB7XHJcbiAgICBhRm9sZGVyLml0ZW1zLnNvcnQoYWxwaGEpO1xyXG4gICAgYUZvbGRlci5pdGVtcy5mb3JFYWNoKHRhYmxlUm93cy5iaW5kKG51bGwsIHRib2R5LCBjdXJyZW50UGxheWVySWQpKTtcclxuICB9KTtcclxuICB2YXIgcXcgPSBjcmVhdGVEaXYoe1xyXG4gICAgaWQ6ICdpbnZUYWJzLXF3JyxcclxuICAgIGNsYXNzTmFtZTogJ3VpLXRhYnMtcGFuZWwgdWktY29ybmVyLWJvdHRvbSdcclxuICB9KTtcclxuICBxdy5hcHBlbmRDaGlsZCh0YmwpO1xyXG4gIHJldHVybiBxdztcclxufVxyXG4iLCJpbXBvcnQgY2FsbEFwcCBmcm9tICcuLi9jYWxsQXBwJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvYWRJbnZlbnRvcnkoKSB7XHJcbiAgcmV0dXJuIGNhbGxBcHAoe2NtZDogJ3Byb2ZpbGUnLCBzdWJjbWQ6ICdsb2FkaW52ZW50b3J5J30pO1xyXG59XHJcbiIsImltcG9ydCB7Y3JlYXRlRGl2fSBmcm9tICcuLi9jb21tb24vY0VsZW1lbnQnO1xyXG5pbXBvcnQge2dldFZhbHVlSlNPTn0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5cclxuZnVuY3Rpb24gYWhMaW5rKHNlYXJjaG5hbWUsIG5pY2tuYW1lKSB7XHJcbiAgcmV0dXJuICc8YSBocmVmPVwiaW5kZXgucGhwP2NtZD1hdWN0aW9uaG91c2Umc2VhcmNoX3RleHQ9JyArIHNlYXJjaG5hbWUgK1xyXG4gICAgJ1wiPicgKyBuaWNrbmFtZSArICc8L2E+JztcclxufVxyXG5cclxuZnVuY3Rpb24gZm91bmRJbnZJdGVtKGludkNvdW50LCBuYW1lKSB7XHJcbiAgaWYgKGludkNvdW50W25hbWVdKSB7XHJcbiAgICBpbnZDb3VudFtuYW1lXS5jb3VudCArPSAxO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpbnZDb3VudFtuYW1lXSA9IHtjb3VudDogMSwgbmlja25hbWVMaXN0OiBbXX07XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkaXNwbGF5Rm91bmRDb3VudChpbnZDb3VudCkge1xyXG4gIHJldHVybiBPYmplY3Qua2V5cyhpbnZDb3VudCkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGtleSkge1xyXG4gICAgaWYgKGludkNvdW50W2tleV0ubmlja25hbWVMaXN0Lmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICByZXR1cm4gcHJldiArICc8dHI+PHRkPicgKyBrZXkgKyAnPC90ZD48dGQ+JyArXHJcbiAgICAgICAgaW52Q291bnRba2V5XS5uaWNrbmFtZUxpc3QubWFwKGZ1bmN0aW9uKG5pY2tuYW1lKSB7XHJcbiAgICAgICAgICByZXR1cm4gYWhMaW5rKGtleSwgbmlja25hbWUpO1xyXG4gICAgICAgIH0pLmpvaW4oJyAnKSArICc8L3RkPjx0ZD4nICtcclxuICAgICAgICBpbnZDb3VudFtrZXldLmNvdW50ICsgJzwvdGQ+PHRkPjwvdGQ+PHRkPjwvdGQ+PC90cj4nO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByZXY7XHJcbiAgfSwgJycpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkaXNwbGF5Tm90Rm91bmQocXVpY2tTTCkge1xyXG4gIHJldHVybiBxdWlja1NMLnJlZHVjZShmdW5jdGlvbihwcmV2LCBpdGVtKSB7XHJcbiAgICBpZiAoaXRlbS5kaXNwbGF5T25BSCAmJiAhaXRlbS5mb3VuZCkge1xyXG4gICAgICByZXR1cm4gcHJldiArIGFoTGluayhpdGVtLnNlYXJjaG5hbWUsIGl0ZW0ubmlja25hbWUpICsgJywgJztcclxuICAgIH1cclxuICAgIHJldHVybiBwcmV2O1xyXG4gIH0sICcnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGlzcGxheU90aGVyQ291bnQoaW52Q291bnQpIHtcclxuICByZXR1cm4gT2JqZWN0LmtleXMoaW52Q291bnQpLnJlZHVjZShmdW5jdGlvbihwcmV2LCBrZXkpIHtcclxuICAgIGlmIChpbnZDb3VudFtrZXldLm5pY2tuYW1lTGlzdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIHByZXYgKyAnPHRyPjx0ZD4nICsga2V5ICsgJzwvdGQ+PHRkPjwvdGQ+PHRkPicgK1xyXG4gICAgICAgIGludkNvdW50W2tleV0uY291bnQgKyAnPC90ZD48dGQ+PC90ZD48dGQ+PC90ZD48dGQ+PC90ZD48L3RyPic7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJldjtcclxuICB9LCAnJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJ1aWxkSFRNTChpbnZDb3VudCwgcXVpY2tTTCkge1xyXG4gIC8vIFRPRE8gdGhpcyBpcyBnb2luZyB0byBuZWVkIHNpZ25pZmljYW50IHJlYnVpbGRcclxuICByZXR1cm4gJzx0YWJsZSB3aWR0aD1cIjEwMCVcIiBjZWxsc3BhY2luZz1cIjJcIiBjZWxscGFkZGluZz1cIjJcIj48dGhlYWQ+JyArXHJcbiAgICAnPHRyPjx0aCBjb2xzcGFuPVwiNVwiIGNsYXNzPVwiZnNoQ2VudGVyXCI+SXRlbXMgZnJvbSAnICtcclxuICAgICc8YSBocmVmPVwiaW5kZXgucGhwP2NtZD1ub3RlcGFkJmJsYW5rPTEmc3ViY21kPWF1Y3Rpb25zZWFyY2hcIj4nICtcclxuICAgICdBSCBRdWljayBTZWFyY2g8L2E+IGZvdW5kIGluIHlvdXIgaW52ZW50b3J5PC90aD48L3RyPicgK1xyXG4gICAgJzx0cj48dGg+TmFtZTwvdGg+PHRoPk5pY2sgTmFtZTwvdGg+PHRoPkludiBDb3VudDwvdGg+JyArXHJcbiAgICAnPHRoPkFIIE1pbiBQcmljZTwvdGg+PHRoPkFIIEJ1eU5vdyBQcmljZTwvdGg+PC90cj48L3RoZWFkPjx0Ym9keT4nICtcclxuICAgIC8vIHNob3cgaW52ICYgY291bnRlciBmb3IgaXRlbSB3aXRoIG5pY2tuYW1lIGZvdW5kXHJcbiAgICBkaXNwbGF5Rm91bmRDb3VudChpbnZDb3VudCkgK1xyXG4gICAgLy8gc2hvdyBpdGVtIGZyb20gcXVpY2sgQUggc2VhcmNoIHRoYXQgYXJlIG5vdCBpbiBvdXIgaW52XHJcbiAgICAnPHRyPjx0ZCBjb2xzcGFuPVwiNVwiPjxocj48L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZD5EaWQgbm90IGZpbmQ6PC90ZD48dGQgY29sc3Bhbj1cIjRcIj4nICtcclxuICAgIGRpc3BsYXlOb3RGb3VuZChxdWlja1NMKSArXHJcbiAgICAnPC90ZD48L3RyPjx0cj48dGQgY29sc3Bhbj1cIjVcIj48aHI+PC90ZD48L3RyPjwvdGJvZHk+JyArXHJcbiAgICAnPHRoZWFkPjx0cj48dGggY29sc3Bhbj1cIjVcIiBjbGFzcz1cImZzaENlbnRlclwiPkl0ZW1zIE5PVCBmcm9tICcgK1xyXG4gICAgJzxhIGhyZWY9XCJpbmRleC5waHA/Y21kPW5vdGVwYWQmYmxhbms9MSZzdWJjbWQ9YXVjdGlvbnNlYXJjaFwiPicgK1xyXG4gICAgJ0FIIFF1aWNrIFNlYXJjaDwvYT4gZm91bmQgaW4geW91ciBpbnZlbnRvcnk8L3RkPjwvdGhlYWQ+PHRib2R5PicgK1xyXG4gICAgLy8gc2hvdyBpbnYgJiBjb3VudGVyIGZvciBpdGVtIHdpdGggbmlja25hbWUgTk9UIGZvdW5kXHJcbiAgICBkaXNwbGF5T3RoZXJDb3VudChpbnZDb3VudCkgK1xyXG4gICAgJzwvdGJvZHk+PC90YWJsZT4nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpblF1aWNrU2VhcmNoTGlzdChpbnZDb3VudCwgbmFtZSwgbGlzdEl0ZW0pIHtcclxuICBpZiAobmFtZSA9PT0gbGlzdEl0ZW0uc2VhcmNobmFtZSkge1xyXG4gICAgbGlzdEl0ZW0uZm91bmQgPSB0cnVlO1xyXG4gICAgaWYgKGludkNvdW50W25hbWVdLm5pY2tuYW1lTGlzdC5pbmRleE9mKGxpc3RJdGVtLm5pY2tuYW1lKSA8IDApIHtcclxuICAgICAgaW52Q291bnRbbmFtZV0ubmlja25hbWVMaXN0LnB1c2gobGlzdEl0ZW0ubmlja25hbWUpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdGVzdEl0ZW1MaXN0KGludkNvdW50LCBxdWlja1NMLCBpdGVtKSB7XHJcbiAgdmFyIG5hbWUgPSBpdGVtLm47XHJcbiAgZm91bmRJbnZJdGVtKGludkNvdW50LCBuYW1lKTtcclxuICBxdWlja1NMLmZvckVhY2goaW5RdWlja1NlYXJjaExpc3QuYmluZChudWxsLCBpbnZDb3VudCwgbmFtZSkpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaG93QUhJbnZNYW5hZ2VyKGl0ZW1MaXN0KSB7XHJcbiAgdmFyIGludkNvdW50ID0ge307XHJcbiAgdmFyIHF1aWNrU0wgPSBnZXRWYWx1ZUpTT04oJ3F1aWNrU2VhcmNoTGlzdCcpO1xyXG4gIC8vIGZpbGwgdXAgdGhlIEludiBDb3VudGVyXHJcbiAgaXRlbUxpc3Quci5mb3JFYWNoKGZ1bmN0aW9uKGFGb2xkZXIpIHtcclxuICAgIGFGb2xkZXIuaXRlbXMuZm9yRWFjaCh0ZXN0SXRlbUxpc3QuYmluZChudWxsLCBpbnZDb3VudCwgcXVpY2tTTCkpO1xyXG4gIH0pO1xyXG4gIHZhciBpbSA9IGNyZWF0ZURpdih7XHJcbiAgICBpZDogJ2ludlRhYnMtYWgnLFxyXG4gICAgY2xhc3NOYW1lOiAndWktdGFicy1wYW5lbCB1aS1jb3JuZXItYm90dG9tJ1xyXG4gIH0pO1xyXG4gIGltLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgYnVpbGRIVE1MKGludkNvdW50LCBxdWlja1NMKSk7XHJcbiAgcmV0dXJuIGltO1xyXG59XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIG1heC1saW5lcyAqL1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgbW92ZUd1aWxkTGlzdDoge1xyXG4gICAgaWQ6ICdtb3ZlR3VpbGRMaXN0JyxcclxuICAgIGhlbHBUaXRsZTogJ01vdmUgR3VpbGQgSW5mbyBMaXN0JyxcclxuICAgIGhlbHBUZXh0OiAnVGhpcyB3aWxsIE1vdmUgdGhlIEd1aWxkIEluZm8gTGlzdCBoaWdoZXIgJyArXHJcbiAgICAgICdvbiB0aGUgYmFyIG9uIHRoZSByaWdodCdcclxuICB9LFxyXG4gIG1vdmVPbmxpbmVBbGxpZXNMaXN0OiB7XHJcbiAgICBpZDogJ21vdmVPbmxpbmVBbGxpZXNMaXN0JyxcclxuICAgIGhlbHBUaXRsZTogJ01vdmUgT25saW5lIEFsbGllcyBMaXN0JyxcclxuICAgIGhlbHBUZXh0OiAnVGhpcyB3aWxsIE1vdmUgdGhlIE9ubGluZSBBbGxpZXMgTGlzdCBoaWdoZXIgJyArXHJcbiAgICAgICdvbiB0aGUgYmFyIG9uIHRoZSByaWdodCdcclxuICB9LFxyXG4gIGVuYWJsZU9ubGluZUFsbGllc1dpZGdldHM6IHtcclxuICAgIGlkOiAnZW5hYmxlT25saW5lQWxsaWVzV2lkZ2V0cycsXHJcbiAgICBoZWxwVGl0bGU6ICdFbmFibGUgT25saW5lIEFsbGllcyBXaWRnZXRzJyxcclxuICAgIGhlbHBUZXh0OiAnRW5hYmxpbmcgdGhpcyBvcHRpb24gd2lsbCBlbmFibGUgdGhlIEFsbGllcyBMaXN0ICcgK1xyXG4gICAgICAnV2lkZ2V0cyAoY29sb3Jpbmcgb24gdGhlIEFsbGllcyBMaXN0IHBhbmVsKSdcclxuICB9LFxyXG4gIG1vdmVGU0JveDoge1xyXG4gICAgaWQ6ICdtb3ZlRlNCb3gnLFxyXG4gICAgaGVscFRpdGxlOiAnTW92ZSBGUyBib3gnLFxyXG4gICAgaGVscFRleHQ6ICdUaGlzIHdpbGwgbW92ZSB0aGUgRlMgYm94IHRvIHRoZSBsZWZ0LCB1bmRlciB0aGUgbWVudSwgJyArXHJcbiAgICAgICdmb3IgYmV0dGVyIHZpc2liaWxpdHkgKHVubGVzcyBpdCBpcyBhbHJlYWR5IGhpZGRlbi4pJ1xyXG4gIH0sXHJcbiAgZ2FtZUhlbHBMaW5rOiB7XHJcbiAgICBpZDogJ2dhbWVIZWxwTGluaycsXHJcbiAgICBoZWxwVGl0bGU6ICcmcXVvdDtHYW1lIEhlbHAmcXVvdDsgU2V0dGluZ3MgTGluaycsXHJcbiAgICBoZWxwVGV4dDogJ1RoaXMgdHVybnMgdGhlIEdhbWUgSGVscCB0ZXh0IGluIHRoZSBsb3dlciAnICtcclxuICAgICAgJ3JpZ2h0IGJveCBpbnRvIGEgbGluayB0byB0aGlzIHNldHRpbmdzIHBhZ2UuJ1xyXG4gIH0sXHJcbiAgZW5hYmxlVGVtcGxlQWxlcnQ6IHtcclxuICAgIGlkOiAnZW5hYmxlVGVtcGxlQWxlcnQnLFxyXG4gICAgaGVscFRpdGxlOiAnRW5hYmxlIFRlbXBsZSBBbGVydCcsXHJcbiAgICBoZWxwVGV4dDogJ1B1dHMgYW4gYWxlcnQgb24gdGhlIExIUyBpZiB5b3UgaGF2ZSBub3QgJyArXHJcbiAgICAgICdwcmF5ZWQgYXQgdGhlIHRlbXBsZSB0b2RheS4nLFxyXG4gICAgbmV0d29yazogdHJ1ZVxyXG4gIH0sXHJcbiAgZW5hYmxlVXBncmFkZUFsZXJ0OiB7XHJcbiAgICBpZDogJ2VuYWJsZVVwZ3JhZGVBbGVydCcsXHJcbiAgICBoZWxwVGl0bGU6ICdFbmFibGUgR29sZCBVcGdyYWRlIEFsZXJ0JyxcclxuICAgIGhlbHBUZXh0OiAnUHV0cyBhbiBhbGVydCBvbiB0aGUgTEhTIGlmIHlvdSBoYXZlIG5vdCB1cGdyYWRlZCB5b3VyICcgK1xyXG4gICAgICAnc3RhbWluYSB3aXRoIGdvbGQgdG9kYXkuJyxcclxuICAgIG5ldHdvcms6IHRydWVcclxuICB9LFxyXG4gIGVuYWJsZUNvbXBvc2luZ0FsZXJ0OiB7XHJcbiAgICBpZDogJ2VuYWJsZUNvbXBvc2luZ0FsZXJ0JyxcclxuICAgIGhlbHBUaXRsZTogJ0VuYWJsZSBDb21wb3NpbmcgQWxlcnQnLFxyXG4gICAgaGVscFRleHQ6ICdQdXRzIGFuIGFsZXJ0IG9uIHRoZSBMSFMgaWYgeW91IGhhdmUgY29tcG9zaW5nICcgK1xyXG4gICAgICAnc2xvdHMgYXZhaWxhYmxlLicsXHJcbiAgICBuZXR3b3JrOiB0cnVlXHJcbiAgfSxcclxuICBlbmhhbmNlT25saW5lRG90czoge1xyXG4gICAgaWQ6ICdlbmhhbmNlT25saW5lRG90cycsXHJcbiAgICBoZWxwVGl0bGU6ICdFbmhhbmNlIE9ubGluZSBEb3RzJyxcclxuICAgIGhlbHBUZXh0OiAnRW5oYW5jZXMgdGhlIGdyZWVuL2dyZXkgZG90cyBieSBwbGF5ZXIgbmFtZXMgdG8gc2hvdyAnICtcclxuICAgICAgJ29ubGluZS9vZmZsaW5lIHN0YXR1cy4nXHJcbiAgfSxcclxuICBoaWRlQnVmZlNlbGVjdGVkOiB7XHJcbiAgICBpZDogJ2hpZGVCdWZmU2VsZWN0ZWQnLFxyXG4gICAgaGVscFRpdGxlOiAnSGlkZSBCdWZmIFNlbGVjdGVkJyxcclxuICAgIGhlbHBUZXh0OiAnSGlkZXMgdGhlIGJ1ZmYgc2VsZWN0ZWQgZnVuY3Rpb25hbGl0eSBpbiB0aGUgb25saW5lIGFsbGllcyAnICtcclxuICAgICAgJ2FuZCBndWlsZCBpbmZvIHNlY3Rpb24uJ1xyXG4gIH0sXHJcbiAgaGlkZUhlbHBlck1lbnU6IHtcclxuICAgIGlkOiAnaGlkZUhlbHBlck1lbnUnLFxyXG4gICAgaGVscFRpdGxlOiAnSGlkZSBIZWxwZXIgTWVudScsXHJcbiAgICBoZWxwVGV4dDogJ0hpZGVzIHRoZSBoZWxwZXIgbWVudSBmcm9tIHRvcCBsZWZ0LidcclxuICB9LFxyXG4gIGtlZXBIZWxwZXJNZW51T25TY3JlZW46IHtcclxuICAgIGlkOiAna2VlcEhlbHBlck1lbnVPblNjcmVlbicsXHJcbiAgICBoZWxwVGl0bGU6ICdLZWVwIEhlbHBlciBNZW51IE9uIFNjcmVlbicsXHJcbiAgICBoZWxwVGV4dDogJ0tlZXBzIGhlbHBlciBtZW51IG9uIHNjcmVlbiBhcyB5b3Ugc2Nyb2xsIChoZWxwZXIgJyArXHJcbiAgICAgICdtZW51IG11c3QgYmUgZW5hYmxlZCB0byB3b3JrKS4gQWxzbyB3b3JrcyB3aXRoIHF1aWNrIGxpbmtzLidcclxuICB9LFxyXG4gIHNob3dBZG1pbjoge1xyXG4gICAgaWQ6ICdzaG93QWRtaW4nLFxyXG4gICAgaGVscFRpdGxlOiAnU2hvdyByYW5rIGNvbnRyb2xzJyxcclxuICAgIGhlbHBUZXh0OiAnU2hvdyByYW5raW5nIGNvbnRyb2xzIGZvciBndWlsZCBtYW5hZ2VtZW5ldCBpbiBtZW1iZXIgJyArXHJcbiAgICAgICdwcm9maWxlIHBhZ2UgLSB0aGlzIHdvcmtzIGZvciBndWlsZCBmb3VuZGVycyBvbmx5J1xyXG4gIH0sXHJcbiAgYWpheGlmeVJhbmtDb250cm9sczoge1xyXG4gICAgaWQ6ICdhamF4aWZ5UmFua0NvbnRyb2xzJyxcclxuICAgIGhlbHBUaXRsZTogJ0FKQVhpZnkgcmFuayBjb250cm9scycsXHJcbiAgICBoZWxwVGV4dDogJ0VuYWJsZXMgZ3VpbGQgZm91bmRlcnMgd2l0aCByYW5raW5nIHJpZ2h0cyB0byBjaGFuZ2UgcmFuayAnICtcclxuICAgICAgJ3Bvc2l0aW9ucyB3aXRob3V0IGEgc2NyZWVuIHJlZnJlc2guJ1xyXG4gIH0sXHJcbiAgZGV0YWlsZWRDb25mbGljdEluZm86IHtcclxuICAgIGlkOiAnZGV0YWlsZWRDb25mbGljdEluZm8nLFxyXG4gICAgaGVscFRpdGxlOiAnU2hvdyBDb25mbGljdCBEZXRhaWxzJyxcclxuICAgIGhlbHBUZXh0OiAnSW5zZXJ0cyBkZXRhaWxlZCBjb25mbGljdCBpbmZvcm1hdGlvbiBvbnRvIHlvdXIgZ3VpbGRcXCdzICcgK1xyXG4gICAgICAnbWFuYWdlIHBhZ2UuIEN1cnJlbnRseSBkaXNwbGF5cyB0aGUgdGFyZ2V0IGd1aWxkIGFzIHdlbGwgYXMgJyArXHJcbiAgICAgICd0aGUgY3VycmVudCBzY29yZS4nLFxyXG4gICAgbmV0d29yazogdHJ1ZVxyXG4gIH0sXHJcbiAgc2hvd0NvbWJhdExvZzoge1xyXG4gICAgaWQ6ICdzaG93Q29tYmF0TG9nJyxcclxuICAgIGhlbHBUaXRsZTogJ1Nob3cgQ29tYmF0IExvZycsXHJcbiAgICBoZWxwVGV4dDogJ1RoaXMgd2lsbCBzaG93IHRoZSBjb21iYXQgbG9nIGZvciBlYWNoIGF1dG9tYXRpYyAnICtcclxuICAgICAgJ2JhdHRsZSBiZWxvdyB0aGUgbW9uc3RlciBsaXN0LidcclxuICB9LFxyXG4gIGVuYWJsZUNyZWF0dXJlQ29sb3Jpbmc6IHtcclxuICAgIGlkOiAnZW5hYmxlQ3JlYXR1cmVDb2xvcmluZycsXHJcbiAgICBoZWxwVGl0bGU6ICdDb2xvciBTcGVjaWFsIENyZWF0dXJlcycsXHJcbiAgICBoZWxwVGV4dDogJ0NyZWF0dXJlcyB3aWxsIGJlIGNvbG9yZWQgYWNjb3JkaW5nIHRvIHRoZWlyIHJhcml0eS4gJyArXHJcbiAgICAgICdDaGFtcGlvbnMgd2lsbCBiZSBjb2xvcmVkIGdyZWVuLCBFbGl0ZXMgeWVsbG93IGFuZCBTdXBlciBFbGl0ZXMgcmVkLidcclxuICB9LFxyXG4gIHNob3dDcmVhdHVyZUluZm86IHtcclxuICAgIGlkOiAnc2hvd0NyZWF0dXJlSW5mbycsXHJcbiAgICBoZWxwVGl0bGU6ICdTaG93IENyZWF0dXJlIEluZm8nLFxyXG4gICAgaGVscFRleHQ6ICdUaGlzIHdpbGwgc2hvdyB0aGUgaW5mb3JtYXRpb24gZnJvbSB0aGUgdmlldyBjcmVhdHVyZSAnICtcclxuICAgICAgJ2xpbmsgd2hlbiB5b3UgbW91c2VvdmVyIHRoZSBsaW5rLicsXHJcbiAgICBuZXR3b3JrOiB0cnVlXHJcbiAgfSxcclxuICBmc2JveGxvZzoge1xyXG4gICAgaWQ6ICdmc2JveGxvZycsXHJcbiAgICBoZWxwVGl0bGU6ICdFbmFibGUgRlMgQm94IExvZycsXHJcbiAgICBoZWxwVGV4dDogJ1RoaXMgZW5hYmxlcyB0aGUgZnVuY3Rpb25hbGl0eSB0byBrZWVwIGEgbG9nIG9mICcgK1xyXG4gICAgICAncmVjZW50IHNlZW4gRlMgQm94IG1lc3NhZ2UuJ1xyXG4gIH0sXHJcbiAga2VlcEJ1ZmZMb2c6IHtcclxuICAgIGlkOiAna2VlcEJ1ZmZMb2cnLFxyXG4gICAgaGVscFRpdGxlOiAnRW5hYmxlIEJ1ZmYgTG9nJyxcclxuICAgIGhlbHBUZXh0OiAnVGhpcyBlbmFibGVzIHRoZSBmdW5jdGlvbmFsaXR5IHRvIGtlZXAgYSBsb2cgb2YgJyArXHJcbiAgICAgICdyZWNlbnRseSBjYXN0ZWQgYnVmZnMnXHJcbiAgfSxcclxuICBodW50aW5nTW9kZToge1xyXG4gICAgaWQ6ICdodW50aW5nTW9kZScsXHJcbiAgICBoZWxwVGl0bGU6ICdFbmFibGUgSHVudGluZyBNb2RlJyxcclxuICAgIGhlbHBUZXh0OiAnVGhpcyBkaXNhYmxlIG1lbnUgYW5kIHNvbWUgdmlzdWFsIGZlYXR1cmVzIHRvICcgK1xyXG4gICAgICAnc3BlZWQgdXAgdGhlIGNhbGYuJ1xyXG4gIH0sXHJcbiAgaGlkZU5vblBsYXllckd1aWxkTG9nTWVzc2FnZXM6IHtcclxuICAgIGlkOiAnaGlkZU5vblBsYXllckd1aWxkTG9nTWVzc2FnZXMnLFxyXG4gICAgaGVscFRpdGxlOiAnQ2xlYW51cCBHdWlsZCBMb2cnLFxyXG4gICAgaGVscFRleHQ6ICdBbnkgbG9nIG1lc3NhZ2VzIG5vdCByZWxhdGVkIHRvIHRoZSBjdXJyZW50IHBsYXllciAnICtcclxuICAgICAgJ3dpbGwgYmUgZGltbWVkIChlLmcuIHJlY2FsbCBtZXNzYWdlcyBmcm9tIGd1aWxkIHN0b3JlKSdcclxuICB9LFxyXG4gIHVzZU5ld0d1aWxkTG9nOiB7XHJcbiAgICBpZDogJ3VzZU5ld0d1aWxkTG9nJyxcclxuICAgIGhlbHBUaXRsZTogJ1VzZSBOZXcgR3VpbGQgTG9nJyxcclxuICAgIGhlbHBUZXh0OiAnVGhpcyB3aWxsIHJlcGxhY2UgdGhlIHN0YW5kYXJkIGd1aWxkIGxvZyB3aXRoIHRoZSAnICtcclxuICAgICAgJ2hlbHBlciB2ZXJzaW9uIG9mIHRoZSBndWlsZCBsb2cuJ1xyXG4gIH0sXHJcbiAgZW5hYmxlTG9nQ29sb3Jpbmc6IHtcclxuICAgIGlkOiAnZW5hYmxlTG9nQ29sb3JpbmcnLFxyXG4gICAgaGVscFRpdGxlOiAnRW5hYmxlIExvZyBDb2xvcmluZycsXHJcbiAgICBoZWxwVGV4dDogJ1RocmVlIGxvZ3Mgd2lsbCBiZSBjb2xvcmVkIGlmIHRoaXMgaXMgZW5hYmxlZCwgJyArXHJcbiAgICAgICdHdWlsZCBDaGF0LCBHdWlsZCBMb2cgYW5kIFBsYXllciBMb2cuIEl0IHdpbGwgc2hvdyBhbnkgbmV3ICcgK1xyXG4gICAgICAnbWVzc2FnZXMgaW4geWVsbG93IGFuZCBhbnl0aGluZyAyMCBtaW51dGVzIG9sZCBvbmVzIGluIGJyb3duLidcclxuICB9LFxyXG4gIGVuYWJsZUNoYXRQYXJzaW5nOiB7XHJcbiAgICBpZDogJ2VuYWJsZUNoYXRQYXJzaW5nJyxcclxuICAgIGhlbHBUaXRsZTogJ0VuYWJsZSBDaGF0IFBhcnNpbmcnLFxyXG4gICAgaGVscFRleHQ6ICdJZiB0aGlzIGlzIGNoZWNrZWQsIHlvdXIgY2hhcmFjdGVyIGxvZyB3aWxsIGJlIHBhcnNlZCBmb3IgJyArXHJcbiAgICAgICdjaGF0IG1lc3NhZ2VzIGFuZCBzaG93IHRoZSBjaGF0IG1lc3NhZ2Ugb24gdGhlIHNjcmVlbiBpZiB5b3UgcmVwbHkgJyArXHJcbiAgICAgICd0byB0aGF0IG1lc3NhZ2UuJ1xyXG4gIH0sXHJcbiAgYWRkQXR0YWNrTGlua1RvTG9nOiB7XHJcbiAgICBpZDogJ2FkZEF0dGFja0xpbmtUb0xvZycsXHJcbiAgICBoZWxwVGl0bGU6ICdBZGQgYXR0YWNrIGxpbmsgdG8gbG9nJyxcclxuICAgIGhlbHBUZXh0OiAnSWYgY2hlY2tlZCwgdGhpcyB3aWxsIGFkZCBhbiBBdHRhY2sgbGluayB0byBlYWNoIG1lc3NhZ2UgJyArXHJcbiAgICAgICdpbiB5b3VyIGxvZy4nXHJcbiAgfSxcclxuICBlbmhhbmNlQ2hhdFRleHRFbnRyeToge1xyXG4gICAgaWQ6ICdlbmhhbmNlQ2hhdFRleHRFbnRyeScsXHJcbiAgICBoZWxwVGl0bGU6ICdFbmhhbmNlIENoYXQgVGV4dCBFbnRyeScsXHJcbiAgICBoZWxwVGV4dDogJ0lmIGNoZWNrZWQsIHRoaXMgd2lsbCBlbmhhbmNlIHRoZSBlbnRyeSBmaWVsZCBmb3IgZW50ZXJpbmcgJyArXHJcbiAgICAgICdjaGF0IHRleHQgb24gdGhlIGd1aWxkIGNoYXQgcGFnZS4nXHJcbiAgfSxcclxuICBzaG93RXh0cmFMaW5rczoge1xyXG4gICAgaWQ6ICdzaG93RXh0cmFMaW5rcycsXHJcbiAgICBoZWxwVGl0bGU6ICdTaG93IEV4dHJhIExpbmtzJyxcclxuICAgIGhlbHBUZXh0OiAnSWYgY2hlY2tlZCwgdGhpcyB3aWxsIGFkZCBBSCBhbmQgVUZTRyAnICtcclxuICAgICAgJ2xpbmtzIHRvIGVxdWlwbWVudCBzY3JlZW5zLidcclxuICB9LFxyXG4gIGRpc2FibGVJdGVtQ29sb3Jpbmc6IHtcclxuICAgIGlkOiAnZGlzYWJsZUl0ZW1Db2xvcmluZycsXHJcbiAgICBoZWxwVGl0bGU6ICdEaXNhYmxlIEl0ZW0gQ29sb3JpbmcnLFxyXG4gICAgaGVscFRleHQ6ICdEaXNhYmxlIHRoZSBjb2RlIHRoYXQgY29sb3JzIHRoZSBpdGVtIHRleHQgYmFzZWQgb24gdGhlICcgK1xyXG4gICAgICAncmFyaXR5IG9mIHRoZSBpdGVtLidcclxuICB9LFxyXG4gIHNob3dRdWlja0Ryb3BMaW5rczoge1xyXG4gICAgaWQ6ICdzaG93UXVpY2tEcm9wTGlua3MnLFxyXG4gICAgaGVscFRpdGxlOiAnU2hvdyBRdWljayBEcm9wIEl0ZW0nLFxyXG4gICAgaGVscFRleHQ6ICdUaGlzIHdpbGwgc2hvdyBhIGxpbmsgYmVzaWRlIGVhY2ggaXRlbSB3aGljaCBnaXZlcyB0aGUgJyArXHJcbiAgICAgICdvcHRpb24gdG8gZHJvcCB0aGUgaXRlbS4gIFdBUk5JTkc6IE5PIFJFRlVORFMgT04gRVJST1InXHJcbiAgfSxcclxuICBzdG9yZUxhc3RRdWVzdFBhZ2U6IHtcclxuICAgIGlkOiAnc3RvcmVMYXN0UXVlc3RQYWdlJyxcclxuICAgIGhlbHBUaXRsZTogJ1N0b3JlIExhc3QgUXVlc3QgUGFnZScsXHJcbiAgICBoZWxwVGV4dDogJ1RoaXMgd2lsbCBzdG9yZSB0aGUgcGFnZSBhbmQgc29ydCBvcmRlciBvZiBlYWNoIG9mIHRoZSAnICtcclxuICAgICAgJ3RocmVlIHF1ZXN0IHNlbGVjdGlvbiBwYWdlcyBmb3IgbmV4dCB0aW1lIHlvdSB2aXNpdC4gSWYgeW91IG5lZWQgJyArXHJcbiAgICAgICd0byByZXNldCB0aGUgbGlua3MsIHR1cm4gdGhpcyBvcHRpb24gb2ZmLCBjbGljayBvbiB0aGUgbGluayB5b3UgJyArXHJcbiAgICAgICd3aXNoIHRvIHJlc2V0IGFuZCB0aGVuIHR1cm4gdGhpcyBvcHRpb24gYmFjayBvbiBhZ2Fpbi4nXHJcbiAgfSxcclxuICBzaG93TmV4dFF1ZXN0U3RlcHM6IHtcclxuICAgIGlkOiAnc2hvd05leHRRdWVzdFN0ZXBzJyxcclxuICAgIGhlbHBUaXRsZTogJ1Nob3cgTmV4dCBRdWVzdCBTdGVwcycsXHJcbiAgICBoZWxwVGV4dDogJ1Nob3dzIGFsbCBxdWVzdCBzdGVwcyBpbiB0aGUgVUZTRy4nXHJcbiAgfSxcclxuICByZW5kZXJTZWxmQmlvOiB7XHJcbiAgICBpZDogJ3JlbmRlclNlbGZCaW8nLFxyXG4gICAgaGVscFRpdGxlOiAnUmVuZGVyIHNlbGYgYmlvJyxcclxuICAgIGhlbHBUZXh0OiAnVGhpcyBkZXRlcm1pbmVzIGlmIHlvdXIgb3duIGJpbyB3aWxsIHJlbmRlciB0aGUgRlNIICcgK1xyXG4gICAgICAnc3BlY2lhbCBiaW8gdGFncy4nXHJcbiAgfSxcclxuICByZW5kZXJPdGhlckJpb3M6IHtcclxuICAgIGlkOiAncmVuZGVyT3RoZXJCaW9zJyxcclxuICAgIGhlbHBUaXRsZTogJ1JlbmRlciBvdGhlciBwbGF5ZXJzJiMzOTsgYmlvcycsXHJcbiAgICBoZWxwVGV4dDogJ1RoaXMgZGV0ZXJtaW5lcyBpZiBvdGhlciBwbGF5ZXJzIGJpb3Mgd2lsbCByZW5kZXIgdGhlIEZTSCAnICtcclxuICAgICAgJ3NwZWNpYWwgYmlvIHRhZ3MuJ1xyXG4gIH0sXHJcbiAgc2hvd1N0YXRCb251c1RvdGFsOiB7XHJcbiAgICBpZDogJ3Nob3dTdGF0Qm9udXNUb3RhbCcsXHJcbiAgICBoZWxwVGl0bGU6ICdTaG93IFN0YXQgQm9udXMgVG90YWwnLFxyXG4gICAgaGVscFRleHQ6ICdUaGlzIHdpbGwgc2hvdyBhIHRvdGFsIG9mIHRoZSBpdGVtIHN0YXRzIHdoZW4geW91ICcgK1xyXG4gICAgICAnbW91c2VvdmVyIGFuIGl0ZW0gb24gdGhlIHByb2ZpbGUgc2NyZWVuLidcclxuICB9LFxyXG4gIGVuYWJsZVF1aWNrRHJpbms6IHtcclxuICAgIGlkOiAnZW5hYmxlUXVpY2tEcmluaycsXHJcbiAgICBoZWxwVGl0bGU6ICdFbmFibGUgUXVpY2sgRHJpbmsvV2VhcicsXHJcbiAgICBoZWxwVGV4dDogJ1RoaXMgZW5hYmxlcyB0aGUgcXVpY2sgZHJpbmsvd2VhciBmdW5jdGlvbmFsaXR5IG9uIHRoZSAnICtcclxuICAgICAgJ3Byb2ZpbGUgcGFnZS4nXHJcbiAgfSxcclxuICBkaXNhYmxlRGVhY3RpdmF0ZVByb21wdHM6IHtcclxuICAgIGlkOiAnZGlzYWJsZURlYWN0aXZhdGVQcm9tcHRzJyxcclxuICAgIGhlbHBUaXRsZTogJ0Rpc2FibGUgRGVhY3RpdmF0ZSBQcm9tcHRzJyxcclxuICAgIGhlbHBUZXh0OiAnVGhpcyBkaXNhYmxlcyB0aGUgcHJvbXB0cyBmb3IgZGVhY3RpdmF0aW5nIGJ1ZmZzIG9uICcgK1xyXG4gICAgICAndGhlIHByb2ZpbGUgcGFnZS4nXHJcbiAgfSxcclxuICBlbmFibGVBdHRhY2tIZWxwZXI6IHtcclxuICAgIGlkOiAnZW5hYmxlQXR0YWNrSGVscGVyJyxcclxuICAgIGhlbHBUaXRsZTogJ1Nob3cgQXR0YWNrIEhlbHBlcicsXHJcbiAgICBoZWxwVGV4dDogJ1RoaXMgd2lsbCBzaG93IGV4dHJhIGluZm9ybWF0aW9uIG9uIHRoZSBhdHRhY2sgcGxheWVyICcgK1xyXG4gICAgICAnc2NyZWVuIGFib3V0IHN0YXRzIGFuZCBidWZmcyBvbiB5b3UgYW5kIHlvdXIgdGFyZ2V0JyxcclxuICAgIG5ldHdvcms6IHRydWVcclxuICB9LFxyXG4gIHNob3dQdlBTdW1tYXJ5SW5Mb2c6IHtcclxuICAgIGlkOiAnc2hvd1B2UFN1bW1hcnlJbkxvZycsXHJcbiAgICBoZWxwVGl0bGU6ICdTaG93IFB2UCBTdW1tYXJ5IGluIExvZycsXHJcbiAgICBoZWxwVGV4dDogJ1RoaXMgd2lsbCBzaG93IGEgc3VtbWFyeSBvZiB0aGUgUHZQIHJlc3VsdHMgaW4gdGhlIGxvZy4nLFxyXG4gICAgbmV0d29yazogdHJ1ZVxyXG4gIH0sXHJcbiAgYXV0b0ZpbGxNaW5CaWRQcmljZToge1xyXG4gICAgaWQ6ICdhdXRvRmlsbE1pbkJpZFByaWNlJyxcclxuICAgIGhlbHBUaXRsZTogJ0F1dG8gRmlsbCBNaW4gQmlkIFByaWNlJyxcclxuICAgIGhlbHBUZXh0OiAnVGhpcyBlbmFibGVzIHRoZSBmdW5jdGlvbmFsaXR5IHRvIGF1dG9tYXRpY2FsbHkgZmlsbCBpbiAnICtcclxuICAgICAgJ3RoZSBtaW4gYmlkIHByaWNlIHNvIHlvdSBqdXN0IGhhdmUgdG8gaGl0IGJpZCBhbmQgeW91ciBiaWQgd2lsbCAnICtcclxuICAgICAgJ2JlIHBsYWNlZC4nXHJcbiAgfSxcclxuICBoaWRlUmVsaWNPZmZsaW5lOiB7XHJcbiAgICBpZDogJ2hpZGVSZWxpY09mZmxpbmUnLFxyXG4gICAgaGVscFRpdGxlOiAnSGlkZSBSZWxpYyBPZmZsaW5lJyxcclxuICAgIGhlbHBUZXh0OiAnVGhpcyBoaWRlcyB0aGUgcmVsaWMgb2ZmbGluZSBkZWZlbmRlcnMgY2hlY2tlci4nXHJcbiAgfSxcclxuICBlbnRlckZvclNlbmRNZXNzYWdlOiB7XHJcbiAgICBpZDogJ2VudGVyRm9yU2VuZE1lc3NhZ2UnLFxyXG4gICAgaGVscFRpdGxlOiAnRW50ZXIgU2VuZHMgTWVzc2FnZScsXHJcbiAgICBoZWxwVGV4dDogJ0lmIGVuYWJsZWQsIHdpbGwgc2VuZCBhIG1lc3NhZ2UgZnJvbSB0aGUgU2VuZCBNZXNzYWdlICcgK1xyXG4gICAgICAnc2NyZWVuIGlmIHlvdSBwcmVzcyBlbnRlci4gWW91IGNhbiBzdGlsbCBpbnNlcnQgYSBuZXcgbGluZSBieSAnICtcclxuICAgICAgJ2hvbGRpbmcgZG93biBzaGlmdCB3aGVuIHlvdSBwcmVzcyBlbnRlci4nXHJcbiAgfSxcclxuICBuYXZpZ2F0ZVRvTG9nQWZ0ZXJNc2c6IHtcclxuICAgIGlkOiAnbmF2aWdhdGVUb0xvZ0FmdGVyTXNnJyxcclxuICAgIGhlbHBUaXRsZTogJ05hdmlnYXRlIEFmdGVyIE1lc3NhZ2UgU2VudCcsXHJcbiAgICBoZWxwVGV4dDogJ0lmIGVuYWJsZWQsIHdpbGwgbmF2aWdhdGUgdG8gdGhlIHJlZmVycmluZyBwYWdlIGFmdGVyIGEgJyArXHJcbiAgICAgICdzdWNjZXNzZnVsIG1lc3NhZ2UgaXMgc2VudC4gRXhhbXBsZTogIGlmIHlvdSBhcmUgb24gdGhlIHdvcmxkICcgK1xyXG4gICAgICAnc2NyZWVuIGFuZCBoaXQgbWVzc2FnZSBvbiB0aGUgZ3VpbGQgaW5mbyBwYW5lbCBhZnRlciB5b3Ugc2VuZCB0aGUgJyArXHJcbiAgICAgICdtZXNzYWdlLCBpdCB3aWxsIHJldHVybiB5b3UgdG8gdGhlIHdvcmxkIHNjcmVlbi4nXHJcbiAgfSxcclxuICBtb3ZlQ29tcG9zaW5nQnV0dG9uczoge1xyXG4gICAgaWQ6ICdtb3ZlQ29tcG9zaW5nQnV0dG9ucycsXHJcbiAgICBoZWxwVGl0bGU6ICdNb3ZlIENvbXBvc2luZyBCdXR0b25zJyxcclxuICAgIGhlbHBUZXh0OiAnSWYgZW5hYmxlZCwgd2lsbCBtb3ZlIGNvbXBvc2luZyBidXR0b25zIHRvIHRoZSB0b3Agb2YgJyArXHJcbiAgICAgICd0aGUgY29tcG9zaW5nIHNjcmVlbi4nXHJcbiAgfSxcclxuICBkcmFnZ2FibGVIZWxwZXJNZW51OiB7XHJcbiAgICBpZDogJ2RyYWdnYWJsZUhlbHBlck1lbnUnLFxyXG4gICAgaGVscFRpdGxlOiAnRHJhZ2dhYmxlIEhlbHBlciBNZW51JyxcclxuICAgIGhlbHBUZXh0OiAnSWYgZW5hYmxlZCwgYWxsb3dzIHRoZSBoZWxwZXIgbWVudSB0byAnICtcclxuICAgICAgJ2JlIGRyYWdnZWQgYXJvdW5kIHRoZSBzY3JlZW4uJ1xyXG4gIH0sXHJcbiAgZHJhZ2dhYmxlUXVpY2tMaW5rczoge1xyXG4gICAgaWQ6ICdkcmFnZ2FibGVRdWlja0xpbmtzJyxcclxuICAgIGhlbHBUaXRsZTogJ0RyYWdnYWJsZSBRdWljayBMaW5rcycsXHJcbiAgICBoZWxwVGV4dDogJ0lmIGVuYWJsZWQsIGFsbG93cyB0aGUgcXVpY2sgbGluayBib3ggdG8gJyArXHJcbiAgICAgICdiZSBkcmFnZ2VkIGFyb3VuZCB0aGUgc2NyZWVuLidcclxuICB9LFxyXG4gIGV4cGFuZE1lbnVPbktleVByZXNzOiB7XHJcbiAgICBpZDogJ2V4cGFuZE1lbnVPbktleVByZXNzJyxcclxuICAgIGhlbHBUaXRsZTogJ0V4cGFuZCBNZW51IG9uIEtleSBQcmVzcycsXHJcbiAgICBoZWxwVGV4dDogJ0lmIGVuYWJsZWQsIGV4cGFuZHMgdGhlIGxlZnQgaGFuZCBtZW51ICcgK1xyXG4gICAgICAnd2hlbiB5b3UgdXNlIGhvdGtleXMuJ1xyXG4gIH0sXHJcbiAgZGlzYWJsZUJyZWFrZG93blByb21wdHM6IHtcclxuICAgIGlkOiAnZGlzYWJsZUJyZWFrZG93blByb21wdHMnLFxyXG4gICAgaGVscFRpdGxlOiAnRGlzYWJsZSBCcmVha2Rvd24gUHJvbXB0cycsXHJcbiAgICBoZWxwVGV4dDogJ0lmIGVuYWJsZWQsIHdpbGwgZGlzYWJsZSBwcm9tcHRzIHdoZW4geW91IGJyZWFrZG93biBpdGVtcy4nICtcclxuICAgICAgJzxicj5OTyBSRUZVTkRTIE9SIERPLU9WRVJTISBVc2UgYXQgb3duIHJpc2suJ1xyXG4gIH0sXHJcbiAgY29sbGFwc2VOZXdzQXJjaGl2ZToge1xyXG4gICAgaWQ6ICdjb2xsYXBzZU5ld3NBcmNoaXZlJyxcclxuICAgIGhlbHBUaXRsZTogJ0NvbGxhcHNlIE5ld3MgQXJjaGl2ZScsXHJcbiAgICBoZWxwVGV4dDogJ0lmIGVuYWJsZWQsIHdpbGwgY29sbGFwc2UgbmV3cyBhcmNoaXZlcy4nXHJcbiAgfSxcclxuICBoaWRlU3ViTHZsQ3JlYXR1cmU6IHtcclxuICAgIGlkOiAnaGlkZVN1Ykx2bENyZWF0dXJlJyxcclxuICAgIGhlbHBUaXRsZTogJ0hpZGUgU3ViIExldmVsIENyZWF0dXJlcycsXHJcbiAgICBoZWxwVGV4dDogJ0lmIGVuYWJsZWQsIHdpbGwgaGlkZSBjcmVhdHVyZXMgdGhhdCBhcmUgJyArXHJcbiAgICAgICdsb3dlciB0aGFuIHRoZSBjdXJyZW50IHJlYWxtIGxldmVsLidcclxuICB9LFxyXG4gIGhpZGVQbGF5ZXJBY3Rpb25zOiB7XHJcbiAgICBpZDogJ2hpZGVQbGF5ZXJBY3Rpb25zJyxcclxuICAgIGhlbHBUaXRsZTogJ0hpZGUgUGxheWVyIEFjdGlvbnMnLFxyXG4gICAgaGVscFRleHQ6ICdJZiBlbmFibGVkLCB3aWxsIGhpZGUgcGxheWVyIGFjdGlvbnMuJ1xyXG4gIH0sXHJcbiAgZGlzYWJsZVF1aWNrV2VhclByb21wdHM6IHtcclxuICAgIGlkOiAnZGlzYWJsZVF1aWNrV2VhclByb21wdHMnLFxyXG4gICAgaGVscFRpdGxlOiAnRGlzYWJsZSBVc2UvRXh0IFByb21wdHMnLFxyXG4gICAgaGVscFRleHQ6ICdJZiBlbmFibGVkLCB3aWxsIGRpc2FibGUgcHJvbXB0cyB3aGVuIHlvdSBVc2UvRXh0IGl0ZW1zLicgK1xyXG4gICAgICAnPGJyPk5PIFJFRlVORFMgT1IgRE8tT1ZFUlMhIFVzZSBhdCBvd24gcmlzay4nLFxyXG4gICAgdGl0bGU6ICdEaXNhYmxlIFVzZS9FeHQ8YnI+UHJvbXB0cydcclxuICB9LFxyXG4gIGVuYWJsZUd1aWxkQWN0aXZpdHlUcmFja2VyOiB7XHJcbiAgICBpZDogJ2VuYWJsZUd1aWxkQWN0aXZpdHlUcmFja2VyJyxcclxuICAgIGhlbHBUaXRsZTogJ0VuYWJsZSBHdWlsZCBBY3Rpdml0eSBUcmFja2VyJyxcclxuICAgIGhlbHBUZXh0OiAnSWYgZW5hYmxlZCwgd2lsbCB0cmFjayBndWlsZCBtZW1iZXIgYWN0aXZpdHkgb3ZlciB0aW1lLicsXHJcbiAgICBuZXR3b3JrOiB0cnVlLFxyXG4gICAgdGl0bGU6ICdFbmFibGUgVHJhY2tlcidcclxuICB9XHJcbn07XHJcbiIsImV4cG9ydCB2YXIgbmV0d29ya0ljb24gPVxyXG4gICc8aW1nIGNsYXNzPVwibmV0d29ya0ljb24gdGlwLXN0YXRpY1wiICcgK1xyXG4gICdkYXRhLXRpcHBlZD1cIlRoaXMgZnVuY3Rpb24gcmV0cmlldmVzIGRhdGEgZnJvbSB0aGUgbmV0d29yay4gJyArXHJcbiAgJ0Rpc2FibGUgdGhpcyB0byBpbmNyZWFzZSBzcGVlZFwiIHNyYz1cImRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwnICtcclxuICAnaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJBQUFBQVFDQVlBQUFBZjgvOWhBQUFBJyArXHJcbiAgJ0IzUkpUVVVIMVFnR0RUTVdrMXR3RXdBQUFBbHdTRmx6QUFBTEVnQUFDeElCMHQxKycgK1xyXG4gICcvQUFBQUFSblFVMUJBQUN4and2OFlRVUFBQUM4U1VSQlZIamFoVlBCRWNRZ0NFUW4nICtcclxuICAnSGRtVHFVbHIwcWUxNkk4Y3VmT2lDR1puR0NjSXk0TEVJQ0p3bUdnV0ozbzBJT0NRJyArXHJcbiAgJ0VxVmc5WTRVM0NvQ0hRaHZ4dVBVWkVpQTNYWWt4eUkxLzZTNlI2cmtlOEFsSmJrVicgK1xyXG4gICc3dTk1bGxlWHEzeXJkeVVqTEd4d25pZm1uSEVYWTNmSklRU0lNY0tPWkNMZ01sdHInICtcclxuICAncisxWldneHA4d2kxVnJFcXhmZUZXbG9ZcTR3S3RPSGVCTnFlYXdxbWVPbk52ZmRZJyArXHJcbiAgJ1N2a2JmYWVVeFAwdy9HK2s2V3NUL3hDQmMyNVN1eERzbm93bkV5NHU1Qkh1ZHBNRicgK1xyXG4gICdlZ0FBQUFCSlJVNUVya0pnZ2c9PVwiIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIC8+JztcclxuXHJcbmV4cG9ydCB2YXIgc2F2ZUJveGVzID0gW1xyXG4gICduYXZpZ2F0ZVRvTG9nQWZ0ZXJNc2cnLFxyXG4gICdnYW1lSGVscExpbmsnLFxyXG4gICdndWlsZFNlbGYnLFxyXG4gICdndWlsZFNlbGZNZXNzYWdlJyxcclxuICAnZ3VpbGRGcm5kJyxcclxuICAnZ3VpbGRGcm5kTWVzc2FnZScsXHJcbiAgJ2d1aWxkUGFzdCcsXHJcbiAgJ2d1aWxkUGFzdE1lc3NhZ2UnLFxyXG4gICdndWlsZEVubXknLFxyXG4gICdndWlsZEVubXlNZXNzYWdlJyxcclxuICAnc2hvd0FkbWluJyxcclxuICAnYWpheGlmeVJhbmtDb250cm9scycsXHJcbiAgJ2RldGFpbGVkQ29uZmxpY3RJbmZvJyxcclxuICAnZGlzYWJsZUl0ZW1Db2xvcmluZycsXHJcbiAgJ2VuYWJsZUxvZ0NvbG9yaW5nJyxcclxuICAnZW5hYmxlQ2hhdFBhcnNpbmcnLFxyXG4gICdlbmFibGVDcmVhdHVyZUNvbG9yaW5nJyxcclxuICAnaGlkZU5vblBsYXllckd1aWxkTG9nTWVzc2FnZXMnLFxyXG4gICdidXlCdWZmc0dyZWV0aW5nJyxcclxuICAncmVuZGVyU2VsZkJpbycsXHJcbiAgJ3JlbmRlck90aGVyQmlvcycsXHJcbiAgJ2RlZmF1bHRNZXNzYWdlU291bmQnLFxyXG4gICdzaG93U3BlYWtlck9uV29ybGQnLFxyXG4gICdwbGF5TmV3TWVzc2FnZVNvdW5kJyxcclxuICAnaGlnaGxpZ2h0UGxheWVyc05lYXJNeUx2bCcsXHJcbiAgJ2hpZ2hsaWdodEd2R1BsYXllcnNOZWFyTXlMdmwnLFxyXG4gICdzaG93Q29tYmF0TG9nJyxcclxuICAnc2hvd01vbnN0ZXJMb2cnLFxyXG4gICdzaG93Q3JlYXR1cmVJbmZvJyxcclxuICAna2VlcExvZ3MnLFxyXG4gICdlbmFibGVHdWlsZEluZm9XaWRnZXRzJyxcclxuICAnZW5hYmxlT25saW5lQWxsaWVzV2lkZ2V0cycsXHJcbiAgJ2hpZGVHdWlsZEluZm9NZXNzYWdlJyxcclxuICAnaGlkZUd1aWxkSW5mb0J1ZmYnLFxyXG4gICdoaWRlR3VpbGRJbmZvU2VjdXJlVHJhZGUnLFxyXG4gICdoaWRlR3VpbGRJbmZvVHJhZGUnLFxyXG4gICdodW50aW5nQnVmZnMnLFxyXG4gICdodW50aW5nQnVmZnNOYW1lJyxcclxuICAnaHVudGluZ0J1ZmZzMicsXHJcbiAgJ2h1bnRpbmdCdWZmczJOYW1lJyxcclxuICAnaHVudGluZ0J1ZmZzMycsXHJcbiAgJ2h1bnRpbmdCdWZmczNOYW1lJyxcclxuICAnc2hvd0h1bnRpbmdCdWZmcycsXHJcbiAgJ21vdmVHdWlsZExpc3QnLFxyXG4gICdtb3ZlT25saW5lQWxsaWVzTGlzdCcsXHJcbiAgJ21vdmVGU0JveCcsXHJcbiAgJ2hpZGVRdWVzdHMnLFxyXG4gICdoaWRlUXVlc3ROYW1lcycsXHJcbiAgJ2hpZGVSZWNpcGVzJyxcclxuICAnaGlkZVJlY2lwZU5hbWVzJyxcclxuICAnZG9Ob3RLaWxsTGlzdCcsXHJcbiAgJ2VuYWJsZUJpb0NvbXByZXNzb3InLFxyXG4gICdtYXhDb21wcmVzc2VkQ2hhcmFjdGVycycsXHJcbiAgJ21heENvbXByZXNzZWRMaW5lcycsXHJcbiAgJ3NlbmRHb2xkb25Xb3JsZCcsXHJcbiAgJ2dvbGRSZWNpcGllbnQnLFxyXG4gICdnb2xkQW1vdW50JyxcclxuICAna2VlcEJ1ZmZMb2cnLFxyXG4gICdzaG93UXVpY2tTZW5kTGlua3MnLFxyXG4gICdzaG93UXVpY2tEcm9wTGlua3MnLFxyXG4gICdzZW5kQ2xhc3NlcycsXHJcbiAgJ2l0ZW1SZWNpcGllbnQnLFxyXG4gICdjdXJyZW50R29sZFNlbnRUb3RhbCcsXHJcbiAgJ2VuYWJsZUFsbHlPbmxpbmVMaXN0JyxcclxuICAnZW5hYmxlRW5lbXlPbmxpbmVMaXN0JyxcclxuICAnYWxseUVuZW15T25saW5lUmVmcmVzaFRpbWUnLFxyXG4gICdxdWlja0xpbmtzVG9wUHgnLFxyXG4gICdxdWlja0xpbmtzTGVmdFB4JyxcclxuICAnZHJhZ2dhYmxlUXVpY2tMaW5rcycsXHJcbiAgJ2VuYWJsZUFjdGl2ZUJvdW50eUxpc3QnLFxyXG4gICdib3VudHlMaXN0UmVmcmVzaFRpbWUnLFxyXG4gICdlbmFibGVXYW50ZWRMaXN0JyxcclxuICAnd2FudGVkTmFtZXMnLFxyXG4gICdmc2JveGxvZycsXHJcbiAgJ2h1bnRpbmdNb2RlJyxcclxuICAnZW5hYmxlQXR0YWNrSGVscGVyJyxcclxuICAnaGlkZVJlbGljT2ZmbGluZScsXHJcbiAgJ2VudGVyRm9yU2VuZE1lc3NhZ2UnLFxyXG4gICdzdG9yZUxhc3RRdWVzdFBhZ2UnLFxyXG4gICdhZGRBdHRhY2tMaW5rVG9Mb2cnLFxyXG4gICdzaG93U3RhdEJvbnVzVG90YWwnLFxyXG4gICduZXdHdWlsZExvZ0hpc3RvcnlQYWdlcycsXHJcbiAgJ3VzZU5ld0d1aWxkTG9nJyxcclxuICAnZW5oYW5jZUNoYXRUZXh0RW50cnknLFxyXG4gICdlbmFibGVNYXhHcm91cFNpemVUb0pvaW4nLFxyXG4gICdtYXhHcm91cFNpemVUb0pvaW4nLFxyXG4gICdlbmFibGVUZW1wbGVBbGVydCcsXHJcbiAgJ2VuYWJsZVVwZ3JhZGVBbGVydCcsXHJcbiAgJ2VuYWJsZUNvbXBvc2luZ0FsZXJ0JyxcclxuICAnYXV0b0ZpbGxNaW5CaWRQcmljZScsXHJcbiAgJ3Nob3dQdlBTdW1tYXJ5SW5Mb2cnLFxyXG4gICdlbmFibGVRdWlja0RyaW5rJyxcclxuICAnZW5oYW5jZU9ubGluZURvdHMnLFxyXG4gICdoaWRlQnVmZlNlbGVjdGVkJyxcclxuICAnaGlkZUhlbHBlck1lbnUnLFxyXG4gICdrZWVwSGVscGVyTWVudU9uU2NyZWVuJyxcclxuICAnZHJhZ2dhYmxlSGVscGVyTWVudScsXHJcbiAgJ3Nob3dOZXh0UXVlc3RTdGVwcycsXHJcbiAgJ2hpZGVDaGFtcGlvbnNHcm91cCcsXHJcbiAgJ2hpZGVFbGl0ZXNHcm91cCcsXHJcbiAgJ2hpZGVTRUdyb3VwJyxcclxuICAnaGlkZVRpdGFuR3JvdXAnLFxyXG4gICdoaWRlTGVnZW5kYXJ5R3JvdXAnLFxyXG4gICdkaXNhYmxlRGVhY3RpdmF0ZVByb21wdHMnLFxyXG4gICdtb3ZlQ29tcG9zaW5nQnV0dG9ucycsXHJcbiAgJ3Nob3dFeHRyYUxpbmtzJyxcclxuICAnZXhwYW5kTWVudU9uS2V5UHJlc3MnXHJcbl07XHJcbiIsImltcG9ydCBjYWxmIGZyb20gJy4uL3N1cHBvcnQvY2FsZic7XHJcbmltcG9ydCB7aXNDaGVja2VkfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCB7bmV0d29ya0ljb259IGZyb20gJy4vc2V0dGluZ09iaic7XHJcbmltcG9ydCB7aGVscExpbmssIHNpbXBsZUNoZWNrYm94fSBmcm9tICcuL3NldHRpbmdzUGFnZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBib3VudHlQcmVmcygpIHtcclxuICAvLyBCb3VudHkgaHVudGluZyBwcmVmc1xyXG4gIHJldHVybiAnPHRyPjx0aCBjb2xzcGFuPVwiMlwiPjxiPkJvdW50eSBodW50aW5nIHByZWZlcmVuY2VzJyArXHJcbiAgICAgICc8L2I+PC90aD48L3RyPicgK1xyXG5cclxuICAgICc8dHI+PHRkIGFsaWduPSBcInJpZ2h0XCI+JyArIG5ldHdvcmtJY29uICtcclxuICAgICAgJ1Nob3cgQWN0aXZlIEJvdW50aWVzJyArXHJcbiAgICAgIGhlbHBMaW5rKCdTaG93IEFjdGl2ZSBCb3VudGllcycsXHJcbiAgICAgICAgJ1RoaXMgd2lsbCBzaG93IHlvdXIgYWN0aXZlIGJvdW50aWVzIG9uIHRoZSByaWdodCBoYW5kIHNpZGUnKSArXHJcbiAgICAgICc6PC90ZD48dGQgY29sc3Bhbj1cIjNcIj48aW5wdXQgbmFtZT1cImVuYWJsZUFjdGl2ZUJvdW50eUxpc3RcIiAnICtcclxuICAgICAgJ3R5cGUgPSBcImNoZWNrYm94XCIgdmFsdWUgPSBcIm9uXCInICtcclxuICAgICAgaXNDaGVja2VkKGNhbGYuZW5hYmxlQWN0aXZlQm91bnR5TGlzdCkgKyAnPiZuYnNwOycgK1xyXG4gICAgICAnPGlucHV0IG5hbWU9XCJib3VudHlMaXN0UmVmcmVzaFRpbWVcIiBzaXplPVwiM1wiIHZhbHVlPVwiJyArXHJcbiAgICAgIGNhbGYuYm91bnR5TGlzdFJlZnJlc2hUaW1lICsgJ1wiPiBzZWNvbmRzIHJlZnJlc2g8L3RkPjwvdHI+JyArXHJcblxyXG4gICAgJzx0cj48dGQgYWxpZ249IFwicmlnaHRcIj4nICsgbmV0d29ya0ljb24gK1xyXG4gICAgICAnU2hvdyBXYW50ZWQgQm91bnRpZXMnICtcclxuICAgICAgaGVscExpbmsoJ1Nob3cgV2FudGVkIEJvdW50aWVzJyxcclxuICAgICAgICAnVGhpcyB3aWxsIHNob3cgd2hlbiBzb21lb25lIHlvdSB3YW50IGlzIG9uIHRoZSBib3VudHkgYm9hcmQsICcgK1xyXG4gICAgICAgICd0aGUgbGlzdCBpcyBkaXNwbGF5ZWQgb24gdGhlIHJpZ2h0IGhhbmQgc2lkZScpICtcclxuICAgICAgJzo8L3RkPjx0ZCBjb2xzcGFuPVwiM1wiPjxpbnB1dCBuYW1lPVwiZW5hYmxlV2FudGVkTGlzdFwiICcgK1xyXG4gICAgICAndHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJvblwiJyArXHJcbiAgICAgIGlzQ2hlY2tlZChjYWxmLmVuYWJsZVdhbnRlZExpc3QpICtcclxuICAgICAgJz4gUmVmcmVzaCB0aW1lIGlzIHNhbWUgYXMgQWN0aXZlIEJvdW50aWVzJyArXHJcblxyXG4gICAgJzx0cj48dGQgYWxpZ249IFwicmlnaHRcIj5XYW50ZWQgTmFtZXMnICtcclxuICAgICAgaGVscExpbmsoJ1dhbnRlZCBOYW1lcycsXHJcbiAgICAgICAgJ1RoZSBuYW1lcyBvZiB0aGUgcGVvcGxlIHlvdSB3YW50IHRvIHNlZSBvbiB0aGUgYm91bnR5IGJvYXJkICcgK1xyXG4gICAgICAgICdzZXBhcmF0ZWQgYnkgY29tbWFzJykgKyAnOjwvdGQ+PHRkIGNvbHNwYW49XCIzXCI+JyArXHJcbiAgICAgICc8aW5wdXQgbmFtZT1cIndhbnRlZE5hbWVzXCIgc2l6ZT1cIjYwXCIgdmFsdWU9XCInICsgY2FsZi53YW50ZWROYW1lcyArXHJcbiAgICAgICdcIj48L3RkPjwvdHI+JyArXHJcblxyXG4gICAgc2ltcGxlQ2hlY2tib3goJ2VuYWJsZUF0dGFja0hlbHBlcicpICtcclxuICAgIHNpbXBsZUNoZWNrYm94KCdzaG93UHZQU3VtbWFyeUluTG9nJyk7XHJcbn1cclxuIiwiaW1wb3J0IHtlc2NhcGVIdG1sLCBnZXRWYWx1ZSwgaXNDaGVja2VkfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCB7aGVscExpbmssIHNpbXBsZUNoZWNrYm94fSBmcm9tICcuL3NldHRpbmdzUGFnZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlcXVpcFByZWZzKCkge1xyXG4gIC8vIEVxdWlwbWVudCBzY3JlZW4gcHJlZnNcclxuICByZXR1cm4gJzx0cj48dGggY29sc3Bhbj1cIjJcIj48Yj5FcXVpcG1lbnQgc2NyZWVuIHByZWZlcmVuY2VzJyArXHJcbiAgICAgICc8L2I+PC90aD48L3RyPicgK1xyXG5cclxuICAgIHNpbXBsZUNoZWNrYm94KCdzaG93RXh0cmFMaW5rcycpICtcclxuICAgIHNpbXBsZUNoZWNrYm94KCdkaXNhYmxlSXRlbUNvbG9yaW5nJykgK1xyXG5cclxuICAgICc8dHI+PHRkIGNsYXNzPVwiZnNoUmlnaHRcIj5TaG93IFF1aWNrIFNlbmQgSXRlbScgK1xyXG4gICAgICBoZWxwTGluaygnU2hvdyBRdWljayBTZW5kIG9uIE1hbmFnZSBCYWNrcGFjaycsXHJcbiAgICAgICAgJ1RoaXMgd2lsbCBzaG93IGEgbGluayBiZXNpZGUgZWFjaCBpdGVtIHdoaWNoIGdpdmVzIHRoZSBvcHRpb24gdG8gJyArXHJcbiAgICAgICAgJ3F1aWNrIHNlbmQgdGhlIGl0ZW0gdG8gdGhpcyBwZXJzb24nKSArXHJcbiAgICAgICc6PC90ZD48dGQ+PGlucHV0IG5hbWU9XCJzaG93UXVpY2tTZW5kTGlua3NcIiB0eXBlPVwiY2hlY2tib3hcIiAnICtcclxuICAgICAgJ3ZhbHVlPVwib25cIicgK1xyXG4gICAgICBpc0NoZWNrZWQoZ2V0VmFsdWUoJ3Nob3dRdWlja1NlbmRMaW5rcycpKSArICc+JyArXHJcbiAgICAgICcmbmJzcDsmbmJzcDtTZW5kIEl0ZW1zIFRvICcgK1xyXG4gICAgICAnPGlucHV0IG5hbWU9XCJpdGVtUmVjaXBpZW50XCIgc2l6ZT1cIjEwXCIgdmFsdWU9XCInICtcclxuICAgICAgZ2V0VmFsdWUoJ2l0ZW1SZWNpcGllbnQnKSArICdcIj4nICtcclxuXHJcbiAgICBzaW1wbGVDaGVja2JveCgnc2hvd1F1aWNrRHJvcExpbmtzJykgK1xyXG5cclxuICAgICc8dHI+PHRkIGNsYXNzPVwiZnNoUmlnaHRcIj5RdWljayBTZWxlY3QgYWxsIG9mIHR5cGUgaW4gU2VuZCBTY3JlZW4nICtcclxuICAgICAgaGVscExpbmsoJ1F1aWNrIFNlbGVjdCBhbGwgb2YgdHlwZSBpbiBTZW5kIFNjcmVlbicsXHJcbiAgICAgICAgJ1RoaXMgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgd2hhdCBxdWljayBsaW5rcyB5b3Ugd291bGQgbGlrZSAnICtcclxuICAgICAgICAnZGlzcGxheWVkIGluIHlvdXIgc2VuZCBpdGVtIHNjcmVlbi48YnI+VXNlIHRoZSBmb3JtYXQgJyArXHJcbiAgICAgICAgJ1smcXVvdDtuYW1lJnF1b3Q7LCZxdW90O2l0ZW1pZCZxdW90O10sWyZxdW90O290aGVybmFtZSZxdW90OywnICtcclxuICAgICAgICAnJnF1b3Q7aXRlbWlkMiZxdW90O10uPGJyPldBUk5JTkc6IE5PIFJFRlVORFMgT04gRVJST1InKSArXHJcbiAgICAgICc6PC90ZD48dGQ+PGlucHV0IG5hbWU9XCJzZW5kQ2xhc3Nlc1wiIHNpemU9XCI2MFwiIHZhbHVlPVwiJyArXHJcbiAgICAgIGVzY2FwZUh0bWwoZ2V0VmFsdWUoJ3NlbmRDbGFzc2VzJykpICsgJ1wiPic7XHJcbn1cclxuIiwiaW1wb3J0IGNhbGYgZnJvbSAnLi4vc3VwcG9ydC9jYWxmJztcclxuaW1wb3J0IHtuZXR3b3JrSWNvbn0gZnJvbSAnLi9zZXR0aW5nT2JqJztcclxuaW1wb3J0IHtnZXRWYWx1ZSwgaXNDaGVja2VkfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCB7aGVscExpbmssIHNpbXBsZUNoZWNrYm94fSBmcm9tICcuL3NldHRpbmdzUGFnZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmFsUHJlZnMoKSB7XHJcbiAgLy8gR2VuZXJhbCBQcmVmc1xyXG4gIHJldHVybiAnPHRyPjx0aCBjb2xzcGFuPVwiMlwiPjxiPkdlbmVyYWwgcHJlZmVyZW5jZXMgJyArXHJcbiAgICAgICcoYXBwbHkgdG8gbW9zdCBzY3JlZW5zKTwvYj48L3RoPjwvdHI+JyArXHJcblxyXG4gICAgJzx0cj48dGQgY2xhc3M9XCJmc2hSaWdodFwiPicgK1xyXG4gICAgICAnPGxhYmVsIGZvcj1cImVuYWJsZUd1aWxkSW5mb1dpZGdldHNcIj4nICtcclxuICAgICAgJ0VuYWJsZSBHdWlsZCBJbmZvIFdpZGdldHMnICtcclxuICAgICAgaGVscExpbmsoJ0VuYWJsZSBHdWlsZCBJbmZvIFdpZGdldHMnLFxyXG4gICAgICAgICdFbmFibGluZyB0aGlzIG9wdGlvbiB3aWxsIGVuYWJsZSB0aGUgR3VpbGQgSW5mbyBXaWRnZXRzICcgK1xyXG4gICAgICAgICcoY29sb3Jpbmcgb24gdGhlIEd1aWxkIEluZm8gcGFuZWwpJykgKyAnOjwvbGFiZWw+PC90ZD48dGQ+JyArXHJcbiAgICAgICc8aW5wdXQgaWQ9XCJlbmFibGVHdWlsZEluZm9XaWRnZXRzXCIgbmFtZT1cImVuYWJsZUd1aWxkSW5mb1dpZGdldHNcIiAnICtcclxuICAgICAgJ3R5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwib25cIicgK1xyXG4gICAgICBpc0NoZWNrZWQoY2FsZi5lbmFibGVHdWlsZEluZm9XaWRnZXRzKSArXHJcbiAgICAgICc+Jm5ic3A7JyArXHJcbiAgICAgICc8bGFiZWw+SGlkZSBNZXNzYWdlJmd0OzxpbnB1dCBuYW1lPVwiaGlkZUd1aWxkSW5mb01lc3NhZ2VcIiAnICtcclxuICAgICAgJ3R5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwib25cIicgK1xyXG4gICAgICBpc0NoZWNrZWQoY2FsZi5oaWRlR3VpbGRJbmZvTWVzc2FnZSkgK1xyXG4gICAgICAnPjwvbGFiZWw+Jm5ic3A7JyArXHJcbiAgICAgICc8bGFiZWw+SGlkZSBCdWZmJmd0OzxpbnB1dCBuYW1lPVwiaGlkZUd1aWxkSW5mb0J1ZmZcIiAnICtcclxuICAgICAgJ3R5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwib25cIicgK1xyXG4gICAgICBpc0NoZWNrZWQoY2FsZi5oaWRlR3VpbGRJbmZvQnVmZikgK1xyXG4gICAgICAnPjwvbGFiZWw+Jm5ic3A7JyArXHJcbiAgICAgICc8bGFiZWw+SGlkZSBTVCZndDs8aW5wdXQgbmFtZT1cImhpZGVHdWlsZEluZm9TZWN1cmVUcmFkZVwiICcgK1xyXG4gICAgICAndHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJvblwiJyArXHJcbiAgICAgIGlzQ2hlY2tlZChjYWxmLmhpZGVHdWlsZEluZm9TZWN1cmVUcmFkZSkgK1xyXG4gICAgICAnPjwvbGFiZWw+Jm5ic3A7JyArXHJcbiAgICAgICc8bGFiZWw+SGlkZSBUcmFkZSZndDs8aW5wdXQgbmFtZT1cImhpZGVHdWlsZEluZm9UcmFkZVwiICcgK1xyXG4gICAgICAndHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJvblwiJyArXHJcbiAgICAgIGlzQ2hlY2tlZChjYWxmLmhpZGVHdWlsZEluZm9UcmFkZSkgK1xyXG4gICAgICAnPjwvbGFiZWw+PC90ZD48L3RyPicgK1xyXG5cclxuICAgIHNpbXBsZUNoZWNrYm94KCdtb3ZlR3VpbGRMaXN0JykgK1xyXG4gICAgc2ltcGxlQ2hlY2tib3goJ21vdmVPbmxpbmVBbGxpZXNMaXN0JykgK1xyXG5cclxuICAgICc8dHI+PHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4nICsgbmV0d29ya0ljb24gK1xyXG4gICAgICAnU2hvdyBPbmxpbmUgQWxsaWVzL0VuZW1pZXMnICtcclxuICAgICAgaGVscExpbmsoJ1Nob3cgT25saW5lIEFsbGllcy9FbmVtaWVzJyxcclxuICAgICAgICAnVGhpcyB3aWxsIHNob3cgdGhlIGFsbGllcy9lbmVtaWVzIG9ubGluZSBsaXN0IG9uIHRoZSByaWdodC4nKSArXHJcbiAgICAgICc6PC90ZD48dGQ+PGxhYmVsPkFsbGllcyZuYnNwOzxpbnB1dCBuYW1lPVwiZW5hYmxlQWxseU9ubGluZUxpc3RcIiAnICtcclxuICAgICAgJ3R5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwib25cIicgK1xyXG4gICAgICBpc0NoZWNrZWQoY2FsZi5lbmFibGVBbGx5T25saW5lTGlzdCkgK1xyXG4gICAgICAnPjwvbGFiZWw+Jm5ic3A7Jm5ic3A7PGxhYmVsPkVuZW1pZXMmbmJzcDsnICtcclxuICAgICAgJzxpbnB1dCBuYW1lPVwiZW5hYmxlRW5lbXlPbmxpbmVMaXN0XCIgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJvblwiJyArXHJcbiAgICAgIGlzQ2hlY2tlZChjYWxmLmVuYWJsZUVuZW15T25saW5lTGlzdCkgK1xyXG4gICAgICAnPjwvbGFiZWw+Jm5ic3A7Jm5ic3A7JyArXHJcbiAgICAgICc8aW5wdXQgbmFtZT1cImFsbHlFbmVteU9ubGluZVJlZnJlc2hUaW1lXCIgc2l6ZT1cIjNcIiB2YWx1ZT1cIicgK1xyXG4gICAgICBnZXRWYWx1ZSgnYWxseUVuZW15T25saW5lUmVmcmVzaFRpbWUnKSArXHJcbiAgICAgICdcIj4gc2Vjb25kcyByZWZyZXNoPC90ZD48L3RyPicgK1xyXG5cclxuICAgIHNpbXBsZUNoZWNrYm94KCdlbmFibGVPbmxpbmVBbGxpZXNXaWRnZXRzJykgK1xyXG4gICAgc2ltcGxlQ2hlY2tib3goJ21vdmVGU0JveCcpICtcclxuICAgIHNpbXBsZUNoZWNrYm94KCdmc2JveGxvZycpICtcclxuICAgIHNpbXBsZUNoZWNrYm94KCdnYW1lSGVscExpbmsnKSArXHJcbiAgICBzaW1wbGVDaGVja2JveCgnZW5hYmxlVGVtcGxlQWxlcnQnKSArXHJcbiAgICBzaW1wbGVDaGVja2JveCgnZW5hYmxlVXBncmFkZUFsZXJ0JykgK1xyXG4gICAgc2ltcGxlQ2hlY2tib3goJ2VuYWJsZUNvbXBvc2luZ0FsZXJ0JykgK1xyXG4gICAgc2ltcGxlQ2hlY2tib3goJ2VuaGFuY2VPbmxpbmVEb3RzJykgK1xyXG4gICAgc2ltcGxlQ2hlY2tib3goJ2hpZGVCdWZmU2VsZWN0ZWQnKSArXHJcbiAgICBzaW1wbGVDaGVja2JveCgnaGlkZUhlbHBlck1lbnUnKSArXHJcbiAgICBzaW1wbGVDaGVja2JveCgna2VlcEhlbHBlck1lbnVPblNjcmVlbicpICtcclxuICAgIHNpbXBsZUNoZWNrYm94KCdkcmFnZ2FibGVIZWxwZXJNZW51JykgK1xyXG5cclxuICAgICc8dHI+PHRkIGNsYXNzPVwiZnNoUmlnaHRcIj5RdWljayBMaW5rcyBTY3JlZW4gTG9jYXRpb24nICtcclxuICAgICAgaGVscExpbmsoJ1F1aWNrIExpbmtzIFNjcmVlbiBMb2NhdGlvbicsXHJcbiAgICAgICAgJ0RldGVybWluZXMgd2hlcmUgdGhlIHF1aWNrIGxpbmtzIGRpYWxvZyBzaG93cyBvbiB0aGUgc2NyZWVuLiAnICtcclxuICAgICAgICAnRGVmYXVsdCBpcyB0b3AgMjIsIGxlZnQgMC4nKSArXHJcbiAgICAgICc6PC90ZD48dGQ+VG9wOiA8aW5wdXQgbmFtZT1cInF1aWNrTGlua3NUb3BQeFwiIHNpemU9XCIzXCIgdmFsdWU9XCInICtcclxuICAgICAgZ2V0VmFsdWUoJ3F1aWNrTGlua3NUb3BQeCcpICtcclxuICAgICAgJ1wiPiBMZWZ0OiA8aW5wdXQgbmFtZT1cInF1aWNrTGlua3NMZWZ0UHhcIiBzaXplPVwiM1wiIHZhbHVlPVwiJyArXHJcbiAgICAgIGdldFZhbHVlKCdxdWlja0xpbmtzTGVmdFB4JykgK1xyXG4gICAgICAnXCI+PC90ZD48L3RyPicgK1xyXG4gICAgc2ltcGxlQ2hlY2tib3goJ2RyYWdnYWJsZVF1aWNrTGlua3MnKSArXHJcbiAgICBzaW1wbGVDaGVja2JveCgnZXhwYW5kTWVudU9uS2V5UHJlc3MnKTtcclxufVxyXG4iLCJpbXBvcnQge2dldFZhbHVlLCBpc0NoZWNrZWR9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtoZWxwTGluaywgc2ltcGxlQ2hlY2tib3h9IGZyb20gJy4vc2V0dGluZ3NQYWdlJztcclxuXHJcbmZ1bmN0aW9uIGluamVjdFNldHRpbmdzR3VpbGREYXRhKGd1aWxkVHlwZSkge1xyXG4gIHJldHVybiAnPGlucHV0IG5hbWU9XCJndWlsZCcgKyBndWlsZFR5cGUgKyAnXCIgc2l6ZT1cIjYwXCIgdmFsdWU9XCInICtcclxuICAgIGdldFZhbHVlKCdndWlsZCcgKyBndWlsZFR5cGUpICsgJ1wiPicgK1xyXG4gICAgJzxzcGFuIGNsYXNzPVwiZnNoUG9pbnRcIiAnICtcclxuICAgICdpZD1cInRvZ2dsZVNob3dHdWlsZCcgKyBndWlsZFR5cGUgKyAnTWVzc2FnZVwiIGxpbmt0bz1cInNob3dHdWlsZCcgK1xyXG4gICAgZ3VpbGRUeXBlICsgJ01lc3NhZ2VcIj4gJiN4MDBiYjs8L3NwYW4+JyArXHJcbiAgICAnPGRpdiBpZD1cInNob3dHdWlsZCcgKyBndWlsZFR5cGUgKyAnTWVzc2FnZVwiIGNsYXNzPVwiZnNoSGlkZVwiPicgK1xyXG4gICAgJzxpbnB1dCBuYW1lPVwiZ3VpbGQnICsgZ3VpbGRUeXBlICsgJ01lc3NhZ2VcIiBzaXplPVwiNjBcIiB2YWx1ZT1cIicgK1xyXG4gICAgZ2V0VmFsdWUoJ2d1aWxkJyArIGd1aWxkVHlwZSArICdNZXNzYWdlJykgKyAnXCI+JyArXHJcbiAgICAnPC9kaXY+JztcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ3VpbGRQcmVmcygpIHtcclxuICAvLyBHdWlsZCBNYW5hZ2VcclxuICByZXR1cm4gJzx0cj48dGggY29sc3Bhbj1cIjJcIj48Yj5HdWlsZD5NYW5hZ2UgcHJlZmVyZW5jZXMnICtcclxuICAgICAgJzwvYj48L3RoPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZCBjb2xzcGFuPVwiMlwiPkVudGVyIGd1aWxkIG5hbWVzLCAnICtcclxuICAgICAgJ3NlcGFyYXRlZCBieSBjb21tYXM8L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+T3duIEd1aWxkPC90ZD48dGQ+JyArXHJcbiAgICAgIGluamVjdFNldHRpbmdzR3VpbGREYXRhKCdTZWxmJykgKyAnPC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQgY2xhc3M9XCJmc2hSaWdodFwiPkZyaWVuZGx5IEd1aWxkczwvdGQ+PHRkPicgK1xyXG4gICAgICBpbmplY3RTZXR0aW5nc0d1aWxkRGF0YSgnRnJuZCcpICsgJzwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+PHRkIGNsYXNzPVwiZnNoUmlnaHRcIj5PbGQgR3VpbGRzPC90ZD48dGQ+JyArXHJcbiAgICAgIGluamVjdFNldHRpbmdzR3VpbGREYXRhKCdQYXN0JykgKyAnPC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQgY2xhc3M9XCJmc2hSaWdodFwiPkVuZW15IEd1aWxkczwvdGQ+PHRkPicgK1xyXG4gICAgICBpbmplY3RTZXR0aW5nc0d1aWxkRGF0YSgnRW5teScpICsgJzwvdGQ+PC90cj4nICtcclxuXHJcbiAgICAnPHRyPjx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+SGlnaGxpZ2h0IFZhbGlkIFB2UCBUYXJnZXRzJyArXHJcbiAgICAgIGhlbHBMaW5rKCdIaWdobGlnaHQgVmFsaWQgUHZQIFRhcmdldHMnLFxyXG4gICAgICAgICdFbmFibGluZyB0aGlzIG9wdGlvbiB3aWxsIGhpZ2hsaWdodCB0YXJnZXRzIGluIE9USEVSIGd1aWxkcyB0aGF0ICcgK1xyXG4gICAgICAgICdhcmUgd2l0aGluIHlvdXIgbGV2ZWwgcmFuZ2UgdG8gYXR0YWNrIGZvciBQdlAgb3IgR3ZHLicpICtcclxuICAgICAgJzo8L3RkPjx0ZD5QdlA6IDxpbnB1dCBuYW1lPVwiaGlnaGxpZ2h0UGxheWVyc05lYXJNeUx2bFwiICcgK1xyXG4gICAgICAndHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJvblwiJyArXHJcbiAgICAgIGlzQ2hlY2tlZChnZXRWYWx1ZSgnaGlnaGxpZ2h0UGxheWVyc05lYXJNeUx2bCcpKSArXHJcbiAgICAgICc+IEd2RzogPGlucHV0IG5hbWU9XCJoaWdobGlnaHRHdkdQbGF5ZXJzTmVhck15THZsXCIgJyArXHJcbiAgICAgICd0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT1cIm9uXCInICtcclxuICAgICAgaXNDaGVja2VkKGdldFZhbHVlKCdoaWdobGlnaHRHdkdQbGF5ZXJzTmVhck15THZsJykpICtcclxuICAgICAgJz48L3RkPjwvdHI+JyArXHJcblxyXG4gICAgc2ltcGxlQ2hlY2tib3goJ3Nob3dBZG1pbicpICtcclxuICAgIHNpbXBsZUNoZWNrYm94KCdhamF4aWZ5UmFua0NvbnRyb2xzJykgK1xyXG4gICAgc2ltcGxlQ2hlY2tib3goJ2RldGFpbGVkQ29uZmxpY3RJbmZvJyk7XHJcbn1cclxuIiwiaW1wb3J0IHtnZXRWYWx1ZSwgaXNDaGVja2VkfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCB7aGVscExpbmssIHNpbXBsZUNoZWNrYm94fSBmcm9tICcuL3NldHRpbmdzUGFnZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2dQcmVmcygpIHtcclxuICAvLyBMb2cgc2NyZWVuIHByZWZzXHJcbiAgcmV0dXJuICc8dHI+PHRoIGNvbHNwYW49XCIyXCI+PGI+TG9nIHNjcmVlbiBwcmVmZXJlbmNlcycgK1xyXG4gICAgICAnPC9iPjwvdGg+PC90cj4nICtcclxuXHJcbiAgICBzaW1wbGVDaGVja2JveCgnaGlkZU5vblBsYXllckd1aWxkTG9nTWVzc2FnZXMnKSArXHJcbiAgICBzaW1wbGVDaGVja2JveCgndXNlTmV3R3VpbGRMb2cnKSArXHJcblxyXG4gICAgJzx0cj48dGQgY2xhc3M9XCJmc2hSaWdodFwiPk5ldyBHdWlsZCBMb2cgSGlzdG9yeScgK1xyXG4gICAgICBoZWxwTGluaygnTmV3IEd1aWxkIExvZyBIaXN0b3J5IChwYWdlcyknLFxyXG4gICAgICAgICdUaGlzIGlzIHRoZSBudW1iZXIgb2YgcGFnZXMgdGhhdCB0aGUgbmV3IGd1aWxkIGxvZyAnICtcclxuICAgICAgICAnc2NyZWVuIHdpbGwgZ28gYmFjayBpbiBoaXN0b3J5LicpICtcclxuICAgICAgJzo8L3RkPjx0ZD48aW5wdXQgbmFtZT1cIm5ld0d1aWxkTG9nSGlzdG9yeVBhZ2VzXCIgc2l6ZT1cIjNcIiB2YWx1ZT1cIicgK1xyXG4gICAgICBnZXRWYWx1ZSgnbmV3R3VpbGRMb2dIaXN0b3J5UGFnZXMnKSArICdcIj48L3RkPjwvdGQ+PC90cj4nICtcclxuXHJcbiAgICBzaW1wbGVDaGVja2JveCgnZW5hYmxlTG9nQ29sb3JpbmcnKSArXHJcblxyXG4gICAgJzx0cj48dGQgY2xhc3M9XCJmc2hSaWdodFwiPk5ldyBMb2cgTWVzc2FnZSBTb3VuZCcgK1xyXG4gICAgICBoZWxwTGluaygnTmV3IExvZyBNZXNzYWdlIFNvdW5kJyxcclxuICAgICAgICAnVGhlIC53YXYgb3IgLm9nZyBmaWxlIHRvIHBsYXkgd2hlbiB5b3UgaGF2ZSB1bnJlYWQgbG9nIG1lc3NhZ2VzLiAnICtcclxuICAgICAgICAnVGhpcyBtdXN0IGJlIGEgLndhdiBvciAub2dnIGZpbGUuIFRoaXMgb3B0aW9uIGNhbiBiZSB0dXJuZWQgb24vb2ZmICcgK1xyXG4gICAgICAgICdvbiB0aGUgd29ybGQgcGFnZS4gT25seSB3b3JrcyBpbiBGaXJlZm94IDMuNSsnKSArXHJcbiAgICAgICc6PC90ZD48dGQgY29sc3Bhbj1cIjNcIj48aW5wdXQgbmFtZT1cImRlZmF1bHRNZXNzYWdlU291bmRcIiBzaXplPVwiNjBcIiAnICtcclxuICAgICAgJ3ZhbHVlPVwiJyArIGdldFZhbHVlKCdkZWZhdWx0TWVzc2FnZVNvdW5kJykgK1xyXG4gICAgICAnXCI+PC90ZD48L3RyPicgK1xyXG5cclxuICAgICc8dHI+PHRkIGNsYXNzPVwiZnNoUmlnaHRcIj5QbGF5IHNvdW5kIG9uIHVucmVhZCBsb2cnICtcclxuICAgICAgaGVscExpbmsoJ1BsYXkgc291bmQgb24gdW5yZWFkIGxvZycsXHJcbiAgICAgICAgJ1Nob3VsZCB0aGUgYWJvdmUgc291bmQgcGxheSB3aGVuIHlvdSBoYXZlIHVucmVhZCBsb2cgbWVzc2FnZXM/ICcgK1xyXG4gICAgICAgICcod2lsbCB3b3JrIG9uIEZpcmVmb3ggMy41KyBvbmx5KScpICtcclxuICAgICAgJzo8L3RkPjx0ZD48aW5wdXQgbmFtZT1cInBsYXlOZXdNZXNzYWdlU291bmRcIiB0eXBlPVwiY2hlY2tib3hcIiAnICtcclxuICAgICAgJ3ZhbHVlPVwib25cIicgK1xyXG4gICAgICBpc0NoZWNrZWQoZ2V0VmFsdWUoJ3BsYXlOZXdNZXNzYWdlU291bmQnKSkgKyAnPicgK1xyXG4gICAgICAnIFNob3cgc3BlYWtlciBvbiB3b3JsZCcgK1xyXG4gICAgICBoZWxwTGluaygnU2hvdyBzcGVha2VyIG9uIHdvcmxkJyxcclxuICAgICAgICAnU2hvdWxkIHRoZSB0b2dnbGUgcGxheSBzb3VuZCBzcGVha2VyIHNob3cgb24gdGhlIHdvcmxkIG1hcD8gJyArXHJcbiAgICAgICAgJyhUaGlzIGljb24gaXMgbmV4dCB0byB0aGUgRmFsbGVuc3dvcmQgd2lraSBpY29uIGFuZCB3aWxsIG9ubHkgJyArXHJcbiAgICAgICAgJ2Rpc3BsYXkgb24gRmlyZWZveCAzLjUrKScpICtcclxuICAgICAgJzo8aW5wdXQgbmFtZT1cInNob3dTcGVha2VyT25Xb3JsZFwiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwib25cIicgK1xyXG4gICAgICBpc0NoZWNrZWQoZ2V0VmFsdWUoJ3Nob3dTcGVha2VyT25Xb3JsZCcpKSArXHJcbiAgICAgICc+PC90cj48L3RkPicgK1xyXG5cclxuICAgIHNpbXBsZUNoZWNrYm94KCdlbmFibGVDaGF0UGFyc2luZycpICtcclxuICAgIHNpbXBsZUNoZWNrYm94KCdrZWVwQnVmZkxvZycpICtcclxuICAgIHNpbXBsZUNoZWNrYm94KCdhZGRBdHRhY2tMaW5rVG9Mb2cnKSArXHJcbiAgICBzaW1wbGVDaGVja2JveCgnZW5oYW5jZUNoYXRUZXh0RW50cnknKTtcclxufVxyXG4iLCJpbXBvcnQge2dldFZhbHVlLCBpc0NoZWNrZWR9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtoZWxwTGluaywgc2ltcGxlQ2hlY2tib3h9IGZyb20gJy4vc2V0dGluZ3NQYWdlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG90aGVyUHJlZnMoKSB7XHJcbiAgLy8gT3RoZXIgcHJlZnNcclxuICByZXR1cm4gJzx0cj48dGggY29sc3Bhbj1cIjJcIj48Yj5PdGhlciBwcmVmZXJlbmNlczwvYj48L3RoPjwvdHI+JyArXHJcblxyXG4gICAgc2ltcGxlQ2hlY2tib3goJ2F1dG9GaWxsTWluQmlkUHJpY2UnKSArXHJcblxyXG4gICAgJzx0cj48dGQgY2xhc3M9XCJmc2hSaWdodFwiPkhpZGUgU3BlY2lmaWMgUmVjaXBlcycgK1xyXG4gICAgICBoZWxwTGluaygnSGlkZSBTcGVjaWZpYyBSZWNpcGVzJyxcclxuICAgICAgICAnSWYgZW5hYmxlZCwgdGhpcyBoaWRlcyByZWNpcGVzIHdob3NlIG5hbWUgbWF0Y2hlcyB0aGUgbGlzdCAnICtcclxuICAgICAgICAnKHNlcGFyYXRlZCBieSBjb21tYXMpLiBUaGlzIHdvcmtzIG9uIFJlY2lwZSBNYW5hZ2VyJykgK1xyXG4gICAgICAnOjwvdGQ+PHRkIGNvbHNwYW49XCIzXCI+PGlucHV0IG5hbWU9XCJoaWRlUmVjaXBlc1wiICcgK1xyXG4gICAgICAndHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJvblwiJyArXHJcbiAgICAgIGlzQ2hlY2tlZChnZXRWYWx1ZSgnaGlkZVJlY2lwZXMnKSkgKyAnPicgK1xyXG4gICAgICAnJm5ic3A7PGlucHV0IG5hbWU9XCJoaWRlUmVjaXBlTmFtZXNcIiBzaXplPVwiNjBcIiB2YWx1ZT1cIicgK1xyXG4gICAgICBnZXRWYWx1ZSgnaGlkZVJlY2lwZU5hbWVzJykgKyAnXCI+PC90ZD48L3RyPicgK1xyXG5cclxuICAgIHNpbXBsZUNoZWNrYm94KCdoaWRlUmVsaWNPZmZsaW5lJykgK1xyXG4gICAgc2ltcGxlQ2hlY2tib3goJ2VudGVyRm9yU2VuZE1lc3NhZ2UnKSArXHJcbiAgICBzaW1wbGVDaGVja2JveCgnbmF2aWdhdGVUb0xvZ0FmdGVyTXNnJykgK1xyXG5cclxuICAgICc8dHI+PHRkIGFsaWduPSBcInJpZ2h0XCI+TWF4IEdyb3VwIFNpemUgdG8gSm9pbicgK1xyXG4gICAgICBoZWxwTGluaygnTWF4IEdyb3VwIFNpemUgdG8gSm9pbicsXHJcbiAgICAgICAgJ1RoaXMgd2lsbCBkaXNhYmxlIEhDU3MgSm9pbiBBbGwgZnVuY3Rpb25hbGl0eSBhbmQgd2lsbCBvbmx5IGpvaW4gJyArXHJcbiAgICAgICAgJ2dyb3VwcyBsZXNzIHRoYW4gYSBzZXQgc2l6ZS4gJykgK1xyXG4gICAgICAnOjwvdGQ+PHRkIGNvbHNwYW49XCIzXCI+PGlucHV0IG5hbWU9XCJlbmFibGVNYXhHcm91cFNpemVUb0pvaW5cIiAnICtcclxuICAgICAgJ3R5cGUgPSBcImNoZWNrYm94XCIgdmFsdWUgPSBcIm9uXCInICtcclxuICAgICAgaXNDaGVja2VkKGdldFZhbHVlKCdlbmFibGVNYXhHcm91cFNpemVUb0pvaW4nKSkgK1xyXG4gICAgICAnPiZuYnNwOyZuYnNwO01heCBTaXplOiAnICtcclxuICAgICAgJzxpbnB1dCBuYW1lPVwibWF4R3JvdXBTaXplVG9Kb2luXCIgc2l6ZT1cIjNcIiB2YWx1ZT1cIicgK1xyXG4gICAgICBnZXRWYWx1ZSgnbWF4R3JvdXBTaXplVG9Kb2luJykgKyAnXCI+PC90ZD48L3RyPicgK1xyXG5cclxuICAgIHNpbXBsZUNoZWNrYm94KCdtb3ZlQ29tcG9zaW5nQnV0dG9ucycpO1xyXG59XHJcbiIsImltcG9ydCBjYWxmIGZyb20gJy4uL3N1cHBvcnQvY2FsZic7XHJcbmltcG9ydCB7bmV0d29ya0ljb259IGZyb20gJy4vc2V0dGluZ09iaic7XHJcbmltcG9ydCB7Z2V0VmFsdWUsIGlzQ2hlY2tlZCwgaXNTZWxlY3RlZH0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5pbXBvcnQge2hlbHBMaW5rLCBzaW1wbGVDaGVja2JveH0gZnJvbSAnLi9zZXR0aW5nc1BhZ2UnO1xyXG5cclxuZnVuY3Rpb24gd29ybGRHcm91cCgpIHtcclxuICAvLyBXb3JsZCBTY3JlZW5cclxuICByZXR1cm4gJzx0cj48dGQgY2xhc3M9XCJmc2hSaWdodFwiPkhpZGUgQ3JlYXRlIEdyb3VwIEJ1dHRvbicgK1xyXG4gICAgaGVscExpbmsoJ0hpZGUgQ3JlYXRlIEdyb3VwIEJ1dHRvbicsXHJcbiAgICAgICdFbmFibGluZyB0aGlzIG9wdGlvbiB3aWxsIGhpZGUgdGhlIENyZWF0ZSBHcm91cCBidXR0b24nKSArXHJcbiAgICAnOjwvdGQ+PHRkPicgK1xyXG4gICAgJzxpbnB1dCBuYW1lPVwiaGlkZUNoYW1waW9uc0dyb3VwXCIgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJvblwiJyArXHJcbiAgICAgIGlzQ2hlY2tlZChnZXRWYWx1ZSgnaGlkZUNoYW1waW9uc0dyb3VwJykpICsgJz4nICtcclxuICAgICcmbmJzcDtDaGFtcGlvbnMmbmJzcDsmbmJzcDsnICtcclxuICAgICc8aW5wdXQgbmFtZT1cImhpZGVFbGl0ZXNHcm91cFwiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwib25cIicgK1xyXG4gICAgICBpc0NoZWNrZWQoZ2V0VmFsdWUoJ2hpZGVFbGl0ZXNHcm91cCcpKSArICc+JyArXHJcbiAgICAnJm5ic3A7RWxpdGVzJm5ic3A7Jm5ic3A7JyArXHJcbiAgICAnPGlucHV0IG5hbWU9XCJoaWRlU0VHcm91cFwiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwib25cIicgK1xyXG4gICAgICBpc0NoZWNrZWQoZ2V0VmFsdWUoJ2hpZGVTRUdyb3VwJykpICsgJz4nICtcclxuICAgICcmbmJzcDtTdXBlciBFbGl0ZSZuYnNwOyZuYnNwOycgK1xyXG4gICAgJzxpbnB1dCBuYW1lPVwiaGlkZVRpdGFuR3JvdXBcIiB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT1cIm9uXCInICtcclxuICAgICAgaXNDaGVja2VkKGdldFZhbHVlKCdoaWRlVGl0YW5Hcm91cCcpKSArICc+JyArXHJcbiAgICAnJm5ic3A7VGl0YW4mbmJzcDsmbmJzcDsnICtcclxuICAgICc8aW5wdXQgbmFtZT1cImhpZGVMZWdlbmRhcnlHcm91cFwiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwib25cIicgK1xyXG4gICAgICBpc0NoZWNrZWQoZ2V0VmFsdWUoJ2hpZGVMZWdlbmRhcnlHcm91cCcpKSArICc+JyArXHJcbiAgICAnJm5ic3A7TGVnZW5kYXJ5JyArXHJcbiAgICAnPC90ZD48L3RyPic7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbWJhdEV2YWxCaWFzKCkge1xyXG4gIHJldHVybiAnPHRyPjx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+Q29tYmF0IEV2YWx1YXRvciBCaWFzJyArXHJcbiAgICBoZWxwTGluaygnQ29tYmF0IEV2YWx1YXRvciBCaWFzJyxcclxuICAgICAgJ1RoaXMgY2hhbmdlcyB0aGUgYmlhcyBvZiB0aGUgY29tYmF0IGV2YWx1YXRvciBmb3IgdGhlIGRhbWFnZSBhbmQgJyArXHJcbiAgICAgICdIUCBldmFsdWF0aW9uLiBJdCB3aWxsIG5vdCBjaGFuZ2UgdGhlIGF0dGFjayBiaWFzICgxLjEwNTMpLicgK1xyXG4gICAgICAnPGJyPkNvbnNlcnZhdGl2ZSA9IDEuMTA1MyBhbmQgMS4xIChTYWZlc3QpJyArXHJcbiAgICAgICc8YnI+U2VtaS1Db25zZXJ2YXRpdmUgPSAxLjEgYW5kIDEuMDUzJyArXHJcbiAgICAgICc8YnI+QWR2ZW50dXJvdXMgPSAxLjA1MyBhbmQgMSAoQmxlZWRpbmcgRWRnZSknICtcclxuICAgICAgJzxicj5Db25zZXJ2YXRpdmUrID0gMS4xMDUzIGFuZCAxIHdpdGggdGhlIGF0dGFjayBjYWxjdWxhdGlvbiAnICtcclxuICAgICAgJ2NoYW5nZWQgdG8gKy00OCBwZXIgUkpFTScpICtcclxuICAgICc6PC90ZD48dGQ+PHNlbGVjdCBuYW1lPVwiY29tYmF0RXZhbHVhdG9yQmlhc1wiPicgK1xyXG4gICAgJzxvcHRpb24gdmFsdWU9XCIwXCInICtcclxuICAgIGlzU2VsZWN0ZWQoY2FsZi5jb21iYXRFdmFsdWF0b3JCaWFzLCAwKSArXHJcbiAgICAnPkNvbnNlcnZhdGl2ZTwvb3B0aW9uPicgK1xyXG4gICAgJzxvcHRpb24gdmFsdWU9XCIxXCInICtcclxuICAgIGlzU2VsZWN0ZWQoY2FsZi5jb21iYXRFdmFsdWF0b3JCaWFzLCAxKSArXHJcbiAgICAnPlNlbWktQ29uc2VydmF0aXZlPC9vcHRpb24+JyArXHJcbiAgICAnPG9wdGlvbiB2YWx1ZT1cIjJcIicgK1xyXG4gICAgaXNTZWxlY3RlZChjYWxmLmNvbWJhdEV2YWx1YXRvckJpYXMsIDIpICtcclxuICAgICc+QWR2ZW50dXJvdXM8L29wdGlvbj4nICtcclxuICAgICc8b3B0aW9uIHZhbHVlPVwiM1wiJyArXHJcbiAgICBpc1NlbGVjdGVkKGNhbGYuY29tYmF0RXZhbHVhdG9yQmlhcywgMykgK1xyXG4gICAgJz5Db25zZXJ2YXRpdmUrPC9vcHRpb24+PC9zZWxlY3Q+PC90ZD48L3RyPic7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGh1bnRCdWZmKCkge1xyXG4gIHJldHVybiAnSHVudGluZyBCdWZmcycgKyBoZWxwTGluaygnSHVudGluZyBCdWZmcycsXHJcbiAgICAnQ3VzdG9taXplIHdoaWNoIGJ1ZmZzIGFyZSBkZXNpZ25hdGVkIGFzIGh1bnRpbmcgYnVmZnMuICcgK1xyXG4gICAgJ1lvdSBtdXN0IHR5cGUgdGhlIGZ1bGwgbmFtZSBvZiBlYWNoIGJ1ZmYsIHNlcGFyYXRlZCBieSBjb21tYXMuICcgK1xyXG4gICAgJ1VzZSB0aGUgY2hlY2tib3ggdG8gZW5hYmxlL2Rpc2FibGUgdGhlbS4nKSArICc6JztcclxufVxyXG5cclxuZnVuY3Rpb24gaHVudEJ1ZmZDaGVjaygpIHtcclxuICByZXR1cm4gJzxpbnB1dCBuYW1lPVwic2hvd0h1bnRpbmdCdWZmc1wiICcgK1xyXG4gICAgJ2NsYXNzPVwiZnNoVk1pZFwiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwib25cIicgK1xyXG4gICAgaXNDaGVja2VkKGNhbGYuc2hvd0J1ZmZzKSArICc+JztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGh1bnRNb2RlKCkge1xyXG4gIHJldHVybiAnRW5hYmxlZCBIdW50aW5nIE1vZGUnICtcclxuICAgIGhlbHBMaW5rKCdFbmFibGVkIEh1bnRpbmcgTW9kZScsXHJcbiAgICAgICdUaGlzIHdpbGwgZGV0ZXJtaW5lIHdoaWNoIGxpc3Qgb2YgYnVmZnMgZ2V0cyBjaGVja2VkICcgK1xyXG4gICAgICAnb24gdGhlIHdvcmxkIHNjcmVlbi4nKSArXHJcbiAgICAnOjxzZWxlY3QgbmFtZT1cImVuYWJsZWRIdW50aW5nTW9kZVwiPicgK1xyXG4gICAgJzxvcHRpb24gdmFsdWU9XCIxXCInICsgaXNTZWxlY3RlZChjYWxmLmVuYWJsZWRIdW50aW5nTW9kZSwgJzEnKSArXHJcbiAgICAnPicgKyBjYWxmLmJ1ZmZzTmFtZSArICc8L29wdGlvbj4nICtcclxuICAgICc8b3B0aW9uIHZhbHVlPVwiMlwiJyArIGlzU2VsZWN0ZWQoY2FsZi5lbmFibGVkSHVudGluZ01vZGUsICcyJykgK1xyXG4gICAgJz4nICsgY2FsZi5idWZmczJOYW1lICsgJzwvb3B0aW9uPicgK1xyXG4gICAgJzxvcHRpb24gdmFsdWU9XCIzXCInICsgaXNTZWxlY3RlZChjYWxmLmVuYWJsZWRIdW50aW5nTW9kZSwgJzMnKSArXHJcbiAgICAnPicgKyBjYWxmLmJ1ZmZzM05hbWUgKyAnPC9vcHRpb24+JyArXHJcbiAgICAnPC9zZWxlY3Q+JztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGh1bnRpbmdCdWZmc0h0bWwoKSB7XHJcbiAgcmV0dXJuIGh1bnRCdWZmKCkgKyBodW50QnVmZkNoZWNrKCkgKyAnICcgKyBodW50TW9kZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBodW50aW5nQnVmZnMoKSB7XHJcbiAgcmV0dXJuICc8dHI+PHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4nICsgaHVudEJ1ZmYoKSArICc8L3RkPjx0ZCBjb2xzcGFuPVwiM1wiPicgK1xyXG4gICAgaHVudEJ1ZmZDaGVjaygpICsgJyAnICsgaHVudE1vZGUoKSArICc8L3RkPjwvdHI+JztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHByZWZzKCkge1xyXG4gIC8vIFdvcmxkIFNjcmVlblxyXG4gIHJldHVybiAnPHRyPjx0aCBjb2xzcGFuPVwiMlwiPjxiPicgK1xyXG4gICAgJ1dvcmxkIHNjcmVlbi9IdW50aW5nIHByZWZlcmVuY2VzPC9iPjwvdGg+PC90cj4nICtcclxuXHJcbiAgICB3b3JsZEdyb3VwKCkgK1xyXG5cclxuICAgICc8dHI+PHRkIGNsYXNzPVwiZnNoUmlnaHRcIj5LZWVwIENvbWJhdCBMb2dzJyArXHJcbiAgICAgIGhlbHBMaW5rKCdLZWVwIENvbWJhdCBMb2dzJyxcclxuICAgICAgICAnU2F2ZSBjb21iYXQgbG9ncyB0byBhIHRlbXBvcmFyeSB2YXJpYWJsZS4gJyArXHJcbiAgICAgICAgJ1ByZXNzIDx1PlNob3cgbG9nczwvdT4gb24gdGhlIHJpZ2h0IHRvIGRpc3BsYXkgYW5kIGNvcHkgdGhlbScpICtcclxuICAgICAgJzo8L3RkPjx0ZD48aW5wdXQgbmFtZT1cImtlZXBMb2dzXCIgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJvblwiJyArXHJcbiAgICAgIGlzQ2hlY2tlZChnZXRWYWx1ZSgna2VlcExvZ3MnKSkgKyAnPiZuYnNwOyZuYnNwOycgK1xyXG4gICAgICAnPGlucHV0IHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImN1c3RvbWJ1dHRvblwiIHZhbHVlPVwiU2hvdyBMb2dzXCIgJyArXHJcbiAgICAgICdpZD1cIkhlbHBlcjpTaG93TG9nc1wiPjwvdGQ+PC90cj4nICtcclxuXHJcbiAgICBzaW1wbGVDaGVja2JveCgnc2hvd0NvbWJhdExvZycpICtcclxuICAgIHNpbXBsZUNoZWNrYm94KCdlbmFibGVDcmVhdHVyZUNvbG9yaW5nJykgK1xyXG4gICAgc2ltcGxlQ2hlY2tib3goJ3Nob3dDcmVhdHVyZUluZm8nKSArXHJcblxyXG4gICAgY29tYmF0RXZhbEJpYXMoKSArXHJcblxyXG4gICAgJzx0cj48dGQgY2xhc3M9XCJmc2hSaWdodFwiPicgKyBuZXR3b3JrSWNvbiArICdLZWVwIENyZWF0dXJlIExvZycgK1xyXG4gICAgICBoZWxwTGluaygnS2VlcCBDcmVhdHVyZSBMb2cnLFxyXG4gICAgICAgICdUaGlzIHdpbGwgc2hvdyB0aGUgY3JlYXR1cmUgbG9nIGZvciBlYWNoIGNyZWF0dXJlIHlvdSBzZWUgd2hlbiAnICtcclxuICAgICAgICAneW91IHRyYXZlbC4nKSArXHJcbiAgICAgICc6PC90ZD48dGQ+PGlucHV0IG5hbWU9XCJzaG93TW9uc3RlckxvZ1wiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwib25cIicgK1xyXG4gICAgICBpc0NoZWNrZWQoZ2V0VmFsdWUoJ3Nob3dNb25zdGVyTG9nJykpICsgJz4nICtcclxuICAgICAgJyZuYnNwOyZuYnNwOzxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJjdXN0b21idXR0b25cIiAnICtcclxuICAgICAgJ3ZhbHVlPVwiU2hvd1wiIGlkPVwiSGVscGVyOlNob3dNb25zdGVyTG9nc1wiPjwvdGQ+PC90cj4nICtcclxuXHJcbiAgICAnPHRyPjx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+U2hvdyBTZW5kIEdvbGQnICtcclxuICAgICAgaGVscExpbmsoJ1Nob3cgR29sZCBvbiBXb3JsZCBTY3JlZW4nLFxyXG4gICAgICAgICdUaGlzIHdpbGwgc2hvdyBhbiBpY29uIGJlbG93IHRoZSB3b3JsZCBtYXAgdG8gYWxsb3cgeW91IHRvICcgK1xyXG4gICAgICAgICdxdWlja2x5IHNlbmQgZ29sZCB0byBhIEZyaWVuZC4nKSArXHJcbiAgICAgICc6PC90ZD48dGQ+PGlucHV0IG5hbWU9XCJzZW5kR29sZG9uV29ybGRcIiB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT1cIm9uXCInICtcclxuICAgICAgaXNDaGVja2VkKGdldFZhbHVlKCdzZW5kR29sZG9uV29ybGQnKSkgKyAnPicgK1xyXG4gICAgICAnJm5ic3A7Jm5ic3A7U2VuZCA8aW5wdXQgbmFtZT1cImdvbGRBbW91bnRcIiBzaXplPVwiNVwiIHZhbHVlPVwiJyArXHJcbiAgICAgIGdldFZhbHVlKCdnb2xkQW1vdW50JykgKyAnXCI+ICcgK1xyXG4gICAgICAnZ29sZCB0byA8aW5wdXQgbmFtZT1cImdvbGRSZWNpcGllbnRcIiBzaXplPVwiMTBcIiB2YWx1ZT1cIicgK1xyXG4gICAgICBnZXRWYWx1ZSgnZ29sZFJlY2lwaWVudCcpICsgJ1wiPicgK1xyXG4gICAgICAnIEN1cnJlbnQgdG90YWw6IDxpbnB1dCBuYW1lPVwiY3VycmVudEdvbGRTZW50VG90YWxcIiBzaXplPVwiNVwiIHZhbHVlPVwiJyArXHJcbiAgICAgIGdldFZhbHVlKCdjdXJyZW50R29sZFNlbnRUb3RhbCcpICsgJ1wiPicgK1xyXG4gICAgICAnPC90ZD48L3RyPicgK1xyXG5cclxuICAgICc8dHI+PHRkIGNsYXNzPVwiZnNoUmlnaHRcIj5EbyBOb3QgS2lsbCBMaXN0JyArXHJcbiAgICAgIGhlbHBMaW5rKCdEbyBOb3QgS2lsbCBMaXN0JyxcclxuICAgICAgICAnTGlzdCBvZiBjcmVhdHVyZXMgdGhhdCB3aWxsIG5vdCBiZSBraWxsZWQgYnkgcXVpY2sga2lsbC4gJyArXHJcbiAgICAgICAgJ1lvdSBtdXN0IHR5cGUgdGhlIGZ1bGwgbmFtZSBvZiBlYWNoIGNyZWF0dXJlLCBzZXBhcmF0ZWQgYnkgY29tbWFzLiAnICtcclxuICAgICAgICAnQ3JlYXR1cmUgbmFtZSB3aWxsIHNob3cgdXAgaW4gcmVkIGNvbG9yIG9uIHdvcmxkIHNjcmVlbiBhbmQgd2lsbCAnICtcclxuICAgICAgICAnbm90IGJlIGtpbGxlZCBieSBrZXlib2FyZCBlbnRyeSAoYnV0IGNhbiBzdGlsbCBiZSBraWxsZWQgYnkgJyArXHJcbiAgICAgICAgJ21vdXNlY2xpY2spLiBRdWljayBraWxsIG11c3QgYmUgZW5hYmxlZCBmb3IgdGhpcyBmdW5jdGlvbiB0byB3b3JrLicpICtcclxuICAgICAgJzo8L3RkPjx0ZCBjb2xzcGFuPVwiM1wiPjxpbnB1dCBuYW1lPVwiZG9Ob3RLaWxsTGlzdFwiIHNpemU9XCI2MFwiIHZhbHVlPVwiJyArXHJcbiAgICAgIGNhbGYuZG9Ob3RLaWxsTGlzdCArICdcIj48L3RkPjwvdHI+JyArXHJcblxyXG4gICAgaHVudGluZ0J1ZmZzKCkgK1xyXG5cclxuICAgICc8dHI+PHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4nICsgY2FsZi5idWZmc05hbWUgKyAnIEh1bnRpbmcgQnVmZiBMaXN0JyArXHJcbiAgICAgIGhlbHBMaW5rKGNhbGYuYnVmZnNOYW1lICsgJyBIdW50aW5nIEJ1ZmYgTGlzdCcsXHJcbiAgICAgICAgY2FsZi5idWZmc05hbWUgKyAnIGxpc3Qgb2YgaHVudGluZyBidWZmcy4nKSArXHJcbiAgICAgICc6PC90ZD48dGQgY29sc3Bhbj1cIjNcIj48aW5wdXQgbmFtZT1cImh1bnRpbmdCdWZmc05hbWVcIiAnICtcclxuICAgICAgJ3RpdGxlPVwiSHVudGluZyBtb2RlIG5hbWVcIiBzaXplPVwiN1wiIHZhbHVlPVwiJyArIGNhbGYuYnVmZnNOYW1lICtcclxuICAgICAgJ1wiPjxpbnB1dCBuYW1lPVwiaHVudGluZ0J1ZmZzXCIgc2l6ZT1cIjQ5XCIgdmFsdWU9XCInICsgY2FsZi5idWZmcyArXHJcbiAgICAgICdcIj48L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+JyArIGNhbGYuYnVmZnMyTmFtZSArICcgSHVudGluZyBCdWZmIExpc3QnICtcclxuICAgICAgaGVscExpbmsoY2FsZi5idWZmczJOYW1lICsgJyBIdW50aW5nIEJ1ZmYgTGlzdCcsXHJcbiAgICAgICAgJ0xpc3Qgb2YgJyArIGNhbGYuYnVmZnMyTmFtZSArICcgaHVudGluZyBidWZmcy4nKSArXHJcbiAgICAgICc6PC90ZD48dGQgY29sc3Bhbj1cIjNcIj48aW5wdXQgbmFtZT1cImh1bnRpbmdCdWZmczJOYW1lXCIgJyArXHJcbiAgICAgICd0aXRsZT1cIkh1bnRpbmcgbW9kZSBuYW1lXCIgc2l6ZT1cIjdcIiB2YWx1ZT1cIicgKyBjYWxmLmJ1ZmZzMk5hbWUgK1xyXG4gICAgICAnXCI+PGlucHV0IG5hbWU9XCJodW50aW5nQnVmZnMyXCIgc2l6ZT1cIjQ5XCIgdmFsdWU9XCInICsgY2FsZi5idWZmczIgK1xyXG4gICAgICAnXCI+PC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQgY2xhc3M9XCJmc2hSaWdodFwiPicgKyBjYWxmLmJ1ZmZzM05hbWUgKyAnIEh1bnRpbmcgQnVmZiBMaXN0JyArXHJcbiAgICAgIGhlbHBMaW5rKGNhbGYuYnVmZnMzTmFtZSArICcgSHVudGluZyBCdWZmIExpc3QnLFxyXG4gICAgICAgICdMaXN0IG9mICcgKyBjYWxmLmJ1ZmZzM05hbWUgKyAnIGh1bnRpbmcgYnVmZnMuJykgK1xyXG4gICAgICAnOjwvdGQ+PHRkIGNvbHNwYW49XCIzXCI+PGlucHV0IG5hbWU9XCJodW50aW5nQnVmZnMzTmFtZVwiICcgK1xyXG4gICAgICAndGl0bGU9XCJIdW50aW5nIG1vZGUgbmFtZVwiIHNpemU9XCI3XCIgdmFsdWU9XCInICsgY2FsZi5idWZmczNOYW1lICtcclxuICAgICAgJ1wiPjxpbnB1dCBuYW1lPVwiaHVudGluZ0J1ZmZzM1wiIHNpemU9XCI0OVwiIHZhbHVlPVwiJyArIGNhbGYuYnVmZnMzICtcclxuICAgICAgJ1wiPjwvdGQ+PC90cj4nICtcclxuXHJcbiAgICBzaW1wbGVDaGVja2JveCgnaHVudGluZ01vZGUnKTtcclxufVxyXG4iLCJpbXBvcnQge2dldFZhbHVlLCBpc0NoZWNrZWR9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtoZWxwTGluaywgc2ltcGxlQ2hlY2tib3h9IGZyb20gJy4vc2V0dGluZ3NQYWdlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb2ZpbGVQcmVmcygpIHtcclxuICAvLyBwcm9maWxlIHByZWZzXHJcbiAgcmV0dXJuICc8dHI+PHRoIGNvbHNwYW49XCIyXCI+PGI+UHJvZmlsZSBwcmVmZXJlbmNlczwvYj48L3RoPjwvdHI+JyArXHJcblxyXG4gICAgc2ltcGxlQ2hlY2tib3goJ3JlbmRlclNlbGZCaW8nKSArXHJcbiAgICBzaW1wbGVDaGVja2JveCgncmVuZGVyT3RoZXJCaW9zJykgK1xyXG5cclxuICAgICc8dHI+PHRkIGNsYXNzPVwiZnNoUmlnaHRcIj5FbmFibGUgQmlvIENvbXByZXNzb3InICtcclxuICAgICAgaGVscExpbmsoJ0VuYWJsZSBCaW8gQ29tcHJlc3NvcicsXHJcbiAgICAgICAgJ1RoaXMgd2lsbCBjb21wcmVzcyBsb25nIGJpb3MgYWNjb3JkaW5nIHRvIHNldHRpbmdzIGFuZCBwcm92aWRlIGEgJyArXHJcbiAgICAgICAgJ2xpbmsgdG8gZXhwYW5kIHRoZSBjb21wcmVzc2VkIHNlY3Rpb24uJykgK1xyXG4gICAgICAnOjwvdGQ+PHRkPjxpbnB1dCBuYW1lPVwiZW5hYmxlQmlvQ29tcHJlc3NvclwiIHR5cGU9XCJjaGVja2JveFwiICcgK1xyXG4gICAgICAndmFsdWU9XCJvblwiJyArXHJcbiAgICAgIGlzQ2hlY2tlZChnZXRWYWx1ZSgnZW5hYmxlQmlvQ29tcHJlc3NvcicpKSArXHJcbiAgICAgICc+IE1heCBDaGFyYWN0ZXJzOjxpbnB1dCBuYW1lPVwibWF4Q29tcHJlc3NlZENoYXJhY3RlcnNcIiBzaXplPVwiNFwiICcgK1xyXG4gICAgICAndmFsdWU9XCInICsgZ2V0VmFsdWUoJ21heENvbXByZXNzZWRDaGFyYWN0ZXJzJykgKyAnXCIgLz4nICtcclxuICAgICAgJyBNYXggTGluZXM6PGlucHV0IG5hbWU9XCJtYXhDb21wcmVzc2VkTGluZXNcIiBzaXplPVwiM1wiIHZhbHVlPVwiJyArXHJcbiAgICAgIGdldFZhbHVlKCdtYXhDb21wcmVzc2VkTGluZXMnKSArICdcIj48L3RkPjwvdHI+JyArXHJcblxyXG4gICAgJzx0cj48dGQgY2xhc3M9XCJmc2hSaWdodFwiPkJ1eSBCdWZmcyBHcmVldGluZycgK1xyXG4gICAgICBoZWxwTGluaygnQnV5IEJ1ZmZzIEdyZWV0aW5nJyxcclxuICAgICAgICAnVGhpcyBpcyB0aGUgZGVmYXVsdCB0ZXh0IHRvIG9wZW4gYSBtZXNzYWdlIHdpdGggd2hlbiBhc2tpbmcgdG8gJyArXHJcbiAgICAgICAgJ2J1eSBidWZmcy4gWW91IGNhbiB1c2Uge3BsYXllcm5hbWV9IHRvIGluc2VydCB0aGUgdGFyZ2V0IHBsYXllcnMgJyArXHJcbiAgICAgICAgJ25hbWUuIFlvdSBjYW4gYWxzbyB1c2Uge2J1ZmZzfSB0byBpbnNlcnQgdGhlIGxpc3Qgb2YgYnVmZnMuIFlvdSAnICtcclxuICAgICAgICAnY2FuIHVzZSB7Y29zdH0gdG8gaW5zZXJ0IHRoZSB0b3RhbCBjb3N0IG9mIHRoZSBidWZmcy4nKSArXHJcbiAgICAgICc6PC90ZD48dGQgY29sc3Bhbj1cIjNcIj48aW5wdXQgbmFtZT1cImJ1eUJ1ZmZzR3JlZXRpbmdcIiBzaXplPVwiNjBcIiAnICtcclxuICAgICAgJ3ZhbHVlPVwiJyArIGdldFZhbHVlKCdidXlCdWZmc0dyZWV0aW5nJykgKyAnXCI+PC90ZD48L3RyPicgK1xyXG5cclxuICAgIHNpbXBsZUNoZWNrYm94KCdzaG93U3RhdEJvbnVzVG90YWwnKSArXHJcbiAgICBzaW1wbGVDaGVja2JveCgnZW5hYmxlUXVpY2tEcmluaycpICtcclxuICAgIHNpbXBsZUNoZWNrYm94KCdkaXNhYmxlRGVhY3RpdmF0ZVByb21wdHMnKTtcclxufVxyXG4iLCJpbXBvcnQge2dldFZhbHVlLCBpc0NoZWNrZWR9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtoZWxwTGluaywgc2ltcGxlQ2hlY2tib3h9IGZyb20gJy4vc2V0dGluZ3NQYWdlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHF1ZXN0UHJlZnMoKSB7XHJcbiAgLy8gUXVlc3QgUHJlZmVyZW5jZXNcclxuICByZXR1cm4gJzx0cj48dGggY29sc3Bhbj1cIjJcIj48Yj5RdWVzdCBwcmVmZXJlbmNlczwvYj48L3RoPjwvdHI+JyArXHJcblxyXG4gICAgJzx0cj48dGQgY2xhc3M9XCJmc2hSaWdodFwiPkhpZGUgU3BlY2lmaWMgUXVlc3RzJyArXHJcbiAgICAgIGhlbHBMaW5rKCdIaWRlIFNwZWNpZmljIFF1ZXN0cycsXHJcbiAgICAgICAgJ0lmIGVuYWJsZWQsIHRoaXMgaGlkZXMgcXVlc3RzIHdob3NlIG5hbWUgbWF0Y2hlcyB0aGUgbGlzdCAnICtcclxuICAgICAgICAnKHNlcGFyYXRlZCBieSBjb21tYXMpLiBUaGlzIHdvcmtzIG9uIFF1ZXN0IE1hbmFnZXIgYW5kIFF1ZXN0IEJvb2suJykgK1xyXG4gICAgICAnOjwvdGQ+PHRkIGNvbHNwYW49XCIzXCI+PGlucHV0IG5hbWU9XCJoaWRlUXVlc3RzXCIgdHlwZT1cImNoZWNrYm94XCIgJyArXHJcbiAgICAgICd2YWx1ZT1cIm9uXCInICtcclxuICAgICAgaXNDaGVja2VkKGdldFZhbHVlKCdoaWRlUXVlc3RzJykpICsgJz4nICtcclxuICAgICAgJyZuYnNwOzxpbnB1dCBuYW1lPVwiaGlkZVF1ZXN0TmFtZXNcIiBzaXplPVwiNjBcIiB2YWx1ZT1cIicgK1xyXG4gICAgICBnZXRWYWx1ZSgnaGlkZVF1ZXN0TmFtZXMnKSArICdcIj48L3RkPjwvdHI+JyArXHJcblxyXG4gICAgc2ltcGxlQ2hlY2tib3goJ3N0b3JlTGFzdFF1ZXN0UGFnZScpICtcclxuICAgIHNpbXBsZUNoZWNrYm94KCdzaG93TmV4dFF1ZXN0U3RlcHMnKTtcclxufVxyXG4iLCJpbXBvcnQgYm91bnR5UHJlZnMgZnJvbSAnLi9ib3VudHlQcmVmcyc7XHJcbmltcG9ydCBjYWxmIGZyb20gJy4uL3N1cHBvcnQvY2FsZic7XHJcbmltcG9ydCBlcXVpcFByZWZzIGZyb20gJy4vZXF1aXBQcmVmcyc7XHJcbmltcG9ydCBnZW5lcmFsUHJlZnMgZnJvbSAnLi9nZW5lcmFsUHJlZnMnO1xyXG5pbXBvcnQgZ3VpbGRQcmVmcyBmcm9tICcuL2d1aWxkUHJlZnMnO1xyXG5pbXBvcnQgbG9nUHJlZnMgZnJvbSAnLi9sb2dQcmVmcyc7XHJcbmltcG9ydCBvdGhlclByZWZzIGZyb20gJy4vb3RoZXJQcmVmcyc7XHJcbmltcG9ydCB7cHJlZnN9IGZyb20gJy4vd29ybGRQcmVmcyc7XHJcbmltcG9ydCBwcm9maWxlUHJlZnMgZnJvbSAnLi9wcm9maWxlUHJlZnMnO1xyXG5pbXBvcnQgcXVlc3RQcmVmcyBmcm9tICcuL3F1ZXN0UHJlZnMnO1xyXG5pbXBvcnQge3NlcnZlcn0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0dXBDb25maWdEYXRhKCkge1xyXG4gIGNhbGYuY29uZmlnRGF0YSA9XHJcbiAgICAnPGZvcm0+PHRhYmxlIGlkPVwiZnNoU2V0dGluZ3NUYWJsZVwiPicgK1xyXG4gICAgJzx0aGVhZD48dGggY29sc3Bhbj1cIjJcIj48Yj5GYWxsZW4gU3dvcmQgSGVscGVyIGNvbmZpZ3VyYXRpb24gJyArXHJcbiAgICAgICdTZXR0aW5nczwvYj48L3RoPjwvdGhlYWQ+JyArXHJcbiAgICAnPHRyPjx0ZCBhbGlnbj1jZW50ZXI+PGlucHV0IGlkPVwiZnNoQ2xlYXJTdG9yYWdlXCIgdHlwZT1cImJ1dHRvblwiICcgK1xyXG4gICAgICAnY2xhc3M9XCJhd2Vzb21lIG1hZ2VudGEgdGlwLXN0YXRpY1wiIHZhbHVlPVwiQ2xlYXIgU3RvcmFnZVwiICcgK1xyXG4gICAgICAnZGF0YS10aXBwZWQ9XCI8c3BhbiBjbGFzcz1cXCdmc2hIZWxwVGl0bGVcXCc+Q2xlYXIgU3RvcmFnZScgK1xyXG4gICAgICAnPC9zcGFuPjxicj48YnI+VGhpcyB3aWxsIGNsZWFyIGFsbCBsb2NhbFN0b3JhZ2UgcmVsYXRlZCB0byAnICtcclxuICAgICAgJ2ZhbGxlbnN3b3JkLmNvbTxicj5JdCB3aWxsIHJlc2V0IGFsbCB5b3VyIEhlbHBlciBzZXR0aW5ncyB0byAnICtcclxuICAgICAgJ2RlZmF1bHRzPGJyPlVzZSBpdCBpZiB5b3VyIHN0b3JhZ2UgaGFzIG92ZXJmbG93ZWQgb3IgYmVjb21lICcgK1xyXG4gICAgICAnY29ycnVwdFwiPjwvdGQ+PHRkIGFsaWduPWNlbnRlcj4nICtcclxuICAgICAgJzxzcGFuIHN0eWxlPVwiZm9udC1zaXplOngtc21hbGxcIj4oQ3VycmVudCB2ZXJzaW9uOiAnICtcclxuICAgICAgRlNILnZlcnNpb24gKyAnKCcgKyBGU0guY2FsZiArICcpKSAoU3RvcmFnZSBVc2VkOiAnICtcclxuICAgICAgY2FsZi5zdG9yYWdlICsgJyUgUmVtYWluaW5nOiAnICtcclxuICAgICAgKDEwMCAtIGNhbGYuc3RvcmFnZSkudG9GaXhlZCgyKSArICclKTwvc3Bhbj48L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZCBjb2xzcGFuPVwiMlwiIGFsaWduPWNlbnRlcj4nICtcclxuICAgICAgJzxzcGFuIHN0eWxlPVwiZm9udC13ZWlnaHQ6Ym9sZDtcIj5WaXNpdCB0aGUgJyArXHJcbiAgICAgICc8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2ZhbGxlbnN3b3JkaGVscGVyL2ZhbGxlbnN3b3JkaGVscGVyXCI+JyArXHJcbiAgICAgICdGYWxsZW4gU3dvcmQgSGVscGVyIHdlYiBzaXRlPC9hPiAnICtcclxuICAgICAgJ2ZvciBhbnkgc3VnZ2VzdGlvbnMsIHJlcXVlc3RzIG9yIGJ1ZyByZXBvcnRzPC9zcGFuPjwvdGQ+PC90cj4nICtcclxuXHJcbiAgICAvLyBHZW5lcmFsIFByZWZzXHJcbiAgICBnZW5lcmFsUHJlZnMoKSArXHJcblxyXG4gICAgLy8gR3VpbGQgTWFuYWdlXHJcbiAgICBndWlsZFByZWZzKCkgK1xyXG5cclxuICAgIC8vIFdvcmxkIFNjcmVlblxyXG4gICAgcHJlZnMoKSArXHJcblxyXG4gICAgLy8gTG9nIHNjcmVlbiBwcmVmc1xyXG4gICAgbG9nUHJlZnMoKSArXHJcblxyXG4gICAgLy8gRXF1aXBtZW50IHNjcmVlbiBwcmVmc1xyXG4gICAgZXF1aXBQcmVmcygpICtcclxuXHJcbiAgICAvLyBRdWVzdCBQcmVmZXJlbmNlc1xyXG4gICAgcXVlc3RQcmVmcygpICtcclxuXHJcbiAgICAvLyBwcm9maWxlIHByZWZzXHJcbiAgICBwcm9maWxlUHJlZnMoKSArXHJcblxyXG4gICAgLy8gQm91bnR5IGh1bnRpbmcgcHJlZnNcclxuICAgIGJvdW50eVByZWZzKCkgK1xyXG5cclxuICAgIC8vIE90aGVyIHByZWZzXHJcbiAgICBvdGhlclByZWZzKCkgK1xyXG5cclxuICAgIC8vIHNhdmUgYnV0dG9uXHJcbiAgICAvLyBodHRwOi8vd3d3LmZhbGxlbnN3b3JkLmNvbS9pbmRleC5waHA/Y21kPW5vdGVwYWQmYmxhbms9MSZzdWJjbWQ9c2F2ZXNldHRpbmdzXHJcbiAgICAnPHRyPjx0ZCBjb2xzcGFuPVwiMlwiIGFsaWduPWNlbnRlcj48aW5wdXQgdHlwZT1cImJ1dHRvblwiIGNsYXNzPScgK1xyXG4gICAgICAnXCJjdXN0b21idXR0b25cIiB2YWx1ZT1cIlNhdmVcIiBpZD1cIkhlbHBlcjpTYXZlT3B0aW9uc1wiPjwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+PHRkIGNvbHNwYW49XCIyXCIgYWxpZ249Y2VudGVyPjxhIGhyZWY9XCInICsgc2VydmVyICtcclxuICAgICAgJ2luZGV4LnBocD9jbWQ9bm90ZXBhZCZibGFuaz0xJnN1YmNtZD1zYXZlc2V0dGluZ3NcIj5FeHBvcnQgb3IgTG9hZCAnICtcclxuICAgICAgJ1NldHRpbmdzITwvYT48L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZCBjb2xzcGFuPVwiMlwiIGFsaWduPWNlbnRlcj4nICtcclxuICAgICAgJzxzcGFuIHN0eWxlPVwiZm9udC1zaXplOnh4LXNtYWxsXCI+RmFsbGVuIFN3b3JkIEhlbHBlciB3YXMgY29kZWQgYnkgJyArXHJcbiAgICAgICc8YSBocmVmPVwiJyArIHNlcnZlciArXHJcbiAgICAgICdpbmRleC5waHA/Y21kPXByb2ZpbGUmcGxheWVyX2lkPTEzOTMzNDBcIj5Db2NjaW5lbGxhPC9hPiwgJyArXHJcbiAgICAgICc8YSBocmVmPVwiJyArIHNlcnZlciArXHJcbiAgICAgICdpbmRleC5waHA/Y21kPXByb2ZpbGUmcGxheWVyX2lkPTE1OTk5ODdcIj55dXV6aGFuPC9hPiwgJyArXHJcbiAgICAgICc8YSBocmVmPVwiJyArIHNlcnZlciArXHJcbiAgICAgICdpbmRleC5waHA/Y21kPXByb2ZpbGUmcGxheWVyX2lkPTE5NjM1MTBcIj5Qb2ludHlIYWlyPC9hPiwgJyArXHJcbiAgICAgICc8YSBocmVmPVwiJyArIHNlcnZlciArXHJcbiAgICAgICdpbmRleC5waHA/Y21kPXByb2ZpbGUmcGxheWVyX2lkPTEzNDY4OTNcIj5UYW5ndG9wPC9hPiwgJyArXHJcbiAgICAgICc8YSBocmVmPVwiJyArIHNlcnZlciArXHJcbiAgICAgICdpbmRleC5waHA/Y21kPXByb2ZpbGUmcGxheWVyX2lkPTI1MzY2ODJcIj5ka3dpemFyZDwvYT4sICcgK1xyXG4gICAgICAnPGEgaHJlZj1cIicgKyBzZXJ2ZXIgK1xyXG4gICAgICAnaW5kZXgucGhwP2NtZD1wcm9maWxlJnBsYXllcl9pZD0xNTcwODU0XCI+amVzaWVnZWw8L2E+LCAnICtcclxuICAgICAgJzxhIGhyZWY9XCInICsgc2VydmVyICtcclxuICAgICAgJ2luZGV4LnBocD9jbWQ9cHJvZmlsZSZwbGF5ZXJfaWQ9MjE1Njg1OVwiPkJ5dGVCb3k8L2E+LCBhbmQgJyArXHJcbiAgICAgICc8YSBocmVmPVwiJyArIHNlcnZlciArXHJcbiAgICAgICdpbmRleC5waHA/Y21kPXByb2ZpbGUmcGxheWVyX2lkPTIxNjk0MDFcIj5NY0J1c2g8L2E+LCAnICtcclxuICAgICAgJ3dpdGggdmFsdWFibGUgY29udHJpYnV0aW9ucyBieSAnICtcclxuICAgICAgJzxhIGhyZWY9XCInICsgc2VydmVyICtcclxuICAgICAgJ2luZGV4LnBocD9jbWQ9cHJvZmlsZSZwbGF5ZXJfaWQ9NTI0NjYwXCI+TmFiYWxhYzwvYT4sICcgK1xyXG4gICAgICAnPGEgaHJlZj1cIicgKyBzZXJ2ZXIgK1xyXG4gICAgICAnaW5kZXgucGhwP2NtZD1wcm9maWxlJnBsYXllcl9pZD0zNzkwNVwiPkFuYW5hc2lpPC9hPjwvc3Bhbj48L3RkPjwvdHI+JyArXHJcbiAgICAnPC90YWJsZT48L2Zvcm0+JztcclxufVxyXG4iLCJpbXBvcnQgY2FsZiBmcm9tICcuLi9zdXBwb3J0L2NhbGYnO1xyXG5pbXBvcnQgaW5qZWN0TW9uc3RlckxvZyBmcm9tICcuLi9tb25zdG9yTG9nJztcclxuaW1wb3J0IGluamVjdE5vdGVwYWRTaG93TG9ncyBmcm9tICcuLi9jb21iYXRMb2cnO1xyXG5pbXBvcnQge2pDb25maXJtfSBmcm9tICcuLi9zdXBwb3J0L2xheW91dCc7XHJcbmltcG9ydCBqUXVlcnlEaWFsb2cgZnJvbSAnLi4vY2hyb21lL2pRdWVyeURpYWxvZyc7XHJcbmltcG9ydCBteVNpbXBsZUNoZWNrYm94ZXMgZnJvbSAnLi9zaW1wbGUnO1xyXG5pbXBvcnQgc2V0dXBDb25maWdEYXRhIGZyb20gJy4vY29uZmlnRGF0YSc7XHJcbmltcG9ydCB7Y3JlYXRlQnIsIGNyZWF0ZVNwYW59IGZyb20gJy4uL2NvbW1vbi9jRWxlbWVudCc7XHJcbmltcG9ydCB7XHJcbiAgZmFsbGJhY2ssXHJcbiAgZmluZE5vZGUsXHJcbiAgZ2V0VmFsdWUsXHJcbiAgaXNDaGVja2VkLFxyXG4gIHNldFZhbHVlLFxyXG4gIHRvZ2dsZVZpc2liaWx0eVxyXG59IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtuZXR3b3JrSWNvbiwgc2F2ZUJveGVzfSBmcm9tICcuL3NldHRpbmdPYmonO1xyXG5cclxuZnVuY3Rpb24gZ2V0VmFycygpIHtcclxuICBjYWxmLnNob3dCdWZmcyA9IGdldFZhbHVlKCdzaG93SHVudGluZ0J1ZmZzJyk7XHJcbiAgY2FsZi5idWZmcyA9IGdldFZhbHVlKCdodW50aW5nQnVmZnMnKTtcclxuICBjYWxmLmJ1ZmZzTmFtZSA9IGdldFZhbHVlKCdodW50aW5nQnVmZnNOYW1lJyk7XHJcbiAgY2FsZi5idWZmczIgPSBnZXRWYWx1ZSgnaHVudGluZ0J1ZmZzMicpO1xyXG4gIGNhbGYuYnVmZnMyTmFtZSA9IGdldFZhbHVlKCdodW50aW5nQnVmZnMyTmFtZScpO1xyXG4gIGNhbGYuYnVmZnMzID0gZ2V0VmFsdWUoJ2h1bnRpbmdCdWZmczMnKTtcclxuICBjYWxmLmJ1ZmZzM05hbWUgPSBnZXRWYWx1ZSgnaHVudGluZ0J1ZmZzM05hbWUnKTtcclxuICBjYWxmLmRvTm90S2lsbExpc3QgPSBnZXRWYWx1ZSgnZG9Ob3RLaWxsTGlzdCcpO1xyXG5cclxuICBjYWxmLmJvdW50eUxpc3RSZWZyZXNoVGltZSA9IGdldFZhbHVlKCdib3VudHlMaXN0UmVmcmVzaFRpbWUnKTtcclxuICBjYWxmLndhbnRlZE5hbWVzID0gZ2V0VmFsdWUoJ3dhbnRlZE5hbWVzJyk7XHJcbiAgY2FsZi5jb21iYXRFdmFsdWF0b3JCaWFzID0gZ2V0VmFsdWUoJ2NvbWJhdEV2YWx1YXRvckJpYXMnKTtcclxuICBjYWxmLmVuYWJsZWRIdW50aW5nTW9kZSA9IGdldFZhbHVlKCdlbmFibGVkSHVudGluZ01vZGUnKTtcclxuICBjYWxmLnN0b3JhZ2UgPSAoSlNPTi5zdHJpbmdpZnkobG9jYWxTdG9yYWdlKS5sZW5ndGggL1xyXG4gICAgKDUgKiAxMDI0ICogMTAyNCkgKiAxMDApLnRvRml4ZWQoMik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoZWxwTGluayh0aXRsZSwgdGV4dCkge1xyXG4gIHJldHVybiAnJm5ic3A7WyZuYnNwOzxzcGFuIGNsYXNzPVwiZnNoTGluayB0aXAtc3RhdGljXCIgZGF0YS10aXBwZWQ9XCInICtcclxuICAgICc8c3BhbiBjbGFzcz1cXCdmc2hIZWxwVGl0bGVcXCc+JyArIHRpdGxlICsgJzwvc3Bhbj48YnI+PGJyPicgK1xyXG4gICAgdGV4dCArICdcIj4/PC9zcGFuPiZuYnNwO10nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYXNOZXR3b3JrKG8pIHtcclxuICBpZiAoby5uZXR3b3JrKSB7cmV0dXJuIG5ldHdvcmtJY29uO31cclxuICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzT24obykge1xyXG4gIHJldHVybiBpc0NoZWNrZWQoZ2V0VmFsdWUoby5pZCkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBqdXN0TGFiZWwobmFtZSkge1xyXG4gIHZhciBvID0gbXlTaW1wbGVDaGVja2JveGVzW25hbWVdO1xyXG4gIHJldHVybiBoYXNOZXR3b3JrKG8pICtcclxuICAgICc8bGFiZWwgZm9yPVwiJyArIG8uaWQgKyAnXCI+JyArIGZhbGxiYWNrKG8udGl0bGUsIG8uaGVscFRpdGxlKSArXHJcbiAgICBoZWxwTGluayhvLmhlbHBUaXRsZSwgby5oZWxwVGV4dCkgK1xyXG4gICAgJzo8L2xhYmVsPic7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGp1c3RDaGVja2JveChuYW1lKSB7XHJcbiAgdmFyIG8gPSBteVNpbXBsZUNoZWNrYm94ZXNbbmFtZV07XHJcbiAgcmV0dXJuICc8aW5wdXQgaWQ9XCInICsgby5pZCArICdcIiBuYW1lPVwiJyArIG8uaWQgK1xyXG4gICAgJ1wiIGNsYXNzPVwiZnNoVk1pZFwiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwib25cIicgKyBpc09uKG8pICsgJz4nO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2ltcGxlQ2hlY2tib3hIdG1sKG5hbWUpIHtcclxuICByZXR1cm4ganVzdExhYmVsKG5hbWUpICsganVzdENoZWNrYm94KG5hbWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2ltcGxlQ2hlY2tib3gobmFtZSkge1xyXG4gIHJldHVybiAnPHRyPjx0ZCBhbGlnbj1cInJpZ2h0XCI+JyArIGp1c3RMYWJlbChuYW1lKSArXHJcbiAgICAnPC90ZD48dGQ+JyArIGp1c3RDaGVja2JveChuYW1lKSArICc8L3RkPjwvdHI+JztcclxufVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlVGlja0FsbEJ1ZmZzKGUpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIGFsbEl0ZW1zID0gJCgnaW5wdXRbbmFtZV49XCJibG9ja2VkU2tpbGxMaXN0XCJdOnZpc2libGUnLFxyXG4gICAgJyNzZXR0aW5nc1RhYnMtNCcpO1xyXG4gIHZhciB0Y2tUeHQgPSAkKGUudGFyZ2V0KTtcclxuICBhbGxJdGVtcy5wcm9wKCdjaGVja2VkJywgdGNrVHh0LnRleHQoKSA9PT0gJ1RpY2sgYWxsIGJ1ZmZzJyk7XHJcbiAgaWYgKHRja1R4dC50ZXh0KCkgPT09ICdUaWNrIGFsbCBidWZmcycpIHtcclxuICAgIHRja1R4dC50ZXh0KCdVbnRpY2sgYWxsIGJ1ZmZzJyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRja1R4dC50ZXh0KCdUaWNrIGFsbCBidWZmcycpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2xlYXJTdG9yYWdlKCkge1xyXG4gIGpDb25maXJtKCdDbGVhciBsb2NhbFN0b3JhZ2UnLFxyXG4gICAgJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBjbGVhciB5b3UgbG9jYWxTdG9yYWdlPycsXHJcbiAgICBmdW5jdGlvbigpIHtsb2NhbFN0b3JhZ2UuY2xlYXIoKTt9XHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2F2ZVZhbHVlRm9ybShvRm9ybSwgbmFtZSkgeyAvLyBMZWdhY3lcclxuICB2YXIgZm9ybUVsZW1lbnQgPVxyXG4gICAgZmluZE5vZGUoJy8vaW5wdXRbQG5hbWU9XCInICsgbmFtZSArICdcIl0nLCBvRm9ybSk7XHJcbiAgaWYgKGZvcm1FbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpID09PSAnY2hlY2tib3gnKSB7XHJcbiAgICBzZXRWYWx1ZShuYW1lLCBmb3JtRWxlbWVudC5jaGVja2VkKTtcclxuICB9IGVsc2Uge1xyXG4gICAgc2V0VmFsdWUobmFtZSwgZm9ybUVsZW1lbnQudmFsdWUpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0TWF4Q29tcHJlc3NlZENoYXJhY3RlcnMob0Zvcm0pIHsgLy8gTGVnYWN5XHJcbiAgdmFyIG1heENvbXByZXNzZWRDaGFyYWN0ZXJzID1cclxuICAgIGZpbmROb2RlKCcvL2lucHV0W0BuYW1lPVwibWF4Q29tcHJlc3NlZENoYXJhY3RlcnNcIl0nLCBvRm9ybSk7XHJcbiAgdmFyIG1heENvbXByZXNzZWRDaGFyYWN0ZXJzVmFsdWUgPSBOdW1iZXIobWF4Q29tcHJlc3NlZENoYXJhY3RlcnMudmFsdWUpO1xyXG4gIGlmIChpc05hTihtYXhDb21wcmVzc2VkQ2hhcmFjdGVyc1ZhbHVlKSB8fFxyXG4gICAgICBtYXhDb21wcmVzc2VkQ2hhcmFjdGVyc1ZhbHVlIDw9IDUwKSB7XHJcbiAgICBtYXhDb21wcmVzc2VkQ2hhcmFjdGVycy52YWx1ZSA9IDE1MDA7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRNYXhDb21wcmVzc2VkTGluZXMob0Zvcm0pIHsgLy8gTGVnYWN5XHJcbiAgdmFyIG1heENvbXByZXNzZWRMaW5lcyA9XHJcbiAgICBmaW5kTm9kZSgnLy9pbnB1dFtAbmFtZT1cIm1heENvbXByZXNzZWRMaW5lc1wiXScsIG9Gb3JtKTtcclxuICB2YXIgbWF4Q29tcHJlc3NlZExpbmVzVmFsdWUgPSBOdW1iZXIobWF4Q29tcHJlc3NlZExpbmVzLnZhbHVlKTtcclxuICBpZiAoaXNOYU4obWF4Q29tcHJlc3NlZExpbmVzVmFsdWUpIHx8IG1heENvbXByZXNzZWRMaW5lc1ZhbHVlIDw9IDEpIHtcclxuICAgIG1heENvbXByZXNzZWRMaW5lcy52YWx1ZSA9IDI1O1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0R3VpbGRMb2dIaXN0b3J5UGFnZXMob0Zvcm0pIHsgLy8gTGVnYWN5XHJcbiAgdmFyIG5ld0d1aWxkTG9nSGlzdG9yeVBhZ2VzID1cclxuICAgIGZpbmROb2RlKCcvL2lucHV0W0BuYW1lPVwibmV3R3VpbGRMb2dIaXN0b3J5UGFnZXNcIl0nLCBvRm9ybSk7XHJcbiAgdmFyIG5ld0d1aWxkTG9nSGlzdG9yeVBhZ2VzVmFsdWUgPSBOdW1iZXIobmV3R3VpbGRMb2dIaXN0b3J5UGFnZXMudmFsdWUpO1xyXG4gIGlmIChpc05hTihuZXdHdWlsZExvZ0hpc3RvcnlQYWdlc1ZhbHVlKSB8fFxyXG4gICAgICBuZXdHdWlsZExvZ0hpc3RvcnlQYWdlc1ZhbHVlIDw9IDEpIHtcclxuICAgIG5ld0d1aWxkTG9nSGlzdG9yeVBhZ2VzLnZhbHVlID0gMjU7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRNYXhHcm91cFNpemVUb0pvaW4ob0Zvcm0pIHsgLy8gTGVnYWN5XHJcbiAgdmFyIG1heEdyb3VwU2l6ZVRvSm9pbiA9XHJcbiAgICBmaW5kTm9kZSgnLy9pbnB1dFtAbmFtZT1cIm1heEdyb3VwU2l6ZVRvSm9pblwiXScsIG9Gb3JtKTtcclxuICB2YXIgbWF4R3JvdXBTaXplVG9Kb2luVmFsdWUgPSBOdW1iZXIobWF4R3JvdXBTaXplVG9Kb2luLnZhbHVlKTtcclxuICBpZiAoaXNOYU4obWF4R3JvdXBTaXplVG9Kb2luVmFsdWUpIHx8IG1heEdyb3VwU2l6ZVRvSm9pblZhbHVlIDw9IDEpIHtcclxuICAgIG1heEdyb3VwU2l6ZVRvSm9pbi52YWx1ZSA9IDExO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2F2ZUNvbmZpZyhldnQpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIG9Gb3JtID0gZXZ0LnRhcmdldC5mb3JtO1xyXG4gIC8vIGJpbyBjb21wcmVzc29yIHZhbGlkYXRpb24gbG9naWNcclxuICBzZXRNYXhDb21wcmVzc2VkQ2hhcmFjdGVycyhvRm9ybSk7XHJcbiAgc2V0TWF4Q29tcHJlc3NlZExpbmVzKG9Gb3JtKTtcclxuICBzZXRHdWlsZExvZ0hpc3RvcnlQYWdlcyhvRm9ybSk7XHJcbiAgc2V0TWF4R3JvdXBTaXplVG9Kb2luKG9Gb3JtKTtcclxuICB2YXIgY29tYmF0RXZhbHVhdG9yQmlhc0VsZW1lbnQgPVxyXG4gICAgZmluZE5vZGUoJy8vc2VsZWN0W0BuYW1lPVwiY29tYmF0RXZhbHVhdG9yQmlhc1wiXScsIG9Gb3JtKTtcclxuICB2YXIgY29tYmF0RXZhbHVhdG9yQmlhcyA9IE51bWJlcihjb21iYXRFdmFsdWF0b3JCaWFzRWxlbWVudC52YWx1ZSk7XHJcbiAgc2V0VmFsdWUoJ2NvbWJhdEV2YWx1YXRvckJpYXMnLCBjb21iYXRFdmFsdWF0b3JCaWFzKTtcclxuICB2YXIgZW5hYmxlZEh1bnRpbmdNb2RlRWxlbWVudCA9XHJcbiAgICBmaW5kTm9kZSgnLy9zZWxlY3RbQG5hbWU9XCJlbmFibGVkSHVudGluZ01vZGVcIl0nLCBvRm9ybSk7XHJcbiAgdmFyIGVuYWJsZWRIdW50aW5nTW9kZSA9IGVuYWJsZWRIdW50aW5nTW9kZUVsZW1lbnQudmFsdWU7XHJcbiAgc2V0VmFsdWUoJ2VuYWJsZWRIdW50aW5nTW9kZScsIGVuYWJsZWRIdW50aW5nTW9kZSk7XHJcblxyXG4gIHNhdmVCb3hlcy5mb3JFYWNoKHNhdmVWYWx1ZUZvcm0uYmluZChudWxsLCBvRm9ybSkpO1xyXG5cclxuICAkKCcjZGlhbG9nX21zZycpLnRleHQoJ0ZTIEhlbHBlciBTZXR0aW5ncyBTYXZlZCcpLmRpYWxvZygnb3BlbicpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93TG9ncygpIHtcclxuICBqUXVlcnlEaWFsb2coaW5qZWN0Tm90ZXBhZFNob3dMb2dzKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd01vbnN0ZXJMb2dzKCkge1xyXG4gIGpRdWVyeURpYWxvZyhpbmplY3RNb25zdGVyTG9nKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgdmFyIHRpY2tBbGwgPSBjcmVhdGVTcGFuKHtcclxuICAgIGlkOiAnZnNoQWxsQnVmZnMnLFxyXG4gICAgY2xhc3NOYW1lOiAnZnNoTGluaycsXHJcbiAgICB0ZXh0Q29udGVudDogJ1RpY2sgYWxsIGJ1ZmZzJ1xyXG4gIH0pO1xyXG4gIHRpY2tBbGwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVUaWNrQWxsQnVmZnMpO1xyXG4gIHZhciBpbmplY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2V0dGluZ3NUYWJzLTQnKS5maXJzdEVsZW1lbnRDaGlsZFxyXG4gICAgLnJvd3NbMF0uY2VsbHNbMF07XHJcbiAgaW5qZWN0LmFwcGVuZENoaWxkKGNyZWF0ZUJyKCkpO1xyXG4gIGluamVjdC5hcHBlbmRDaGlsZCh0aWNrQWxsKTtcclxuXHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZzaENsZWFyU3RvcmFnZScpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGVhclN0b3JhZ2UpO1xyXG5cclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnSGVscGVyOlNhdmVPcHRpb25zJylcclxuICAgIC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNhdmVDb25maWcpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdIZWxwZXI6U2hvd0xvZ3MnKVxyXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2hvd0xvZ3MpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdIZWxwZXI6U2hvd01vbnN0ZXJMb2dzJylcclxuICAgIC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNob3dNb25zdGVyTG9ncyk7XHJcblxyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2dnbGVTaG93R3VpbGRTZWxmTWVzc2FnZScpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVWaXNpYmlsdHkpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2dnbGVTaG93R3VpbGRGcm5kTWVzc2FnZScpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVWaXNpYmlsdHkpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2dnbGVTaG93R3VpbGRQYXN0TWVzc2FnZScpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVWaXNpYmlsdHkpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2dnbGVTaG93R3VpbGRFbm15TWVzc2FnZScpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVWaXNpYmlsdHkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0U2V0dGluZ3MoKSB7IC8vIGpRdWVyeS5taW5cclxuICBnZXRWYXJzKCk7XHJcbiAgc2V0dXBDb25maWdEYXRhKCk7XHJcbiAgdmFyIHNldHRpbmdzVGFicyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZXR0aW5nc1RhYnMnKTtcclxuICBzZXR0aW5nc1RhYnMuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCAnPGRpdiBpZD1cImZzaFNldHRpbmdzXCI+JyArXHJcbiAgICBjYWxmLmNvbmZpZ0RhdGEgKyAnPC9kaXY+Jyk7XHJcbiAgaWYgKCQoc2V0dGluZ3NUYWJzKS50YWJzKCdsZW5ndGgnKSA+IDApIHtcclxuICAgICQoc2V0dGluZ3NUYWJzKS50YWJzKCdhZGQnLCAnI2ZzaFNldHRpbmdzJywgJ0ZTSCBTZXR0aW5ncycpO1xyXG4gIH1cclxuICBjcmVhdGVFdmVudExpc3RlbmVycygpO1xyXG4gIHNldFZhbHVlKCdtaW5Hcm91cExldmVsJywgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NldHRpbmdzVGFicy0xJylcclxuICAgIC5maXJzdEVsZW1lbnRDaGlsZC5sYXN0RWxlbWVudENoaWxkLnJvd3NbMV0uY2VsbHNbMV0uZmlyc3RFbGVtZW50Q2hpbGRcclxuICAgIC52YWx1ZSk7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9nZ2xlRm9yY2UoZWwsIGZvcmNlKSB7IC8vIFBvbHlmaWxsIFVDXHJcbiAgaWYgKGVsLmNsYXNzTGlzdC5jb250YWlucygnZnNoSGlkZScpICE9PSBmb3JjZSkge1xyXG4gICAgZWwuY2xhc3NMaXN0LnRvZ2dsZSgnZnNoSGlkZScpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge2luZm9Cb3h9IGZyb20gJy4vbGF5b3V0JztcclxuaW1wb3J0IHJldHJ5QWpheCBmcm9tICcuLi9hamF4L3JldHJ5QWpheCc7XHJcblxyXG52YXIgZGVmZXJyZWQgPSB3aW5kb3cuJCAmJiAkLndoZW4oKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkaWFsb2coZGF0YSkge1xyXG4gIGlmIChkYXRhLnIgPT09IDApIHtyZXR1cm47fVxyXG4gICQoJyNkaWFsb2dfbXNnJykuaHRtbChkYXRhLm0pLmRpYWxvZygnb3BlbicpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXF1aXBJdGVtKGJhY2twYWNrSW52SWQpIHtcclxuICByZXR1cm4gcmV0cnlBamF4KHtcclxuICAgIHVybDogJ2luZGV4LnBocCcsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIGNtZDogJ3Byb2ZpbGUnLFxyXG4gICAgICBzdWJjbWQ6ICdlcXVpcGl0ZW0nLFxyXG4gICAgICBpbnZlbnRvcnlfaWQ6IGJhY2twYWNrSW52SWQsXHJcbiAgICAgIGFqYXg6IDFcclxuICAgIH0sXHJcbiAgICBkYXRhVHlwZTogJ2pzb24nXHJcbiAgfSkuZG9uZShkaWFsb2cpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaHRtbFJlc3VsdChkYXRhKSB7IC8vIFRPRE8gY2hhbmdlIHRvIGFwcCBjb2RlIHRvIGF2b2lkIDMwMiByZWRpcmVjdFxyXG4gIHZhciBpbmZvID0gaW5mb0JveChkYXRhKTtcclxuICB2YXIgX3IgPSAxO1xyXG4gIGlmIChpbmZvLnNlYXJjaCgvKHN1Y2Nlc3NmdWxseXxnYWluZWR8Y29tcG9uZW50cykvKSAhPT0gLTEpIHtfciA9IDA7fVxyXG4gIHJldHVybiB7cjogX3IsIG06IGluZm99O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlSXRlbShiYWNrcGFja0ludklkKSB7XHJcbiAgcmV0dXJuIHJldHJ5QWpheCh7XHJcbiAgICB1cmw6ICdpbmRleC5waHAnLFxyXG4gICAgZGF0YToge1xyXG4gICAgICBjbWQ6ICdwcm9maWxlJyxcclxuICAgICAgc3ViY21kOiAndXNlaXRlbScsXHJcbiAgICAgIGludmVudG9yeV9pZDogYmFja3BhY2tJbnZJZFxyXG4gICAgfVxyXG4gIH0pLnBpcGUoaHRtbFJlc3VsdCkgLy8gVE9ETyBjaGFuZ2UgdG8gYXBwIGNvZGUgdG8gYXZvaWQgMzAyIHJlZGlyZWN0XHJcbiAgICAuZG9uZShkaWFsb2cpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRpdGlvbmFsQWN0aW9uKGFjdGlvbiwgZGF0YSkge1xyXG4gIGlmIChhY3Rpb24gPT09ICd3ZWFyJykge1xyXG4gICAgcmV0dXJuIGVxdWlwSXRlbShkYXRhLmIpXHJcbiAgICAgIC5waXBlKGZ1bmN0aW9uIGVxdWlwSXRlbVN0YXR1cygpIHtyZXR1cm4gZGF0YTt9KTtcclxuICAgIC8vIFJldHVybiB0YWtlaXRlbSBzdGF0dXMgaXJyZXNwZWN0aXZlIG9mIHRoZSBzdGF0dXMgb2YgdGhlIGVxdWlwaXRlbVxyXG4gIH1cclxuICBpZiAoYWN0aW9uID09PSAndXNlJykge1xyXG4gICAgcmV0dXJuIHVzZUl0ZW0oZGF0YS5iKVxyXG4gICAgICAucGlwZShmdW5jdGlvbiB1c2VJdGVtU3RhdHVzKCkge3JldHVybiBkYXRhO30pO1xyXG4gICAgLy8gUmV0dXJuIHRha2VpdGVtIHN0YXR1cyBpcnJlc3BlY3RpdmUgb2YgdGhlIHN0YXR1cyBvZiB0aGUgdXNlaXRlbVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdGFrZUl0ZW1TdGF0dXMoYWN0aW9uLCBkYXRhKSB7XHJcbiAgaWYgKGRhdGEuciA9PT0gMCAmJiBhY3Rpb24gIT09ICd0YWtlJykge1xyXG4gICAgcmV0dXJuIGFkZGl0aW9uYWxBY3Rpb24oYWN0aW9uLCBkYXRhKTtcclxuICB9XHJcbiAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0YWtlSXRlbShpbnZJZCkge1xyXG4gIHJldHVybiByZXRyeUFqYXgoe1xyXG4gICAgdXJsOiAnaW5kZXgucGhwJyxcclxuICAgIGRhdGE6IHtcclxuICAgICAgY21kOiAnZ3VpbGQnLFxyXG4gICAgICBzdWJjbWQ6ICdpbnZlbnRvcnknLFxyXG4gICAgICBzdWJjbWQyOiAndGFrZWl0ZW0nLFxyXG4gICAgICBndWlsZHN0b3JlX2lkOiBpbnZJZCxcclxuICAgICAgYWpheDogMVxyXG4gICAgfSxcclxuICAgIGRhdGFUeXBlOiAnanNvbidcclxuICB9KS5kb25lKGRpYWxvZyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBxdWV1ZVRha2VJdGVtKGludklkLCBhY3Rpb24pIHtcclxuICAvLyBZb3UgaGF2ZSB0byBjaGFpbiB0aGVtIGJlY2F1c2UgdGhleSBjb3VsZCBiZSBtb2RpZnlpbmcgdGhlIGJhY2twYWNrXHJcbiAgZGVmZXJyZWQgPSBkZWZlcnJlZC5waXBlKGZ1bmN0aW9uIHBpcGVUYWtlVG9RdWV1ZSgpIHtcclxuICAgIHJldHVybiB0YWtlSXRlbShpbnZJZCkucGlwZSh0YWtlSXRlbVN0YXR1cy5iaW5kKG51bGwsIGFjdGlvbikpO1xyXG4gIH0pO1xyXG4gIHJldHVybiBkZWZlcnJlZDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ3VpbGRJbnZSZWNhbGwoaW52SWQsIHBsYXllcklkLCBtb2RlKSB7XHJcbiAgcmV0dXJuIHJldHJ5QWpheCh7XHJcbiAgICB1cmw6ICdpbmRleC5waHAnLFxyXG4gICAgZGF0YToge1xyXG4gICAgICBjbWQ6ICdndWlsZCcsXHJcbiAgICAgIHN1YmNtZDogJ2ludmVudG9yeScsXHJcbiAgICAgIHN1YmNtZDI6ICdyZWNhbGwnLFxyXG4gICAgICBpZDogaW52SWQsXHJcbiAgICAgIHBsYXllcl9pZDogcGxheWVySWQsXHJcbiAgICAgIG1vZGU6IG1vZGVcclxuICAgIH1cclxuICB9KS5waXBlKGh0bWxSZXN1bHQpIC8vIFRPRE8gY2hhbmdlIHRvIGFwcCBjb2RlIHRvIGF2b2lkIDMwMiByZWRpcmVjdFxyXG4gICAgLmRvbmUoZGlhbG9nKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYmFja3BhY2soKSB7XHJcbiAgcmV0dXJuIHJldHJ5QWpheCh7XHJcbiAgICB1cmw6ICdpbmRleC5waHAnLFxyXG4gICAgZGF0YToge2NtZDogJ3Byb2ZpbGUnLCBzdWJjbWQ6ICdmZXRjaGludid9LFxyXG4gICAgZGF0YVR5cGU6ICdqc29uJ1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZWNhbGxJdGVtKG8pIHtcclxuICByZXR1cm4gZ3VpbGRJbnZSZWNhbGwoby5pbnZJZCwgby5wbGF5ZXJJZCwgby5tb2RlKVxyXG4gICAgLnBpcGUoZnVuY3Rpb24gcmVjYWxsSXRlbVN0YXR1cyhkYXRhKSB7XHJcbiAgICAgIGlmIChkYXRhLnIgPT09IDAgJiYgby5hY3Rpb24gIT09ICdyZWNhbGwnKSB7XHJcbiAgICAgICAgcmV0dXJuIGJhY2twYWNrKCkucGlwZShmdW5jdGlvbiBnb3RCYWNrcGFjayhicERhdGEpIHtcclxuICAgICAgICAgIC8vIFRPRE8gYXNzdW1pbmcgYmFja3BhY2sgaXMgc3VjY2Vzc2Z1bC4uLlxyXG4gICAgICAgICAgaWYgKG8uYWN0aW9uID09PSAnd2VhcicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVxdWlwSXRlbShicERhdGEuaXRlbXNbYnBEYXRhLml0ZW1zLmxlbmd0aCAtIDFdLmEpXHJcbiAgICAgICAgICAgICAgLnBpcGUoZnVuY3Rpb24gd2Vhckl0ZW1TdGF0dXMoKSB7cmV0dXJuIGRhdGE7fSk7XHJcbiAgICAgICAgICAgIC8vIFJldHVybiByZWNhbGwgc3RhdHVzIGlycmVzcGVjdGl2ZSBvZiB0aGUgc3RhdHVzIG9mIHRoZSBlcXVpcGl0ZW1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChvLmFjdGlvbiA9PT0gJ3VzZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZUl0ZW0oXHJcbiAgICAgICAgICAgICAgYnBEYXRhLml0ZW1zW2JwRGF0YS5pdGVtcy5sZW5ndGggLSAxXS5hKVxyXG4gICAgICAgICAgICAgIC5waXBlKGZ1bmN0aW9uIHVzZUl0ZW1TdGF0dXMoKSB7cmV0dXJuIGRhdGE7fSk7XHJcbiAgICAgICAgICAgIC8vIFJldHVybiByZWNhbGwgc3RhdHVzIGlycmVzcGVjdGl2ZSBvZiB0aGUgc3RhdHVzIG9mIHRoZSB1c2VpdGVtXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHF1ZXVlUmVjYWxsSXRlbShvKSB7XHJcbiAgLy8gWW91IGhhdmUgdG8gY2hhaW4gdGhlbSBiZWNhdXNlIHRoZXkgY291bGQgYmUgbW9kaWZ5aW5nIHRoZSBiYWNrcGFja1xyXG4gIGRlZmVycmVkID0gZGVmZXJyZWQucGlwZShmdW5jdGlvbiBwaXBlUmVjYWxsVG9RdWV1ZSgpIHtcclxuICAgIHJldHVybiByZWNhbGxJdGVtKG8pO1xyXG4gIH0pO1xyXG4gIHJldHVybiBkZWZlcnJlZDtcclxufVxyXG4iLCJpbXBvcnQge2NyZWF0ZURpdn0gZnJvbSAnLi4vY29tbW9uL2NFbGVtZW50JztcclxuaW1wb3J0IGNyZWF0ZVF1aWNrV2VhciBmcm9tICcuL2NyZWF0ZVF1aWNrV2Vhcic7XHJcbmltcG9ydCBsb2FkSW52ZW50b3J5IGZyb20gJy4uL2FwcC9wcm9maWxlL2xvYWRJbnZlbnRvcnknO1xyXG5pbXBvcnQgc2hvd0FISW52TWFuYWdlciBmcm9tICcuL3Nob3dBSEludk1hbmFnZXInO1xyXG5pbXBvcnQge3NpbXBsZUNoZWNrYm94SHRtbH0gZnJvbSAnLi4vc2V0dGluZ3Mvc2V0dGluZ3NQYWdlJztcclxuaW1wb3J0IHRvZ2dsZUZvcmNlIGZyb20gJy4uL2NvbW1vbi90b2dnbGVGb3JjZSc7XHJcbmltcG9ydCB7ZXF1aXBJdGVtLCB1c2VJdGVtfSBmcm9tICcuLi9zdXBwb3J0L2FqYXgnO1xyXG5pbXBvcnQge2dldFZhbHVlLCBzZXRWYWx1ZX0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5pbXBvcnQge2pDb25maXJtLCBwQ0N9IGZyb20gJy4uL3N1cHBvcnQvbGF5b3V0JztcclxuXHJcbnZhciBkaXNhYmxlUXVpY2tXZWFyUHJvbXB0cztcclxudmFyIGNvbnRlbnQ7XHJcbnZhciBpdGVtTGlzdDtcclxuXHJcbmZ1bmN0aW9uIGRvQWN0aW9uKHNlbGYsIGZuLCB2ZXJiKSB7IC8vIGpRdWVyeS5taW5cclxuICB2YXIgaW52SWQgPSBzZWxmLmRhdGFzZXQuaXRlbWlkO1xyXG4gIGZuKGludklkKS5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgIGlmIChkYXRhLnIgIT09IDApIHtyZXR1cm47fVxyXG4gICAgc2VsZi5wYXJlbnROb2RlLmlubmVySFRNTCA9ICc8c3BhbiBjbGFzcz1cImZhc3RXb3JuXCI+JyArIHZlcmIgKyAnPC9zcGFuPic7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvVXNlSXRlbShzZWxmKSB7XHJcbiAgZG9BY3Rpb24oc2VsZiwgdXNlSXRlbSwgJ1VzZWQnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXNlUHJvZmlsZUludmVudG9yeUl0ZW0oc2VsZikge1xyXG4gIGlmIChkaXNhYmxlUXVpY2tXZWFyUHJvbXB0cykge1xyXG4gICAgZG9Vc2VJdGVtKHNlbGYpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBqQ29uZmlybSgnVXNlL0V4dHJhY3QgSXRlbScsXHJcbiAgICAgICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gdXNlL2V4dHJhY3QgdGhlIGl0ZW0/JyxcclxuICAgICAgZG9Vc2VJdGVtLmJpbmQobnVsbCwgc2VsZilcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBlcXVpcFByb2ZpbGVJbnZlbnRvcnlJdGVtKHNlbGYpIHtcclxuICBkb0FjdGlvbihzZWxmLCBlcXVpcEl0ZW0sICdXb3JuJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb2Nlc3NJdGVtcyhmb2xkZXJJZCwgdGhpc0ZvbGRlciwgbykge1xyXG4gIHZhciB0ciA9IG8uZG9tO1xyXG4gIGlmIChmb2xkZXJJZCA9PT0gJzAnKSB7XHJcbiAgICB0ci5jbGFzc0xpc3QucmVtb3ZlKCdmc2hIaWRlJyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHZhciBmb3JjZSA9IGZvbGRlcklkICE9PSB0aGlzRm9sZGVyLnRvU3RyaW5nKCk7XHJcbiAgICB0b2dnbGVGb3JjZSh0ciwgZm9yY2UpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc0ZvbGRlcihmb2xkZXJJZCwgYUZvbGRlcikge1xyXG4gIHZhciB0aGlzRm9sZGVyID0gYUZvbGRlci5pZDtcclxuICBhRm9sZGVyLml0ZW1zLmZvckVhY2gocHJvY2Vzc0l0ZW1zLmJpbmQobnVsbCwgZm9sZGVySWQsIHRoaXNGb2xkZXIpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGlkZUZvbGRlcnMoc2VsZikge1xyXG4gIHZhciBmb2xkZXJJZCA9IHNlbGYuZGF0YXNldC5mb2xkZXI7XHJcbiAgaXRlbUxpc3Quci5mb3JFYWNoKHByb2Nlc3NGb2xkZXIuYmluZChudWxsLCBmb2xkZXJJZCkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0b2dnbGVQcmVmKCkge1xyXG4gIGRpc2FibGVRdWlja1dlYXJQcm9tcHRzID0gIWRpc2FibGVRdWlja1dlYXJQcm9tcHRzO1xyXG4gIHNldFZhbHVlKCdkaXNhYmxlUXVpY2tXZWFyUHJvbXB0cycsIGRpc2FibGVRdWlja1dlYXJQcm9tcHRzKTtcclxufVxyXG5cclxudmFyIGV2dHMgPSBbXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihzZWxmKSB7XHJcbiAgICAgIHJldHVybiBzZWxmLmNsYXNzTGlzdC5jb250YWlucygnc21hbGxMaW5rJykgJiZcclxuICAgICAgICBzZWxmLmNsYXNzTGlzdC5jb250YWlucygnZnNoRXEnKTtcclxuICAgIH0sXHJcbiAgICByZXN1bHQ6IGVxdWlwUHJvZmlsZUludmVudG9yeUl0ZW1cclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICByZXR1cm4gc2VsZi5jbGFzc0xpc3QuY29udGFpbnMoJ3NtYWxsTGluaycpICYmXHJcbiAgICAgICAgc2VsZi5jbGFzc0xpc3QuY29udGFpbnMoJ2ZzaFVzZScpO1xyXG4gICAgfSxcclxuICAgIHJlc3VsdDogdXNlUHJvZmlsZUludmVudG9yeUl0ZW1cclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oc2VsZikge3JldHVybiBzZWxmLmNsYXNzTGlzdC5jb250YWlucygnZm9sZGVyJyk7fSxcclxuICAgIHJlc3VsdDogaGlkZUZvbGRlcnNcclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oc2VsZikge3JldHVybiBzZWxmLmlkID09PSAnZGlzYWJsZVF1aWNrV2VhclByb21wdHMnO30sXHJcbiAgICByZXN1bHQ6IHRvZ2dsZVByZWZcclxuICB9XHJcbl07XHJcblxyXG5mdW5jdGlvbiBsaXN0ZW4oZXZ0KSB7XHJcbiAgdmFyIHNlbGYgPSBldnQudGFyZ2V0O1xyXG4gIGV2dHMuc29tZShmdW5jdGlvbihlbCkge1xyXG4gICAgaWYgKGVsLmNvbmRpdGlvbihzZWxmKSkge1xyXG4gICAgICBlbC5yZXN1bHQoc2VsZik7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0pO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlSW52VGFicygpIHtcclxuICByZXR1cm4gY3JlYXRlRGl2KHtcclxuICAgIGlkOiAnaW52VGFicycsXHJcbiAgICBjbGFzc05hbWU6ICd1aS10YWJzIHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwnLFxyXG4gICAgaW5uZXJIVE1MOiAnPGlucHV0IGlkPVwicXd0YWIxXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cInF3dGFic1wiIGNoZWNrZWQ+JyArXHJcbiAgICAgICc8aW5wdXQgaWQ9XCJxd3RhYjJcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwicXd0YWJzXCI+JyArXHJcbiAgICAgICc8dWwgY2xhc3M9XCJ1aS10YWJzLW5hdiB1aS1oZWxwZXItcmVzZXQgJyArXHJcbiAgICAgICAgJ3VpLWhlbHBlci1jbGVhcmZpeCB1aS13aWRnZXQtaGVhZGVyIHVpLWNvcm5lci1hbGxcIj4nICtcclxuICAgICAgJzxsaSBjbGFzcz1cInVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLXRvcCBpbnYtdGFicy1xd1wiPicgK1xyXG4gICAgICAnPGxhYmVsIGZvcj1cInF3dGFiMVwiPlF1aWNrIFdlYXIgLyBVc2UgLyBFeHRyYWN0PGJyPk1hbmFnZXI8L2xhYmVsPicgK1xyXG4gICAgICAnPC9saT4nICtcclxuICAgICAgJzxsaSBjbGFzcz1cInVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLXRvcCBpbnYtdGFicy1haFwiPicgK1xyXG4gICAgICAnPGxhYmVsIGZvcj1cInF3dGFiMlwiPkludmVudG9yeSBNYW5hZ2VyIENvdW50ZXInICtcclxuICAgICAgICAnPGJyPmZpbHRlcmVkIGJ5IEFIIFF1aWNrIFNlYXJjaDwvbGFiZWw+JyArXHJcbiAgICAgICc8L2xpPjxkaXYgaWQ9XCJzZXRQcm9tcHRcIiBjbGFzcz1cImZzaEZsb2F0UmlnaHQgZnNoQ2VudGVyXCI+PC9kaXY+PC91bD4nXHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dRdWlja1dlYXIoYXBwSW52KSB7XHJcbiAgaXRlbUxpc3QgPSBhcHBJbnY7XHJcbiAgdmFyIGludlRhYnMgPSBjcmVhdGVJbnZUYWJzKCk7XHJcbiAgdmFyIGludlRhYnNRdyA9IGNyZWF0ZVF1aWNrV2VhcihhcHBJbnYpO1xyXG4gIGludlRhYnMuYXBwZW5kQ2hpbGQoaW52VGFic1F3KTtcclxuICBjb250ZW50LmlubmVySFRNTCA9ICcnO1xyXG4gIGNvbnRlbnQuYXBwZW5kQ2hpbGQoaW52VGFicyk7XHJcbiAgaW52VGFicy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGxpc3Rlbik7XHJcbiAgaW52VGFicy5hcHBlbmRDaGlsZChzaG93QUhJbnZNYW5hZ2VyKGFwcEludikpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZXRQcm9tcHQnKS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsXHJcbiAgICBzaW1wbGVDaGVja2JveEh0bWwoJ2Rpc2FibGVRdWlja1dlYXJQcm9tcHRzJykpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbnNlcnRRdWlja1dlYXIoaW5qZWN0b3IpIHtcclxuICBjb250ZW50ID0gaW5qZWN0b3IgfHwgcENDO1xyXG4gIGlmICghY29udGVudCkge3JldHVybjt9XHJcbiAgY29udGVudC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsICdHZXR0aW5nIGl0ZW0gbGlzdCBmcm9tIGJhY2twYWNrLi4uJyk7XHJcbiAgbG9hZEludmVudG9yeSgpLmRvbmUoc2hvd1F1aWNrV2Vhcik7XHJcbiAgZGlzYWJsZVF1aWNrV2VhclByb21wdHMgPSBnZXRWYWx1ZSgnZGlzYWJsZVF1aWNrV2VhclByb21wdHMnKTtcclxufVxyXG4iLCJpbXBvcnQge2xvZ30gZnJvbSAnLi9kZWJ1Zyc7XHJcbmltcG9ydCB7cGxheWVySWR9IGZyb20gJy4vbGF5b3V0JztcclxuXHJcbnZhciB0aW1lcyA9IHt9O1xyXG52YXIgcmVmQXJ5ID0gWyd3d3cubGF6eXdlYnRvb2xzLmNvLnVrJywgJ3JlZnJlc2h0aGluZy5jb20nXTtcclxuXHJcbmZ1bmN0aW9uIGlzQXV0bygpIHtcclxuICB2YXIgZG9jUmVmID0gZG9jdW1lbnQucmVmZXJyZXJcclxuICAgIC5tYXRjaCgvXmh0dHBzPzpcXC9cXC8oW14vPyNdKykoPzpbLz8jXXwkKS9pKTtcclxuICBpZiAoZG9jUmVmKSB7ZG9jUmVmID0gZG9jUmVmWzFdO31cclxuICByZXR1cm4gcmVmQXJ5LmluZGV4T2YoZG9jUmVmKSAhPT0gLTE7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdGFydChjYXRlZ29yeSwgdmFyaWFibGUsIGxhYmVsKSB7XHJcbiAgaWYgKGlzQXV0bygpIHx8IHR5cGVvZiBnYSA9PT0gJ3VuZGVmaW5lZCcpIHtyZXR1cm47fVxyXG4gIHRpbWVzW2NhdGVnb3J5ICsgJzonICsgdmFyaWFibGUgKyAnOicgKyBsYWJlbF0gPVxyXG4gICAgcGVyZm9ybWFuY2Uubm93KCkgKiAxMDAwO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZW5kVGltaW5nKGNhdGVnb3J5LCB2YXJpYWJsZSwgbGFiZWwpIHtcclxuICB2YXIgbXlUaW1lID0gTWF0aC5yb3VuZChwZXJmb3JtYW5jZS5ub3coKSAqIDEwMDAgLVxyXG4gICAgdGltZXNbY2F0ZWdvcnkgKyAnOicgKyB2YXJpYWJsZSArICc6JyArIGxhYmVsXSkgLyAxMDAwO1xyXG4gIGlmIChteVRpbWUgPiAxMCkge1xyXG4gICAgZ2EoJ2ZzaEFwcC5zZW5kJywgJ3RpbWluZycsIGNhdGVnb3J5LCB2YXJpYWJsZSwgTWF0aC5yb3VuZChteVRpbWUpLFxyXG4gICAgICBsYWJlbCk7XHJcbiAgfVxyXG4gIC8vI2lmIF9CRVRBICAvLyAgVGltaW5nIG91dHB1dFxyXG4gIGxvZyh2YXJpYWJsZSwgbXlUaW1lICsgJ21zJyk7XHJcbiAgLy8jZW5kaWZcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVuZChjYXRlZ29yeSwgdmFyaWFibGUsIGxhYmVsKSB7XHJcbiAgaWYgKGlzQXV0bygpIHx8IHR5cGVvZiBnYSA9PT0gJ3VuZGVmaW5lZCcpIHtyZXR1cm47fVxyXG4gIHNlbmRUaW1pbmcoY2F0ZWdvcnksIHZhcmlhYmxlLCBsYWJlbCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpeHVwVXJsKCkge1xyXG4gIHZhciBvcmlnUGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XHJcbiAgdmFyIHBhZ2UgPSBvcmlnUGF0aC5yZXBsYWNlKC8mbT0uKi8sICcnKVxyXG4gICAgLnJlcGxhY2UoLyZzdWJjbWQ9Ji4qLywgJycpXHJcbiAgICAucmVwbGFjZSgvJnN1YmNtZDI9Ji4qLywgJycpXHJcbiAgICAucmVwbGFjZSgvJlthLXpfXStfaWQ9LisvLCAnJylcclxuICAgIC5yZXBsYWNlKC8maWQ9LisvLCAnJylcclxuICAgIC5yZXBsYWNlKC8mdGFyZ2V0X3BsYXllcj0uKy8sICcnKVxyXG4gICAgLnJlcGxhY2UoLyZbYS16XStfdXNlcm5hbWU9LisvLCAnJylcclxuICAgIC5yZXBsYWNlKC9cXD9jbWQ9YXVjdGlvbmhvdXNlLisvLCAnP2NtZD1hdWN0aW9uaG91c2UnKVxyXG4gICAgLnJlcGxhY2UoLyZzdWJjbWQ9WzAtOWEtZl17MzJ9LywgJycpXHJcbiAgICAucmVwbGFjZSgvJnNlYXJjaF9hY3RpdmU9LisvLCAnJylcclxuICAgIC5yZXBsYWNlKC8mbGV0dGVyPS4rLywgJycpXHJcbiAgICAucmVwbGFjZSgvJmd1aWxkX25hbWU9LisvLCAnJylcclxuICAgIC5yZXBsYWNlKC8mdXNlcj0uKy8sICcnKVxyXG4gICAgLnJlcGxhY2UoLyZbYS16X10qcGFnZT0uKy8sICcnKVxyXG4gICAgLnJlcGxhY2UoLyZwcmVzdGlnZT0uKy8sICcnKVxyXG4gICAgLnJlcGxhY2UoLyZ3aXRoZHJhd19hbW91bnQ9LisvLCAnJylcclxuICAgIC5yZXBsYWNlKC8mdGlja2V0cz0uKy8sICcnKVxyXG4gICAgLnJlcGxhY2UoLyZzZWFyY2g9LisvLCAnJylcclxuICAgIC5yZXBsYWNlKC8mdGFyZ2V0PS4rLywgJycpXHJcbiAgICAucmVwbGFjZSgvJnhjdj1bMC05YS1mXXszMn0vLCAnJylcclxuICAgIC5yZXBsYWNlKC9cXD9yZWY9WzAtOV0rLywgJycpO1xyXG4gIGdhKCdmc2guc2V0JywgJ3BhZ2UnLCBwYWdlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwKCkge1xyXG4gIGlmIChpc0F1dG8oKSB8fCB0eXBlb2YgZ2EgPT09ICd1bmRlZmluZWQnKSB7cmV0dXJuO31cclxuXHJcbiAgZ2EoJ2NyZWF0ZScsICdVQS03NjQ4ODExMy0xJywgJ2F1dG8nLCAnZnNoQXBwJywge1xyXG4gICAgdXNlcklkOiBwbGF5ZXJJZCgpLFxyXG4gICAgc2l0ZVNwZWVkU2FtcGxlUmF0ZTogMTBcclxuICB9KTtcclxuICBnYSgnZnNoQXBwLnNldCcsICdhcHBOYW1lJywgJ2ZzaEFwcCcpO1xyXG4gIGdhKCdmc2hBcHAuc2V0JywgJ2FwcFZlcnNpb24nLCBGU0gudmVyc2lvbiArICcoJyArIEZTSC5jYWxmICsgJyknKTtcclxuICBnYSgnY3JlYXRlJywgJ1VBLTc2NDg4MTEzLTInLCAnYXV0bycsICdmc2gnLCB7XHJcbiAgICB1c2VySWQ6IHBsYXllcklkKCksXHJcbiAgICBzaXRlU3BlZWRTYW1wbGVSYXRlOiAxMFxyXG4gIH0pO1xyXG4gIGZpeHVwVXJsKCk7XHJcbiAgZ2EoJ2ZzaC5zZW5kJywgJ3BhZ2V2aWV3Jyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzY3JlZW52aWV3KGZ1bmNOYW1lKSB7XHJcbiAgaWYgKGlzQXV0bygpIHx8IHR5cGVvZiBnYSA9PT0gJ3VuZGVmaW5lZCcpIHtyZXR1cm47fVxyXG4gIGdhKCdmc2hBcHAuc2VuZCcsICdzY3JlZW52aWV3Jywge3NjcmVlbk5hbWU6IGZ1bmNOYW1lfSk7XHJcbn1cclxuIiwiaW1wb3J0IHtkZWZhdWx0c30gZnJvbSAnLi9zdXBwb3J0L2RhdGFPYmonO1xyXG5pbXBvcnQge2dldFZhbHVlSlNPTiwgaXNDaGVja2VkLCBzZXRWYWx1ZUpTT059IGZyb20gJy4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5pbXBvcnQge21ha2VQYWdlSGVhZGVyLCBtYWtlUGFnZVRlbXBsYXRlLCBwQ0N9IGZyb20gJy4vc3VwcG9ydC9sYXlvdXQnO1xyXG5cclxudmFyIHBhcmFtO1xyXG5cclxuZnVuY3Rpb24gZGV0YWlsUm93KGosIGl0ZW1GaWVsZCkgeyAvLyBMZWdhY3lcclxuICBpZiAocGFyYW0udGFnc1tqXSA9PT0gJ2NoZWNrYm94Jykge1xyXG4gICAgcmV0dXJuICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCInICsgaXNDaGVja2VkKGl0ZW1GaWVsZCkgK1xyXG4gICAgICAnIGRpc2FibGVkPic7XHJcbiAgfSBlbHNlIGlmIChwYXJhbS51cmwgJiYgcGFyYW0udXJsW2pdICE9PSAnJykge1xyXG4gICAgcmV0dXJuICc8YSBocmVmPVwiJyArIHBhcmFtLnVybFtqXS5yZXBsYWNlKCdAcmVwbGFjZW1lQCcsIGl0ZW1GaWVsZCkgK1xyXG4gICAgICAnXCI+JyArIGl0ZW1GaWVsZCArICc8L2E+JztcclxuICB9XHJcbiAgcmV0dXJuIGl0ZW1GaWVsZDtcclxufVxyXG5cclxuZnVuY3Rpb24gaXRlbVJvdyhpdGVtKSB7IC8vIExlZ2FjeVxyXG4gIHZhciByZXN1bHQgPSAnJztcclxuICBmb3IgKHZhciBqID0gMDsgaiA8IHBhcmFtLmZpZWxkcy5sZW5ndGg7IGogKz0gMSkge1xyXG4gICAgcmVzdWx0ICs9ICc8dGQgY2xhc3M9XCJmc2hDZW50ZXJcIj4nO1xyXG4gICAgdmFyIGl0ZW1GaWVsZCA9IGl0ZW1bcGFyYW0uZmllbGRzW2pdXTtcclxuICAgIGlmIChwYXJhbS5maWVsZHNbal0gPT09IHBhcmFtLmNhdGVnb3J5RmllbGQpIHtjb250aW51ZTt9XHJcbiAgICByZXN1bHQgKz0gZGV0YWlsUm93KGosIGl0ZW1GaWVsZCkgKyAnPC90ZD4nO1xyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb0lucHV0cygpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIHJlc3VsdCA9ICc8dHI+JztcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtLnRhZ3MubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgIHJlc3VsdCArPSAnPHRkIGFsaWduPWNlbnRlcj48aW5wdXQgdHlwZT1cIicgKyBwYXJhbS50YWdzW2ldICtcclxuICAgICAgJ1wiIGNsYXNzPVwiY3VzdG9taW5wdXRcIiBpZD1cImZzaEluJyArIHBhcmFtLmZpZWxkc1tpXSArICdcIj48L3RkPic7XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlTWFuYWdlVGFibGUoKSB7IC8vIExlZ2FjeVxyXG4gIHZhciByZXN1bHQgPSAnPHRhYmxlIGNlbGxzcGFjaW5nPVwiMlwiIGNlbGxwYWRkaW5nPVwiMlwiIGNsYXNzPVwiZnNoR2NcIiAnICtcclxuICAgICd3aWR0aD1cIjEwMCVcIj48dHIgY2xhc3M9XCJmc2hPclwiPic7XHJcbiAgcmVzdWx0ICs9IHBhcmFtLmhlYWRlcnMucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cnIpIHtcclxuICAgIHJldHVybiBwcmV2ICsgJzx0aD4nICsgY3VyciArICc8L3RoPic7XHJcbiAgfSwgJycpO1xyXG4gIHJlc3VsdCArPSAnPHRoPkFjdGlvbjwvdGg+PC90cj4nO1xyXG4gIHZhciBjdXJyZW50Q2F0ZWdvcnkgPSAnJztcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtLmN1cnJlbnRJdGVtcy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgdmFyIGl0ZW0gPSBwYXJhbS5jdXJyZW50SXRlbXNbaV07XHJcbiAgICByZXN1bHQgKz0gJzx0cj4nO1xyXG4gICAgaWYgKHBhcmFtLmNhdGVnb3J5RmllbGQgJiZcclxuICAgICAgICBjdXJyZW50Q2F0ZWdvcnkgIT09XHJcbiAgICAgICAgaXRlbVtwYXJhbS5jYXRlZ29yeUZpZWxkXSkge1xyXG4gICAgICBjdXJyZW50Q2F0ZWdvcnkgPSBpdGVtW3BhcmFtLmNhdGVnb3J5RmllbGRdO1xyXG4gICAgICByZXN1bHQgKz0gJzx0ZD48c3BhbiBjbGFzcz1cImZzaFFzXCI+JyArXHJcbiAgICAgICAgY3VycmVudENhdGVnb3J5ICsgJzwvc3Bhbj48L3RkPjx0ZD48L3RkPjx0ZD48L3RkPjx0ZD48L3RkPjx0ZD48L3RkPicgK1xyXG4gICAgICAgICAgJzwvdHI+PHRyPic7XHJcbiAgICB9XHJcbiAgICByZXN1bHQgKz0gaXRlbVJvdyhpdGVtKTtcclxuICAgIHJlc3VsdCArPSAnPHRkPjxzcGFuIGNsYXNzPVwiSGVscGVyVGV4dExpbmtcIiBkYXRhLWl0ZW1JZD1cIicgKyBpICtcclxuICAgICAgJ1wiIGlkPVwiZnNoRGVsJyArIGkgKyAnXCI+W0RlbF08L3NwYW4+PC90ZD48L3RyPic7XHJcbiAgfVxyXG4gIHJlc3VsdCArPSBkb0lucHV0cygpO1xyXG4gIHJlc3VsdCArPSAnPHRkPjxzcGFuIGNsYXNzPVwiSGVscGVyVGV4dExpbmtcIiBpZD1cImZzaEFkZFwiPicgK1xyXG4gICAgJ1tBZGRdPC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPicgK1xyXG4gICAgJzx0YWJsZSB3aWR0aD1cIjEwMCVcIj48dHI+PHRkIGNsYXNzPVwiZnNoQ2VudGVyXCI+JyArXHJcbiAgICAnPHRleHRhcmVhIGNvbHM9NzAgcm93cz0yMCBuYW1lPVwiZnNoRWRcIj4nICtcclxuICAgIEpTT04uc3RyaW5naWZ5KHBhcmFtLmN1cnJlbnRJdGVtcykgKyAnPC90ZXh0YXJlYT48L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZCBjbGFzcz1cImZzaENlbnRlclwiPjxpbnB1dCBpZD1cImZzaFNhdmVcIiAnICtcclxuICAgICd0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJTYXZlXCIgY2xhc3M9XCJjdXN0b21idXR0b25cIj4nICtcclxuICAgICcmbmJzcDs8aW5wdXQgaWQ9XCJmc2hSZXNldFwiIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cIlJlc2V0XCIgJyArXHJcbiAgICAnY2xhc3M9XCJjdXN0b21idXR0b25cIj48L3RkPjwvdHI+JyArXHJcbiAgICAnPC90Ym9keT48L3RhYmxlPic7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGFyYW0uaWQpLmlubmVySFRNTCA9IHJlc3VsdDtcclxuICBzZXRWYWx1ZUpTT04ocGFyYW0uZ21uYW1lLCBwYXJhbS5jdXJyZW50SXRlbXMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZWxldGVRdWlja0l0ZW0oZXZ0KSB7IC8vIExlZ2FjeVxyXG4gIHZhciBpdGVtSWQgPSBldnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1pdGVtSWQnKTtcclxuICBwYXJhbS5jdXJyZW50SXRlbXMuc3BsaWNlKGl0ZW1JZCwgMSk7XHJcbiAgZ2VuZXJhdGVNYW5hZ2VUYWJsZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBidWlsZE5ld0l0ZW0oKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBuZXdJdGVtID0ge307XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbS5maWVsZHMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgIGlmIChwYXJhbS50YWdzW2ldID09PSAnY2hlY2tib3gnKSB7XHJcbiAgICAgIG5ld0l0ZW1bcGFyYW0uZmllbGRzW2ldXSA9XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZzaEluJyArIHBhcmFtLmZpZWxkc1tpXSkuY2hlY2tlZDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG5ld0l0ZW1bcGFyYW0uZmllbGRzW2ldXSA9XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZzaEluJyArIHBhcmFtLmZpZWxkc1tpXSkudmFsdWU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBuZXdJdGVtO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRRdWlja0l0ZW0oKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBpc0FycmF5T25seSA9IHBhcmFtLmZpZWxkcy5sZW5ndGggPT09IDA7XHJcbiAgdmFyIG5ld0l0ZW0gPSB7fTtcclxuICBpZiAoaXNBcnJheU9ubHkpIHtcclxuICAgIG5ld0l0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnNoSW4wJykudmFsdWU7XHJcbiAgfSBlbHNlIHtcclxuICAgIG5ld0l0ZW0gPSBidWlsZE5ld0l0ZW0oKTtcclxuICB9XHJcbiAgcGFyYW0uY3VycmVudEl0ZW1zLnB1c2gobmV3SXRlbSk7XHJcbiAgZ2VuZXJhdGVNYW5hZ2VUYWJsZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzYXZlUmF3RWRpdG9yKCkgeyAvLyBqUXVlcnlcclxuICBwYXJhbS5jdXJyZW50SXRlbXMgPVxyXG4gICAgSlNPTi5wYXJzZSgkKCd0ZXh0YXJlYVtuYW1lPVwiZnNoRWRcIl0nKS52YWwoKSk7XHJcbiAgZ2VuZXJhdGVNYW5hZ2VUYWJsZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldFJhd0VkaXRvcigpIHsgLy8gTGVnYWN5XHJcbiAgaWYgKHBhcmFtLmlkID09PSAnZnNoQXNvJykge1xyXG4gICAgcGFyYW0uY3VycmVudEl0ZW1zID1cclxuICAgICAgSlNPTi5wYXJzZShkZWZhdWx0cy5xdWlja1NlYXJjaExpc3QpO1xyXG4gIH0gZWxzZSB7cGFyYW0uY3VycmVudEl0ZW1zID0gW107fVxyXG4gIGdlbmVyYXRlTWFuYWdlVGFibGUoKTtcclxufVxyXG5cclxudmFyIGxpc3RFdmVudHMgPSBbXHJcbiAge3Rlc3Q6IGZ1bmN0aW9uKGUpIHtyZXR1cm4gZS50YXJnZXQuaWQgPT09ICdmc2hSZXNldCc7fSwgZm46IHJlc2V0UmF3RWRpdG9yfSxcclxuICB7dGVzdDogZnVuY3Rpb24oZSkge3JldHVybiBlLnRhcmdldC5pZCA9PT0gJ2ZzaFNhdmUnO30sIGZuOiBzYXZlUmF3RWRpdG9yfSxcclxuICB7dGVzdDogZnVuY3Rpb24oZSkge3JldHVybiBlLnRhcmdldC5pZCA9PT0gJ2ZzaEFkZCc7fSwgZm46IGFkZFF1aWNrSXRlbX0sXHJcbiAge1xyXG4gICAgdGVzdDogZnVuY3Rpb24oZSkge3JldHVybiBlLnRhcmdldC5pZC5pbmRleE9mKCdmc2hEZWwnKSA9PT0gMDt9LFxyXG4gICAgZm46IGRlbGV0ZVF1aWNrSXRlbVxyXG4gIH1cclxuXTtcclxuXHJcbmZ1bmN0aW9uIGxpc3RFdnRIbmwoZSkge1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdEV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgaWYgKGxpc3RFdmVudHNbaV0udGVzdChlKSkge1xyXG4gICAgICBsaXN0RXZlbnRzW2ldLmZuKGUpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0QXVjdGlvblNlYXJjaChpbmplY3RvcikgeyAvLyBMZWdhY3lcclxuICB2YXIgY29udGVudCA9IGluamVjdG9yIHx8IHBDQztcclxuICBjb250ZW50LmlubmVySFRNTCA9XHJcbiAgICBtYWtlUGFnZUhlYWRlcignVHJhZGUgSHViIFF1aWNrIFNlYXJjaCcsICcnLCAnJywgJycpICtcclxuICAgICc8ZGl2PlRoaXMgc2NyZWVuIGFsbG93cyB5b3UgdG8gc2V0IHVwIHNvbWUgcXVpY2sgJyArXHJcbiAgICAgICdzZWFyY2ggdGVtcGxhdGVzIGZvciB0aGUgQXVjdGlvbiBIb3VzZS4gVGhlIERpc3BsYXkgb24gQUggY29sdW1uICcgK1xyXG4gICAgICAnaW5kaWNhdGVzIGlmIHRoZSBxdWljayBzZWFyY2ggd2lsbCBzaG93IG9uIHRoZSBzaG9ydCBsaXN0IG9uIHRoZSAnICtcclxuICAgICAgJ0F1Y3Rpb24gSG91c2UgbWFpbiBzY3JlZW4uIEEgbWF4aW11bSBvZiAzNiBpdGVtcyBjYW4gc2hvdyBvbiB0aGlzICcgK1xyXG4gICAgICAnbGlzdCAoSXQgd2lsbCBub3Qgc2hvdyBtb3JlIHRoYW4gMzYgZXZlbiBpZiB5b3UgaGF2ZSBtb3JlIHRoYW4gMzYgJyArXHJcbiAgICAgICdmbGFnZ2VkKS4gVG8gZWRpdCBpdGVtcywgZWl0aGVyIHVzZSB0aGUgbGFyZ2UgdGV4dCBhcmVhIGJlbG93LCBvciAnICtcclxuICAgICAgJ2FkZCBhIG5ldyBlbnRyeSBhbmQgZGVsZXRlIHRoZSBvbGQgb25lLiBZb3UgY2FuIGFsd2F5cyByZXNldCB0aGUgJyArXHJcbiAgICAgICdsaXN0IHRvIHRoZSBkZWZhdWx0IHZhbHVlcy48L2Rpdj4nICtcclxuICAgICc8ZGl2IGNsYXNzPVwiZnNoU21hbGxcIiBpZD1cImZzaEFzb1wiPicgK1xyXG4gICAgJzwvZGl2Pic7XHJcbiAgLy8gZ2xvYmFsIHBhcmFtZXRlcnMgZm9yIHRoZSBtZXRhIGZ1bmN0aW9uIGdlbmVyYXRlTWFuYWdlVGFibGVcclxuICBwYXJhbSA9IHtcclxuICAgIGlkOiAnZnNoQXNvJyxcclxuICAgIGhlYWRlcnM6IFsnQ2F0ZWdvcnknLCAnTmlja25hbWUnLCAnUXVpY2sgU2VhcmNoIFRleHQnLFxyXG4gICAgICAnRGlzcGxheSBpbiBBSD8nXSxcclxuICAgIGZpZWxkczogWydjYXRlZ29yeScsICduaWNrbmFtZScsICdzZWFyY2huYW1lJywgJ2Rpc3BsYXlPbkFIJ10sXHJcbiAgICB0YWdzOiBbJ3RleHQnLCAndGV4dCcsICd0ZXh0JywgJ2NoZWNrYm94J10sXHJcbiAgICB1cmw6IFsnJywgJycsXHJcbiAgICAgICdpbmRleC5waHA/Y21kPWF1Y3Rpb25ob3VzZSZhbXA7dHlwZT0tMSZhbXA7c2VhcmNoX3RleHQ9QHJlcGxhY2VtZUAnLCAnJ10sXHJcbiAgICBjdXJyZW50SXRlbXM6IGdldFZhbHVlSlNPTigncXVpY2tTZWFyY2hMaXN0JyksXHJcbiAgICBnbW5hbWU6ICdxdWlja1NlYXJjaExpc3QnLFxyXG4gICAgY2F0ZWdvcnlGaWVsZDogJ2NhdGVnb3J5JyxcclxuICB9O1xyXG4gIGdlbmVyYXRlTWFuYWdlVGFibGUoKTtcclxuICBjb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbGlzdEV2dEhubCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RRdWlja0xpbmtNYW5hZ2VyKGluamVjdG9yKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBjb250ZW50ID0gaW5qZWN0b3IgfHwgcENDO1xyXG4gIGNvbnRlbnQuaW5uZXJIVE1MID1cclxuICAgIG1ha2VQYWdlVGVtcGxhdGUoJ1F1aWNrIExpbmtzJywgJycsICcnLCAnJywgJ3FsYScpO1xyXG5cclxuICAvLyBnbG9iYWwgcGFyYW1ldGVycyBmb3IgdGhlIG1ldGEgZnVuY3Rpb24gZ2VuZXJhdGVNYW5hZ2VUYWJsZVxyXG4gIHBhcmFtID0ge1xyXG4gICAgaWQ6ICdxbGEnLFxyXG4gICAgaGVhZGVyczogWydOYW1lJywgJ1VSTCcsXHJcbiAgICAgICdOZXcgWzxzcGFuIGNsYXNzPVwiZnNoTGluayB0aXAtc3RhdGljXCIgJyArXHJcbiAgICAgICdkYXRhLXRpcHBlZD1cIk9wZW4gcGFnZSBpbiBhIG5ldyB3aW5kb3dcIj4/PC9zcGFuPl0nXSxcclxuICAgIGZpZWxkczogWyduYW1lJywgJ3VybCcsICduZXdXaW5kb3cnXSxcclxuICAgIHRhZ3M6IFsndGV4dCcsICd0ZXh0JywgJ2NoZWNrYm94J10sXHJcbiAgICBjdXJyZW50SXRlbXM6IGdldFZhbHVlSlNPTigncXVpY2tMaW5rcycpLFxyXG4gICAgZ21uYW1lOiAncXVpY2tMaW5rcycsXHJcbiAgfTtcclxuICBnZW5lcmF0ZU1hbmFnZVRhYmxlKCk7XHJcbiAgY29udGVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGxpc3RFdnRIbmwpO1xyXG59XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLW11bHRpLXNwYWNlcywgbWF4LWxlbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBbXHJcbiAge25hbWU6ICdSYWdlJywgICAgICAgICAgICAgICAgc3RhbTogMTAsIGx2bDogMSwgICAgaWQ6IDAsICAgbmlja3M6ICdyYWdlJ30sXHJcbiAge25hbWU6ICdTdHVuJywgICAgICAgICAgICAgICAgc3RhbTogMTUsIGx2bDogMSwgICAgaWQ6IDEsICAgbmlja3M6ICdzdHVuLHN0J30sXHJcbiAge25hbWU6ICdGdXJ5JywgICAgICAgICAgICAgICAgc3RhbTogMTAsIGx2bDogMjUsICAgaWQ6IDIsICAgbmlja3M6ICdmdXJ5J30sXHJcbiAge25hbWU6ICdCbG9vZCBUaGlyc3QnLCAgICAgICAgc3RhbTogMTAsIGx2bDogMjUsICAgaWQ6IDQsICAgbmlja3M6ICdibG9vZCB0aGlyc3QsYmxvb2R0aGlyc3QsYnQnfSxcclxuICB7bmFtZTogJ0VuY2hhbnQgV2VhcG9uJywgICAgICBzdGFtOiAxMCwgbHZsOiAyNSwgICBpZDogNSwgICBuaWNrczogJ2VuY2hhbnQgd2VhcG9uLGV3J30sXHJcbiAge25hbWU6ICdCZXJzZXJrJywgICAgICAgICAgICAgc3RhbTogMTUsIGx2bDogNzUsICAgaWQ6IDMsICAgbmlja3M6ICdiZXJzZXJrJ30sXHJcbiAge25hbWU6ICdIb2x5IEZsYW1lJywgICAgICAgICAgc3RhbTogMTUsIGx2bDogNzUsICAgaWQ6IDYsICAgbmlja3M6ICdob2x5IGZsYW1lLGhmJ30sXHJcbiAge25hbWU6ICdEYXJrIEN1cnNlJywgICAgICAgICAgc3RhbTogMjAsIGx2bDogMTUwLCAgaWQ6IDcsICAgbmlja3M6ICdkYXJrIGN1cnNlLGRjJ30sXHJcbiAge25hbWU6ICdTaG9ja3dhdmUnLCAgICAgICAgICAgc3RhbTogMjAsIGx2bDogMjAwLCAgaWQ6IDI5LCAgbmlja3M6ICdzaG9ja3dhdmUsc3csc2hvY2snfSxcclxuICB7bmFtZTogJ0lnbml0ZScsICAgICAgICAgICAgICBzdGFtOiAxMCwgbHZsOiAyMDAsICBpZDogMzAsICBuaWNrczogJ2lnbml0ZSxpZ24nfSxcclxuICB7bmFtZTogJ1N1cGVyIEVsaXRlIFNsYXllcicsICBzdGFtOiAyNSwgbHZsOiAyNTAsICBpZDogMzEsICBuaWNrczogJ3N1cGVyIGVsaXRlIHNsYXllcixzZXMsc2Ugc2xheWVyJ30sXHJcbiAge25hbWU6ICdXaXRoZXInLCAgICAgICAgICAgICAgc3RhbTogMTUsIGx2bDogMjUwLCAgaWQ6IDMyLCAgbmlja3M6ICd3aXRoZXIsd2l0aCd9LFxyXG4gIHtuYW1lOiAnU2hhdHRlciBBcm1vcicsICAgICAgIHN0YW06IDIwLCBsdmw6IDMwMCwgIGlkOiAzMywgIG5pY2tzOiAnc2hhdHRlciBhcm1vcixzYSd9LFxyXG4gIHtuYW1lOiAnRGVhdGggV2lzaCcsICAgICAgICAgIHN0YW06IDIwLCBsdmw6IDMwMCwgIGlkOiAzNCwgIG5pY2tzOiAnZGVhdGh3aXNoLGR3LGRlYXRodyxkZWF0aCB3aXNoJ30sXHJcbiAge25hbWU6ICdTcGVsbCBCcmVha2VyJywgICAgICAgc3RhbTogMzUsIGx2bDogMzAwLCAgaWQ6IDM1LCAgbmlja3M6ICdzcGVsbCBicmVha2VyLHNiJ30sXHJcbiAge25hbWU6ICdTcGVjdHJhbCBLbmlnaHQnLCAgICAgc3RhbTogMTUsIGx2bDogNDAwLCAgaWQ6IDQ4LCAgbmlja3M6ICdzcGVjdHJhbCBrbmlnaHQsc2ssc3BlYyBrbmlnaHQnfSxcclxuICB7bmFtZTogJ0tlZW4gRWRnZScsICAgICAgICAgICBzdGFtOiAxMCwgbHZsOiA0MDAsICBpZDogNDcsICBuaWNrczogJ2tlZW4gZWRnZSxrZSd9LFxyXG4gIHtuYW1lOiAnQXJ0ZXJpYWwgU3RyaWtlJywgICAgIHN0YW06IDIwLCBsdmw6IDUwMCwgIGlkOiA0OSwgIG5pY2tzOiAnYXJ0ZXJpYWwgc3RyaWtlLGFzLGFydCBzdHJpa2UsYXJ0IHN0cid9LFxyXG4gIHtuYW1lOiAnRGVhdGggRGVhbGVyJywgICAgICAgIHN0YW06IDIwLCBsdmw6IDUwMCwgIGlkOiA1MCwgIG5pY2tzOiAnZGVhdGggZGVhbGVyLGRkJ30sXHJcbiAge25hbWU6ICdTYXZhZ2VyeScsICAgICAgICAgICAgc3RhbTogMTUsIGx2bDogNjAwLCAgaWQ6IDUxLCAgbmlja3M6ICdzYXZhZ2VyeSxzYXZhZ2UnfSxcclxuICB7bmFtZTogJ0NoaSBTdHJpa2UnLCAgICAgICAgICBzdGFtOiAyMCwgbHZsOiA3MDAsICBpZDogNTIsICBuaWNrczogJ2NoaSBzdHJpa2UsY2hpLGNoaXMsY2hpIHN0cid9LFxyXG4gIHtuYW1lOiAnU2hpZWxkIFN0cmlrZScsICAgICAgIHN0YW06IDIwLCBsdmw6IDcwMCwgIGlkOiA1MywgIG5pY2tzOiAnc2hpZWxkIHN0cmlrZSxzcyxzaCBzdHInfSxcclxuICB7bmFtZTogJ0RlbW9yYWxpemUnLCAgICAgICAgICBzdGFtOiAyNSwgbHZsOiA4MDAsICBpZDogNzMsICBuaWNrczogJ2RlbW9yYWxpemUsZGVtJ30sXHJcbiAge25hbWU6ICdQb2lzb24nLCAgICAgICAgICAgICAgc3RhbTogMjUsIGx2bDogODAwLCAgaWQ6IDcwLCAgbmlja3M6ICdwb2lzb24scG9pJ30sXHJcbiAge25hbWU6ICdJcm9uIEZpc3QnLCAgICAgICAgICAgc3RhbTogMjUsIGx2bDogOTAwLCAgaWQ6IDc0LCAgbmlja3M6ICdpcm9uIGZpc3QsaWYnfSxcclxuICB7bmFtZTogJ1NwZWxsIExlZWNoJywgICAgICAgICBzdGFtOiA1MCwgbHZsOiA5MDAsICBpZDogNzksICBuaWNrczogJ3NwZWxsIGxlZWNoLHNsJ30sXHJcbiAge25hbWU6ICdEaXN0cmFjdGlvbicsICAgICAgICAgc3RhbTogMjUsIGx2bDogOTAwLCAgaWQ6IDc4LCAgbmlja3M6ICdkaXN0cmFjdGlvbixkaXMnfSxcclxuICB7bmFtZTogJ0Nvb3JkaW5hdGVkIEF0dGFjaycsICBzdGFtOiAzMCwgbHZsOiAxMDAwLCBpZDogMTE4LCBuaWNrczogJ2Nvb3JkaW5hdGVkIGF0dGFjayxjb29yZGEnfSxcclxuICB7bmFtZTogJ1VuZGVybWluZScsICAgICAgICAgICBzdGFtOiAzMCwgbHZsOiAxMDAwLCBpZDogMTA4LCBuaWNrczogJ3VuZGVybWluZSx1bSd9LFxyXG4gIHtuYW1lOiAnQ3Vyc2VkIFJ1bmUnLCAgICAgICAgIHN0YW06IDMwLCBsdmw6IDEwMDAsIGlkOiA4OSwgIG5pY2tzOiAnY3Vyc2VkIHJ1bmUsY3J1bmUnfSxcclxuICB7bmFtZTogJ0FudGkgRGVmbGVjdCcsICAgICAgICBzdGFtOiAzMCwgbHZsOiAxMDAwLCBpZDogMTA1LCBuaWNrczogJ2FudGkgZGVmbGVjdCxhZCd9LFxyXG4gIHtuYW1lOiAnT3ZlcmtpbGwnLCAgICAgICAgICAgIHN0YW06IDMwLCBsdmw6IDEyMDAsIGlkOiAxMDksIG5pY2tzOiAnb3ZlcmtpbGwsb2snfSxcclxuICB7bmFtZTogJ1NtYXNoaW5nIEhhbW1lcicsICAgICBzdGFtOiAzMCwgbHZsOiAxMjAwLCBpZDogMTExLCBuaWNrczogJ3NtYXNoaW5nIGhhbW1lcixzaCd9LFxyXG4gIHtuYW1lOiAnTWlnaHR5IFZpZ29yJywgICAgICAgIHN0YW06IDM1LCBsdmw6IDEyMDAsIGlkOiAxMTMsIG5pY2tzOiAnbWlnaHR5IHZpZ29yLG12J30sXHJcbiAge25hbWU6ICdGaXN0IEZpZ2h0JywgICAgICAgICAgc3RhbTogMzAsIGx2bDogMTIwMCwgaWQ6IDExNSwgbmlja3M6ICdmaXN0IGZpZ2h0LGZmJ30sXHJcbiAge25hbWU6ICdDdXJzZWQgUmluZycsICAgICAgICAgc3RhbTogMzAsIGx2bDogMTQwMCwgaWQ6IDg4LCAgbmlja3M6ICdjdXJzZWQgcmluZyxjcmluZyd9LFxyXG4gIHtuYW1lOiAnU2hhcnBlbicsICAgICAgICAgICAgIHN0YW06IDMwLCBsdmw6IDE0MDAsIGlkOiAxMDYsIG5pY2tzOiAnc2hhcnBlbixzaGFycCd9LFxyXG4gIHtuYW1lOiAnQmFsYW5jZWQgQXR0YWNrJywgICAgIHN0YW06IDMwLCBsdmw6IDE0MDAsIGlkOiAxMTYsIG5pY2tzOiAnYmFsYW5jZWQgYXR0YWNrLGJhJ30sXHJcbiAge25hbWU6ICdIZWF2eSBXZWlnaHQnLCAgICAgICAgc3RhbTogMjAsIGx2bDogMTYwMCwgaWQ6IDE0Niwgbmlja3M6ICdoZWF2eSB3ZWlnaHQsIGh3J30sXHJcbiAge25hbWU6ICdBcm1vcmVkIFN0cmlrZScsICAgICAgc3RhbTogMzAsIGx2bDogMTYwMCwgaWQ6IDEzMCwgbmlja3M6ICdhcm1vcmVkIHN0cmlrZSwgYXJtc3RyJ30sXHJcbiAge25hbWU6ICdJbnZlcnQnLCAgICAgICAgICAgICAgc3RhbTogNDAsIGx2bDogMjAwMCwgaWQ6IDE3Mywgbmlja3M6ICdpbnZlcnQnfSxcclxuICB7bmFtZTogJ1JlaWduIG9mIFRlcnJvcicsICAgICBzdGFtOiA0MCwgbHZsOiAyNTAwLCBpZDogMTc0LCBuaWNrczogJ3JlaWduIG9mIHRlcnJvcid9LFxyXG4gIHtuYW1lOiAnQ3JpdGljYWwgU3RyaWtlJywgICAgIHN0YW06IDQwLCBsdmw6IDMwMDAsIGlkOiAxNzUsIG5pY2tzOiAnY3JpdGljYWwgc3RyaWtlJ30sXHJcbiAge25hbWU6ICdHcmVhdCBWaWdvcicsICAgICAgICAgc3RhbTogMTAsIGx2bDogMSwgICAgaWQ6IDEyLCAgbmlja3M6ICdncmVhdCB2aWdvcix2aWdvcixndid9LFxyXG4gIHtuYW1lOiAnRm9ydGlmeScsICAgICAgICAgICAgIHN0YW06IDEwLCBsdmw6IDI1LCAgIGlkOiA4LCAgIG5pY2tzOiAnZm9ydGlmeSd9LFxyXG4gIHtuYW1lOiAnRXZhZGUnLCAgICAgICAgICAgICAgIHN0YW06IDEwLCBsdmw6IDI1LCAgIGlkOiAxMCwgIG5pY2tzOiAnZXZhZGUnfSxcclxuICB7bmFtZTogJ0Fic29yYicsICAgICAgICAgICAgICBzdGFtOiAyMCwgbHZsOiAyNSwgICBpZDogMTMsICBuaWNrczogJ2Fic29yYixhYnMnfSxcclxuICB7bmFtZTogJ1JvY2sgU2tpbicsICAgICAgICAgICBzdGFtOiAxNSwgbHZsOiA3NSwgICBpZDogMTEsICBuaWNrczogJ3JvY2sgc2tpbixycyd9LFxyXG4gIHtuYW1lOiAnRW5jaGFudGVkIEFybW9yJywgICAgIHN0YW06IDEwLCBsdmw6IDc1LCAgIGlkOiA5LCAgIG5pY2tzOiAnZW5jaGFudGVkIGFybW9yLGVuY2hhbnQgYXJtb3IsZWEsZW5jaCBhcm0sZW5jaCBhcm1vcid9LFxyXG4gIHtuYW1lOiAnQXVyYSBvZiBQcm90ZWN0aW9uJywgIHN0YW06IDIwLCBsdmw6IDE1MCwgIGlkOiAxNSwgIG5pY2tzOiAnYXVyYSBvZiBwcm90ZWN0aW9uLGFvcCxhb2ZwJ30sXHJcbiAge25hbWU6ICdEZWZsZWN0JywgICAgICAgICAgICAgc3RhbTogMjUsIGx2bDogMTUwLCAgaWQ6IDE0LCAgbmlja3M6ICdkZWZsZWN0LGRlZmwnfSxcclxuICB7bmFtZTogJ0ZvcmNlIFNoaWVsZCcsICAgICAgICBzdGFtOiAxMCwgbHZsOiAyMDAsICBpZDogMjcsICBuaWNrczogJ2ZvcmNlIHNoaWVsZCxmcyd9LFxyXG4gIHtuYW1lOiAnVW5icmVha2FibGUnLCAgICAgICAgIHN0YW06IDIwLCBsdmw6IDIwMCwgIGlkOiAyOCwgIG5pY2tzOiAndW5icmVha2FibGUsdWIsdW5iLHVuYnInfSxcclxuICB7bmFtZTogJ0hvbm9yJywgICAgICAgICAgICAgICBzdGFtOiAxMCwgbHZsOiA4MDAsICBpZDogODIsICBuaWNrczogJ2hvbm9yJ30sXHJcbiAge25hbWU6ICdBc3Npc3QnLCAgICAgICAgICAgICAgc3RhbTogMzAsIGx2bDogMjUwLCAgaWQ6IDM2LCAgbmlja3M6ICdhc3Npc3QsYXNzJ30sXHJcbiAge25hbWU6ICdDb25zdGl0dXRpb24nLCAgICAgICAgc3RhbTogMjUsIGx2bDogMzAwLCAgaWQ6IDM3LCAgbmlja3M6ICdjb25zdGl0dXRpb24sY29uc3QnfSxcclxuICB7bmFtZTogJ0NvdW50ZXIgQXR0YWNrJywgICAgICBzdGFtOiAyMCwgbHZsOiA0MDAsICBpZDogNTQsICBuaWNrczogJ2NvdW50ZXIgYXR0YWNrLGNhJ30sXHJcbiAge25hbWU6ICdTdW1tb24gU2hpZWxkIEltcCcsICAgc3RhbTogNTAsIGx2bDogNDAwLCAgaWQ6IDU1LCAgbmlja3M6ICdzdW1tb24gc2hpZWxkIGltcCxzc2ksaW1wJ30sXHJcbiAge25hbWU6ICdWaXNpb24nLCAgICAgICAgICAgICAgc3RhbTogMjAsIGx2bDogNTAwLCAgaWQ6IDU2LCAgbmlja3M6ICd2aXNpb24sdmlzJ30sXHJcbiAge25hbWU6ICdGb3J0aXR1ZGUnLCAgICAgICAgICAgc3RhbTogMTUsIGx2bDogNTAwLCAgaWQ6IDU3LCAgbmlja3M6ICdmb3J0aXR1ZGUsZm9ydCd9LFxyXG4gIHtuYW1lOiAnRmxpbmNoJywgICAgICAgICAgICAgIHN0YW06IDIwLCBsdmw6IDYwMCwgIGlkOiA1OCwgIG5pY2tzOiAnZmxpbmNoJ30sXHJcbiAge25hbWU6ICdUZXJyb3JpemUnLCAgICAgICAgICAgc3RhbTogMjAsIGx2bDogNzAwLCAgaWQ6IDU5LCAgbmlja3M6ICd0ZXJyb3JpemUsdGVycm9yJ30sXHJcbiAge25hbWU6ICdOaWdodG1hcmUgVmlzYWdlJywgICAgc3RhbTogNDAsIGx2bDogNzAwLCAgaWQ6IDYwLCAgbmlja3M6ICduaWdodG1hcmUgdmlzYWdlLG52LHZpc2FnZSd9LFxyXG4gIHtuYW1lOiAnU2FuY3R1YXJ5JywgICAgICAgICAgIHN0YW06IDI1LCBsdmw6IDgwMCwgIGlkOiA0NCwgIG5pY2tzOiAnc2FuY3R1YXJ5LHNhbmMnfSxcclxuICB7bmFtZTogJ0R1bGwgRWRnZScsICAgICAgICAgICBzdGFtOiAxMCwgbHZsOiA4MDAsICBpZDogNDYsICBuaWNrczogJ2R1bGwgZWRnZSxkZSd9LFxyXG4gIHtuYW1lOiAnRXJvc2lvbicsICAgICAgICAgICAgIHN0YW06IDI1LCBsdmw6IDkwMCwgIGlkOiA4MCwgIG5pY2tzOiAnZXJvc2lvbixlcm8nfSxcclxuICB7bmFtZTogJ0F2ZXJ0IEdhemUnLCAgICAgICAgICBzdGFtOiAxMCwgbHZsOiA5MDAsICBpZDogNzEsICBuaWNrczogJ2F2ZXJ0IGdhemUsYWcnfSxcclxuICB7bmFtZTogJ0VuY2hhbnQgU2hpZWxkJywgICAgICBzdGFtOiAyNSwgbHZsOiA5MDAsICBpZDogNzcsICBuaWNrczogJ2VuY2hhbnQgc2hpZWxkLGVzJ30sXHJcbiAge25hbWU6ICdTbWl0ZScsICAgICAgICAgICAgICAgc3RhbTogMzAsIGx2bDogMTAwMCwgaWQ6IDk3LCAgbmlja3M6ICdzbWl0ZSxzbSd9LFxyXG4gIHtuYW1lOiAnQmFsYW5jZWQgRGVmZW5zZScsICAgIHN0YW06IDMwLCBsdmw6IDEwMDAsIGlkOiAxMTcsIG5pY2tzOiAnYmFsYW5jZWQgZGVmZW5zZSxiZCd9LFxyXG4gIHtuYW1lOiAnQmFzdGlvbicsICAgICAgICAgICAgIHN0YW06IDMwLCBsdmw6IDEwMDAsIGlkOiAxMjIsIG5pY2tzOiAnYmFzdGlvbixiYXN0J30sXHJcbiAge25hbWU6ICdTaWRlIFN0ZXAnLCAgICAgICAgICAgc3RhbTogMzAsIGx2bDogMTAwMCwgaWQ6IDg2LCAgbmlja3M6ICdzaWRlIHN0ZXAsc3N0ZXAnfSxcclxuICB7bmFtZTogJ0hpZ2ggR3VhcmQnLCAgICAgICAgICBzdGFtOiAzMCwgbHZsOiAxMjAwLCBpZDogOTYsICBuaWNrczogJ2hpZ2ggZ3VhcmQsaGcnfSxcclxuICB7bmFtZTogJ0JhcnJpY2FkZScsICAgICAgICAgICBzdGFtOiAzMCwgbHZsOiAxMjAwLCBpZDogOTgsICBuaWNrczogJ2JhcnJpY2FkZSxiYXInfSxcclxuICB7bmFtZTogJ0Nvb3JkaW5hdGVkIERlZmVuc2UnLCBzdGFtOiAzMCwgbHZsOiAxMjAwLCBpZDogMTE5LCBuaWNrczogJ2Nvb3JkaW5hdGVkIGRlZmVuc2UsY2QnfSxcclxuICB7bmFtZTogJ0RlZ3JhZGUnLCAgICAgICAgICAgICBzdGFtOiAzMCwgbHZsOiAxMjAwLCBpZDogMTIxLCBuaWNrczogJ2RlZ3JhZGUsZGVnLGRnJ30sXHJcbiAge25hbWU6ICdSZXRhbGlhdGUnLCAgICAgICAgICAgc3RhbTogMzAsIGx2bDogMTQwMCwgaWQ6IDEyMywgbmlja3M6ICdyZXRhbGlhdGUscmV0J30sXHJcbiAge25hbWU6ICdTaGFtZScsICAgICAgICAgICAgICAgc3RhbTogMzUsIGx2bDogMTQwMCwgaWQ6IDExMCwgbmlja3M6ICdzaGFtZSd9LFxyXG4gIHtuYW1lOiAnRGlzcGVsIEN1cnNlJywgICAgICAgIHN0YW06IDM1LCBsdmw6IDE0MDAsIGlkOiAxMTQsIG5pY2tzOiAnZGlzcGVsIGN1cnNlLGRpc3BlbCd9LFxyXG4gIHtuYW1lOiAnQW5jaG9yZWQnLCAgICAgICAgICAgIHN0YW06IDMwLCBsdmw6IDE2MDAsIGlkOiAxNTQsIG5pY2tzOiAnYW5jaG9yZWQsIGFuY2gsIGFuY2hvcid9LFxyXG4gIHtuYW1lOiAnSGFyZGVuZWQnLCAgICAgICAgICAgIHN0YW06IDMwLCBsdmw6IDE2MDAsIGlkOiAxNTMsIG5pY2tzOiAnaGFyZGVuZWQsIGhhcmQsIGhhcmRlbid9LFxyXG4gIHtuYW1lOiAnQXJtb3IgQm9vc3QnLCAgICAgICAgIHN0YW06IDMwLCBsdmw6IDE2MDAsIGlkOiAxMzYsIG5pY2tzOiAnYXJtb3IgYm9vc3QsIGFybWJzdCwgYXJtIGJzdCwgYXJtYid9LFxyXG4gIHtuYW1lOiAnU2hpZWxkIFdhbGwnLCAgICAgICAgIHN0YW06IDMwLCBsdmw6IDE2MDAsIGlkOiAxMzUsIG5pY2tzOiAnc2hpZWxkIHdhbGwsIHNobGR3bGwsIHN3J30sXHJcbiAge25hbWU6ICdMYXllcmVkIEFybW9yJywgICAgICAgc3RhbTogNDAsIGx2bDogMjAwMCwgaWQ6IDE3MCwgbmlja3M6ICdsYXllcmVkIGFybW9yJ30sXHJcbiAge25hbWU6ICdEZWZlbnNpdmUgQXVyYScsICAgICAgc3RhbTogNDAsIGx2bDogMjUwMCwgaWQ6IDE3MSwgbmlja3M6ICdkZWZlbnNpdmUgYXVyYSd9LFxyXG4gIHtuYW1lOiAnRnVtYmxlJywgICAgICAgICAgICAgIHN0YW06IDQwLCBsdmw6IDMwMDAsIGlkOiAxNzIsIG5pY2tzOiAnZnVtYmxlJ30sXHJcbiAge25hbWU6ICdGaW5kIEl0ZW0nLCAgICAgICAgICAgc3RhbTogMTAsIGx2bDogMSwgICAgaWQ6IDE2LCAgbmlja3M6ICdmaW5kIGl0ZW0sZmknfSxcclxuICB7bmFtZTogJ1RyZWFzdXJlIEh1bnRlcicsICAgICBzdGFtOiAxNSwgbHZsOiAxLCAgICBpZDogMTcsICBuaWNrczogJ3RyZWFzdXJlIGh1bnRlcix0aCx0cmVhcyBodW50ZXInfSxcclxuICB7bmFtZTogJ0RlZXAgUG9ja2V0cycsICAgICAgICBzdGFtOiAxMCwgbHZsOiAxLCAgICBpZDogMjIsICBuaWNrczogJ2RlZXAgcG9ja2V0cyxkcCd9LFxyXG4gIHtuYW1lOiAnUXVlc3QgRmluZGVyJywgICAgICAgIHN0YW06IDUsICBsdmw6IDEsICAgIGlkOiA2MSwgIG5pY2tzOiAncXVlc3QgZmluZGVyLHFmJ30sXHJcbiAge25hbWU6ICdBZGVwdCBMZWFybmVyJywgICAgICAgc3RhbTogMTAsIGx2bDogMjUsICAgaWQ6IDE5LCAgbmlja3M6ICdhZGVwdCBsZWFybmVyLGFsJ30sXHJcbiAge25hbWU6ICdEZWZpYW5jZScsICAgICAgICAgICAgc3RhbTogMTUsIGx2bDogMjUsICAgaWQ6IDE4LCAgbmlja3M6ICdkZWZpYW5jZSd9LFxyXG4gIHtuYW1lOiAnTGlicmFyaWFuJywgICAgICAgICAgIHN0YW06IDEwLCBsdmw6IDc1LCAgIGlkOiAyMCwgIG5pY2tzOiAnbGlicmFyaWFuLGxpYixsaWJyJ30sXHJcbiAge25hbWU6ICdNZXJjaGFudCcsICAgICAgICAgICAgc3RhbTogMTAsIGx2bDogNzUsICAgaWQ6IDIxLCAgbmlja3M6ICdtZXJjaGFudCxtZXJjaCxtZXJjJ30sXHJcbiAge25hbWU6ICdMYXN0IERpdGNoJywgICAgICAgICAgc3RhbTogMTUsIGx2bDogMTUwLCAgaWQ6IDIzLCAgbmlja3M6ICdsYXN0IGRpdGNoLGxkJ30sXHJcbiAge25hbWU6ICdBbmltYWwgTWFnbmV0aXNtJywgICAgc3RhbTogMTAsIGx2bDogMjAwLCAgaWQ6IDI0LCAgbmlja3M6ICdhbmltYWwgbWFnbmV0aXNtLGFuaW1hZyxhbmkgbWFnLGFtJ30sXHJcbiAge25hbWU6ICdFbXBvd2VyJywgICAgICAgICAgICAgc3RhbTogMjAsIGx2bDogMjAwLCAgaWQ6IDI1LCAgbmlja3M6ICdlbXBvd2VyLGVtcCd9LFxyXG4gIHtuYW1lOiAnRG91YmxlcicsICAgICAgICAgICAgIHN0YW06IDUsICBsdmw6IDIwMCwgIGlkOiAyNiwgIG5pY2tzOiAnZG91Ymxlcixkb3ViLGRiJ30sXHJcbiAge25hbWU6ICdDb25zZXJ2ZScsICAgICAgICAgICAgc3RhbTogMTAsIGx2bDogMjUwLCAgaWQ6IDM5LCAgbmlja3M6ICdjb25zZXJ2ZSxjb25zLGNvbnN2LGNvbid9LFxyXG4gIHtuYW1lOiAnQnJld2luZyBNYXN0ZXInLCAgICAgIHN0YW06IDEwLCBsdmw6IDI1MCwgIGlkOiA0MCwgIG5pY2tzOiAnYnJld2luZyBtYXN0ZXIsYm0sYnJtLGJyZXdtJ30sXHJcbiAge25hbWU6ICdGb3VyIExlYWYnLCAgICAgICAgICAgc3RhbTogMjAsIGx2bDogMjUwLCAgaWQ6IDQxLCAgbmlja3M6ICdmb3VyIGxlYWYsNGwsZmwnfSxcclxuICB7bmFtZTogJ0V4dGVuZCcsICAgICAgICAgICAgICBzdGFtOiAzMCwgbHZsOiAzMDAsICBpZDogNDIsICBuaWNrczogJ2V4dGVuZCxleHQnfSxcclxuICB7bmFtZTogJ0ludmVudG9yJywgICAgICAgICAgICBzdGFtOiAxNSwgbHZsOiA0MDAsICBpZDogNjIsICBuaWNrczogJ2ludmVudG9yLGludixpbnZJLGludjEsaW52ZW50b3IxLGludmVudG9yIDEsaW52ZW50b3IgaSxpbnYgaSxpbnYgMSd9LFxyXG4gIHtuYW1lOiAnRXh0cmFjdG9yJywgICAgICAgICAgIHN0YW06IDE1LCBsdmw6IDQwMCwgIGlkOiA2MywgIG5pY2tzOiAnZXh0cmFjdG9yLGV4dHInfSxcclxuICB7bmFtZTogJ0ludmVudG9yIElJJywgICAgICAgICBzdGFtOiAyMCwgbHZsOiA1MDAsICBpZDogNjQsICBuaWNrczogJ2ludmVudG9yIGlpLGludmVudG9yaWksaW52aWksaW52MixpbnZlbnRvciAyLGludiBpaSxpbnYgMid9LFxyXG4gIHtuYW1lOiAnQnVmZiBNYXN0ZXInLCAgICAgICAgIHN0YW06IDEwLCBsdmw6IDUwMCwgIGlkOiA2NSwgIG5pY2tzOiAnYnVmZiBtYXN0ZXIsYnVmZm0sYnVtJ30sXHJcbiAge25hbWU6ICdSZWZsZWN0aW9uJywgICAgICAgICAgc3RhbTogMTAsIGx2bDogNjAwLCAgaWQ6IDY2LCAgbmlja3M6ICdyZWZsZWN0aW9uLHJlZixyZWZsLHJlZmxlY3QnfSxcclxuICB7bmFtZTogJ0d1aWxkIEJ1ZmZlcicsICAgICAgICBzdGFtOiAxMCwgbHZsOiA2MDAsICBpZDogMTYwLCBuaWNrczogJ2d1aWxkIGJ1ZmZlciwgZ2xkYmZyLCBnYid9LFxyXG4gIHtuYW1lOiAnTGlnaHQgRm9vdCcsICAgICAgICAgIHN0YW06IDE1LCBsdmw6IDcwMCwgIGlkOiA2NywgIG5pY2tzOiAnbGlnaHQgZm9vdCxsZid9LFxyXG4gIHtuYW1lOiAnTWVzbWVyaXplJywgICAgICAgICAgIHN0YW06IDIwLCBsdmw6IDcwMCwgIGlkOiA2OCwgIG5pY2tzOiAnbWVzbWVyaXplLG1lc21lcixtZXMsbWV6J30sXHJcbiAge25hbWU6ICdSZXNvdXJjZSBGaW5kZXInLCAgICAgc3RhbTogMjUsIGx2bDogODAwLCAgaWQ6IDc2LCAgbmlja3M6ICdyZXNvdXJjZSBmaW5kZXIscmYnfSxcclxuICB7bmFtZTogJ1F1ZXN0IEh1bnRlcicsICAgICAgICBzdGFtOiAyNSwgbHZsOiA4MDAsICBpZDogMTY2LCBuaWNrczogJ3F1ZXN0IGh1bnRlcid9LFxyXG4gIHtuYW1lOiAnR2xvYXQnLCAgICAgICAgICAgICAgIHN0YW06IDEwLCBsdmw6IDkwMCwgIGlkOiA4MSwgIG5pY2tzOiAnZ2xvYXQnfSxcclxuICB7bmFtZTogJ1NhY3JpZmljZScsICAgICAgICAgICBzdGFtOiAyNSwgbHZsOiA5MDAsICBpZDogNzUsICBuaWNrczogJ3NhY3JpZmljZSxzYWMnfSxcclxuICB7bmFtZTogJ1JlY2tvbmluZycsICAgICAgICAgICBzdGFtOiAyNSwgbHZsOiA5MDAsICBpZDogNzIsICBuaWNrczogJ3JlY2tvbmluZyxyZWMscmVrJ30sXHJcbiAge25hbWU6ICdSZWluZm9yY2UnLCAgICAgICAgICAgc3RhbTogMzAsIGx2bDogMTAwMCwgaWQ6IDEyNiwgbmlja3M6ICdyZWluZm9yY2UscmVpbid9LFxyXG4gIHtuYW1lOiAnQm9keWd1YXJkJywgICAgICAgICAgIHN0YW06IDMwLCBsdmw6IDEwMDAsIGlkOiAxMjAsIG5pY2tzOiAnYm9keWd1YXJkLGJnJ30sXHJcbiAge25hbWU6ICdSaXBvc3RlJywgICAgICAgICAgICAgc3RhbTogMzAsIGx2bDogMTAwMCwgaWQ6IDEyNCwgbmlja3M6ICdyaXBvc3RlLHJpcCd9LFxyXG4gIHtuYW1lOiAnU2V2ZXJlIENvbmRpdGlvbicsICAgIHN0YW06IDMwLCBsdmw6IDEwMDAsIGlkOiAxMDEsIG5pY2tzOiAnc2V2ZXJlIGNvbmRpdGlvbixzYyd9LFxyXG4gIHtuYW1lOiAnU2VhbGVkJywgICAgICAgICAgICAgIHN0YW06IDM1LCBsdmw6IDEyMDAsIGlkOiAxMTIsIG5pY2tzOiAnc2VhbGVkLHNlYWwnfSxcclxuICB7bmFtZTogJ1JpZ2h0ZW91cycsICAgICAgICAgICBzdGFtOiAzMCwgbHZsOiAxMjAwLCBpZDogMTA3LCBuaWNrczogJ3JpZ2h0ZW91cyxyaWdodCd9LFxyXG4gIHtuYW1lOiAnRXBpYyBGb3JnZScsICAgICAgICAgIHN0YW06IDMwLCBsdmw6IDEyMDAsIGlkOiAxMDIsIG5pY2tzOiAnZXBpYyBmb3JnZSxlZid9LFxyXG4gIHtuYW1lOiAnR29sZGVuIFNoaWVsZCcsICAgICAgIHN0YW06IDMwLCBsdmw6IDEyMDAsIGlkOiAxMDMsIG5pY2tzOiAnZ29sZGVuIHNoaWVsZCxncyd9LFxyXG4gIHtuYW1lOiAnU3RhbGtlcicsICAgICAgICAgICAgIHN0YW06IDM1LCBsdmw6IDE0MDAsIGlkOiAxMjUsIG5pY2tzOiAnc3RhbGtlcixzdGFsayd9LFxyXG4gIHtuYW1lOiAnQWdlbGVzcycsICAgICAgICAgICAgIHN0YW06IDMwLCBsdmw6IDE0MDAsIGlkOiAxMDAsIG5pY2tzOiAnYWdlbGVzcyxhZ2UnfSxcclxuICB7bmFtZTogJ0V4dHJhY3RvciBJSScsICAgICAgICBzdGFtOiAzMCwgbHZsOiAxNDAwLCBpZDogMTA0LCBuaWNrczogJ2V4dHJhY3RvciBpaSxleHRyYWN0b3JpaSxleHRpaSxleHQyLGV4dHJhY3RvciAyLGV4dCBpaSxleHQgMid9LFxyXG4gIHtuYW1lOiAnRXBpYyBDcmFmdCcsICAgICAgICAgIHN0YW06IDMwLCBsdmw6IDE2MDAsIGlkOiAxNTksIG5pY2tzOiAnZXBpYyBjcmFmdCwgZXBjIGNyZnQsIGVwY2NyZnQsIGVjJ30sXHJcbiAge25hbWU6ICdHb2xkIEZvb3QnLCAgICAgICAgICAgc3RhbTogMjAsIGx2bDogMTYwMCwgaWQ6IDEzNywgbmlja3M6ICdnb2xkIGZvb3QsIGdvbGRmb290LCBnbGRmdCwgZ2YnfSxcclxuICB7bmFtZTogJ1RpdGFuIERvdWJsZXInLCAgICAgICBzdGFtOiA0MCwgbHZsOiAyMDAwLCBpZDogMTY3LCBuaWNrczogJ3RpdGFuIGRvdWJsZXInfSxcclxuICB7bmFtZTogJ1RlbGVwb3J0JywgICAgICAgICAgICBzdGFtOiA0MCwgbHZsOiAyNTAwLCBpZDogMTY4LCBuaWNrczogJ3RlbGVwb3J0J30sXHJcbiAge25hbWU6ICdJbnZpZ29yYXRlJywgICAgICAgICAgc3RhbTogNDAsIGx2bDogMzAwMCwgaWQ6IDE2OSwgbmlja3M6ICdpbnZpZ29yYXRlJ31cclxuXTtcclxuIiwiaW1wb3J0IGJ1ZmZMaXN0IGZyb20gJy4vc3VwcG9ydC9idWZmT2JqJztcclxuaW1wb3J0IGNhbGYgZnJvbSAnLi9zdXBwb3J0L2NhbGYnO1xyXG5pbXBvcnQge2hlbHBMaW5rfSBmcm9tICcuL3NldHRpbmdzL3NldHRpbmdzUGFnZSc7XHJcbmltcG9ydCB7bGFzdEFjdGl2aXR5UkV9IGZyb20gJy4vc3VwcG9ydC9kYXRhT2JqJztcclxuaW1wb3J0IHtcclxuICBjcmVhdGVEb2N1bWVudCxcclxuICBmYWxsYmFjayxcclxuICBnZXRWYWx1ZSxcclxuICBpbnRWYWx1ZSxcclxuICBzZXRWYWx1ZSxcclxuICBzdHJpbmdTb3J0LFxyXG4gIHhtbGh0dHBcclxufSBmcm9tICcuL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtvbmxpbmVEb3QsIHBDQywgcGxheWVyTmFtZX0gZnJvbSAnLi9zdXBwb3J0L2xheW91dCc7XHJcblxyXG52YXIgY2hhcmFjdGVyTmFtZTtcclxudmFyIHN1c3RhaW5MZXZlbFJFID0gL0xldmVsPGJyPihcXGQrKSUvO1xyXG52YXIgYnVmZkN1c3RvbSA9IHtcclxuICBoZWFkZXI6ICdCdWZmJyxcclxuICB3aGF0OiAnYnVmZicsXHJcbiAgY29udHJvbDogZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgcmV0ID0gJzxzZWxlY3Qgc3R5bGU9XCJ3aWR0aDoxNDBweDtcIiBpZD1cInNlbGVjdGVkQnVmZlwiPic7XHJcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJ1ZmZMaXN0Lmxlbmd0aDsgaiArPSAxKSB7XHJcbiAgICAgIHJldCArPSAnPG9wdGlvbiB2YWx1ZT1cIicgKyBidWZmTGlzdFtqXS5pZCArICdcIj4nICtcclxuICAgICAgICBidWZmTGlzdFtqXS5uYW1lICsgJzwvb3B0aW9uPic7XHJcbiAgICB9XHJcbiAgICByZXQgKz0gJzwvc2VsZWN0Pic7XHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH0sXHJcbiAgY3V0b2ZmOiAnMTc1IGJ1ZmYnLFxyXG4gIHNlYXJjaGVkOiAnTmlja25hbWVzIG9mIGJ1ZmYgc2VhcmNoZWQnLFxyXG4gIHBvdGVudGlhbDogJ2J1ZmYnLFxyXG4gIHByb2Nlc3NlZDogJ0J1ZmYnLFxyXG4gIHByb2dyZXNzOiAnYnVmZmVycydcclxufTtcclxudmFyIG90aGVyQ3VzdG9tID0ge1xyXG4gIGhlYWRlcjogJ090aGVyJyxcclxuICB3aGF0OiAndGV4dCcsXHJcbiAgY29udHJvbDogZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgdGV4dFRvU2VhcmNoRm9yID0gZ2V0VmFsdWUoJ3RleHRUb1NlYXJjaEZvcicpIHx8ICcnO1xyXG4gICAgcmV0dXJuICc8aW5wdXQgc3R5bGU9XCJ3aWR0aDoxNDBweDtcIiBjbGFzcz1cImN1c3RvbWlucHV0XCIgJyArXHJcbiAgICAgICdpZD1cInRleHRUb1NlYXJjaEZvclwiIHR5cGU9XCJ0ZXh0XCIgdGl0bGU9XCJUZXh0IHRvIHNlYXJjaCBmb3JcIiB2YWx1ZT1cIicgK1xyXG4gICAgICB0ZXh0VG9TZWFyY2hGb3IgKyAnXCI+JztcclxuICB9LFxyXG4gIGN1dG9mZjogJzUwMCsgcGxheScsXHJcbiAgc2VhcmNoZWQ6ICdUZXh0IHNlYXJjaGVkIGZvcicsXHJcbiAgcG90ZW50aWFsOiAncGxheScsXHJcbiAgcHJvY2Vzc2VkOiAnUGxheScsXHJcbiAgcHJvZ3Jlc3M6ICdPdGhlcidcclxufTtcclxudmFyIGZpbmRCdWZmTmlja3M7XHJcbnZhciBmaW5kQnVmZk1pbkNhc3RMZXZlbDtcclxudmFyIGZpbmRCdWZmc0xldmVsMTc1T25seTtcclxudmFyIG9ubGluZVBsYXllcnM7XHJcbnZhciBvbmxpbmVQbGF5ZXJzU2V0dGluZztcclxudmFyIGV4dHJhUHJvZmlsZTtcclxudmFyIHByb2ZpbGVQYWdlc1RvU2VhcmNoO1xyXG52YXIgcHJvZmlsZVBhZ2VzVG9TZWFyY2hQcm9jZXNzZWQ7XHJcbnZhciBidWZmZXJQcm9ncmVzcztcclxuXHJcbmZ1bmN0aW9uIHBhZ2VMYXlvdXQobykgeyAvLyBMZWdhY3lcclxuICBleHRyYVByb2ZpbGUgPSBnZXRWYWx1ZSgnZXh0cmFQcm9maWxlJyk7XHJcbiAgcmV0dXJuICc8dGFibGUgY2xhc3M9XCJmc2hGaW5kXCI+PHRib2R5PicgK1xyXG4gICAgJzx0cj48dGQgcm93c3Bhbj1cIjJcIiBjb2xzcGFuPVwiMlwiIGNsYXNzPVwiaGVhZENlbGxcIj4nICtcclxuICAgICc8aDE+RmluZCAnICsgby5oZWFkZXIgKyAnPC9oMT48L3RkPicgK1xyXG4gICAgJzx0ZCBjbGFzcz1cImZpbmRMYWJlbFwiPicgK1xyXG4gICAgJ1NlbGVjdCAnICsgby53aGF0ICsgJyB0byBzZWFyY2ggZm9yOjwvdGQ+JyArXHJcbiAgICAnPHRkPicgK1xyXG4gICAgby5jb250cm9sKCkgK1xyXG4gICAgJzwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+JyArXHJcbiAgICAnPHRkIGNsYXNzPVwiZmluZExhYmVsXCI+JyArXHJcbiAgICAnTGV2ZWwgJyArIG8uY3V0b2ZmICsgJ2VycyBvbmx5OjwvdGQ+JyArXHJcbiAgICAnPHRkPjxpbnB1dCBpZD1cImxldmVsMTc1XCIgdHlwZT1cImNoZWNrYm94XCI+PC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQgY2xhc3M9XCJsZWZ0TGFiZWxcIj4nICtcclxuICAgIG8uc2VhcmNoZWQgK1xyXG4gICAgJzombmJzcDs8L3RkPjx0ZCBpZD1cImJ1ZmZOaWNrc1wiPiZuYnNwOzwvdGQ+JyArXHJcbiAgICAnPHRkIGNsYXNzPVwiZmluZExhYmVsXCI+U2VhcmNoIGd1aWxkIG1lbWJlcnM6PC90ZD4nICtcclxuICAgICc8dGQ+PGlucHV0IGlkPVwiZ3VpbGRNZW1iZXJzXCIgdHlwZT1cImNoZWNrYm94XCIgY2hlY2tlZD4nICtcclxuICAgICc8L3RkPjwvdHI+PHRyPicgK1xyXG4gICAgJzx0ZCBjbGFzcz1cImZpbmRMYWJlbFwiPicgK1xyXG4gICAgJyMgcG90ZW50aWFsICcgKyBvLnBvdGVudGlhbCArICdlcnMgdG8gc2VhcmNoOiZuYnNwOzwvdGQ+JyArXHJcbiAgICAnPHRkIGlkPVwicG90ZW50aWFsQnVmZmVyc1wiPjwvdGQ+JyArXHJcbiAgICAnPHRkIGNsYXNzPVwiZmluZExhYmVsXCI+U2VhcmNoIGFsbGllcy9lbmVtaWVzOicgK1xyXG4gICAgaGVscExpbmsoJ1NlYXJjaCBBbGxpZXMvRW5lbWllcycsXHJcbiAgICAgICdUaGUgY2hlY2tib3ggZW5hYmxlcyBzZWFyY2hpbmcgeW91ciBvd24gcGVyc29uYWwgJyArXHJcbiAgICAgICdhbGxpZXMvZW5lbWllcyBsaXN0IGZvciBidWZmcy48YnI+PGJyPicgK1xyXG4gICAgICAnQWRkaXRpb25hbCBwcm9maWxlcyB0byBzZWFyY2ggY2FuIGJlIGFkZGVkIGluIHRoZSB0ZXh0ICcgK1xyXG4gICAgICAnZmllbGQgdG8gdGhlIHJpZ2h0LCBzZXBhcmF0ZWQgYnkgY29tbWFzLicpICsgJzwvdGQ+JyArXHJcbiAgICAnPHRkPjxpbnB1dCBpZD1cImFsbGllc0VuZW1pZXNcIiB0eXBlPVwiY2hlY2tib3hcIiBjaGVja2VkPicgK1xyXG4gICAgJzxpbnB1dCBjbGFzcz1cImV4dHJhUHJvZmlsZVwiIGNsYXNzPVwiY3VzdG9taW5wdXRcIiBpZD1cImV4dHJhUHJvZmlsZVwiICcgK1xyXG4gICAgJ3R5cGU9XCJ0ZXh0XCIgdGl0bGU9XCJFeHRyYSBwcm9maWxlcyB0byBzZWFyY2hcIiB2YWx1ZT1cIicgK1xyXG4gICAgKGV4dHJhUHJvZmlsZSB8fCAnJykgKyAnXCI+PC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQgY2xhc3M9XCJmaW5kTGFiZWxcIj4nICtcclxuICAgICcjICcgKyBvLnByb2Nlc3NlZCArICdlcnMgcHJvY2Vzc2VkOicgK1xyXG4gICAgJyZuYnNwOzwvdGQ+PHRkIGlkPVwiYnVmZmVyc1Byb2Nlc3NlZFwiPjA8L3RkPicgK1xyXG4gICAgJzx0ZCBjbGFzcz1cImZpbmRMYWJlbFwiPlNlYXJjaCBvbmxpbmUgbGlzdDo8L3RkPicgK1xyXG4gICAgJzx0ZD48c2VsZWN0IGNsYXNzPVwic2VsZWN0T25saW5lXCIgaWQ9XCJvbmxpbmVQbGF5ZXJzXCI+JyArXHJcbiAgICAgICc8b3B0aW9uIHZhbHVlPVwiMFwiPkRpc2FibGVkPC9vcHRpb24+JyArXHJcbiAgICAgICc8b3B0aW9uIHZhbHVlPVwiNDlcIj5TaG9ydCAoZmFzdGVzdCk8L29wdGlvbj4nICtcclxuICAgICAgJzxvcHRpb24gdmFsdWU9XCI0N1wiPk1lZGl1bSAobWVkaXVtKTwvb3B0aW9uPicgK1xyXG4gICAgICAnPG9wdGlvbiB2YWx1ZT1cIjQ1XCI+TG9uZyAoc2xvd2VzdCk8L29wdGlvbj4nICtcclxuICAgICc8L3NlbGVjdD48L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZCBjbGFzcz1cImZpbmRMYWJlbFwiPicgK1xyXG4gICAgJ0ZpbmQgJyArIG8ucHJvZ3Jlc3MgKyAnIHByb2dyZXNzOicgK1xyXG4gICAgJyZuYnNwOzwvdGQ+PHRkIGNsYXNzPVwiYnVmZlByb2dcIiBpZD1cImJ1ZmZlclByb2dyZXNzXCI+SWRsZTwvdGQ+JyArXHJcbiAgICAnPHRkIGFsaWduPVwiY2VudGVyXCI+PGlucHV0IGlkPVwiY2xlYXJyZXN1bHRzYnV0dG9uXCIgJyArXHJcbiAgICAnY2xhc3M9XCJjdXN0b21idXR0b25cIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJDbGVhciBSZXN1bHRzXCI+PC90ZD4nICtcclxuICAgICc8dGQgYWxpZ249XCJjZW50ZXJcIj48aW5wdXQgaWQ9XCJmaW5kYnVmZnNidXR0b25cIiBjbGFzcz1cImN1c3RvbWJ1dHRvblwiICcgK1xyXG4gICAgJ3R5cGU9XCJidXR0b25cIiB2YWx1ZT1cIkZpbmQgQnVmZmVyc1wiPjwvdGQ+PC90cj4nICtcclxuICAgICc8L3Rib2R5PjwvdGFibGU+PGJyPicgK1xyXG4gICAgJzxoMT5Qb3RlbnRpYWwgJyArIG8ucHJvY2Vzc2VkICsgJ2VycyBhbmQgQmlvIEluZm88L2gxPjxicj4nICtcclxuICAgICc8dGFibGUgY2xhc3M9XCJmc2hSZXN1bHRcIiBpZD1cImJ1ZmZUYWJsZVwiPjx0Ym9keT4nICtcclxuICAgICc8dHI+PHRoIGNsYXNzPVwibmFtZUNvbFwiPiZuYnNwO05hbWU8L3RoPicgK1xyXG4gICAgJzx0aCBjbGFzcz1cImluZm9Db2xcIj4mbmJzcDtQbGF5ZXIgSW5mbzwvdGg+JyArXHJcbiAgICAnPHRoPiZuYnNwO05vdGFibGUgQmlvIFRleHQ8L3RoPjwvdHI+JyArXHJcbiAgICAnPC90Ym9keT48L3RhYmxlPjxicj4nICtcclxuICAgICc8ZGl2IGNsYXNzPVwiZGlzY2xhaW1cIj5EaXNjbGFpbWVyOiBUaGlzICcgK1xyXG4gICAgJ2Z1bmN0aW9uYWxpdHkgZG9lcyBhIHNpbXBsZSB0ZXh0IHNlYXJjaCBmb3IgdGhlIHRlcm1zIGFib3ZlLiAnICtcclxuICAgICdJdCBpcyBub3QgYXMgc21hcnQgYXMgeW91IGFyZSwgc28gcGxlYXNlIGRvIG5vdCBqdWRnZSB0aGUgcmVzdWx0cyAnICtcclxuICAgICd0b28gaGFyc2hseS4gSXQgZG9lcyBub3Qgc2VhcmNoIGFsbCBvbmxpbmUgcGxheWVycywganVzdCBhIHN1YnNldCAnICtcclxuICAgICdvZiB0aG9zZSB0aGF0IGhhdmUgYmVlbiBvbiByZWNlbnRseS4gJyArXHJcbiAgICAnVGhlIGFpbSBpcyB0byBiZSBmYXN0IGFuZCBzdGlsbCByZXR1cm4gYSBnb29kIHNldCBvZiByZXN1bHRzLiBUaGlzICcgK1xyXG4gICAgJ2ZlYXR1cmUgaXMgYSB3b3JrIGluIHByb2dyZXNzLCBzbyBpdCBtYXkgYmUgdHdlYWtlZCBhbmQgZW5oYW5jZWQgJyArXHJcbiAgICAnb3ZlciB0aW1lLjwvZGl2Pic7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVuaXEoYXJyLCByZW1vdmVCeSkge1xyXG4gIHZhciBzZWVuID0ge307XHJcbiAgaWYgKHJlbW92ZUJ5KSB7XHJcbiAgICByZXR1cm4gYXJyLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgIGlmIChzZWVuW2l0ZW1bcmVtb3ZlQnldXSkge3JldHVybiBmYWxzZTt9XHJcbiAgICAgIHNlZW5baXRlbVtyZW1vdmVCeV1dID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgaWYgKHNlZW5baXRlbV0pIHtyZXR1cm4gZmFsc2U7fVxyXG4gICAgc2VlbltpdGVtXSA9IHRydWU7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UHJldkJyKGJpb0NlbGxIdG1sLCBydW5uaW5nVG90YWxQb3NpdGlvbikgeyAvLyBMZWdhY3lcclxuICB2YXIgcHJldkJSID0gYmlvQ2VsbEh0bWwubGFzdEluZGV4T2YoJzxicj4nLCBydW5uaW5nVG90YWxQb3NpdGlvbiAtIDEpO1xyXG4gIGlmIChwcmV2QlIgPT09IC0xKSB7cmV0dXJuIDA7fVxyXG4gIHJldHVybiBwcmV2QlI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE5leHRCcihiaW9DZWxsSHRtbCwgcnVubmluZ1RvdGFsUG9zaXRpb24pIHsgLy8gTGVnYWN5XHJcbiAgdmFyIG5leHRCUiA9IGJpb0NlbGxIdG1sLmluZGV4T2YoJzxicj4nLCBydW5uaW5nVG90YWxQb3NpdGlvbik7XHJcbiAgaWYgKG5leHRCUiA9PT0gLTEgJiYgYmlvQ2VsbEh0bWwuaW5kZXhPZignPGJyPicpICE9PSAtMSkge1xyXG4gICAgcmV0dXJuIGJpb0NlbGxIdG1sLmxlbmd0aCAtIDU7XHJcbiAgfVxyXG4gIHJldHVybiBuZXh0QlI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEJpb0xpbmVzKGJpb0NlbGxIdG1sKSB7IC8vIExlZ2FjeVxyXG4gIHZhciByZXMgPSBbXTtcclxuICB2YXIgYnVmZlBvc2l0aW9uID0gMDtcclxuICB2YXIgc3RhcnRpbmdQb3NpdGlvbiA9IDA7XHJcbiAgdmFyIHJ1bm5pbmdUb3RhbFBvc2l0aW9uID0gMDtcclxuICB2YXIgYmlvVGV4dFRvU2VhcmNoID0gJyAnICsgYmlvQ2VsbEh0bWwgKyAnICc7XHJcbiAgdmFyIGJ1ZmZSRSA9IG5ldyBSZWdFeHAoJ1teYS16QS1aXSgoJyArXHJcbiAgICBmaW5kQnVmZk5pY2tzLnJlcGxhY2UoLywvZywgJyl8KCcpICsgJykpW15hLXpBLVpdJywgJ2knKTtcclxuICB3aGlsZSAoYnVmZlBvc2l0aW9uICE9PSAtMSkge1xyXG4gICAgYmlvVGV4dFRvU2VhcmNoID0gYmlvVGV4dFRvU2VhcmNoLnN1YnN0cihzdGFydGluZ1Bvc2l0aW9uLFxyXG4gICAgICBiaW9UZXh0VG9TZWFyY2gubGVuZ3RoKTtcclxuICAgIGJ1ZmZQb3NpdGlvbiA9IGJpb1RleHRUb1NlYXJjaC5zZWFyY2goYnVmZlJFKTtcclxuICAgIGlmIChidWZmUG9zaXRpb24gIT09IC0xKSB7XHJcbiAgICAgIHN0YXJ0aW5nUG9zaXRpb24gPSBidWZmUG9zaXRpb24gKyAxO1xyXG4gICAgICBydW5uaW5nVG90YWxQb3NpdGlvbiArPSBidWZmUG9zaXRpb247XHJcbiAgICAgIHZhciBwcmV2QlIgPSBnZXRQcmV2QnIoYmlvQ2VsbEh0bWwsIHJ1bm5pbmdUb3RhbFBvc2l0aW9uKTtcclxuICAgICAgdmFyIG5leHRCUiA9IGdldE5leHRCcihiaW9DZWxsSHRtbCwgcnVubmluZ1RvdGFsUG9zaXRpb24pO1xyXG4gICAgICB2YXIgdGV4dExpbmUgPSBiaW9DZWxsSHRtbC5zdWJzdHIocHJldkJSICsgNCwgbmV4dEJSIC0gcHJldkJSKTtcclxuICAgICAgdGV4dExpbmUgPSB0ZXh0TGluZS5yZXBsYWNlKC8oYH4pfCh+YCl8KFxce2JcXH0pfChcXHtcXC9iXFx9KS9nLCAnJyk7XHJcbiAgICAgIHJlcy5wdXNoKHRleHRMaW5lKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHVuaXEocmVzKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U3VzdGFpbihkb2MpIHtcclxuICB2YXIgYUxpbmtzID0gZG9jLmdldEVsZW1lbnRCeUlkKCdwcm9maWxlTGVmdENvbHVtbicpXHJcbiAgICAuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKTtcclxuICB2YXIgc3VzdGFpbkxldmVsO1xyXG4gIEFycmF5LnByb3RvdHlwZS5zb21lLmNhbGwoYUxpbmtzLCBmdW5jdGlvbihlbCkge1xyXG4gICAgaWYgKGVsLnRleHRDb250ZW50ID09PSAnU3VzdGFpbicpIHtcclxuICAgICAgdmFyIHN1c3RhaW5UZXh0ID0gZWwucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUubmV4dEVsZW1lbnRTaWJsaW5nXHJcbiAgICAgICAgLmZpcnN0RWxlbWVudENoaWxkLmdldEF0dHJpYnV0ZSgnZGF0YS10aXBwZWQnKTtcclxuICAgICAgc3VzdGFpbkxldmVsID0gcGFyc2VJbnQoc3VzdGFpbkxldmVsUkUuZXhlYyhzdXN0YWluVGV4dClbMV0sIDEwKTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIGZhbGxiYWNrKHN1c3RhaW5MZXZlbCwgLTEpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBuYW1lQ2VsbChkb2MsIGNhbGxiYWNrLCBsYXN0QWN0aXZpdHksIGJpb0NlbGxIdG1sKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBpbm5lclBsYXllck5hbWUgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoJ3BDQycpXHJcbiAgICAuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2gxJylbMF0udGV4dENvbnRlbnQ7XHJcbiAgdmFyIGxldmVsVmFsdWUgPSBpbnRWYWx1ZShkb2MuZ2V0RWxlbWVudEJ5SWQoJ3Byb2ZpbGVMZWZ0Q29sdW1uJylcclxuICAgIC5jaGlsZHJlbls0XS5jaGlsZHJlblswXS5yb3dzWzBdLmNlbGxzWzFdLnRleHRDb250ZW50KTtcclxuICB2YXIgdmlydHVhbExldmVsVmFsdWUgPSBwYXJzZUludChkb2MuZ2V0RWxlbWVudEJ5SWQoJ3N0YXQtdmwnKVxyXG4gICAgLnRleHRDb250ZW50LCAxMCk7XHJcbiAgdmFyIGxhc3RBY3Rpdml0eU1pbnV0ZXMgPSBwYXJzZUludChsYXN0QWN0aXZpdHlbMV0sIDEwKTtcclxuICB2YXIgbGFzdEFjdGl2aXR5SU1HID0gb25saW5lRG90KHttaW46IGxhc3RBY3Rpdml0eU1pbnV0ZXN9KTtcclxuICB2YXIgcGxheWVySFJFRiA9IGNhbGxiYWNrLmhyZWY7XHJcbiAgdmFyIGJpb1RpcCA9IGJpb0NlbGxIdG1sLnJlcGxhY2UoLyd8XCJ8XFxuL2csICcnKTtcclxuICByZXR1cm4gJzxub2JyPicgKyBsYXN0QWN0aXZpdHlJTUcgKyAnJm5ic3A7PGEgaHJlZj1cIicgK1xyXG4gICAgcGxheWVySFJFRiArICdcIiB0YXJnZXQ9XCJuZXdcIiAnICtcclxuICAgIC8vIEZJWE1FIC0gSXQga2luZCB3b3JrcyBub3csIGJ1dCBub3QgZ3VhcmFudGVlZD9cclxuICAgICdjbGFzcz1cInRpcC1zdGF0aWNcIiAnICtcclxuICAgICdkYXRhLXRpcHBlZD1cIicgKyBiaW9UaXAgKyAnXCI+JyArIGlubmVyUGxheWVyTmFtZSArICc8L2E+JyArXHJcbiAgICAnJm5ic3A7PHNwYW4gY2xhc3M9XCJmc2hCbHVlXCI+WzxzcGFuIGNsYXNzPVwiYS1yZXBseSBmc2hMaW5rXCIgJyArXHJcbiAgICAndGFyZ2V0X3BsYXllcj1cIicgKyBpbm5lclBsYXllck5hbWUgKyAnXCI+bTwvc3Bhbj5dPC9zcGFuPjwvbm9icj48YnI+JyArXHJcbiAgICAnPHNwYW4gY2xhc3M9XCJmc2hHcmF5XCI+TGV2ZWw6Jm5ic3A7PC9zcGFuPicgKyBsZXZlbFZhbHVlICtcclxuICAgICcmbmJzcDsoJyArIHZpcnR1YWxMZXZlbFZhbHVlICsgJyknO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwbGF5ZXJJbmZvKGxhc3RBY3Rpdml0eSwgc3VzdGFpbkxldmVsLCBoYXNFeHRlbmRCdWZmKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBzdXN0YWluID0gJ2ZzaFJlZCc7XHJcbiAgaWYgKHN1c3RhaW5MZXZlbCA+PSAxMDApIHtzdXN0YWluID0gJ2ZzaEdyZWVuJzt9XHJcbiAgdmFyIGV4dGVuZCA9ICc8c3BhbiBjbGFzcz1cImZzaFJlZFwiPk5vPC9zcGFuPic7XHJcbiAgaWYgKGhhc0V4dGVuZEJ1ZmYpIHtleHRlbmQgPSAnPHNwYW4gY2xhc3M9XCJmc2hHcmVlblwiPlllczwvc3Bhbj4nO31cclxuICByZXR1cm4gJzx0YWJsZT48dGJvZHk+PHRyPicgK1xyXG4gICAgJzx0ZCBjb2xzcGFuPVwiMlwiIGNsYXNzPVwicmVzQWN0XCI+TGFzdCBBY3Rpdml0eTo8L3RkPicgK1xyXG4gICAgJzx0ZCBjb2xzcGFuPVwiMlwiPjxub2JyPicgKyBsYXN0QWN0aXZpdHlbMF0gKyAnPC9ub2JyPjwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+PHRkIGNsYXNzPVwicmVzTGJsXCI+U3VzdGFpbjonICtcclxuICAgICc8L3RkPjx0ZCBjbGFzcz1cInJlc1ZhbCAnICsgc3VzdGFpbiArICdcIj4nICsgc3VzdGFpbkxldmVsICsgJyU8L3RkPicgK1xyXG4gICAgJzx0ZCBjbGFzcz1cInJlc0xibFwiPkV4dGVuZDo8L3RkPicgK1xyXG4gICAgJzx0ZCBjbGFzcz1cInJlc1ZhbFwiPicgKyBleHRlbmQgKyAnPC90ZD48L3RyPic7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRCdWZmc1BhcnNlUHJvZmlsZUFuZERpc3BsYXkocmVzcG9uc2VUZXh0LCBjYWxsYmFjaykgeyAvLyBIeWJyaWQgLSBFdmlsXHJcbiAgdmFyIGRvYyA9IGNyZWF0ZURvY3VtZW50KHJlc3BvbnNlVGV4dCk7XHJcbiAgLy8gbmFtZSBhbmQgbGV2ZWxcclxuICB2YXIgaW5uZXJQY2MgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoJ3BDQycpO1xyXG4gIC8vIGxhc3QgYWN0aXZpdHlcclxuICB2YXIgbGFzdEFjdGl2aXR5RWxlbWVudCA9IGlubmVyUGNjLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdwJylbMF07XHJcbiAgdmFyIGxhc3RBY3Rpdml0eSA9IC8oXFxkKykgbWlucywgKFxcZCspIHNlY3MvXHJcbiAgICAuZXhlYyhsYXN0QWN0aXZpdHlFbGVtZW50LnRleHRDb250ZW50KTtcclxuICAvLyBidWZmc1xyXG4gIHZhciBiaW9DZWxsSHRtbCA9IGRvYy5nZXRFbGVtZW50QnlJZCgncHJvZmlsZS1iaW8nKS5pbm5lckhUTUw7XHJcbiAgdmFyIGJ1ZmZUYWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidWZmVGFibGUnKTtcclxuICB2YXIgdGV4dExpbmVBcnJheSA9IGdldEJpb0xpbmVzKGJpb0NlbGxIdG1sKTtcclxuICAvLyBzdXN0YWluXHJcbiAgdmFyIHN1c3RhaW5MZXZlbCA9IGdldFN1c3RhaW4oZG9jKTtcclxuICAvLyBleHRlbmRcclxuICB2YXIgaGFzRXh0ZW5kQnVmZiA9IGRvYy5xdWVyeVNlbGVjdG9yKFxyXG4gICAgJ2ltZy50aXAtc3RhdGljW2RhdGEtdGlwcGVkKj1cIkV4dGVuZFwiXScpO1xyXG5cclxuICAvLyBhZGQgcm93IHRvIHRhYmxlXHJcbiAgaWYgKHRleHRMaW5lQXJyYXkubGVuZ3RoID4gMCkge1xyXG4gICAgdmFyIG5ld1JvdyA9IGJ1ZmZUYWJsZS5pbnNlcnRSb3coLTEpO1xyXG4gICAgLy8gbmFtZSBjZWxsXHJcbiAgICB2YXIgbmV3Q2VsbCA9IG5ld1Jvdy5pbnNlcnRDZWxsKDApO1xyXG4gICAgbmV3Q2VsbC5zdHlsZS52ZXJ0aWNhbEFsaWduID0gJ3RvcCc7XHJcbiAgICBuZXdDZWxsLmlubmVySFRNTCA9IG5hbWVDZWxsKGRvYywgY2FsbGJhY2ssIGxhc3RBY3Rpdml0eSwgYmlvQ2VsbEh0bWwpO1xyXG4gICAgJCgnLmEtcmVwbHknKS5jbGljayhmdW5jdGlvbihldnQpIHtcclxuICAgICAgd2luZG93Lm9wZW5RdWlja01zZ0RpYWxvZyhldnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgndGFyZ2V0X3BsYXllcicpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIHBsYXllciBpbmZvIGNlbGxcclxuICAgIG5ld0NlbGwgPSBuZXdSb3cuaW5zZXJ0Q2VsbCgxKTtcclxuICAgIG5ld0NlbGwuaW5uZXJIVE1MID0gcGxheWVySW5mbyhsYXN0QWN0aXZpdHksIHN1c3RhaW5MZXZlbCwgaGFzRXh0ZW5kQnVmZik7XHJcbiAgICBuZXdDZWxsLnN0eWxlLnZlcnRpY2FsQWxpZ24gPSAndG9wJztcclxuICAgIC8vIGJ1ZmYgY2VsbFxyXG4gICAgbmV3Q2VsbCA9IG5ld1Jvdy5pbnNlcnRDZWxsKDIpO1xyXG4gICAgdGV4dExpbmVBcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgIG5ld0NlbGwuaW5uZXJIVE1MICs9IGVsICsgJzxicj4nO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHZhciBwcm9jZXNzZWRCdWZmZXJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1ZmZlcnNQcm9jZXNzZWQnKTtcclxuICB2YXIgcG90ZW50aWFsQnVmZmVycyA9XHJcbiAgICBwYXJzZUludChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG90ZW50aWFsQnVmZmVycycpLnRleHRDb250ZW50LCAxMCk7XHJcbiAgdmFyIHByb2Nlc3NlZEJ1ZmZlcnNDb3VudCA9IHBhcnNlSW50KHByb2Nlc3NlZEJ1ZmZlcnMudGV4dENvbnRlbnQsIDEwKTtcclxuICBwcm9jZXNzZWRCdWZmZXJzLmlubmVySFRNTCA9IHByb2Nlc3NlZEJ1ZmZlcnNDb3VudCArIDE7XHJcbiAgaWYgKHBvdGVudGlhbEJ1ZmZlcnMgPT09IHByb2Nlc3NlZEJ1ZmZlcnNDb3VudCArIDEpIHtcclxuICAgIGJ1ZmZlclByb2dyZXNzLmlubmVySFRNTCA9ICdEb25lLic7XHJcbiAgICBidWZmZXJQcm9ncmVzcy5zdHlsZS5jb2xvciA9ICdibHVlJztcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRCdWZmc1BhcnNlUGxheWVyc0ZvckJ1ZmZzKCkgeyAvLyBMZWdhY3lcclxuICAvLyByZW1vdmUgZHVwbGljYXRlcyBUT0RPXHJcbiAgLy8gbm93IG5lZWQgdG8gcGFyc2UgcGxheWVyIHBhZ2VzIGZvciBidWZmIC4uLlxyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3RlbnRpYWxCdWZmZXJzJykuaW5uZXJIVE1MID1cclxuICAgIG9ubGluZVBsYXllcnMubGVuZ3RoO1xyXG4gIGlmIChvbmxpbmVQbGF5ZXJzLmxlbmd0aCA8PSAwKSB7XHJcbiAgICBidWZmZXJQcm9ncmVzcy5pbm5lckhUTUwgPSAnRG9uZS4nO1xyXG4gICAgYnVmZmVyUHJvZ3Jlc3Muc3R5bGUuY29sb3IgPSAnYmx1ZSc7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGJ1ZmZlclByb2dyZXNzLmlubmVySFRNTCA9ICdQYXJzaW5nIHBsYXllciBkYXRhIC4uLic7XHJcbiAgYnVmZmVyUHJvZ3Jlc3Muc3R5bGUuY29sb3IgPSAnZ3JlZW4nO1xyXG5cclxuICBmb3IgKHZhciBqID0gMDsgaiA8IG9ubGluZVBsYXllcnMubGVuZ3RoOyBqICs9IDEpIHtcclxuICAgIHhtbGh0dHAob25saW5lUGxheWVyc1tqXSxcclxuICAgICAgZmluZEJ1ZmZzUGFyc2VQcm9maWxlQW5kRGlzcGxheSxcclxuICAgICAge2hyZWY6IG9ubGluZVBsYXllcnNbal19KTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGNNaW5MdmwoKSB7IC8vIExlZ2FjeVxyXG4gIGlmIChmaW5kQnVmZnNMZXZlbDE3NU9ubHkpIHtyZXR1cm4gNTAwO31cclxuICByZXR1cm4gMTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY05leHRQYWdlKGN1clBhZ2UsIG1heFBhZ2UpIHsgLy8gTGVnYWN5XHJcbiAgaWYgKGN1clBhZ2UgPT09IDEpIHtyZXR1cm4gTWF0aC5yb3VuZChvbmxpbmVQbGF5ZXJzU2V0dGluZyAqIG1heFBhZ2UgLyA1MCk7fVxyXG4gIHJldHVybiBjdXJQYWdlICsgMTtcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZEJ1ZmZzUGFyc2VPbmxpbmVQbGF5ZXJzKHJlc3BvbnNlVGV4dCkgeyAvLyBMZWdhY3lcclxuICB2YXIgZG9jID0gY3JlYXRlRG9jdW1lbnQocmVzcG9uc2VUZXh0KTtcclxuICB2YXIgcGxheWVyUm93cyA9ICQoZG9jKS5maW5kKCd0YWJsZTpjb250YWlucyhcIlVzZXJuYW1lXCIpPnRib2R5PnRyOmhhcycgK1xyXG4gICAgJyh0ZD5hW2hyZWYqPVwiY21kPXByb2ZpbGUmcGxheWVyX2lkPVwiXSknKTtcclxuICB2YXIgbWF4UGFnZSA9IHBhcnNlSW50KCQoZG9jKS5maW5kKCd0ZDpoYXMoaW5wdXRbbmFtZT1cInBhZ2VcIl0pOmxhc3QnKVxyXG4gICAgLnRleHQoKS5yZXBsYWNlKC9cXEQvZywgJycpLCAxMCk7XHJcbiAgdmFyIGN1clBhZ2UgPSBwYXJzZUludCgkKGRvYykuZmluZCgnaW5wdXRbbmFtZT1cInBhZ2VcIl06bGFzdCcpLnZhbCgpXHJcbiAgICAucmVwbGFjZSgvXFxEL2csICcnKSwgMTApO1xyXG4gIGlmIChjdXJQYWdlICE9PSAxKSB7XHJcbiAgICBwbGF5ZXJSb3dzLmVhY2goZnVuY3Rpb24oaSwgZSkge1xyXG4gICAgICB2YXIgb25saW5lUGxheWVyID0gJChlKS5maW5kKCd0ZDplcSgxKSBhJykuYXR0cignaHJlZicpO1xyXG4gICAgICB2YXIgb25saW5lUGxheWVyTGV2ZWwgPSBwYXJzZUludCgkKGUpLmZpbmQoJ3RkOmVxKDIpJykudGV4dCgpXHJcbiAgICAgICAgLnJlcGxhY2UoLywvZywgJycpLCAxMCk7XHJcbiAgICAgIHZhciBvbmxpbmVQbGF5ZXJOYW1lID0gJChlKS5maW5kKCd0ZDplcSgxKSBhJykudGV4dCgpO1xyXG4gICAgICB2YXIgbWluUGxheWVyVmlydHVhbExldmVsID0gY2FsY01pbkx2bCgpO1xyXG4gICAgICBpZiAob25saW5lUGxheWVyTGV2ZWwgPj0gZmluZEJ1ZmZNaW5DYXN0TGV2ZWwgJiZcclxuICAgICAgICBvbmxpbmVQbGF5ZXJMZXZlbCA+PSBtaW5QbGF5ZXJWaXJ0dWFsTGV2ZWwpIHtcclxuICAgICAgICAvLyBhZGQgb25saW5lIHBsYXllciB0byBzZWFyY2ggbGlzdCAoYWxsIGJ1dCBzZWxmKVxyXG4gICAgICAgIGlmIChjaGFyYWN0ZXJOYW1lICE9PSBvbmxpbmVQbGF5ZXJOYW1lLnRyaW0oKSkge1xyXG4gICAgICAgICAgb25saW5lUGxheWVycy5wdXNoKG9ubGluZVBsYXllcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgaWYgKGN1clBhZ2UgPCBtYXhQYWdlKSB7XHJcbiAgICB2YXIgbmV3UGFnZSA9IGNhbGNOZXh0UGFnZShjdXJQYWdlLCBtYXhQYWdlKTtcclxuICAgIGJ1ZmZlclByb2dyZXNzLmlubmVySFRNTCA9ICdQYXJzaW5nIG9ubGluZSBwYWdlICcgKyBjdXJQYWdlICsgJyAuLi4nO1xyXG4gICAgeG1saHR0cCgnaW5kZXgucGhwP2NtZD1vbmxpbmVwbGF5ZXJzJnBhZ2U9JyArIG5ld1BhZ2UsXHJcbiAgICAgIGZpbmRCdWZmc1BhcnNlT25saW5lUGxheWVycywge3BhZ2U6IG5ld1BhZ2V9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYWxsIGRvbmUgc28gbW92aW5nIG9uXHJcbiAgICBmaW5kQnVmZnNQYXJzZVBsYXllcnNGb3JCdWZmcygpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZmluZEJ1ZmZzUGFyc2VPbmxpbmVQbGF5ZXJzU3RhcnQoKSB7IC8vIExlZ2FjeVxyXG4gIC8vIGlmIG9wdGlvbiBlbmFibGVkIHRoZW4gcGFyc2Ugb25saW5lIHBsYXllcnNcclxuICBvbmxpbmVQbGF5ZXJzU2V0dGluZyA9XHJcbiAgICBwYXJzZUludChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb25saW5lUGxheWVycycpLnZhbHVlLCAxMCk7XHJcbiAgaWYgKG9ubGluZVBsYXllcnNTZXR0aW5nICE9PSAwKSB7XHJcbiAgICB4bWxodHRwKCdpbmRleC5waHA/Y21kPW9ubGluZXBsYXllcnMmcGFnZT0xJyxcclxuICAgICAgZmluZEJ1ZmZzUGFyc2VPbmxpbmVQbGF5ZXJzLCB7cGFnZTogMX0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBmaW5kQnVmZnNQYXJzZVBsYXllcnNGb3JCdWZmcygpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY0xhc3RBY3RNaW5zKHRpcHBlZCkge1xyXG4gIHZhciBsYXN0QWN0aXZpdHkgPSBsYXN0QWN0aXZpdHlSRS5leGVjKHRpcHBlZCk7XHJcbiAgdmFyIGxhc3RBY3Rpdml0eURheXMgPSBwYXJzZUludChsYXN0QWN0aXZpdHlbMV0sIDEwKTtcclxuICB2YXIgbGFzdEFjdGl2aXR5SG91cnMgPSBwYXJzZUludChsYXN0QWN0aXZpdHlbMl0sIDEwKSArIGxhc3RBY3Rpdml0eURheXMgKiAyNDtcclxuICByZXR1cm4gcGFyc2VJbnQobGFzdEFjdGl2aXR5WzNdLCAxMCkgKyBsYXN0QWN0aXZpdHlIb3VycyAqIDYwO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZVBsYXllckxpbmsoZWwpIHtcclxuICB2YXIgdGlwcGVkID0gZWwuZGF0YXNldC50aXBwZWQ7XHJcbiAgdmFyIGxhc3RBY3Rpdml0eU1pbnV0ZXMgPSBjYWxjTGFzdEFjdE1pbnModGlwcGVkKTtcclxuICAvLyBjaGVjayBpZiB0aGV5IGFyZSBoaWdoIGVub3VnaCBsZXZlbCB0byBjYXN0IHRoZSBidWZmXHJcbiAgdmFyIHZsZXZlbCA9IE51bWJlcigvVkw6Lis/KFxcZCspLy5leGVjKHRpcHBlZClbMV0pO1xyXG4gIHZhciBtaW5QbGF5ZXJWaXJ0dWFsTGV2ZWwgPSBjYWxjTWluTHZsKCk7XHJcbiAgaWYgKGxhc3RBY3Rpdml0eU1pbnV0ZXMgPCA1ICYmXHJcbiAgICB2bGV2ZWwgPj0gZmluZEJ1ZmZNaW5DYXN0TGV2ZWwgJiZcclxuICAgIHZsZXZlbCA+PSBtaW5QbGF5ZXJWaXJ0dWFsTGV2ZWwpIHtcclxuICAgIC8vIGFkZCBvbmxpbmUgcGxheWVyIHRvIHNlYXJjaCBsaXN0IChhbGwgYnV0IHNlbGYpXHJcbiAgICB2YXIgb25saW5lUGxheWVyID0gZWwuaHJlZjtcclxuICAgIGlmIChjaGFyYWN0ZXJOYW1lICE9PSBlbC50ZXh0Q29udGVudCkge1xyXG4gICAgICBvbmxpbmVQbGF5ZXJzLnB1c2gob25saW5lUGxheWVyKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRCdWZmc1BhcnNlUHJvZmlsZVBhZ2UocmVzcG9uc2VUZXh0KSB7XHJcbiAgdmFyIGRvYyA9IGNyZWF0ZURvY3VtZW50KHJlc3BvbnNlVGV4dCk7XHJcbiAgdmFyIHByb2ZpbGVBbGxpZXNFbmVtaWVzID1cclxuICAgIGRvYy5xdWVyeVNlbGVjdG9yQWxsKCcjcHJvZmlsZUxlZnRDb2x1bW4gYVtkYXRhLXRpcHBlZCo9XCJMYXN0IEFjdGl2aXR5XCJdJyk7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChwcm9maWxlQWxsaWVzRW5lbWllcywgcGFyc2VQbGF5ZXJMaW5rKTtcclxuICAvLyBjb250aW51ZSB3aXRoIG9ubGluZSBwbGF5ZXJzXHJcbiAgcHJvZmlsZVBhZ2VzVG9TZWFyY2hQcm9jZXNzZWQgKz0gMTtcclxuICBpZiAocHJvZmlsZVBhZ2VzVG9TZWFyY2hQcm9jZXNzZWQgPT09XHJcbiAgICBwcm9maWxlUGFnZXNUb1NlYXJjaC5sZW5ndGgpIHtcclxuICAgIGZpbmRCdWZmc1BhcnNlT25saW5lUGxheWVyc1N0YXJ0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kQnVmZnNQYXJzZVByb2ZpbGVQYWdlU3RhcnQoKSB7IC8vIExlZ2FjeVxyXG4gIC8vIGlmIG9wdGlvbiBlbmFibGVkIHRoZW4gcGFyc2UgcHJvZmlsZXNcclxuICBwcm9maWxlUGFnZXNUb1NlYXJjaCA9IFtdO1xyXG4gIHByb2ZpbGVQYWdlc1RvU2VhcmNoLnB1c2goJ2luZGV4LnBocD9jbWQ9cHJvZmlsZScpO1xyXG4gIHZhciBleHRyYVByb2ZpbGVBcnJheSA9IGV4dHJhUHJvZmlsZS5zcGxpdCgnLCcpO1xyXG4gIGV4dHJhUHJvZmlsZUFycmF5LmZvckVhY2goZnVuY3Rpb24oZWwpIHtcclxuICAgIHByb2ZpbGVQYWdlc1RvU2VhcmNoLnB1c2goJ2luZGV4LnBocD9jbWQ9ZmluZHBsYXllcicgK1xyXG4gICAgICAnJnNlYXJjaF9hY3RpdmU9MSZzZWFyY2hfbGV2ZWxfbWF4PSZzZWFyY2hfbGV2ZWxfbWluPScgK1xyXG4gICAgICAnJnNlYXJjaF91c2VybmFtZT0nICsgZWwgKyAnJnNlYXJjaF9zaG93X2ZpcnN0PTEnKTtcclxuICB9KTtcclxuICBwcm9maWxlUGFnZXNUb1NlYXJjaFByb2Nlc3NlZCA9IDA7XHJcbiAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbGxpZXNFbmVtaWVzJykuY2hlY2tlZCkge1xyXG4gICAgcHJvZmlsZVBhZ2VzVG9TZWFyY2guZm9yRWFjaChmdW5jdGlvbihlbCkge1xyXG4gICAgICB4bWxodHRwKGVsLCBmaW5kQnVmZnNQYXJzZVByb2ZpbGVQYWdlKTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBmaW5kQnVmZnNQYXJzZU9ubGluZVBsYXllcnNTdGFydCgpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZmluZEJ1ZmZzUGFyc2VHdWlsZE1hbmFnZVBhZ2UocmVzcG9uc2VUZXh0KSB7XHJcbiAgdmFyIGRvYyA9IGNyZWF0ZURvY3VtZW50KHJlc3BvbnNlVGV4dCk7XHJcbiAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdndWlsZE1lbWJlcnMnKS5jaGVja2VkKSB7XHJcbiAgICB2YXIgbWVtTGlzdCA9IGRvYy5xdWVyeVNlbGVjdG9yQWxsKCcjcENDIGFbZGF0YS10aXBwZWQqPVwiPHRkPlZMOjwvdGQ+XCJdJyk7XHJcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKG1lbUxpc3QsIHBhcnNlUGxheWVyTGluayk7XHJcbiAgfVxyXG4gIC8vIGNvbnRpbnVlIHdpdGggcHJvZmlsZSBwYWdlc1xyXG4gIGZpbmRCdWZmc1BhcnNlUHJvZmlsZVBhZ2VTdGFydCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kQnVmZnNDbGVhclJlc3VsdHMoKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBidWZmVGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnVmZlRhYmxlJyk7XHJcbiAgZm9yICh2YXIgaiA9IGJ1ZmZUYWJsZS5yb3dzLmxlbmd0aDsgaiA+IDE7IGogLT0gMSkge1xyXG4gICAgYnVmZlRhYmxlLmRlbGV0ZVJvdyhqIC0gMSk7XHJcbiAgfVxyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidWZmTmlja3MnKS5pbm5lckhUTUwgPSAnJztcclxuICAvLyB2YXIgYnVmZmVyUHJvZ3Jlc3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnVmZmVyUHJvZ3Jlc3MnKTtcclxuICBidWZmZXJQcm9ncmVzcy5pbm5lckhUTUwgPSAnSWRsZS4nO1xyXG4gIGJ1ZmZlclByb2dyZXNzLnN0eWxlLmNvbG9yID0gJ2JsYWNrJztcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG90ZW50aWFsQnVmZmVycycpLmlubmVySFRNTCA9ICcnO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidWZmZXJzUHJvY2Vzc2VkJykuaW5uZXJIVE1MID0gMDtcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZEFueVN0YXJ0KHByb2dNc2cpIHtcclxuICBjaGFyYWN0ZXJOYW1lID0gcGxheWVyTmFtZSgpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidWZmTmlja3MnKS5pbm5lckhUTUwgPSBmaW5kQnVmZk5pY2tzO1xyXG4gIGJ1ZmZlclByb2dyZXNzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1ZmZlclByb2dyZXNzJyk7XHJcbiAgYnVmZmVyUHJvZ3Jlc3MuaW5uZXJIVE1MID0gJ0dhdGhlcmluZyBsaXN0IG9mICcgKyBwcm9nTXNnICsgJyAuLi4nO1xyXG4gIGJ1ZmZlclByb2dyZXNzLnN0eWxlLmNvbG9yID0gJ2dyZWVuJztcclxuICBmaW5kQnVmZnNMZXZlbDE3NU9ubHkgPVxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xldmVsMTc1JykuY2hlY2tlZDtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnVmZmVyc1Byb2Nlc3NlZCcpLmlubmVySFRNTCA9IDA7XHJcbiAgb25saW5lUGxheWVycyA9IFtdO1xyXG4gIGV4dHJhUHJvZmlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleHRyYVByb2ZpbGUnKS52YWx1ZTtcclxuICBzZXRWYWx1ZSgnZXh0cmFQcm9maWxlJywgZXh0cmFQcm9maWxlKTtcclxuICAvLyBnZXQgbGlzdCBvZiBwbGF5ZXJzIHRvIHNlYXJjaCwgc3RhcnRpbmcgd2l0aCBndWlsZD5tYW5hZ2UgcGFnZVxyXG4gIHhtbGh0dHAoJ2luZGV4LnBocD9jbWQ9Z3VpbGQmc3ViY21kPW1hbmFnZScsXHJcbiAgICBmaW5kQnVmZnNQYXJzZUd1aWxkTWFuYWdlUGFnZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRCdWZmc1N0YXJ0KCkgeyAvLyBMZWdhY3lcclxuICB2YXIgc2VsZWN0ZWRCdWZmID0gcGFyc2VJbnQoJCgnI3NlbGVjdGVkQnVmZicpLnZhbCgpLCAxMCk7XHJcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBidWZmTGlzdC5sZW5ndGg7IGogKz0gMSkge1xyXG4gICAgaWYgKHNlbGVjdGVkQnVmZiA9PT0gYnVmZkxpc3Rbal0uaWQpIHtcclxuICAgICAgZmluZEJ1ZmZOaWNrcyA9IGJ1ZmZMaXN0W2pdLm5pY2tzO1xyXG4gICAgICBmaW5kQnVmZk1pbkNhc3RMZXZlbCA9IGJ1ZmZMaXN0W2pdLmx2bDtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGZpbmRBbnlTdGFydCgncG90ZW50aWFsIGJ1ZmZlcnMnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZE90aGVyU3RhcnQoKSB7IC8vIExlZ2FjeVxyXG4gIHZhciB0ZXh0VG9TZWFyY2hGb3IgPSAkKCcjdGV4dFRvU2VhcmNoRm9yJykudmFsKCkucmVwbGFjZSgvXFxzKixcXHMqLywgJywnKTtcclxuICBzZXRWYWx1ZSgndGV4dFRvU2VhcmNoRm9yJywgdGV4dFRvU2VhcmNoRm9yKTtcclxuICBmaW5kQnVmZk5pY2tzID0gdGV4dFRvU2VhcmNoRm9yO1xyXG4gIGZpbmRCdWZmTWluQ2FzdExldmVsID0gMTtcclxuICBmaW5kQW55U3RhcnQoJ3Byb2ZpbGVzIHRvIHNlYXJjaCcpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0RmluZEJ1ZmZzKGluamVjdG9yKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBjb250ZW50ID0gaW5qZWN0b3IgfHwgcENDO1xyXG4gIGNhbGYuc29ydEJ5ID0gJ25hbWUnO1xyXG4gIGNhbGYuc29ydEFzYyA9IHRydWU7XHJcbiAgYnVmZkxpc3Quc29ydChzdHJpbmdTb3J0KTtcclxuICBjb250ZW50LmlubmVySFRNTCA9IHBhZ2VMYXlvdXQoYnVmZkN1c3RvbSk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbmRidWZmc2J1dHRvbicpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmaW5kQnVmZnNTdGFydCwgdHJ1ZSk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NsZWFycmVzdWx0c2J1dHRvbicpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmaW5kQnVmZnNDbGVhclJlc3VsdHMsIHRydWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0RmluZE90aGVyKGluamVjdG9yKSB7IC8vIE5hdGl2ZSAtIEJhZFxyXG4gIHZhciBjb250ZW50ID0gaW5qZWN0b3IgfHwgcENDO1xyXG4gIGNvbnRlbnQuaW5uZXJIVE1MID0gcGFnZUxheW91dChvdGhlckN1c3RvbSk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbmRidWZmc2J1dHRvbicpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmaW5kT3RoZXJTdGFydCwgdHJ1ZSk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NsZWFycmVzdWx0c2J1dHRvbicpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmaW5kQnVmZnNDbGVhclJlc3VsdHMsIHRydWUpO1xyXG59XHJcbiIsImltcG9ydCB7Y3JlYXRlRGl2fSBmcm9tICcuLi9jb21tb24vY0VsZW1lbnQnO1xyXG5pbXBvcnQgZHJhZ2dhYmxlIGZyb20gJy4uL2NvbW1vbi9kcmFnU3RhcnQnO1xyXG5pbXBvcnQgaW5qZWN0QnVmZkxvZyBmcm9tICcuLi9idWZmTG9nL2luamVjdEJ1ZmZMb2cnO1xyXG5pbXBvcnQge2luamVjdEZzQm94Q29udGVudH0gZnJvbSAnLi4vbWlzYyc7XHJcbmltcG9ydCBpbmplY3RNb25zdGVyTG9nIGZyb20gJy4uL21vbnN0b3JMb2cnO1xyXG5pbXBvcnQgaW5qZWN0Tm90ZXBhZFNob3dMb2dzIGZyb20gJy4uL2NvbWJhdExvZyc7XHJcbmltcG9ydCBpbmplY3RPbmxpbmVQbGF5ZXJzIGZyb20gJy4uL29ubGluZVBsYXllcnMnO1xyXG5pbXBvcnQgaW5qZWN0UmVjaXBlTWFuYWdlciBmcm9tICcuLi9yZWNpcGVNZ3IvcmVjaXBlTWdyJztcclxuaW1wb3J0IGluc2VydFF1aWNrRXh0cmFjdCBmcm9tICcuLi9xdWlja0V4dHJhY3QnO1xyXG5pbXBvcnQgaW5zZXJ0UXVpY2tXZWFyIGZyb20gJy4uL3F1aWNrV2Vhci9xdWlja1dlYXInO1xyXG5pbXBvcnQgalF1ZXJ5RGlhbG9nIGZyb20gJy4valF1ZXJ5RGlhbG9nJztcclxuaW1wb3J0IHtzY3JlZW52aWV3fSBmcm9tICcuLi9zdXBwb3J0L2ZzaEdhJztcclxuaW1wb3J0IHtnZXRWYWx1ZSwgaW1hZ2VTZXJ2ZXJ9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtpbmplY3RBdWN0aW9uU2VhcmNoLCBpbmplY3RRdWlja0xpbmtNYW5hZ2VyfSBmcm9tICcuLi9saXN0cyc7XHJcbmltcG9ydCB7aW5qZWN0RmluZEJ1ZmZzLCBpbmplY3RGaW5kT3RoZXJ9IGZyb20gJy4uL2ZpbmRCdWZmcyc7XHJcblxyXG52YXIgaGVscGVyTWVudUJsb2IgPVxyXG4gICc8ZGl2IGNsYXNzPVwiY29sdW1uXCI+PGgzPkNoYXJhY3RlcjwvaDM+PHVsPicgK1xyXG4gICc8bGk+PHNwYW4gY2xhc3M9XCJmc2hMaW5rXCI+QnVmZiBMb2c8L3NwYW4+PC9saT4nICtcclxuICAnPGxpPjxzcGFuIGNsYXNzPVwiZnNoTGlua1wiPkNvbWJhdCBMb2c8L3NwYW4+PC9saT4nICtcclxuICAnPGxpPjxzcGFuIGNsYXNzPVwiZnNoTGlua1wiPkNyZWF0dXJlIExvZzwvc3Bhbj48L2xpPicgK1xyXG4gICc8bGk+PHNwYW4gY2xhc3M9XCJmc2hMaW5rXCI+UmVjaXBlIE1hbmFnZXI8L3NwYW4+PC9saT4nICtcclxuICAnPGxpPjxzcGFuIGNsYXNzPVwiZnNoTGlua1wiPlF1aWNrIExpbmtzPC9zcGFuPjwvbGk+JyArXHJcbiAgJzwvdWw+PGgzPkFjdGlvbnM8L2gzPjx1bD4nICtcclxuICAnPGxpPjxzcGFuIGNsYXNzPVwiZnNoTGlua1wiPkZpbmQgQnVmZnM8L3NwYW4+PC9saT4nICtcclxuICAnPGxpPjxzcGFuIGNsYXNzPVwiZnNoTGlua1wiPkZpbmQgT3RoZXI8L3NwYW4+PC9saT4nICtcclxuICAnPGxpPjxzcGFuIGNsYXNzPVwiZnNoTGlua1wiPk9ubGluZSBQbGF5ZXJzPC9zcGFuPjwvbGk+JyArXHJcbiAgJzxsaT48c3BhbiBjbGFzcz1cImZzaExpbmtcIj5BSCBRdWljayBTZWFyY2g8L3NwYW4+PC9saT4nICtcclxuICAnPC91bD48aDM+RXh0cmE8L2gzPjx1bD4nICtcclxuICAnPGxpPjxzcGFuIGNsYXNzPVwiZnNoTGlua1wiPlF1aWNrIEV4dHJhY3Q8L3NwYW4+PC9saT4nICtcclxuICAnPGxpPjxzcGFuIGNsYXNzPVwiZnNoTGlua1wiPlF1aWNrIFdlYXI8L3NwYW4+PC9saT4nICtcclxuICAnPGxpPjxzcGFuIGNsYXNzPVwiZnNoTGlua1wiPkZTIEJveCBMb2c8L3NwYW4+PC9saT4nICtcclxuICAnPC91bD48aDM+RlNIIGRldmVsb3BlciBxdWljayBsaW5rczwvaDM+PHVsPicgK1xyXG4gICc8bGk+PHNwYW4gY2xhc3M9XCJhLXJlcGx5XCIgdGFyZ2V0X3BsYXllcj1cIlBvaW50eUhhaXJcIj5QTTwvc3Bhbj4gJyArXHJcbiAgJzxhIGhyZWY9XCJpbmRleC5waHA/Y21kPXByb2ZpbGUmcGxheWVyX2lkPTE5NjM1MTBcIj5Qb2ludHlIYWlyPC9hPjwvbGk+JyArXHJcbiAgJzxsaT48c3BhbiBjbGFzcz1cImEtcmVwbHlcIiB0YXJnZXRfcGxheWVyPVwieXV1emhhblwiPlBNPC9zcGFuPiAnICtcclxuICAnPGEgaHJlZj1cImluZGV4LnBocD9jbWQ9cHJvZmlsZSZwbGF5ZXJfaWQ9MTU5OTk4N1wiPnl1dXpoYW48L2E+PC9saT4nICtcclxuICAnPC91bD48L2Rpdj4nO1xyXG5cclxudmFyIGZ1bmN0aW9uTG9va3VwID0ge1xyXG4gICdCdWZmIExvZyc6IGluamVjdEJ1ZmZMb2csXHJcbiAgJ0NvbWJhdCBMb2cnOiBpbmplY3ROb3RlcGFkU2hvd0xvZ3MsXHJcbiAgJ0NyZWF0dXJlIExvZyc6IGluamVjdE1vbnN0ZXJMb2csXHJcbiAgJ1JlY2lwZSBNYW5hZ2VyJzogaW5qZWN0UmVjaXBlTWFuYWdlcixcclxuICAnUXVpY2sgTGlua3MnOiBpbmplY3RRdWlja0xpbmtNYW5hZ2VyLFxyXG4gICdGaW5kIEJ1ZmZzJzogaW5qZWN0RmluZEJ1ZmZzLFxyXG4gICdGaW5kIE90aGVyJzogaW5qZWN0RmluZE90aGVyLFxyXG4gICdPbmxpbmUgUGxheWVycyc6IGluamVjdE9ubGluZVBsYXllcnMsXHJcbiAgJ0FIIFF1aWNrIFNlYXJjaCc6IGluamVjdEF1Y3Rpb25TZWFyY2gsXHJcbiAgJ1F1aWNrIEV4dHJhY3QnOiBpbnNlcnRRdWlja0V4dHJhY3QsXHJcbiAgJ1F1aWNrIFdlYXInOiBpbnNlcnRRdWlja1dlYXIsXHJcbiAgJ0ZTIEJveCBMb2cnOiBpbmplY3RGc0JveENvbnRlbnRcclxufTtcclxuXHJcbmZ1bmN0aW9uIGNhbGxIZWxwZXJGdW5jdGlvbihldnQpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIGZ1bmN0aW9uUGF0aCA9IGV2dC50YXJnZXQudGV4dENvbnRlbnQ7XHJcbiAgdmFyIGZuID0gZnVuY3Rpb25Mb29rdXBbZnVuY3Rpb25QYXRoXTtcclxuICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICBzY3JlZW52aWV3KGZ1bmN0aW9uUGF0aCk7XHJcbiAgICBqUXVlcnlEaWFsb2coZm4pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZXZlbnRIYW5kbGVyKGV2dCkge1xyXG4gIGlmIChldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZnNoTGluaycpKSB7XHJcbiAgICBjYWxsSGVscGVyRnVuY3Rpb24oZXZ0KTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhLXJlcGx5JykpIHtcclxuICAgIHdpbmRvdy5vcGVuUXVpY2tNc2dEaWFsb2coZXZ0LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ3RhcmdldF9wbGF5ZXInKSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93SGVscGVyTWVudSgpIHtcclxuICB2YXIgaGVscGVyTWVudSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoZWxwZXJNZW51Jyk7XHJcbiAgaGVscGVyTWVudS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgc2hvd0hlbHBlck1lbnUpO1xyXG5cclxuICB2YXIgaGVscGVyTWVudURpdiA9IGNyZWF0ZURpdih7XHJcbiAgICBpZDogJ2hlbHBlck1lbnVEaXYnLFxyXG4gICAgY2xhc3NOYW1lOiAnaGVscGVyTWVudURpdicsXHJcbiAgICBzdHlsZToge1xyXG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6ICd1cmwoJyArIGltYWdlU2VydmVyICtcclxuICAgICAgICAnL3NraW4vaW5uZXJfYmcuanBnKSdcclxuICAgIH1cclxuICB9KTtcclxuICBoZWxwZXJNZW51RGl2Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgaGVscGVyTWVudUJsb2IpO1xyXG4gIGhlbHBlck1lbnUuYXBwZW5kQ2hpbGQoaGVscGVyTWVudURpdik7XHJcbiAgaGVscGVyTWVudS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2dCkge1xyXG4gICAgaWYgKGV2dC50YXJnZXQuaWQgIT09ICdoZWxwZXJNZW51Jykge3JldHVybjt9XHJcbiAgICB2YXIgbWVudSA9IGV2dC50YXJnZXQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICBtZW51LmNsYXNzTGlzdC50b2dnbGUoJ3Nob3dNZW51RGl2Jyk7XHJcbiAgfSk7XHJcbiAgaGVscGVyTWVudURpdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50SGFuZGxlcik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhdmVOb2RlKG5vZGUpIHtcclxuICB2YXIgaGVscGVyTWVudSA9IGNyZWF0ZURpdih7XHJcbiAgICBpZDogJ2hlbHBlck1lbnUnLFxyXG4gICAgY2xhc3NOYW1lOiAnaGVscGVyTWVudScsXHJcbiAgICBpbm5lckhUTUw6ICdIZWxwZXImbmJzcDtNZW51J1xyXG4gIH0pO1xyXG4gIGlmIChnZXRWYWx1ZSgna2VlcEhlbHBlck1lbnVPblNjcmVlbicpKSB7XHJcbiAgICBoZWxwZXJNZW51LmNsYXNzTGlzdC5hZGQoJ2ZzaEZpeGVkJyk7XHJcbiAgfVxyXG4gIGhlbHBlck1lbnUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIHNob3dIZWxwZXJNZW51KTtcclxuICBpZiAoZ2V0VmFsdWUoJ2RyYWdnYWJsZUhlbHBlck1lbnUnKSkge1xyXG4gICAgaGVscGVyTWVudS5jbGFzc0xpc3QuYWRkKCdmc2hNb3ZlJyk7XHJcbiAgICBkcmFnZ2FibGUoaGVscGVyTWVudSk7XHJcbiAgfVxyXG4gIG5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaGVscGVyTWVudSwgbm9kZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluamVjdEhlbHBlck1lbnUoKSB7XHJcbiAgLy8gZG9uJ3QgcHV0IGFsbCB0aGUgbWVudSBjb2RlIGhlcmUgKGJ1dCBjYWxsIGlmIGNsaWNrZWQpIHRvIG1pbmltaXplIGxhZ1xyXG4gIHZhciBub2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXRiYXItY29udGFpbmVyJyk7XHJcbiAgaWYgKG5vZGUpIHtoYXZlTm9kZShub2RlKTt9XHJcbn1cclxuIiwiaW1wb3J0IHtwQ0N9IGZyb20gJy4uL3N1cHBvcnQvbGF5b3V0JztcclxuaW1wb3J0IHtnZXRWYWx1ZSwgcGFyc2VEYXRlQXNUaW1lc3RhbXAsIHNldFZhbHVlfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG5mdW5jdGlvbiBjb250YWluc05ld3NIZWFkKGVsKSB7XHJcbiAgcmV0dXJuIGVsLmNsYXNzTGlzdC5jb250YWlucygnbmV3c19oZWFkJykgfHxcclxuICAgIGVsLmNsYXNzTGlzdC5jb250YWlucygnbmV3c19oZWFkX3RhdmVybicpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbG9zZXN0SGVhZChlbCkge1xyXG4gIGlmIChjb250YWluc05ld3NIZWFkKGVsKSkge1xyXG4gICAgcmV0dXJuIGVsO1xyXG4gIH1cclxuICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCduZXdzX2xlZnRfY29sdW1uJykpIHtyZXR1cm47fVxyXG4gIHJldHVybiBjbG9zZXN0SGVhZChlbC5wYXJlbnROb2RlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TmV3c0NsYXNzKG5ld3NIZWFkKSB7XHJcbiAgaWYgKG5ld3NIZWFkLmNsYXNzTGlzdC5jb250YWlucygnbmV3c19oZWFkX3RhdmVybicpKSB7XHJcbiAgICByZXR1cm4gJy5uZXdzX2JvZHlfdGF2ZXJuJztcclxuICB9XHJcbiAgcmV0dXJuICcubmV3c19ib2R5JztcclxufVxyXG5cclxuZnVuY3Rpb24gZ290TmV3c0hlYWQoZXZ0LCBuZXdzSGVhZCkgeyAvLyBqUXVlcnlcclxuICB2YXIgbmV3c0JvZHkgPSBuZXdzSGVhZC5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgdmFyIG5ld3NDbGFzcyA9IGdldE5ld3NDbGFzcyhuZXdzSGVhZCk7XHJcbiAgaWYgKCEkKG5ld3NCb2R5KS5kYXRhKCdvcGVuJykpIHtcclxuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgJChuZXdzQ2xhc3MpLmhpZGUoKS5kYXRhKCdvcGVuJywgZmFsc2UpO1xyXG4gICAgJChuZXdzQm9keSkuc2hvdygpLmRhdGEoJ29wZW4nLCB0cnVlKTtcclxuICB9IGVsc2UgaWYgKGV2dC50YXJnZXQudGFnTmFtZSAhPT0gJ0EnKSB7XHJcbiAgICAkKG5ld3NCb2R5KS5oaWRlKCkuZGF0YSgnb3BlbicsIGZhbHNlKTtcclxuICB9XHJcbiAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBuZXdzRXZ0KGV2dCkge1xyXG4gIHZhciBuZXdzSGVhZCA9IGNsb3Nlc3RIZWFkKGV2dC50YXJnZXQpO1xyXG4gIGlmIChuZXdzSGVhZCkge2dvdE5ld3NIZWFkKGV2dCwgbmV3c0hlYWQpO31cclxufVxyXG5cclxuZnVuY3Rpb24gZml4Q29sbGFwc2UoKSB7XHJcbiAgdmFyIG5ld3NDb2wgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCduZXdzX2xlZnRfY29sdW1uJyk7XHJcbiAgaWYgKG5ld3NDb2wubGVuZ3RoICE9PSAxKSB7cmV0dXJuO31cclxuICBuZXdzQ29sWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbmV3c0V2dCwgdHJ1ZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvb2tGb3JQdlBMYWRkZXIoKSB7XHJcbiAgdmFyIGxhc3RMYWRkZXJSZXNldCA9IGdldFZhbHVlKCdsYXN0TGFkZGVyUmVzZXQnKTtcclxuICB2YXIgcnVtb3VycyA9IHBDQy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCduZXdzX2hlYWRfdGF2ZXJuJyk7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChydW1vdXJzLCBmdW5jdGlvbihoZWFkKSB7XHJcbiAgICBpZiAoaGVhZC5jaGlsZHJlblsxXS50ZXh0Q29udGVudCA9PT0gJ1B2UCBMYWRkZXInKSB7XHJcbiAgICAgIHZhciBsb2dUaW1lID0gcGFyc2VEYXRlQXNUaW1lc3RhbXAoaGVhZC5jaGlsZHJlblsyXS50ZXh0Q29udGVudCk7XHJcbiAgICAgIGlmIChsb2dUaW1lID4gbGFzdExhZGRlclJlc2V0KSB7XHJcbiAgICAgICAgc2V0VmFsdWUoJ2xhc3RMYWRkZXJSZXNldCcsIGxvZ1RpbWUpO1xyXG4gICAgICAgIGxhc3RMYWRkZXJSZXNldCA9IGxvZ1RpbWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0SG9tZVBhZ2VUd29MaW5rKCkge1xyXG4gIHZhciBhcmNoaXZlTGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAnI3BDQyBhW2hyZWY9XCJpbmRleC5waHA/Y21kPSZzdWJjbWQ9dmlld3VwZGF0ZWFyY2hpdmVcIl0nKTtcclxuICBpZiAoIWFyY2hpdmVMaW5rKSB7cmV0dXJuO31cclxuICBhcmNoaXZlTGluay5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyZW5kJywgJyZuYnNwOzxhIGhyZWY9XCJpbmRleC5waHA/Y21kPScgK1xyXG4gICAgJyZzdWJjbWQ9dmlld3VwZGF0ZWFyY2hpdmUmc3ViY21kMj0mcGFnZT0yJnNlYXJjaF90ZXh0PVwiPicgK1xyXG4gICAgJ1ZpZXcgVXBkYXRlcyBQYWdlIDI8L2E+Jyk7XHJcbiAgYXJjaGl2ZUxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgJyNwQ0MgYVtocmVmPVwiaW5kZXgucGhwP2NtZD0mc3ViY21kPXZpZXdhcmNoaXZlXCJdJyk7XHJcbiAgYXJjaGl2ZUxpbmsuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmVuZCcsICcmbmJzcDs8YSBocmVmPVwiaW5kZXgucGhwP2NtZD0nICtcclxuICAgICcmc3ViY21kPXZpZXdhcmNoaXZlJnN1YmNtZDI9JnBhZ2U9MiZzZWFyY2hfdGV4dD1cIj5WaWV3IE5ld3MgUGFnZSAyPC9hPicpO1xyXG4gIGZpeENvbGxhcHNlKCk7XHJcbiAgbG9va0ZvclB2UExhZGRlcigpO1xyXG59XHJcbiIsImltcG9ydCB7Z2V0VmFsdWV9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IGluamVjdEJ1ZmZMb2cgZnJvbSAnLi4vYnVmZkxvZy9pbmplY3RCdWZmTG9nJztcclxuaW1wb3J0IGluamVjdE1vbnN0ZXJMb2cgZnJvbSAnLi4vbW9uc3RvckxvZyc7XHJcbmltcG9ydCBpbmplY3ROb3RlcGFkU2hvd0xvZ3MgZnJvbSAnLi4vY29tYmF0TG9nJztcclxuaW1wb3J0IGluamVjdE9ubGluZVBsYXllcnMgZnJvbSAnLi4vb25saW5lUGxheWVycyc7XHJcbmltcG9ydCBpbmplY3RSZWNpcGVNYW5hZ2VyIGZyb20gJy4uL3JlY2lwZU1nci9yZWNpcGVNZ3InO1xyXG5pbXBvcnQgalF1ZXJ5RGlhbG9nIGZyb20gJy4valF1ZXJ5RGlhbG9nJztcclxuaW1wb3J0IHtuZXdHdWlsZExvZ1VybH0gZnJvbSAnLi4vc3VwcG9ydC9kYXRhT2JqJztcclxuaW1wb3J0IHtjcmVhdGVMaSwgY3JlYXRlU3Bhbn0gZnJvbSAnLi4vY29tbW9uL2NFbGVtZW50JztcclxuaW1wb3J0IHtpbmplY3RBdWN0aW9uU2VhcmNoLCBpbmplY3RRdWlja0xpbmtNYW5hZ2VyfSBmcm9tICcuLi9saXN0cyc7XHJcbmltcG9ydCB7aW5qZWN0RmluZEJ1ZmZzLCBpbmplY3RGaW5kT3RoZXJ9IGZyb20gJy4uL2ZpbmRCdWZmcyc7XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVRdWVzdExpbmsoKSB7XHJcbiAgdmFyIGxhc3RBY3RpdmVRdWVzdFBhZ2UgPSBnZXRWYWx1ZSgnbGFzdEFjdGl2ZVF1ZXN0UGFnZScpO1xyXG4gIGlmIChsYXN0QWN0aXZlUXVlc3RQYWdlLmxlbmd0aCA+IDApIHtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYXYtY2hhcmFjdGVyLXF1ZXN0Ym9vaycpXHJcbiAgICAgIC5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBsYXN0QWN0aXZlUXVlc3RQYWdlKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNwYW5CdXR0b24obmF2THZsLCB0ZXh0LCBmbiwgdGFyZ2V0KSB7XHJcbiAgdmFyIGxpID0gY3JlYXRlTGkoe2NsYXNzTmFtZTogJ25hdi1sZXZlbC0nICsgbmF2THZsfSk7XHJcbiAgdmFyIHNiID0gY3JlYXRlU3Bhbih7XHJcbiAgICBjbGFzc05hbWU6ICduYXYtbGluayBmc2hQb2ludCcsXHJcbiAgICB0ZXh0Q29udGVudDogdGV4dFxyXG4gIH0pO1xyXG4gIHNiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICBqUXVlcnlEaWFsb2coZm4pO1xyXG4gIH0pO1xyXG4gIGxpLmFwcGVuZENoaWxkKHNiKTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXQpLnBhcmVudE5vZGVcclxuICAgIC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgbGkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBidWZmTG9nTGluaygpIHtcclxuICBpZiAoZ2V0VmFsdWUoJ2tlZXBCdWZmTG9nJykpIHtcclxuICAgIHNwYW5CdXR0b24oJzEnLCAnQnVmZiBMb2cnLCBpbmplY3RCdWZmTG9nLCAnbmF2LWNoYXJhY3Rlci1sb2cnKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbWJhdExvZ0xpbmsoKSB7XHJcbiAgaWYgKGdldFZhbHVlKCdrZWVwTG9ncycpKSB7XHJcbiAgICBzcGFuQnV0dG9uKCcxJywgJ0NvbWJhdCBMb2dzJywgaW5qZWN0Tm90ZXBhZFNob3dMb2dzLFxyXG4gICAgICAnbmF2LWNoYXJhY3Rlci1ub3RlcGFkJyk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdHVyZUxvZ0xpbmsoKSB7XHJcbiAgaWYgKGdldFZhbHVlKCdzaG93TW9uc3RlckxvZycpKSB7XHJcbiAgICBzcGFuQnV0dG9uKCcxJywgJ0NyZWF0dXJlIExvZ3MnLCBpbmplY3RNb25zdGVyTG9nLFxyXG4gICAgICAnbmF2LWNoYXJhY3Rlci1ub3RlcGFkJyk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBuZXdHdWlsZExvZ0xpbmsoKSB7XHJcbiAgaWYgKCFnZXRWYWx1ZSgndXNlTmV3R3VpbGRMb2cnKSkge1xyXG4gICAgLy8gaWYgbm90IHVzaW5nIHRoZSBuZXcgZ3VpbGQgbG9nLCBzaG93IGl0IGFzIGEgc2VwYXJhdGUgbWVudSBlbnRyeVxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hdi1ndWlsZC1sZWRnZXItZ3VpbGRsb2cnKS5wYXJlbnROb2RlXHJcbiAgICAgIC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWJlZ2luJyxcclxuICAgICAgICAnPGxpIGNsYXNzPVwibmF2LWxldmVsLTJcIj48YSBjbGFzcz1cIm5hdi1saW5rXCIgJyArXHJcbiAgICAgICAgJ2hyZWY9XCJpbmRleC5waHAnICsgbmV3R3VpbGRMb2dVcmwgKyAnXCInICtcclxuICAgICAgICAnPk5ldyBHdWlsZCBMb2c8L2E+PC9saT4nKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkanVzdEhlaWdodCgpIHsgLy8galF1ZXJ5XHJcbiAgLy8gYWRqdXN0IHRoZSBtZW51IGhlaWdodCBmb3IgdGhlIG5ld2x5IGFkZGVkIGl0ZW1zXHJcbiAgdmFyIHRoZU5hdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYXYnKTtcclxuICB2YXIgbXlOYXYgPSAkKHRoZU5hdikuZGF0YSgnbmF2Jyk7XHJcbiAgLy8gZmlyc3QgdGhlIGNsb3NlZCBzYXZlZCB2YXJpYWJsZXNcclxuICBteU5hdi5oZWlnaHRzID0gW1xyXG4gICAgbnVsbCxcclxuICAgIG51bGwsXHJcbiAgICAvLyBDaGFyYWN0ZXJcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYXYtY2hhcmFjdGVyJykubmV4dEVsZW1lbnRTaWJsaW5nLmNoaWxkcmVuXHJcbiAgICAgIC5sZW5ndGggKiAyMixcclxuICAgIDY2MCxcclxuICAgIC8vIEd1aWxkXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjbmF2LWd1aWxkID4gdWwgbGknKS5sZW5ndGggKiAyMixcclxuICAgIDM3NCxcclxuICAgIDEzMixcclxuICAgIDEzMixcclxuICAgIG51bGxcclxuICBdO1xyXG4gIGlmIChteU5hdi5zdGF0ZSAhPT0gJy0xJyAmJiBteU5hdi5zdGF0ZSAhPT0gLTEpIHtcclxuICAgIC8vIGFuZCBub3cgdGhlIG9wZW4gb25lXHJcbiAgICB0aGVOYXYuY2hpbGRyZW5bbXlOYXYuc3RhdGVdLmNoaWxkcmVuWzFdLnN0eWxlLmhlaWdodCA9XHJcbiAgICAgIG15TmF2LmhlaWdodHNbbXlOYXYuc3RhdGVdICsgJ3B4JztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluamVjdE1lbnUoKSB7XHJcbiAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncENMJykpIHtyZXR1cm47fVxyXG4gIHVwZGF0ZVF1ZXN0TGluaygpO1xyXG4gIC8vIGNoYXJhY3RlclxyXG4gIHNwYW5CdXR0b24oJzEnLCAnUmVjaXBlIE1hbmFnZXInLCBpbmplY3RSZWNpcGVNYW5hZ2VyLCAnbmF2LWNoYXJhY3Rlci1sb2cnKTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmF2LWNoYXJhY3Rlci1sb2cnKS5wYXJlbnROb2RlXHJcbiAgICAuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmVuZCcsXHJcbiAgICAgICc8bGkgY2xhc3M9XCJuYXYtbGV2ZWwtMVwiPjxhIGNsYXNzPVwibmF2LWxpbmtcIiBpZD1cIm5hdi0nICtcclxuICAgICAgJ2NoYXJhY3Rlci1tZWRhbGd1aWRlXCIgaHJlZj1cImluZGV4LnBocD9jbWQ9cHJvZmlsZSZzdWJjbWQ9JyArXHJcbiAgICAgICdtZWRhbGd1aWRlXCI+TWVkYWwgR3VpZGU8L2E+PC9saT4nICtcclxuICAgICAgJzxsaSBjbGFzcz1cIm5hdi1sZXZlbC0xXCI+PGEgY2xhc3M9XCJuYXYtbGlua1wiIGlkPVwibmF2LScgK1xyXG4gICAgICAnY2hhcmFjdGVyLWludm1hbmFnZXJcIiBocmVmPVwiaW5kZXgucGhwP2NtZD1ub3RlcGFkJmJsYW5rPTEmJyArXHJcbiAgICAgICdzdWJjbWQ9aW52bWFuYWdlcm5ld1wiPkludmVudG9yeSBNYW5hZ2VyPC9hPjwvbGk+Jyk7XHJcbiAgYnVmZkxvZ0xpbmsoKTtcclxuICBjb21iYXRMb2dMaW5rKCk7XHJcbiAgY3JlYXR1cmVMb2dMaW5rKCk7XHJcbiAgc3BhbkJ1dHRvbignMScsICdRdWljayBMaW5rcycsIGluamVjdFF1aWNrTGlua01hbmFnZXIsXHJcbiAgICAnbmF2LWNoYXJhY3Rlci1ub3RlcGFkJyk7XHJcbiAgLy8gZ3VpbGRcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmF2LWd1aWxkLXN0b3JlaG91c2UtaW52ZW50b3J5JykucGFyZW50Tm9kZVxyXG4gICAgLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJlbmQnLFxyXG4gICAgICAnPGxpIGNsYXNzPVwibmF2LWxldmVsLTJcIj48YSBjbGFzcz1cIm5hdi1saW5rXCIgaWQ9XCJuYXYtJyArXHJcbiAgICAgICdndWlsZC1ndWlsZGludm1hbmFnZXJcIiBocmVmPVwiaW5kZXgucGhwP2NtZD1ub3RlcGFkJmJsYW5rPTEnICtcclxuICAgICAgJyZzdWJjbWQ9Z3VpbGRpbnZtZ3JcIj5HdWlsZCBJbnZlbnRvcnk8L2E+PC9saT4nKTtcclxuICBuZXdHdWlsZExvZ0xpbmsoKTtcclxuICAvLyB0b3AgcmF0ZWRcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmF2LXRvcHJhdGVkLXBsYXllcnMtbGV2ZWwnKS5wYXJlbnROb2RlXHJcbiAgICAuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmVuZCcsXHJcbiAgICAgICc8bGkgY2xhc3M9XCJuYXYtbGV2ZWwtMlwiPjxhIGNsYXNzPVwibmF2LWxpbmtcIiBpZD1cIm5hdi0nICtcclxuICAgICAgJ3RvcHJhdGVkLXRvcDI1MFwiIGhyZWY9XCJpbmRleC5waHA/Y21kPXRvcHJhdGVkJnN1YmNtZD14cFwiPicgK1xyXG4gICAgICAnVG9wIDI1MCBQbGF5ZXJzPC9hPjwvbGk+Jyk7XHJcbiAgLy8gYWN0aW9uc1xyXG4gIHNwYW5CdXR0b24oJzInLCAnQUggUXVpY2sgU2VhcmNoJywgaW5qZWN0QXVjdGlvblNlYXJjaCxcclxuICAgICduYXYtYWN0aW9ucy10cmFkZS1hdWN0aW9uaG91c2UnKTtcclxuICBzcGFuQnV0dG9uKCcyJywgJ09ubGluZSBQbGF5ZXJzJywgaW5qZWN0T25saW5lUGxheWVycyxcclxuICAgICduYXYtYWN0aW9ucy1pbnRlcmFjdGlvbi1maW5kcGxheWVyJyk7XHJcbiAgc3BhbkJ1dHRvbignMicsICdGaW5kIE90aGVyJywgaW5qZWN0RmluZE90aGVyLFxyXG4gICAgJ25hdi1hY3Rpb25zLWludGVyYWN0aW9uLWZpbmRwbGF5ZXInKTtcclxuICBzcGFuQnV0dG9uKCcyJywgJ0ZpbmQgQnVmZnMnLCBpbmplY3RGaW5kQnVmZnMsXHJcbiAgICAnbmF2LWFjdGlvbnMtaW50ZXJhY3Rpb24tZmluZHBsYXllcicpO1xyXG4gIGFkanVzdEhlaWdodCgpO1xyXG59XHJcbiIsImltcG9ydCBjYWxmIGZyb20gJy4uL3N1cHBvcnQvY2FsZic7XHJcbmltcG9ydCB7ZmFsbGJhY2ssIGdldFZhbHVlSlNPTiwgc2V0VmFsdWVKU09OfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG5mdW5jdGlvbiBzaG93TXNnVGVtcGxhdGUoKSB7IC8vIGpRdWVyeVxyXG4gIHZhciB0YXJnZXRQbGF5ZXIgPSAkKCcjcXVpY2tNc2dEaWFsb2dfdGFyZ2V0VXNlcm5hbWUnKS50ZXh0KCk7XHJcbiAgJCgnI21zZ1RlbXBsYXRlRGlhbG9nJykucmVtb3ZlKCk7XHJcblxyXG4gIC8vIHRlbXBsYXRlIGRpc3BsYXllZFxyXG4gIHZhciBodG1sID0gJzxkaXYgaWQ9bXNnVGVtcGxhdGVEaWFsb2cgdGl0bGU9XCJDaG9vc2UgTXNnIFRlbXBsYXRlXCIgJyArXHJcbiAgICAnc3R5bGU9XCJkaXNwbGF5Om5vbmVcIj48c3R5bGU+I21zZ1RlbXBsYXRlIC51aS1zZWxlY3RpbmcgeyAnICtcclxuICAgICdiYWNrZ3JvdW5kOiAjRkVDQTQwOyB9Ozwvc3R5bGU+PG9sIGlkPW1zZ1RlbXBsYXRlIHZhbGlnbj1jZW50ZXI+JztcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGYudGVtcGxhdGUubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgIGh0bWwgKz0gJzxsaSBjbGFzcz1cInVpLXdpZGdldC1jb250ZW50XCI+JyArXHJcbiAgICAgIGNhbGYudGVtcGxhdGVbaV0ucmVwbGFjZSgvXFx7cGxheWVybmFtZVxcfS9nLCB0YXJnZXRQbGF5ZXIpICsgJzwvbGk+JztcclxuICB9XHJcbiAgaHRtbCArPSAnPC9vbD48L2Rpdj4nO1xyXG4gICQoJ2JvZHknKS5hcHBlbmQoaHRtbCk7XHJcblxyXG4gIC8vIHRlbXBsYXRlIG1hbmFnZXJcclxuICAkKCcjbXNnVGVtcGxhdGUgbGknKS5wcmVwZW5kKCc8aW5wdXQgdHlwZT1idXR0b24gY2xhc3M9XCJkZWwtYnV0dG9uXCIgJyArXHJcbiAgICAndmFsdWU9RGVsIHN0eWxlPVwiZGlzcGxheTpub25lXCI+Jyk7XHJcbiAgJCgnI21zZ1RlbXBsYXRlJykuYXBwZW5kKCc8bGkgY2xhc3M9XCJhZGQtYnV0dG9uXCIgc3R5bGU9XCJkaXNwbGF5Om5vbmVcIj4nICtcclxuICAgICc8aW5wdXQgdHlwZT1idXR0b24gaWQ9bmV3VG1wbEFkZCB2YWx1ZT1BZGQ+PGlucHV0IGlkPW5ld1RtcGwgJyArXHJcbiAgICAnY2xhc3M9dWktd2lkZ2V0LWNvbnRlbnQ+PC9saT4nKTtcclxuICAkKCc6YnV0dG9uJywgJyNtc2dUZW1wbGF0ZScpLmJ1dHRvbigpO1xyXG4gICQoJy5kZWwtYnV0dG9uJykuY2xpY2soZnVuY3Rpb24oZXZ0KSB7XHJcbiAgICBjYWxmLnRlbXBsYXRlLnNwbGljZSgkKCcjbXNnVGVtcGxhdGUgbGknKVxyXG4gICAgICAuaW5kZXgoZXZ0LnRhcmdldC5wYXJlbnROb2RlKSwgMSk7XHJcbiAgICBzZXRWYWx1ZUpTT04oJ3F1aWNrTXNnJywgY2FsZi50ZW1wbGF0ZSk7XHJcbiAgICAkKCcjbXNnVGVtcGxhdGVEaWFsb2cnKS5kaWFsb2coJ2Nsb3NlJyk7XHJcbiAgICBzaG93TXNnVGVtcGxhdGUoKTtcclxuICB9KTtcclxuICAkKCcjbmV3VG1wbEFkZCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCQoJyNuZXdUbXBsJykudmFsKCkgPT09ICcnKSB7cmV0dXJuO31cclxuICAgIGNhbGYudGVtcGxhdGUucHVzaCgkKCcjbmV3VG1wbCcpLnZhbCgpKTtcclxuICAgIHNldFZhbHVlSlNPTigncXVpY2tNc2cnLCBjYWxmLnRlbXBsYXRlKTtcclxuICAgICQoJyNtc2dUZW1wbGF0ZURpYWxvZycpLmRpYWxvZygnY2xvc2UnKTtcclxuICAgIHNob3dNc2dUZW1wbGF0ZSgpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBlbmFibGUgc2VsZWN0YWJsZSB0ZW1wbGF0ZVxyXG4gICQoJyNtc2dUZW1wbGF0ZScpLnNlbGVjdGFibGUoe1xyXG4gICAgZmlsdGVyOiAnbGkudWktd2lkZ2V0LWNvbnRlbnQnLFxyXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICgkKCcuYWRkLWJ1dHRvbi51aS1zZWxlY3RlZCcpLmxlbmd0aCA+IDApIHtyZXR1cm47fSAvLyBjbGljayBvbiBhZGQgcm93XHJcbiAgICAgIGlmICgkKCcudWktc2VsZWN0ZWQnKS5sZW5ndGggPT09IDApIHtyZXR1cm47fSAvLyBub3RoaW5nIHNlbGVjdGVkIHlldFxyXG4gICAgICAkKCcjcXVpY2tNc2dEaWFsb2dfbXNnJykudmFsKCQoJyNxdWlja01zZ0RpYWxvZ19tc2cnKS52YWwoKSArXHJcbiAgICAgICAgJCgnI21zZ1RlbXBsYXRlIC51aS1zZWxlY3RlZCcpLnRleHQoKSArICdcXG4nKTtcclxuICAgICAgJCgnI21zZ1RlbXBsYXRlRGlhbG9nJykuZGlhbG9nKCdjbG9zZScpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAvLyBzaG93IHRoZSB0ZW1wbGF0ZSBmb3JtXHJcbiAgJCgnI21zZ1RlbXBsYXRlRGlhbG9nJykuZGlhbG9nKHtcclxuICAgIGJ1dHRvbnM6IHtcclxuICAgICAgTWFuYWdlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAkKCcuZGVsLWJ1dHRvbicpLnRvZ2dsZSgpO1xyXG4gICAgICAgICQoJy5hZGQtYnV0dG9uJykudG9nZ2xlKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIENhbmNlbDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJCgnI21zZ1RlbXBsYXRlRGlhbG9nJykuZGlhbG9nKCdjbG9zZScpO1xyXG4gICAgICAgICQoJyNtc2dUZW1wbGF0ZURpYWxvZycpLnJlbW92ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9wZW5RdWlja01zZ0RpYWxvZyhuYW1lLCBtc2csIHRpcCkgeyAvLyBqUXVlcnlcclxuICBpZiAoIWNhbGYudGVtcGxhdGUpIHtcclxuICAgIGNhbGYudGVtcGxhdGUgPSBnZXRWYWx1ZUpTT04oJ3F1aWNrTXNnJyk7XHJcbiAgICB2YXIgYnV0dG9ucyA9ICQoJyNxdWlja01lc3NhZ2VEaWFsb2cnKS5kaWFsb2coJ29wdGlvbicsICdidXR0b25zJyk7XHJcbiAgICBidXR0b25zLlRlbXBsYXRlID0gc2hvd01zZ1RlbXBsYXRlO1xyXG4gICAgJCgnI3F1aWNrTWVzc2FnZURpYWxvZycpLmRpYWxvZygnb3B0aW9uJywgJ2J1dHRvbnMnLCBidXR0b25zKTtcclxuICB9XHJcbiAgJCgnI3F1aWNrTXNnRGlhbG9nX3RhcmdldFVzZXJuYW1lJykuaHRtbChuYW1lKTtcclxuICAkKCcjcXVpY2tNc2dEaWFsb2dfdGFyZ2V0UGxheWVyJykudmFsKG5hbWUpO1xyXG4gICQoJyNxdWlja01zZ0RpYWxvZ19tc2cnKS52YWwoZmFsbGJhY2sobXNnLCAnJykpO1xyXG4gICQoJyNxdWlja01zZ0RpYWxvZ19tc2cnKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xyXG4gICQoJy52YWxpZGF0ZVRpcHMnKS50ZXh0KGZhbGxiYWNrKHRpcCwgJycpKTtcclxuICAkKCcjcXVpY2tNZXNzYWdlRGlhbG9nJykuZGlhbG9nKCdvcGVuJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluamVjdFF1aWNrTXNnRGlhbG9nSlEoKSB7XHJcbiAgd2luZG93Lm9wZW5RdWlja01zZ0RpYWxvZyA9IG9wZW5RdWlja01zZ0RpYWxvZztcclxufVxyXG4iLCJpbXBvcnQgcmV0cnlBamF4IGZyb20gJy4vcmV0cnlBamF4JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFByb2ZpbGUodXNlcm5hbWUpIHtcclxuICByZXR1cm4gcmV0cnlBamF4KHtcclxuICAgIHVybDogJ2luZGV4LnBocCcsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIGNtZDogJ2V4cG9ydCcsXHJcbiAgICAgIHN1YmNtZDogJ3Byb2ZpbGUnLFxyXG4gICAgICBwbGF5ZXJfdXNlcm5hbWU6IHVzZXJuYW1lXHJcbiAgICB9LFxyXG4gICAgZGF0YVR5cGU6ICdqc29uJ1xyXG4gIH0pO1xyXG59XHJcbiIsImltcG9ydCBjYWxmIGZyb20gJy4uL3N1cHBvcnQvY2FsZic7XHJcbmltcG9ydCBnZXRGb3JhZ2UgZnJvbSAnLi9nZXRGb3JhZ2UnO1xyXG5pbXBvcnQgZ2V0UHJvZmlsZSBmcm9tICcuL2dldFByb2ZpbGUnO1xyXG5pbXBvcnQge25vd30gZnJvbSAnLi4vc3VwcG9ydC9kYXRhT2JqJztcclxuaW1wb3J0IHtwbGF5ZXJOYW1lfSBmcm9tICcuLi9zdXBwb3J0L2xheW91dCc7XHJcbmltcG9ydCBzZXRGb3JhZ2UgZnJvbSAnLi9zZXRGb3JhZ2UnO1xyXG5cclxuZnVuY3Rpb24gc2VuZE15UHJvZmlsZVRvRm9yYWdlKGRhdGEpIHtcclxuICBzZXRGb3JhZ2UoJ2ZzaF9zZWxmUHJvZmlsZScsIGRhdGEpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRMYXN0VXBkYXRlRGF0ZShkYXRhKSB7XHJcbiAgZGF0YS5sYXN0VXBkYXRlID0gbm93O1xyXG4gIHJldHVybiBkYXRhO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRNeVByb2ZpbGUoKSB7XHJcbiAgcmV0dXJuIGdldFByb2ZpbGUocGxheWVyTmFtZSgpKVxyXG4gICAgLnBpcGUoYWRkTGFzdFVwZGF0ZURhdGUpXHJcbiAgICAuZG9uZShzZW5kTXlQcm9maWxlVG9Gb3JhZ2UpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRQcm9maWxlRnJvbUZvcmFnZShkYXRhKSB7XHJcbiAgaWYgKCFkYXRhIHx8IGRhdGEubGFzdFVwZGF0ZSA8IG5vdyAtXHJcbiAgICBjYWxmLmFsbHlFbmVteU9ubGluZVJlZnJlc2hUaW1lKSB7XHJcbiAgICByZXR1cm4gZ2V0TXlQcm9maWxlKCk7XHJcbiAgfVxyXG4gIHJldHVybiBkYXRhO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBteVN0YXRzKGZvcmNlKSB7XHJcbiAgaWYgKGZvcmNlKSB7cmV0dXJuIGdldE15UHJvZmlsZSgpO31cclxuICAvLyBqUXVlcnkgMS43IHVzZXMgcGlwZSBpbnN0ZWFkIG9mIHRoZW5cclxuICByZXR1cm4gZ2V0Rm9yYWdlKCdmc2hfc2VsZlByb2ZpbGUnKVxyXG4gICAgLnBpcGUoZ2V0UHJvZmlsZUZyb21Gb3JhZ2UpO1xyXG59XHJcbiIsImltcG9ydCBhZGQgZnJvbSAnLi4vc3VwcG9ydC90YXNrJztcclxuaW1wb3J0IGNhbGYgZnJvbSAnLi4vc3VwcG9ydC9jYWxmJztcclxuaW1wb3J0IHtjcmVhdGVEaXZ9IGZyb20gJy4uL2NvbW1vbi9jRWxlbWVudCc7XHJcbmltcG9ydCBteVN0YXRzIGZyb20gJy4uL2FqYXgvbXlTdGF0cyc7XHJcbmltcG9ydCB7bm93U2Vjc30gZnJvbSAnLi4vc3VwcG9ydC9kYXRhT2JqJztcclxuaW1wb3J0IHtvcGVuUXVpY2tCdWZmQnlOYW1lfSBmcm9tICcuLi9zdXBwb3J0L2xheW91dCc7XHJcbmltcG9ydCB7ZmFsbGJhY2ssIGZvcm1hdExhc3RBY3Rpdml0eX0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5cclxudmFyIGJ1ZmZDaGVjayA9ICc8c3BhbiBjbGFzcz1cImVuZW15LWJ1ZmYtY2hlY2stb25cIj48L3NwYW4+JztcclxudmFyIG1zZ0J1dHRvbiA9ICc8c3BhbiBjbGFzcz1cImVuZW15LXNlbmQtbWVzc2FnZSBndWlsZC1pY29uIGxlZnQgJyArXHJcbiAgJ2d1aWxkLW1pbmlib3gtYWN0aW9uIHRpcC1zdGF0aWNcIiBkYXRhLXRpcHBlZD1cIlNlbmQgTWVzc2FnZVwiPjwvc3Bhbj4nO1xyXG52YXIgYnVmZkJ1dHRvbiA9ICc8c3BhbiBjbGFzcz1cImVuZW15LXF1aWNrYnVmZiBndWlsZC1pY29uIGxlZnQgJyArXHJcbiAgJ2d1aWxkLW1pbmlib3gtYWN0aW9uIHRpcC1zdGF0aWNcIiBkYXRhLXRpcHBlZD1cIlF1aWNrIEJ1ZmZcIj48L3NwYW4+JztcclxuXHJcbnZhciBjb250YWN0Q2xhc3MgPSBbXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihuKSB7cmV0dXJuIG4gPCAxMjA7fSxcclxuICAgIGFsbHk6ICdmc2hEb2RnZXJCbHVlJyxcclxuICAgIGVuZW15OiAnZnNoUmVkJ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihuKSB7cmV0dXJuIG4gPCAzMDA7fSxcclxuICAgIGFsbHk6ICdmc2hEb2RnZXJCbHVlJyxcclxuICAgIGVuZW15OiAnZnNoUmVkJ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbigpIHtyZXR1cm4gdHJ1ZTt9LFxyXG4gICAgYWxseTogJ2ZzaFBvd2RlckJsdWUnLFxyXG4gICAgZW5lbXk6ICdmc2hQaW5rJ1xyXG4gIH1cclxuXTtcclxuXHJcbmZ1bmN0aW9uIGFsbHlPckVuZW15KHR5cGUsIHRlc3QpIHtcclxuICBpZiAodHlwZSkge3JldHVybiB0ZXN0LmFsbHk7fVxyXG4gIHJldHVybiB0ZXN0LmVuZW15O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb250YWN0Q29sb3IobGFzdF9sb2dpbiwgdHlwZSkge1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGFjdENsYXNzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICB2YXIgdGVzdCA9IGNvbnRhY3RDbGFzc1tpXTtcclxuICAgIGlmICh0ZXN0LmNvbmRpdGlvbihub3dTZWNzIC0gbGFzdF9sb2dpbikpIHtcclxuICAgICAgcmV0dXJuIGFsbHlPckVuZW15KHR5cGUsIHRlc3QpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gJ2ZzaFdoaXRlJztcclxufVxyXG5cclxuZnVuY3Rpb24gcGxheWVyTmFtZSh2YWwsIHR5cGUpIHtcclxuICByZXR1cm4gJzxhIGNsYXNzPVwicGxheWVyLW5hbWUgdGlwLXN0YXRpYyAnICtcclxuICAgIGNvbnRhY3RDb2xvcih2YWwubGFzdF9sb2dpbiwgdHlwZSkgK1xyXG4gICAgJ1wiIGRhdGEtdGlwcGVkPVwiPGI+JyArIHZhbC51c2VybmFtZSArICc8L2I+PGJyPjx0YWJsZT48dGJvZHk+PHRyPicgK1xyXG4gICAgJzx0ZD5MZXZlbDo8L3RkPjx0ZD4nICsgdmFsLmxldmVsICsgJzwvdGQ+PC90cj48dHI+PHRkPkxhc3QgJyArXHJcbiAgICAnQWN0aXZpdHk6PC90ZD48dGQ+JyArIGZvcm1hdExhc3RBY3Rpdml0eSh2YWwubGFzdF9sb2dpbikgK1xyXG4gICAgJzwvdGQ+PC90cj48L3Rib2R5PjwvdGFibGU+XCIgaHJlZj1cImluZGV4LnBocD9jbWQ9cHJvZmlsZSZwbGF5ZXJfaWQ9JyArXHJcbiAgICB2YWwuaWQgKyAnXCI+JyArIHZhbC51c2VybmFtZSArICc8L2E+JztcclxufVxyXG5cclxuZnVuY3Rpb24gZG9CdWZmQ2hlY2soKSB7XHJcbiAgaWYgKCFjYWxmLmhpZGVCdWZmU2VsZWN0ZWQpIHtcclxuICAgIHJldHVybiBidWZmQ2hlY2s7XHJcbiAgfVxyXG4gIHJldHVybiAnJztcclxufVxyXG5cclxuZnVuY3Rpb24gZG9Nc2dCdXR0b24oKSB7XHJcbiAgaWYgKCFjYWxmLmhpZGVHdWlsZEluZm9NZXNzYWdlKSB7XHJcbiAgICByZXR1cm4gbXNnQnV0dG9uO1xyXG4gIH1cclxuICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvQnVmZkJ1dHRvbigpIHtcclxuICBpZiAoIWNhbGYuaGlkZUd1aWxkSW5mb0J1ZmYpIHtcclxuICAgIHJldHVybiBidWZmQnV0dG9uO1xyXG4gIH1cclxuICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvU2VjdXJlQnV0dG9uKHZhbCkge1xyXG4gIGlmICghY2FsZi5oaWRlR3VpbGRJbmZvU2VjdXJlVHJhZGUpIHtcclxuICAgIHJldHVybiAnPGEgY2xhc3M9XCJlbmVteS1zZWN1cmUtdHJhZGUgZ3VpbGQtaWNvbiBsZWZ0ICcgK1xyXG4gICAgICAnZ3VpbGQtbWluaWJveC1hY3Rpb24gdGlwLXN0YXRpY1wiIGhyZWY9XCJpbmRleC5waHA/Y21kPXRyYWRlJyArXHJcbiAgICAgICcmc3ViY21kPWNyZWF0ZXNlY3VyZSZ0YXJnZXRfdXNlcm5hbWU9JyArIHZhbC51c2VybmFtZSArXHJcbiAgICAgICdcIiBkYXRhLXRpcHBlZD1cIlNlY3VyZSBUcmFkZVwiPjwvYT4nO1xyXG4gIH1cclxuICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvVHJhZGVCdXR0b24odmFsKSB7XHJcbiAgaWYgKCFjYWxmLmhpZGVHdWlsZEluZm9UcmFkZSkge1xyXG4gICAgcmV0dXJuICc8YSBjbGFzcz1cImVuZW15LXRyYWRlIGd1aWxkLWljb24gbGVmdCAnICtcclxuICAgICAgJ2d1aWxkLW1pbmlib3gtYWN0aW9uIHRpcC1zdGF0aWNcIiBocmVmPVwiaW5kZXgucGhwP2NtZD10cmFkZScgK1xyXG4gICAgICAnJnRhcmdldF9wbGF5ZXI9JyArIHZhbC51c2VybmFtZSArXHJcbiAgICAgICdcIiBkYXRhLXRpcHBlZD1cIlNlbmQgR29sZC9JdGVtcy9GU1BcIj48L2E+JztcclxuICB9XHJcbiAgcmV0dXJuICcnO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRDb250YWN0KGNvbnRhY3RMaXN0LCB0eXBlKSB7XHJcbiAgdmFyIG91dHB1dCA9ICcnO1xyXG4gIGNvbnRhY3RMaXN0LmZvckVhY2goZnVuY3Rpb24odmFsKSB7XHJcbiAgICBpZiAobm93U2VjcyAtIHZhbC5sYXN0X2xvZ2luID4gMTgwMCkge3JldHVybjt9IC8vIDMwIG1pbnNcclxuICAgIG91dHB1dCArPSAnPGxpIGNsYXNzPVwicGxheWVyXCI+PGRpdiBjbGFzcz1cInBsYXllci1yb3dcIj4nO1xyXG4gICAgb3V0cHV0ICs9IGRvQnVmZkNoZWNrKCk7XHJcbiAgICBvdXRwdXQgKz0gcGxheWVyTmFtZSh2YWwsIHR5cGUpO1xyXG4gICAgb3V0cHV0ICs9ICc8L2Rpdj48ZGl2IGNsYXNzPVwiZ3VpbGQtbWluaWJveC1hY3Rpb25zXCI+JztcclxuICAgIG91dHB1dCArPSBkb01zZ0J1dHRvbigpO1xyXG4gICAgb3V0cHV0ICs9IGRvQnVmZkJ1dHRvbigpO1xyXG4gICAgb3V0cHV0ICs9IGRvU2VjdXJlQnV0dG9uKHZhbCk7XHJcbiAgICBvdXRwdXQgKz0gZG9UcmFkZUJ1dHRvbih2YWwpO1xyXG4gICAgb3V0cHV0ICs9ICc8L2Rpdj48L2xpPic7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIG91dHB1dDtcclxufVxyXG5cclxuZnVuY3Rpb24gbm9BbGxpZXMoYWxsaWVzLCBlbmVtaWVzKSB7XHJcbiAgcmV0dXJuIGFsbGllcy5sZW5ndGggKyBlbmVtaWVzLmxlbmd0aCA9PT0gMCB8fFxyXG4gICAgIWNhbGYuZW5hYmxlQWxseU9ubGluZUxpc3QgJiYgZW5lbWllcy5sZW5ndGggPT09IDAgfHxcclxuICAgICFjYWxmLmVuYWJsZUVuZW15T25saW5lTGlzdCAmJiBhbGxpZXMubGVuZ3RoID09PSAwO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYXpBbGxpZXMoYWxsaWVzLCBlbmVtaWVzKSB7XHJcbiAgdmFyIG91dHB1dCA9ICcnO1xyXG4gIGlmIChjYWxmLmVuYWJsZUFsbHlPbmxpbmVMaXN0KSB7XHJcbiAgICBvdXRwdXQgKz0gYWRkQ29udGFjdChhbGxpZXMsIHRydWUpO1xyXG4gIH1cclxuICBpZiAoY2FsZi5lbmFibGVFbmVteU9ubGluZUxpc3QpIHtcclxuICAgIG91dHB1dCArPSBhZGRDb250YWN0KGVuZW1pZXMsIGZhbHNlKTtcclxuICB9XHJcbiAgdmFyIGZzaENvbnRhY3RMaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZzaENvbnRhY3RMaXN0Jyk7XHJcbiAgZnNoQ29udGFjdExpc3QuaW5uZXJIVE1MID0gJyc7XHJcbiAgZnNoQ29udGFjdExpc3QuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBvdXRwdXQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmplY3RBbGx5RW5lbXlMaXN0KGRhdGEpIHtcclxuICB2YXIgYWxsaWVzID0gZmFsbGJhY2soZGF0YS5fYWxsaWVzLCBbXSk7XHJcbiAgdmFyIGVuZW1pZXMgPSBmYWxsYmFjayhkYXRhLl9lbmVtaWVzLCBbXSk7XHJcbiAgaWYgKG5vQWxsaWVzKGFsbGllcywgZW5lbWllcykpIHtyZXR1cm47fVxyXG4gIGhhekFsbGllcyhhbGxpZXMsIGVuZW1pZXMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldExpc3QoKSB7IC8vIGpRdWVyeVxyXG4gIG15U3RhdHModHJ1ZSkuZG9uZShpbmplY3RBbGx5RW5lbXlMaXN0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlQnVmZlNlbGVjdGVkKHNlbGYpIHtcclxuICBzZWxmLmNsYXNzTGlzdC50b2dnbGUoJ2VuZW15LWJ1ZmYtY2hlY2stb24nKTtcclxuICBzZWxmLmNsYXNzTGlzdC50b2dnbGUoJ2VuZW15LWJ1ZmYtY2hlY2stb2ZmJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1zZ1BsYXllcihzZWxmKSB7XHJcbiAgd2luZG93Lm9wZW5RdWlja01zZ0RpYWxvZyhzZWxmLnBhcmVudE5vZGUucHJldmlvdXNFbGVtZW50U2libGluZ1xyXG4gICAgLmxhc3RFbGVtZW50Q2hpbGQudGV4dENvbnRlbnQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBidWZmUGxheWVyKHNlbGYpIHtcclxuICBvcGVuUXVpY2tCdWZmQnlOYW1lKHNlbGYucGFyZW50Tm9kZVxyXG4gICAgLnByZXZpb3VzRWxlbWVudFNpYmxpbmcubGFzdEVsZW1lbnRDaGlsZC50ZXh0Q29udGVudCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNlbGVjdGVkQnVmZigpIHtcclxuICB2YXIgYnVmZkJhbGxzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZzaENvbnRhY3RMaXN0JylcclxuICAgIC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdlbmVteS1idWZmLWNoZWNrLW9uJyk7XHJcbiAgdmFyIHNlbmRzdHJpbmcgPSBBcnJheS5wcm90b3R5cGUucmVkdWNlLmNhbGwoYnVmZkJhbGxzLFxyXG4gICAgZnVuY3Rpb24ocHJldiwgY3Vycikge1xyXG4gICAgICBwcmV2LnB1c2goY3Vyci5uZXh0RWxlbWVudFNpYmxpbmcudGV4dENvbnRlbnQpO1xyXG4gICAgICByZXR1cm4gcHJldjtcclxuICAgIH0sIFtdKTtcclxuICBvcGVuUXVpY2tCdWZmQnlOYW1lKHNlbmRzdHJpbmcuam9pbigpKTtcclxufVxyXG5cclxudmFyIGNsYXNzRXZ0ID0gW1xyXG4gIHtjbGFzc05hbWU6ICdlbmVteS1idWZmLWNoZWNrLW9uJywgaGFuZGxlcjogdG9nZ2xlQnVmZlNlbGVjdGVkfSxcclxuICB7Y2xhc3NOYW1lOiAnZW5lbXktYnVmZi1jaGVjay1vZmYnLCBoYW5kbGVyOiB0b2dnbGVCdWZmU2VsZWN0ZWR9LFxyXG4gIHtjbGFzc05hbWU6ICdlbmVteS1zZW5kLW1lc3NhZ2UnLCBoYW5kbGVyOiBtc2dQbGF5ZXJ9LFxyXG4gIHtjbGFzc05hbWU6ICdlbmVteS1xdWlja2J1ZmYnLCBoYW5kbGVyOiBidWZmUGxheWVyfSxcclxuICB7Y2xhc3NOYW1lOiAnZW5lbXktcXVpY2stYnVmZicsIGhhbmRsZXI6IHNlbGVjdGVkQnVmZn1cclxuXTtcclxuXHJcbmZ1bmN0aW9uIGV2ZW50SGFuZGxlcihldnQpIHtcclxuICB2YXIgc2VsZiA9IGV2dC50YXJnZXQ7XHJcbiAgaWYgKHNlbGYuaWQgPT09ICdmc2hSZXNldEVuZW15Jykge1xyXG4gICAgcmVzZXRMaXN0KCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGNsYXNzRXZ0LnNvbWUoZnVuY3Rpb24odGVzdCkge1xyXG4gICAgaWYgKHNlbGYuY2xhc3NMaXN0LmNvbnRhaW5zKHRlc3QuY2xhc3NOYW1lKSkge1xyXG4gICAgICB0ZXN0LmhhbmRsZXIoc2VsZik7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYWtlRGl2KGRhdGEpIHtcclxuICB2YXIgZnNoQWxseUVuZW15ID0gY3JlYXRlRGl2KHtcclxuICAgIGlkOiAnZnNoQWxseUVuZW15JyxcclxuICAgIGNsYXNzTmFtZTogJ21pbmlib3gnXHJcbiAgfSk7XHJcbiAgdmFyIHdyYXBwZXIgPSAnPGgzPkFsbGllcy9FbmVtaWVzPC9oMz48ZGl2IGNsYXNzPVwibWluaWJveC1jb250ZW50XCI+JyArXHJcbiAgICAnPGg0Pk9ubGluZSBDb250YWN0cyA8c3BhbiBpZD1cImZzaFJlc2V0RW5lbXlcIj5SZXNldDwvc3Bhbj48L2g0PicgK1xyXG4gICAgJzxkaXYgaWQ9XCJtaW5pYm94LWVuZW15XCI+PHVsIGlkPVwiZnNoQ29udGFjdExpc3RcIj48L3VsPic7XHJcbiAgaWYgKCFjYWxmLmhpZGVCdWZmU2VsZWN0ZWQpIHtcclxuICAgIHdyYXBwZXIgKz0gJzx1bCBjbGFzcz1cImVuZW15LXF1aWNrLWJ1ZmZcIj5RdWljayBCdWZmIFNlbGVjdGVkPC91bD4nO1xyXG4gIH1cclxuICB3cmFwcGVyICs9ICc8L2Rpdj48L2Rpdj4nO1xyXG4gIGZzaEFsbHlFbmVteS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIHdyYXBwZXIpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwQ1InKVxyXG4gICAgLmluc2VydEFkamFjZW50RWxlbWVudCgnYWZ0ZXJiZWdpbicsIGZzaEFsbHlFbmVteSk7XHJcbiAgZnNoQWxseUVuZW15LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnRIYW5kbGVyKTtcclxuICBpbmplY3RBbGx5RW5lbXlMaXN0KGRhdGEpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmVwYXJlQWxseUVuZW15TGlzdCgpIHsgLy8galF1ZXJ5Lm1pblxyXG4gIG15U3RhdHMoZmFsc2UpXHJcbiAgICAuZG9uZShmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIGFkZCgzLCBtYWtlRGl2LCBbZGF0YV0pO1xyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IGNhbGYgZnJvbSAnLi4vc3VwcG9ydC9jYWxmJztcclxuaW1wb3J0IHtub3d9IGZyb20gJy4uL3N1cHBvcnQvZGF0YU9iaic7XHJcbmltcG9ydCB7Y3JlYXRlQnIsIGNyZWF0ZVRhYmxlfSBmcm9tICcuLi9jb21tb24vY0VsZW1lbnQnO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZURvY3VtZW50LFxyXG4gIGZpbmROb2RlLFxyXG4gIGdldFZhbHVlLFxyXG4gIGdldFZhbHVlSlNPTixcclxuICBzZXJ2ZXIsXHJcbiAgc2V0VmFsdWUsXHJcbiAgc2V0VmFsdWVKU09OLFxyXG4gIHhtbGh0dHBcclxufSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG52YXIgYm91bnR5TGlzdDtcclxudmFyIHdhbnRlZExpc3Q7XHJcbnZhciBib3VudHlMaXN0UmVmcmVzaFRpbWU7XHJcbnZhciBid05lZWRzUmVmcmVzaDtcclxudmFyIGN1clBhZ2U7XHJcbnZhciBtYXhQYWdlO1xyXG52YXIgYWN0aXZlQm91bnR5TGlzdFBvc3RlZDtcclxudmFyIHdhbnRlZE5hbWVzO1xyXG52YXIgd2FudGVkQXJyYXk7XHJcblxyXG5mdW5jdGlvbiByZXNldEJvdW50eUxpc3QoKSB7XHJcbiAgc2V0VmFsdWVKU09OKCdib3VudHlMaXN0JywgbnVsbCk7XHJcbiAgbG9jYXRpb24ucmVsb2FkKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluamVjdEJvdW50eUxpc3QoKSB7XHJcbiAgc2V0VmFsdWVKU09OKCdib3VudHlMaXN0JywgYm91bnR5TGlzdCk7XHJcbiAgdmFyIGluamVjdEhlcmUgPSBkb2N1bWVudFxyXG4gICAgLmdldEVsZW1lbnRCeUlkKCdIZWxwZXI6Qm91bnR5TGlzdFBsYWNlaG9sZGVyJyk7XHJcbiAgdmFyIGRpc3BsYXlMaXN0ID0gY3JlYXRlVGFibGUoe2NlbGxQYWRkaW5nOiAxLCB3aWR0aDogMTI1fSk7XHJcblxyXG4gIHZhciBhUm93ID0gZGlzcGxheUxpc3QuaW5zZXJ0Um93KDApOyAvLyBib3VudHlMaXN0LnJvd3MubGVuZ3RoXHJcbiAgdmFyIGFDZWxsID0gYVJvdy5pbnNlcnRDZWxsKDApO1xyXG4gIHZhciBvdXRwdXQgPSAnPGgzPkFjdGl2ZSBCb3VudGllczwvaDM+PG9sIHN0eWxlPVwiY29sb3I6I0ZGRjM4MDtmb250LScgK1xyXG4gICAgJ3NpemU6MTBweDtsaXN0LXN0eWxlLXR5cGU6ZGVjaW1hbDttYXJnaW4tbGVmdDoxcHg7bWFyZ2luLXRvcDonICtcclxuICAgICcxcHg7bWFyZ2luLWJvdHRvbToxcHg7cGFkZGluZy1sZWZ0OjIwcHg7XCI+PG5vYnI+PHNwYW4gaWQ9XCInICtcclxuICAgICdIZWxwZXI6cmVzZXRCb3VudHlMaXN0XCIgc3R5bGU9XCIgZm9udC1zaXplOjhweDsgY3Vyc29yOnBvaW50ZXI7ICcgK1xyXG4gICAgJ3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7XCI+UmVzZXQ8L3NwYW4+PG5vYnI+PGJyPic7XHJcblxyXG4gIGlmIChib3VudHlMaXN0LmFjdGl2ZUJvdW50aWVzID09PSBmYWxzZSkge1xyXG4gICAgb3V0cHV0ICs9ICc8L29sPiBcXGYgPG9sIHN0eWxlPVwiY29sb3I6b3JhbmdlO2ZvbnQtc2l6ZToxMHB4O2xpc3QtJyArXHJcbiAgICAgICdzdHlsZS10eXBlOmRlY2ltYWw7bWFyZ2luLWxlZnQ6MXB4O21hcmdpbi10b3A6MXB4O21hcmdpbi0nICtcclxuICAgICAgJ2JvdHRvbToxcHg7cGFkZGluZy1sZWZ0OjEwcHg7XCI+W05vIEFjdGl2ZSBib3VudGllc108L29sPic7XHJcbiAgfSBlbHNlIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bnR5TGlzdC5ib3VudHkubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgdmFyIG1vdXNlT3ZlclRleHQgPSAnPGRpdj5MZXZlbDogICcgKyBib3VudHlMaXN0LmJvdW50eVtpXS5sdmwgK1xyXG4gICAgICAgICc8YnIvPlJld2FyZDogJyArIGJvdW50eUxpc3QuYm91bnR5W2ldLnJld2FyZCArICcgJyArXHJcbiAgICAgICAgYm91bnR5TGlzdC5ib3VudHlbaV0ucmV3YXJkVHlwZSArXHJcbiAgICAgICAgJzxici8+WFAgTG9zcyBSZW1haW5pbmc6ICcgKyBib3VudHlMaXN0LmJvdW50eVtpXS54cExvc3MgK1xyXG4gICAgICAgICc8YnIvPlByb2dyZXNzOiAgJyArIGJvdW50eUxpc3QuYm91bnR5W2ldLnByb2dyZXNzICtcclxuICAgICAgICAnPC9kaXY+JztcclxuXHJcbiAgICAgIG91dHB1dCArPSAnPGxpIHN0eWxlPVwicGFkZGluZy1ib3R0b206MHB4O1wiPjxhIHN0eWxlPVwiY29sb3I6JyArXHJcbiAgICAgICAgJ3JlZDtmb250LXNpemU6MTBweDtcImhyZWY9XCInICsgc2VydmVyICtcclxuICAgICAgICAnaW5kZXgucGhwP2NtZD1hdHRhY2twbGF5ZXImbW9kZT1ib3VudHkmdGFyZ2V0X3VzZXJuYW1lPScgK1xyXG4gICAgICAgIGJvdW50eUxpc3QuYm91bnR5W2ldLnRhcmdldCArICdcIj5bYV08L2E+Jm5ic3A7PGEgc3R5bGU9XCInICtcclxuICAgICAgICAnY29sb3I6I0EwQ0ZFQztmb250LXNpemU6MTBweDtcImhyZWY9XCInICsgc2VydmVyICtcclxuICAgICAgICAnaW5kZXgucGhwP2NtZD1tZXNzYWdlJnRhcmdldF9wbGF5ZXI9JyArXHJcbiAgICAgICAgYm91bnR5TGlzdC5ib3VudHlbaV0udGFyZ2V0ICsgJ1wiPlttXTwvYT4gJm5ic3A7PGEgaHJlZj1cIicgK1xyXG4gICAgICAgIGJvdW50eUxpc3QuYm91bnR5W2ldLmxpbmsgKyAnXCIgY2xhc3M9XCJ0aXAtc3RhdGljXCIgJyArXHJcbiAgICAgICAgJ2RhdGEtdGlwcGVkPVwiJyArIG1vdXNlT3ZlclRleHQgKyAnXCIgc3R5bGU9XCJjb2xvcjonICtcclxuICAgICAgICAnI0ZGRjM4MDtmb250LXNpemU6MTBweDtcIj4nICsgYm91bnR5TGlzdC5ib3VudHlbaV0udGFyZ2V0ICtcclxuICAgICAgICAnPC9hPjwvbGk+JztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFDZWxsLmlubmVySFRNTCA9IG91dHB1dDtcclxuICB2YXIgYnJlYWtlciA9IGNyZWF0ZUJyKCk7XHJcbiAgaW5qZWN0SGVyZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShicmVha2VyLCBpbmplY3RIZXJlLm5leHRTaWJsaW5nKTtcclxuICBpbmplY3RIZXJlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRpc3BsYXlMaXN0LCBpbmplY3RIZXJlLm5leHRTaWJsaW5nKTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnSGVscGVyOnJlc2V0Qm91bnR5TGlzdCcpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCByZXNldEJvdW50eUxpc3QsIHRydWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldFdhbnRlZExpc3QoKSB7IC8vIExlZ2FjeVxyXG4gIHNldFZhbHVlSlNPTignd2FudGVkTGlzdCcsIG51bGwpO1xyXG4gIGxvY2F0aW9uLnJlbG9hZCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhY2NlcHRPckF0dGFjayhib3VudHkpIHsgLy8gTGVnYWN5XHJcbiAgaWYgKGJvdW50eS5hY2NlcHQpIHtcclxuICAgIHJldHVybiAnY29sb3I6cmdiKDAsMjU1LDApOyBjdXJzb3I6cG9pbnRlcjsgJyArXHJcbiAgICAgICd0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lIGJsaW5rO1wiIHRpdGxlID0gXCJBY2NlcHQgJyArXHJcbiAgICAgICdCb3VudHlcIiBvbmNsaWNrPVwiJyArIGJvdW50eS5hY2NlcHQgK1xyXG4gICAgICAnXCI+W2FdPC9hPiZuYnNwOyc7XHJcbiAgfVxyXG4gIHJldHVybiAnY29sb3I6cmVkO1wiIGhyZWY9XCInICsgc2VydmVyICtcclxuICAgICdpbmRleC5waHA/Y21kPWF0dGFja3BsYXllciZ0YXJnZXRfdXNlcm5hbWU9JyArXHJcbiAgICBib3VudHkudGFyZ2V0ICsgJ1wiPlthXTwvYT4mbmJzcDsnO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmplY3RXYW50ZWRMaXN0KCkgeyAvLyBMZWdhY3lcclxuICBzZXRWYWx1ZUpTT04oJ3dhbnRlZExpc3QnLCB3YW50ZWRMaXN0KTtcclxuICB2YXIgaW5qZWN0SGVyZSA9IGRvY3VtZW50XHJcbiAgICAuZ2V0RWxlbWVudEJ5SWQoJ0hlbHBlcjpXYW50ZWRMaXN0UGxhY2Vob2xkZXInKTtcclxuICB2YXIgZGlzcGxheUxpc3QgPSBjcmVhdGVUYWJsZSh7Y2VsbFBhZGRpbmc6IDMsIHdpZHRoOiAxMjV9KTtcclxuXHJcbiAgdmFyIGFSb3cgPSBkaXNwbGF5TGlzdC5pbnNlcnRSb3coMCk7XHJcbiAgdmFyIGFDZWxsID0gYVJvdy5pbnNlcnRDZWxsKDApO1xyXG4gIHZhciBvdXRwdXQgPSAnPGgzPldhbnRlZCBCb3VudGllczwvaDM+PG9sIHN0eWxlPVwiY29sb3I6I0ZGRjM4MDtmb250LScgK1xyXG4gICAgJ3NpemU6MTBweDtsaXN0LXN0eWxlLXR5cGU6ZGVjaW1hbDttYXJnaW4tbGVmdDoxcHg7bWFyZ2luLXRvcDonICtcclxuICAgICcxcHg7bWFyZ2luLWJvdHRvbToxcHg7cGFkZGluZy1sZWZ0OjEycHg7XCI+PG5vYnI+IDxzcGFuIGlkPVwiJyArXHJcbiAgICAnSGVscGVyOnJlc2V0V2FudGVkTGlzdFwiIGZvbnQtc2l6ZTo4cHg7IGN1cnNvcjpwb2ludGVyOyB0ZXh0LScgK1xyXG4gICAgJ2RlY29yYXRpb246dW5kZXJsaW5lO1wiPlJlc2V0PC9zcGFuPjwvbm9icj48YnI+JztcclxuXHJcbiAgaWYgKHdhbnRlZExpc3Qud2FudGVkQm91bnRpZXMgPT09IGZhbHNlKSB7XHJcbiAgICBvdXRwdXQgKz0gJzwvb2w+IFxcZiA8b2wgc3R5bGU9XCJjb2xvcjpvcmFuZ2U7Zm9udC1zaXplOjEwcHg7bGlzdC0nICtcclxuICAgICAgJ3N0eWxlLXR5cGU6ZGVjaW1hbDttYXJnaW4tbGVmdDoxcHg7bWFyZ2luLXRvcDoxcHg7bWFyZ2luLScgK1xyXG4gICAgICAnYm90dG9tOjFweDtwYWRkaW5nLWxlZnQ6N3B4O1wiPltObyB3YW50ZWQgYm91bnRpZXNdPC9vbD4nO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdhbnRlZExpc3QuYm91bnR5Lmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgIHZhciBtb3VzZU92ZXJUZXh0ID0gJ1wiPGRpdiBzdHlsZT1cXCd0ZXh0LWFsaWduOmNlbnRlcjt3aWR0aDonICtcclxuICAgICAgICAnMjA1cHg7XFwnPlRhcmdldCBMZXZlbDogICcgKyB3YW50ZWRMaXN0LmJvdW50eVtpXS5sdmwgK1xyXG4gICAgICAgICc8YnIvPk9mZmVyZXI6ICcgKyB3YW50ZWRMaXN0LmJvdW50eVtpXS5vZmZlcmVyICtcclxuICAgICAgICAnPGJyLz5SZXdhcmQ6ICcgKyB3YW50ZWRMaXN0LmJvdW50eVtpXS5yZXdhcmQgKyAnICcgK1xyXG4gICAgICAgIHdhbnRlZExpc3QuYm91bnR5W2ldLnJld2FyZFR5cGUgK1xyXG4gICAgICAgICc8YnIvPlhQIExvc3MgUmVtYWluaW5nOiAnICsgd2FudGVkTGlzdC5ib3VudHlbaV0ueHBMb3NzICtcclxuICAgICAgICAnPGJyLz5Qb3N0ZWQ6ICcgKyB3YW50ZWRMaXN0LmJvdW50eVtpXS5wb3N0ZWQgK1xyXG4gICAgICAgICc8YnIvPlRpY2tldHMgUmVxLjogICcgKyB3YW50ZWRMaXN0LmJvdW50eVtpXS50aWNrZXRzICsgJzwvZGl2PlwiICc7XHJcblxyXG4gICAgICBvdXRwdXQgKz0gJzxsaSBzdHlsZT1cInBhZGRpbmctYm90dG9tOjBweDttYXJnaW4tbGVmdDo1cHg7XCI+JyArXHJcbiAgICAgICAgJzxhIHN0eWxlPSBcImZvbnQtc2l6ZToxMHB4OycgKyBhY2NlcHRPckF0dGFjayh3YW50ZWRMaXN0LmJvdW50eVtpXSkgK1xyXG4gICAgICAgICc8YSBzdHlsZT1cImNvbG9yOiNBMENGRUM7Zm9udC1zaXplOjEwcHg7XCJocmVmPVwiaicgK1xyXG4gICAgICAgICdhdmFzY3JpcHQ6b3BlblF1aWNrTXNnRGlhbG9nKFxcJycgKyB3YW50ZWRMaXN0LmJvdW50eVtpXS50YXJnZXQgK1xyXG4gICAgICAgICdcXCcpO1wiPlttXTwvYT4gJm5ic3A7PGEgY2xhc3M9XCJ0aXAtc3RhdGljXCIgZGF0YS10aXBwZWQ9JyArXHJcbiAgICAgICAgbW91c2VPdmVyVGV4dCArICdzdHlsZT1cImNvbG9yOiNGRkYzODA7Zm9udC1zaXplOjEwcHg7XCIgaHJlZj1cIicgK1xyXG4gICAgICAgIHdhbnRlZExpc3QuYm91bnR5W2ldLmxpbmsgKyAnXCI+JyArXHJcbiAgICAgICAgd2FudGVkTGlzdC5ib3VudHlbaV0udGFyZ2V0ICsgJzwvYT48L2xpPic7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhQ2VsbC5pbm5lckhUTUwgPSBvdXRwdXQ7XHJcbiAgdmFyIGJyZWFrZXIgPSBjcmVhdGVCcigpO1xyXG4gIGluamVjdEhlcmUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYnJlYWtlciwgaW5qZWN0SGVyZS5uZXh0U2libGluZyk7XHJcbiAgaW5qZWN0SGVyZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkaXNwbGF5TGlzdCwgaW5qZWN0SGVyZS5uZXh0U2libGluZyk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0hlbHBlcjpyZXNldFdhbnRlZExpc3QnKVxyXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVzZXRXYW50ZWRMaXN0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCwgdGhlUm93KSB7XHJcbiAgd2FudGVkTGlzdC53YW50ZWRCb3VudGllcyA9IHRydWU7XHJcbiAgdmFyIGJvdW50eSA9IHt9O1xyXG4gIGJvdW50eS50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgYm91bnR5LmxpbmsgPSB0aGVSb3cuY2VsbHNbMF1cclxuICAgIC5maXJzdENoaWxkLmZpcnN0Q2hpbGQuaHJlZjtcclxuICBib3VudHkubHZsID0gdGhlUm93LmNlbGxzWzBdXHJcbiAgICAuZmlyc3RDaGlsZC5maXJzdENoaWxkLm5leHRTaWJsaW5nLnRleHRDb250ZW50XHJcbiAgICAucmVwbGFjZSgvXFxbLywgJycpLnJlcGxhY2UoL1xcXS8sICcnKTtcclxuICBib3VudHkub2ZmZXJlciA9IHRoZVJvdy5jZWxsc1sxXVxyXG4gICAgLmZpcnN0Q2hpbGQuZmlyc3RDaGlsZC5maXJzdENoaWxkLnRleHRDb250ZW50O1xyXG4gIGJvdW50eS5yZXdhcmQgPSB0aGVSb3cuY2VsbHNbMl0udGV4dENvbnRlbnQ7XHJcbiAgYm91bnR5LnJld2FyZFR5cGUgPSB0aGVSb3cuY2VsbHNbMl1cclxuICAgIC5maXJzdENoaWxkLmZpcnN0Q2hpbGQuZmlyc3RDaGlsZC5maXJzdENoaWxkXHJcbiAgICAubmV4dFNpYmxpbmcuZmlyc3RDaGlsZC50aXRsZTtcclxuICBib3VudHkueHBMb3NzID0gdGhlUm93LmNlbGxzWzNdLnRleHRDb250ZW50O1xyXG4gIGJvdW50eS5wb3N0ZWQgPSB0aGVSb3cuY2VsbHNbNF0udGV4dENvbnRlbnQ7XHJcbiAgYm91bnR5LnRpY2tldHMgPSB0aGVSb3cuY2VsbHNbNV0udGV4dENvbnRlbnQ7XHJcbiAgaWYgKHRoZVJvdy5jZWxsc1s2XS50ZXh0Q29udGVudC50cmltKCkgPT09ICdbYWN0aXZlXScpIHtcclxuICAgIGJvdW50eS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgYm91bnR5LmFjY2VwdCA9ICcnO1xyXG4gIH0gZWxzZSBpZiAodGhlUm93LmNlbGxzWzZdLnRleHRDb250ZW50LnRyaW0oKSAhPT0gJ1tuL2FdJykgeyAvLyBUT0RPXHJcbiAgICBib3VudHkuYWN0aXZlID0gZmFsc2U7XHJcbiAgICBib3VudHkuYWNjZXB0ID0gdGhlUm93LmNlbGxzWzZdXHJcbiAgICAgIC5maXJzdENoaWxkLmZpcnN0Q2hpbGRcclxuICAgICAgLmdldEF0dHJpYnV0ZSgnb25jbGljaycpO1xyXG4gIH1cclxuICB3YW50ZWRMaXN0LmJvdW50eS5wdXNoKGJvdW50eSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdhbnRlZFRhcmdldCh0YXJnZXQsIHRoZVJvdywgZWwpIHtcclxuICBpZiAodGFyZ2V0ID09PSBlbC50cmltKCkgfHxcclxuICAgICAgd2FudGVkQXJyYXkuaW5kZXhPZignKicpICE9PSAtMSkge1xyXG4gICAgZ2V0VGFyZ2V0KHRhcmdldCwgdGhlUm93KTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRUYXJnZXQoYWN0aXZlVGFibGUpIHtcclxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFjdGl2ZVRhYmxlLnJvd3MubGVuZ3RoIC0gMjsgaSArPSAyKSB7XHJcbiAgICB2YXIgdGhlUm93ID0gYWN0aXZlVGFibGUucm93c1tpXTtcclxuICAgIHZhciB0YXJnZXQgPSB0aGVSb3cuY2VsbHNbMF0uZmlyc3RDaGlsZFxyXG4gICAgICAuZmlyc3RDaGlsZC5maXJzdENoaWxkLnRleHRDb250ZW50O1xyXG4gICAgaWYgKHRhcmdldCA9PT0gJ1sgTm8gYm91bnRpZXMgYXZhaWxhYmxlLiBdJykge2JyZWFrO31cclxuICAgIHdhbnRlZEFycmF5LmZvckVhY2god2FudGVkVGFyZ2V0LmJpbmQobnVsbCwgdGFyZ2V0LCB0aGVSb3cpKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFdhbnRlZEJvdW50eUxpc3QoZG9jKSB7IC8vIExlZ2FjeVxyXG4gIGlmICghY2FsZi5lbmFibGVXYW50ZWRMaXN0KSB7cmV0dXJuO31cclxuICB2YXIgcGFnZSA9IGZpbmROb2RlKCcvL2lucHV0W0BuYW1lPVwicGFnZVwiXScsIGRvYyk7XHJcbiAgY3VyUGFnZSA9IHBhcnNlSW50KHBhZ2UudmFsdWUsIDEwKTtcclxuICBtYXhQYWdlID0gcGFnZS5wYXJlbnROb2RlLmlubmVySFRNTC5tYXRjaCgvb2YmbmJzcDsoXFxkKikvKVsxXTtcclxuICB2YXIgYWN0aXZlVGFibGUgPSBmaW5kTm9kZSgnLy90YWJsZVtAd2lkdGggPSBcIjYzMFwiIGFuZCAnICtcclxuICAgICdjb250YWlucyguLFwiVGFyZ2V0XCIpXScsIGRvYyk7XHJcbiAgaWYgKGFjdGl2ZVRhYmxlKSB7ZmluZFRhcmdldChhY3RpdmVUYWJsZSk7fVxyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUFjdGl2ZUJvdW50eShhY3RpdmVUYWJsZSkgeyAvLyBMZWdhY3lcclxuICBpZiAoIS9ObyBib3VudGllcyBhY3RpdmUvLnRlc3QoYWN0aXZlVGFibGUucm93c1sxXS5jZWxsc1swXS5pbm5lckhUTUwpKSB7XHJcbiAgICBib3VudHlMaXN0LmFjdGl2ZUJvdW50aWVzID0gdHJ1ZTtcclxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYWN0aXZlVGFibGUucm93cy5sZW5ndGggLSAyOyBpICs9IDIpIHtcclxuICAgICAgdmFyIGJvdW50eSA9IHt9O1xyXG4gICAgICBib3VudHkudGFyZ2V0ID0gYWN0aXZlVGFibGUucm93c1tpXS5jZWxsc1swXS5maXJzdENoaWxkXHJcbiAgICAgICAgLmZpcnN0Q2hpbGQuZmlyc3RDaGlsZC50ZXh0Q29udGVudDtcclxuICAgICAgYm91bnR5LmxpbmsgPSBhY3RpdmVUYWJsZS5yb3dzW2ldLmNlbGxzWzBdLmZpcnN0Q2hpbGRcclxuICAgICAgICAuZmlyc3RDaGlsZC5ocmVmO1xyXG4gICAgICBib3VudHkubHZsID0gYWN0aXZlVGFibGUucm93c1tpXS5jZWxsc1swXS5maXJzdENoaWxkXHJcbiAgICAgICAgLmZpcnN0Q2hpbGQubmV4dFNpYmxpbmcudGV4dENvbnRlbnRcclxuICAgICAgICAucmVwbGFjZSgvXFxbLywgJycpLnJlcGxhY2UoL1xcXS8sICcnKTtcclxuICAgICAgYm91bnR5LnJld2FyZCA9IGFjdGl2ZVRhYmxlLnJvd3NbaV0uY2VsbHNbMl1cclxuICAgICAgICAudGV4dENvbnRlbnQ7XHJcbiAgICAgIGJvdW50eS5yZXdhcmRUeXBlID0gYWN0aXZlVGFibGUucm93c1tpXS5jZWxsc1syXVxyXG4gICAgICAgIC5maXJzdENoaWxkLmZpcnN0Q2hpbGQuZmlyc3RDaGlsZC5maXJzdENoaWxkXHJcbiAgICAgICAgLm5leHRTaWJsaW5nLmZpcnN0Q2hpbGQudGl0bGU7XHJcbiAgICAgIGJvdW50eS5wb3N0ZWQgPSBhY3RpdmVUYWJsZS5yb3dzW2ldLmNlbGxzWzNdXHJcbiAgICAgICAgLnRleHRDb250ZW50O1xyXG4gICAgICBib3VudHkueHBMb3NzID0gYWN0aXZlVGFibGUucm93c1tpXS5jZWxsc1s0XVxyXG4gICAgICAgIC50ZXh0Q29udGVudDtcclxuICAgICAgYm91bnR5LnByb2dyZXNzID0gYWN0aXZlVGFibGUucm93c1tpXS5jZWxsc1s1XVxyXG4gICAgICAgIC50ZXh0Q29udGVudDtcclxuICAgICAgYm91bnR5TGlzdC5ib3VudHkucHVzaChib3VudHkpO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBib3VudHlMaXN0LmFjdGl2ZUJvdW50aWVzID0gZmFsc2U7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRBY3RpdmVCb3VudHlMaXN0KGRvYykgeyAvLyBMZWdhY3lcclxuICB2YXIgYWN0aXZlVGFibGUgPSBmaW5kTm9kZSgnLy90YWJsZVtAd2lkdGggPSA2MjBdJywgZG9jKTtcclxuICBib3VudHlMaXN0ID0ge307XHJcbiAgYm91bnR5TGlzdC5ib3VudHkgPSBbXTtcclxuICBib3VudHlMaXN0LmlzUmVmcmVzaGVkID0gdHJ1ZTtcclxuICBib3VudHlMaXN0Lmxhc3RVcGRhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gIGlmIChhY3RpdmVUYWJsZSkge3BhcnNlQWN0aXZlQm91bnR5KGFjdGl2ZVRhYmxlKTt9XHJcbiAgaW5qZWN0Qm91bnR5TGlzdCgpO1xyXG4gIGFjdGl2ZUJvdW50eUxpc3RQb3N0ZWQgPSB0cnVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUJvdW50eVBhZ2VGb3JXb3JsZChkZXRhaWxzKSB7XHJcbiAgdmFyIGRvYyA9IGNyZWF0ZURvY3VtZW50KGRldGFpbHMpO1xyXG4gIGdldFdhbnRlZEJvdW50eUxpc3QoZG9jKTtcclxuICBpZiAoY2FsZi5lbmFibGVBY3RpdmVCb3VudHlMaXN0ICYmXHJcbiAgICAgICFhY3RpdmVCb3VudHlMaXN0UG9zdGVkKSB7XHJcbiAgICBnZXRBY3RpdmVCb3VudHlMaXN0KGRvYyk7XHJcbiAgfVxyXG4gIGlmIChjdXJQYWdlIDwgbWF4UGFnZSkge1xyXG4gICAgeG1saHR0cCgnaW5kZXgucGhwP2NtZD1ib3VudHkmcGFnZT0nICsgKGN1clBhZ2UgKyAxKSxcclxuICAgICAgcGFyc2VCb3VudHlQYWdlRm9yV29ybGQpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpbmplY3RXYW50ZWRMaXN0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiB0ZXN0Q2FjaGVJbnZhbGlkKCkgeyAvLyBMZWdhY3lcclxuICByZXR1cm4gYm91bnR5TGlzdCAmJlxyXG4gICAgbm93IC0gYm91bnR5TGlzdC5sYXN0VXBkYXRlLmdldFRpbWUoKSA+IGJvdW50eUxpc3RSZWZyZXNoVGltZSB8fFxyXG4gICAgd2FudGVkTGlzdCAmJlxyXG4gICAgbm93IC0gd2FudGVkTGlzdC5sYXN0VXBkYXRlLmdldFRpbWUoKSA+IGJvdW50eUxpc3RSZWZyZXNoVGltZTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW52YWxpZGF0ZUNhY2hlKCkgeyAvLyBMZWdhY3lcclxuICBib3VudHlMaXN0ID0gZ2V0VmFsdWVKU09OKCdib3VudHlMaXN0Jyk7XHJcbiAgd2FudGVkTGlzdCA9IGdldFZhbHVlSlNPTignd2FudGVkTGlzdCcpO1xyXG4gIGJvdW50eUxpc3RSZWZyZXNoVGltZSA9IGdldFZhbHVlKCdib3VudHlMaXN0UmVmcmVzaFRpbWUnKTtcclxuICBid05lZWRzUmVmcmVzaCA9IGdldFZhbHVlKCdid05lZWRzUmVmcmVzaCcpO1xyXG4gIGJvdW50eUxpc3RSZWZyZXNoVGltZSAqPSAxMDAwO1xyXG4gIGlmIChid05lZWRzUmVmcmVzaCkge3JldHVybjt9XHJcbiAgaWYgKHRlc3RDYWNoZUludmFsaWQoKSkge1xyXG4gICAgYndOZWVkc1JlZnJlc2ggPSB0cnVlOyAvLyBpbnZhbGlkYXRlIGNhY2hlXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkb1JlZnJlc2goKSB7IC8vIExlZ2FjeVxyXG4gIHdhbnRlZExpc3QgPSB7fTtcclxuICB3YW50ZWRMaXN0LmJvdW50eSA9IFtdO1xyXG4gIHdhbnRlZExpc3QuaXNSZWZyZXNoZWQgPSB0cnVlO1xyXG4gIHdhbnRlZExpc3QubGFzdFVwZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgd2FudGVkTGlzdC53YW50ZWRCb3VudGllcyA9IGZhbHNlO1xyXG4gIGFjdGl2ZUJvdW50eUxpc3RQb3N0ZWQgPSBmYWxzZTtcclxuICB3YW50ZWROYW1lcyA9IGdldFZhbHVlKCd3YW50ZWROYW1lcycpO1xyXG4gIHdhbnRlZEFycmF5ID0gd2FudGVkTmFtZXMuc3BsaXQoJywnKTtcclxuICB4bWxodHRwKCdpbmRleC5waHA/Y21kPWJvdW50eSZwYWdlPTEnLCBwYXJzZUJvdW50eVBhZ2VGb3JXb3JsZCk7XHJcbiAgc2V0VmFsdWUoJ2J3TmVlZHNSZWZyZXNoJywgZmFsc2UpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBub3RSZWZyZXNoZWQoZW5hYmxlQWN0aXZlQm91bnR5TGlzdCwgZW5hYmxlV2FudGVkTGlzdCkge1xyXG4gIGlmIChlbmFibGVXYW50ZWRMaXN0KSB7XHJcbiAgICB3YW50ZWRMaXN0LmlzUmVmcmVzaGVkID0gZmFsc2U7XHJcbiAgICBpbmplY3RXYW50ZWRMaXN0KHdhbnRlZExpc3QpO1xyXG4gIH1cclxuICBpZiAoZW5hYmxlQWN0aXZlQm91bnR5TGlzdCkge1xyXG4gICAgYm91bnR5TGlzdC5pc1JlZnJlc2hlZCA9IGZhbHNlO1xyXG4gICAgaW5qZWN0Qm91bnR5TGlzdChib3VudHlMaXN0KTtcclxuICB9XHJcbn1cclxuXHJcbnZhciB0ZXN0Q29uZGl0aW9ucyA9IFtcclxuICBmdW5jdGlvbigpIHtyZXR1cm4gIWJvdW50eUxpc3Q7fSxcclxuICBmdW5jdGlvbigpIHtyZXR1cm4gIXdhbnRlZExpc3Q7fSxcclxuICBmdW5jdGlvbigpIHtyZXR1cm4gYndOZWVkc1JlZnJlc2g7fVxyXG5dO1xyXG5cclxuZnVuY3Rpb24gdGVzdEZvclJlZnJlc2goKSB7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXN0Q29uZGl0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgaWYgKHRlc3RDb25kaXRpb25zW2ldKCkpIHtyZXR1cm4gdHJ1ZTt9XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmV0cmlldmVCb3VudHlJbmZvKGVuYWJsZUFjdGl2ZUJvdW50eUxpc3QsIGVuYWJsZVdhbnRlZExpc3QpIHsgLy8gTGVnYWN5XHJcbiAgaW52YWxpZGF0ZUNhY2hlKCk7XHJcbiAgaWYgKHRlc3RGb3JSZWZyZXNoKCkpIHtcclxuICAgIGRvUmVmcmVzaCgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBub3RSZWZyZXNoZWQoZW5hYmxlQWN0aXZlQm91bnR5TGlzdCwgZW5hYmxlV2FudGVkTGlzdCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmVwYXJlQm91bnR5RGF0YSgpIHtcclxuICB2YXIgcENSID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BDUicpO1xyXG4gIGlmIChjYWxmLmVuYWJsZVdhbnRlZExpc3QpIHtcclxuICAgIHBDUi5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCAnPGRpdiBjbGFzcz1cIm1pbmlib3hcIj4nICtcclxuICAgICAgJzxzcGFuIGlkPVwiSGVscGVyOldhbnRlZExpc3RQbGFjZWhvbGRlclwiPjwvc3Bhbj48L2Rpdj4nKTtcclxuICB9XHJcbiAgaWYgKGNhbGYuZW5hYmxlQWN0aXZlQm91bnR5TGlzdCkge1xyXG4gICAgcENSLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsICc8ZGl2IGNsYXNzPVwibWluaWJveFwiPicgK1xyXG4gICAgICAnPHNwYW4gaWQ9XCJIZWxwZXI6Qm91bnR5TGlzdFBsYWNlaG9sZGVyXCI+PC9zcGFuPjwvZGl2PicpO1xyXG4gIH1cclxuICByZXRyaWV2ZUJvdW50eUluZm8oXHJcbiAgICBjYWxmLmVuYWJsZUFjdGl2ZUJvdW50eUxpc3QsXHJcbiAgICBjYWxmLmVuYWJsZVdhbnRlZExpc3QpO1xyXG59XHJcbiIsImltcG9ydCB7aW5mb0JveH0gZnJvbSAnLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5pbXBvcnQgcmV0cnlBamF4IGZyb20gJy4uL2FqYXgvcmV0cnlBamF4JztcclxuaW1wb3J0IHtnZXRWYWx1ZSwgc2V0VmFsdWV9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkb1NlbmRHb2xkKCkgeyAvLyBqUXVlcnlcclxuICByZXRyeUFqYXgoe1xyXG4gICAgdXJsOiAnaW5kZXgucGhwJyxcclxuICAgIGRhdGE6IHtcclxuICAgICAgY21kOiAndHJhZGUnLFxyXG4gICAgICBzdWJjbWQ6ICdzZW5kZ29sZCcsXHJcbiAgICAgIHhjOiB3aW5kb3cuYWpheFhDLFxyXG4gICAgICB0YXJnZXRfdXNlcm5hbWU6ICQoJyNIZWxwZXJTZW5kVG8nKS5odG1sKCksXHJcbiAgICAgIGdvbGRfYW1vdW50OiAkKCcjSGVscGVyU2VuZEFtdCcpLmh0bWwoKS5yZXBsYWNlKC9bXlxcZF0vZywgJycpXHJcbiAgICB9XHJcbiAgfSkuZG9uZShmdW5jdGlvbihkYXRhKSB7XHJcbiAgICB2YXIgaW5mbyA9IGluZm9Cb3goZGF0YSk7XHJcbiAgICBpZiAoaW5mbyA9PT0gJ1lvdSBzdWNjZXNzZnVsbHkgc2VudCBnb2xkIScgfHwgaW5mbyA9PT0gJycpIHtcclxuICAgICAgc2V0VmFsdWUoJ2N1cnJlbnRHb2xkU2VudFRvdGFsJyxcclxuICAgICAgICBwYXJzZUludChnZXRWYWx1ZSgnY3VycmVudEdvbGRTZW50VG90YWwnKSwgMTApICtcclxuICAgICAgICBwYXJzZUludChnZXRWYWx1ZSgnZ29sZEFtb3VudCcpLCAxMCkpO1xyXG4gICAgICBHYW1lRGF0YS5mZXRjaCgxKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFNlbmRHb2xkT25Xb3JsZCgpIHsgLy8galF1ZXJ5XHJcbiAgaWYgKCFnZXRWYWx1ZSgnc2VuZEdvbGRvbldvcmxkJykpIHtyZXR1cm47fVxyXG4gICQoJyNzdGF0YmFyLWdvbGQtdG9vbHRpcC1nZW5lcmFsJykuYXBwZW5kKFxyXG4gICAgJzxkdCBjbGFzcz1cInN0YXQtZ29sZC1zZW5kVG9cIj5TZW5kIFRvOjwvZHQ+JyArXHJcbiAgICAnPGRkIGlkPVwiSGVscGVyU2VuZFRvXCI+JyArIGdldFZhbHVlKCdnb2xkUmVjaXBpZW50JykgK1xyXG4gICAgJzwvZGQ+JyArXHJcbiAgICAnPGR0IGNsYXNzPVwic3RhdC1nb2xkLXNlbmRBbXRcIj5BbW91bnQ6PC9kdD4nICtcclxuICAgICc8ZGQgaWQ9XCJIZWxwZXJTZW5kQW10XCI+JyArIGdldFZhbHVlKCdnb2xkQW1vdW50JylcclxuICAgICAgLnJlcGxhY2UoLyhcXGQpKD89KFxcZFxcZFxcZCkrKD8hXFxkKSkvZywgJyQxLCcpICsgJzwvZGQ+JyArXHJcbiAgICAnPGR0IGNsYXNzPVwic3RhdC1nb2xkLXNlbmRUb1wiPlNlbmQ/PC9kdD4nICtcclxuICAgICc8ZGQ+PGlucHV0IGlkPVwiSGVscGVyU2VuZEdvbGRcIiB2YWx1ZT1cIlNlbmQhXCIgY2xhc3M9XCJjdXN0b21idXR0b25cIiAnICtcclxuICAgICd0eXBlPVwic3VibWl0XCI+PGlucHV0IHR5cGU9XCJoaWRkZW5cIiBpZD1cInhjXCIgdmFsdWU9XCJcIjwvZGQ+JyArXHJcbiAgICAnPGR0IGNsYXNzPVwic3RhdC1nb2xkLXNlbmRUb3RhbFwiPlRvdGFsIFNlbnQ6PC9kdD4nICtcclxuICAgICc8ZGQgaWQ9XCJIZWxwZXJTZW5kVG90YWxcIj4nICtcclxuICAgICAgZ2V0VmFsdWUoJ2N1cnJlbnRHb2xkU2VudFRvdGFsJylcclxuICAgICAgICAudG9TdHJpbmcoKVxyXG4gICAgICAgIC5yZXBsYWNlKC8oXFxkKSg/PShcXGRcXGRcXGQpKyg/IVxcZCkpL2csICckMSwnKSArXHJcbiAgICAgICc8L2RkPicpO1xyXG4gICQoJyNIZWxwZXJTZW5kR29sZCcpLmNsaWNrKGRvU2VuZEdvbGQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlU2VuZEdvbGRPbldvcmxkKGRhdGEpIHsgLy8galF1ZXJ5XHJcbiAgaWYgKGRhdGEucGxheWVyICYmIGdldFZhbHVlKCdzZW5kR29sZG9uV29ybGQnKSkge1xyXG4gICAgJCgnI0hlbHBlclNlbmRUb3RhbCcpXHJcbiAgICAgIC5odG1sKGdldFZhbHVlKCdjdXJyZW50R29sZFNlbnRUb3RhbCcpXHJcbiAgICAgICAgLnRvU3RyaW5nKClcclxuICAgICAgICAucmVwbGFjZSgvKFxcZCkoPz0oXFxkXFxkXFxkKSsoPyFcXGQpKS9nLCAnJDEsJykpO1xyXG4gICAgaWYgKHBhcnNlSW50KGRhdGEucGxheWVyLmdvbGQsIDEwKSA+XHJcbiAgICAgIGdldFZhbHVlKCdnb2xkQW1vdW50JykpIHtcclxuICAgICAgJCgnI3N0YXRiYXItZ29sZCcpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsICdyZWQnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICQoJyNzdGF0YmFyLWdvbGQnKS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCAnaW5oZXJpdCcpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge2RvU2VuZEdvbGR9IGZyb20gJy4uL25ld01hcC9zZW5kR29sZCc7XHJcbmltcG9ydCBpbnNlcnRRdWlja1dlYXIgZnJvbSAnLi4vcXVpY2tXZWFyL3F1aWNrV2Vhcic7XHJcbmltcG9ydCBqUXVlcnlEaWFsb2cgZnJvbSAnLi9qUXVlcnlEaWFsb2cnO1xyXG5pbXBvcnQgcmV0cnlBamF4IGZyb20gJy4uL2FqYXgvcmV0cnlBamF4JztcclxuaW1wb3J0IHtjcmVhdGVEb2N1bWVudCwgZmluZE5vZGUsIGdldFZhbHVlfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG52YXIgZXhwYW5kTWVudU9uS2V5UHJlc3M7XHJcblxyXG5mdW5jdGlvbiBtb3ZlUGFnZShkaXIpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIGRpckJ1dHRvbiA9IGZpbmROb2RlKCcvL2lucHV0W0B2YWx1ZT1cIicgKyBkaXIgKyAnXCJdJyk7XHJcbiAgaWYgKCFkaXJCdXR0b24pIHtyZXR1cm47fVxyXG4gIHZhciB1cmwgPSBkaXJCdXR0b24uZ2V0QXR0cmlidXRlKCdvbkNsaWNrJyk7XHJcbiAgdXJsID0gdXJsLnJlcGxhY2UoL15bXiddKicvbSwgJycpLnJlcGxhY2UoLyc7JC9tLCAnJyk7XHJcbiAgbG9jYXRpb24uaHJlZiA9IHVybDtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hhbmdlQ29tYmF0U2V0KHJlc3BvbnNlVGV4dCwgaXRlbUluZGV4KSB7IC8vIGpRdWVyeS5taW5cclxuICB2YXIgZG9jID0gY3JlYXRlRG9jdW1lbnQocmVzcG9uc2VUZXh0KTtcclxuXHJcbiAgdmFyIGNic1NlbGVjdCA9IGRvYy5xdWVyeVNlbGVjdG9yKFxyXG4gICAgJyNwcm9maWxlQ29tYmF0U2V0RGl2IHNlbGVjdFtuYW1lPVwiY29tYmF0U2V0SWRcIl0nKTtcclxuXHJcbiAgLy8gZmluZCB0aGUgY29tYmF0IHNldCBpZCB2YWx1ZVxyXG4gIHZhciBhbGxJdGVtcyA9IGNic1NlbGVjdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnb3B0aW9uJyk7XHJcbiAgaWYgKGl0ZW1JbmRleCA+PSBhbGxJdGVtcy5sZW5ndGgpIHtyZXR1cm47fVxyXG4gIHZhciBjYnNJbmRleCA9IGFsbEl0ZW1zW2l0ZW1JbmRleF0udmFsdWU7XHJcblxyXG4gIHJldHJ5QWpheCh7XHJcbiAgICB1cmw6ICdpbmRleC5waHAnLFxyXG4gICAgZGF0YToge1xyXG4gICAgICBjbWQ6ICdwcm9maWxlJyxcclxuICAgICAgc3ViY21kOiAnbWFuYWdlY29tYmF0c2V0JyxcclxuICAgICAgY29tYmF0U2V0SWQ6IGNic0luZGV4LFxyXG4gICAgICBzdWJtaXQ6ICdVc2UnXHJcbiAgICB9LFxyXG4gICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmIChleHBhbmRNZW51T25LZXlQcmVzcykge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdoY3MubmF2Lm9wZW5JbmRleCcsICcyJyk7XHJcbiAgICAgIH1cclxuICAgICAgbG9jYXRpb24uaHJlZiA9ICdpbmRleC5waHA/Y21kPXByb2ZpbGUnO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb1JlcGFpcigpIHtcclxuICAvLyBkbyBub3QgdXNlIHJlcGFpciBsaW5rIGZvciBuZXcgbWFwXHJcbiAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd29ybGRQYWdlJykpIHtcclxuICAgIGxvY2F0aW9uLmhyZWYgPSAnaW5kZXgucGhwP2NtZD1ibGFja3NtaXRoJnN1YmNtZD1yZXBhaXJhbGwmZnJvbXdvcmxkPTEnO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlR3JvdXAoKSB7XHJcbiAgaWYgKGV4cGFuZE1lbnVPbktleVByZXNzKSB7bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2hjcy5uYXYub3BlbkluZGV4JywgJzQnKTt9XHJcbiAgbG9jYXRpb24uaHJlZiA9XHJcbiAgICAnaW5kZXgucGhwP2NtZD1ndWlsZCZzdWJjbWQ9Z3JvdXBzJnN1YmNtZDI9Y3JlYXRlJmZyb213b3JsZD0xJztcclxufVxyXG5cclxuZnVuY3Rpb24gbG9nUGFnZSgpIHtcclxuICBpZiAoZXhwYW5kTWVudU9uS2V5UHJlc3MpIHtsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaGNzLm5hdi5vcGVuSW5kZXgnLCAnMicpO31cclxuICBsb2NhdGlvbi5ocmVmID0gJ2luZGV4LnBocD9jbWQ9bG9nJztcclxufVxyXG5cclxuZnVuY3Rpb24gZ290b0d1aWxkKCkge1xyXG4gIGlmIChleHBhbmRNZW51T25LZXlQcmVzcykge2xvY2FsU3RvcmFnZS5zZXRJdGVtKCdoY3MubmF2Lm9wZW5JbmRleCcsICc0Jyk7fVxyXG4gIGxvY2F0aW9uLmhyZWYgPSAnaW5kZXgucGhwP2NtZD1ndWlsZCZzdWJjbWQ9bWFuYWdlJztcclxufVxyXG5cclxuZnVuY3Rpb24gam9pbkFsbEdyb3VwKCkge1xyXG4gIGlmIChleHBhbmRNZW51T25LZXlQcmVzcykge2xvY2FsU3RvcmFnZS5zZXRJdGVtKCdoY3MubmF2Lm9wZW5JbmRleCcsICc0Jyk7fVxyXG4gIGlmICghZ2V0VmFsdWUoJ2VuYWJsZU1heEdyb3VwU2l6ZVRvSm9pbicpKSB7XHJcbiAgICBsb2NhdGlvbi5ocmVmID0gJ2luZGV4LnBocD9jbWQ9Z3VpbGQmc3ViY21kPWdyb3VwcyZzdWJjbWQyPWpvaW5hbGwnO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBsb2NhdGlvbi5ocmVmID1cclxuICAgICAgJ2luZGV4LnBocD9jbWQ9Z3VpbGQmc3ViY21kPWdyb3VwcyZzdWJjbWQyPWpvaW5hbGxncm91cHN1bmRlcnNpemUnO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYmFja3BhY2soKSB7XHJcbiAgaWYgKGV4cGFuZE1lbnVPbktleVByZXNzKSB7bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2hjcy5uYXYub3BlbkluZGV4JywgJzInKTt9XHJcbiAgbG9jYXRpb24uaHJlZiA9ICdpbmRleC5waHA/Y21kPXByb2ZpbGUmc3ViY21kPWRyb3BpdGVtcyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZhc3RXZWFyTWdyKCkge1xyXG4gIGpRdWVyeURpYWxvZyhpbnNlcnRRdWlja1dlYXIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9maWxlKCkge1xyXG4gIGlmIChleHBhbmRNZW51T25LZXlQcmVzcykge2xvY2FsU3RvcmFnZS5zZXRJdGVtKCdoY3MubmF2Lm9wZW5JbmRleCcsICcyJyk7fVxyXG4gIGxvY2F0aW9uLmhyZWYgPSAnaW5kZXgucGhwP2NtZD1wcm9maWxlJztcclxufVxyXG5cclxuZnVuY3Rpb24gY29tYmF0U2V0S2V5KGl0ZW1JbmRleCkge1xyXG4gIHJldHJ5QWpheCgnaW5kZXgucGhwP2NtZD1wcm9maWxlJykuZG9uZShmdW5jdGlvbihkYXRhKSB7XHJcbiAgICBjaGFuZ2VDb21iYXRTZXQoZGF0YSwgaXRlbUluZGV4KTtcclxuICB9KTtcclxufVxyXG5cclxudmFyIGtleURpY3QgPSB7XHJcbiAgJzMzJzoge2ZuOiBjb21iYXRTZXRLZXksIGFyZzogMX0sIC8vIFNoaWZ0KzFcclxuICAnNjQnOiB7Zm46IGNvbWJhdFNldEtleSwgYXJnOiAyfSwgLy8gU2hpZnQrMlxyXG4gICczNCc6IHtmbjogY29tYmF0U2V0S2V5LCBhcmc6IDJ9LCAvLyBTaGlmdCsyIC0tIGZvciBVSyBrZXlib2FyZHMsIEkgdGhpbmtcclxuICAnMzUnOiB7Zm46IGNvbWJhdFNldEtleSwgYXJnOiAzfSwgLy8gU2hpZnQrM1xyXG4gICczNic6IHtmbjogY29tYmF0U2V0S2V5LCBhcmc6IDR9LCAvLyBTaGlmdCs0XHJcbiAgJzM3Jzoge2ZuOiBjb21iYXRTZXRLZXksIGFyZzogNX0sIC8vIFNoaWZ0KzVcclxuICAnOTQnOiB7Zm46IGNvbWJhdFNldEtleSwgYXJnOiA2fSwgLy8gU2hpZnQrNlxyXG4gICczOCc6IHtmbjogY29tYmF0U2V0S2V5LCBhcmc6IDd9LCAvLyBTaGlmdCs3XHJcbiAgJzQyJzoge2ZuOiBjb21iYXRTZXRLZXksIGFyZzogOH0sIC8vIFNoaWZ0KzhcclxuICAnNDAnOiB7Zm46IGNvbWJhdFNldEtleSwgYXJnOiA5fSwgLy8gU2hpZnQrOVxyXG4gICc2MCc6IHtmbjogbW92ZVBhZ2UsIGFyZzogJzwnfSwgLy8gbW92ZSB0byBwcmV2IHBhZ2UgWzxdXHJcbiAgJzYyJzoge2ZuOiBtb3ZlUGFnZSwgYXJnOiAnPid9LCAvLyBtb3ZlIHRvIG5leHQgcGFnZSBbPl1cclxuICAnNzEnOiB7Zm46IGNyZWF0ZUdyb3VwfSwgLy8gY3JlYXRlIGdyb3VwIFtHXVxyXG4gICc3Nic6IHtmbjogbG9nUGFnZX0sIC8vIExvZyBQYWdlIFtMXVxyXG4gICc5OCc6IHtmbjogYmFja3BhY2t9LCAvLyBiYWNrcGFjayBbYl1cclxuICAnMTAzJzoge2ZuOiBnb3RvR3VpbGR9LCAvLyBnbyB0byBndWlsZCBbZ11cclxuICAnMTA2Jzoge2ZuOiBqb2luQWxsR3JvdXB9LCAvLyBqb2luIGFsbCBncm91cCBbal1cclxuICAnMTA4Jzoge2ZuOiBsb2dQYWdlfSwgLy8gTG9nIFBhZ2UgW2xdXHJcbiAgJzExMic6IHtmbjogcHJvZmlsZX0sIC8vIHByb2ZpbGUgW3BdXHJcbiAgJzExNCc6IHtmbjogZG9SZXBhaXJ9LCAvLyByZXBhaXIgW3JdXHJcbiAgJzExOCc6IHtmbjogZmFzdFdlYXJNZ3J9LCAvLyBmYXN0IHdlYXIgbWFuYWdlciBbdl1cclxuICAnMTIxJzoge2ZuOiBkb1NlbmRHb2xkfSwgLy8gZmFzdCBzZW5kIGdvbGQgW3ldXHJcbiAgJzE2Myc6IHtmbjogY29tYmF0U2V0S2V5LCBhcmc6IDN9LCAvLyBTaGlmdCszIC0tIGZvciBVSyBrZXlib2FyZHNcclxufTtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUtleShyKSB7XHJcbiAgaWYgKHIgaW4ga2V5RGljdCkge1xyXG4gICAga2V5RGljdFtyXS5mbihrZXlEaWN0W3JdLmFyZyk7XHJcbiAgfVxyXG59XHJcblxyXG52YXIgYmFpbE91dCA9IFtcclxuICBmdW5jdGlvbihldnQpIHtcclxuICAgIHJldHVybiBldnQudGFyZ2V0LnRhZ05hbWUgIT09ICdIVE1MJyAmJiBldnQudGFyZ2V0LnRhZ05hbWUgIT09ICdCT0RZJztcclxuICB9LFxyXG4gIC8qIGlnbm9yZSBjb250cm9sLCBhbHQgYW5kIG1ldGEga2V5c1xyXG4gIChJIHRoaW5rIG1ldGEgaXMgdGhlIGNvbW1hbmQga2V5IGluIE1hY2ludG9zaGVzKSAqL1xyXG4gIGZ1bmN0aW9uKGV2dCkge3JldHVybiBldnQuY3RybEtleTt9LFxyXG4gIGZ1bmN0aW9uKGV2dCkge3JldHVybiBldnQubWV0YUtleTt9LFxyXG4gIGZ1bmN0aW9uKGV2dCkge3JldHVybiBldnQuYWx0S2V5O31cclxuXTtcclxuXHJcbmZ1bmN0aW9uIGtleVByZXNzKGV2dCkge1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmFpbE91dC5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgaWYgKGJhaWxPdXRbaV0oZXZ0KSkge3JldHVybjt9XHJcbiAgfVxyXG4gIGhhbmRsZUtleShldnQuY2hhckNvZGUpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXBsYWNlS2V5SGFuZGxlcigpIHtcclxuICBleHBhbmRNZW51T25LZXlQcmVzcyA9IGdldFZhbHVlKCdleHBhbmRNZW51T25LZXlQcmVzcycpO1xyXG4gIGRvY3VtZW50Lm9ua2V5cHJlc3MgPSBrZXlQcmVzcztcclxufVxyXG4iLCJpbXBvcnQge2NyZWF0ZUFuY2hvcn0gZnJvbSAnLi4vY29tbW9uL2NFbGVtZW50JztcclxuXHJcbmZ1bmN0aW9uIHN0YXRiYXJXcmFwcGVyKGhyZWYsIGlkKSB7XHJcbiAgdmFyIG15V3JhcHBlciA9IGNyZWF0ZUFuY2hvcih7aHJlZjogaHJlZn0pO1xyXG4gIHZhciBjaGFyYWN0ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcbiAgdmFyIHN0YXRXcmFwcGVyID0gY2hhcmFjdGVyLnBhcmVudE5vZGU7XHJcbiAgbXlXcmFwcGVyLmFwcGVuZENoaWxkKGNoYXJhY3Rlcik7XHJcbiAgc3RhdFdyYXBwZXIuaW5zZXJ0QmVmb3JlKG15V3JhcHBlciwgc3RhdFdyYXBwZXIuZmlyc3RDaGlsZCk7XHJcbiAgbXlXcmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXZ0KSB7XHJcbiAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgfSwgdHJ1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXRiYXIoKSB7XHJcbiAgc3RhdGJhcldyYXBwZXIoJ2luZGV4LnBocD9jbWQ9cHJvZmlsZScsICdzdGF0YmFyLWNoYXJhY3RlcicpO1xyXG4gIHN0YXRiYXJXcmFwcGVyKCdpbmRleC5waHA/Y21kPXBvaW50cyZzdWJjbWQ9cmVzZXJ2ZScsICdzdGF0YmFyLXN0YW1pbmEnKTtcclxuICBzdGF0YmFyV3JhcHBlcignaW5kZXgucGhwP2NtZD1ibGFja3NtaXRoJywgJ3N0YXRiYXItZXF1aXBtZW50Jyk7XHJcbiAgc3RhdGJhcldyYXBwZXIoJ2luZGV4LnBocD9jbWQ9cHJvZmlsZSZzdWJjbWQ9ZHJvcGl0ZW1zJywgJ3N0YXRiYXItaW52ZW50b3J5Jyk7XHJcbiAgc3RhdGJhcldyYXBwZXIoJ2luZGV4LnBocD9jbWQ9cG9pbnRzJywgJ3N0YXRiYXItZnNwJyk7XHJcbiAgc3RhdGJhcldyYXBwZXIoJ2luZGV4LnBocD9jbWQ9YmFuaycsICdzdGF0YmFyLWdvbGQnKTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVIQ1NRdWlja0J1ZmZMaW5rcyhzZWxlY3Rvcikge1xyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvciksXHJcbiAgICBmdW5jdGlvbihlbCkge1xyXG4gICAgICBlbC5ocmVmID0gZWwuZ2V0QXR0cmlidXRlKCdocmVmJykucmVwbGFjZSgvLCA1MDAvZywgJywgMTAwMCcpOyAvLyBnZXRBdHRyaWJ1dGUgbmVjY2Vzc2FyeSBmb3IgRkZcclxuICAgIH1cclxuICApO1xyXG59XHJcbiIsImltcG9ydCBjYWxmIGZyb20gJy4uL3N1cHBvcnQvY2FsZic7XHJcblxyXG5mdW5jdGlvbiBoaWRlRWxlbWVudChlbCkge1xyXG4gIGVsLmNsYXNzTGlzdC5hZGQoJ2ZzaEhpZGUnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGlkZU5vZGVMaXN0KG5vZGVMaXN0KSB7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChub2RlTGlzdCwgaGlkZUVsZW1lbnQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlUXVlcnlTZWxlY3RvckFsbChwYXJlbnQsIHNlbGVjdG9yKSB7IC8vIE5hdGl2ZSAtIHByb2JhYmx5IHdyb25nXHJcbiAgaGlkZU5vZGVMaXN0KHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbnRhY3RDb2xvdXIoZWwsIG9iaikge1xyXG4gIHZhciBvbk1vdXNlT3ZlciA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS10aXBwZWQnKTtcclxuICB2YXIgbGFzdEFjdGl2aXR5TWludXRlcyA9XHJcbiAgICAvTGFzdCBBY3Rpdml0eTo8XFwvdGQ+PHRkPihcXGQrKSBtaW5zLy5leGVjKG9uTW91c2VPdmVyKVsxXTtcclxuICBpZiAobGFzdEFjdGl2aXR5TWludXRlcyA8IDIpIHtcclxuICAgIGVsLmNsYXNzTGlzdC5hZGQob2JqLmwxKTtcclxuICB9IGVsc2UgaWYgKGxhc3RBY3Rpdml0eU1pbnV0ZXMgPCA1KSB7XHJcbiAgICBlbC5jbGFzc0xpc3QuYWRkKG9iai5sMik7XHJcbiAgfSBlbHNlIHtcclxuICAgIGVsLmNsYXNzTGlzdC5hZGQob2JqLmwzKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGd1aWxkQ29sb3VyKGVsKSB7XHJcbiAgY29udGFjdENvbG91cihlbCwge1xyXG4gICAgbDE6ICdmc2hHcmVlbicsXHJcbiAgICBsMjogJ2ZzaFdoaXRlJyxcclxuICAgIGwzOiAnZnNoR3JleSdcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWxsaWVzQ29sb3VyKGVsKSB7XHJcbiAgY29udGFjdENvbG91cihlbCwge1xyXG4gICAgbDE6ICdmc2hEb2RnZXJCbHVlJyxcclxuICAgIGwyOiAnZnNoTGlnaHRTa3lCbHVlJyxcclxuICAgIGwzOiAnZnNoUG93ZGVyQmx1ZSdcclxuICB9KTtcclxufVxyXG5cclxudmFyIGhpZGVCdG4gPSBbXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbigpIHtyZXR1cm4gY2FsZi5oaWRlR3VpbGRJbmZvVHJhZGU7fSxcclxuICAgIGd1aWxkU2VsZWN0b3I6ICcjZ3VpbGQtbWluaWJveC1hY3Rpb24tdHJhZGUnLFxyXG4gICAgYWxseVNlbGVjdG9yOiAnI29ubGluZS1hbGxpZXMtYWN0aW9uLXRyYWRlJ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbigpIHtyZXR1cm4gY2FsZi5oaWRlR3VpbGRJbmZvU2VjdXJlVHJhZGU7fSxcclxuICAgIGd1aWxkU2VsZWN0b3I6ICcjZ3VpbGQtbWluaWJveC1hY3Rpb24tc2VjdXJlLXRyYWRlJyxcclxuICAgIGFsbHlTZWxlY3RvcjogJyNvbmxpbmUtYWxsaWVzLWFjdGlvbi1zZWN1cmUtdHJhZGUnXHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKCkge3JldHVybiBjYWxmLmhpZGVHdWlsZEluZm9CdWZmO30sXHJcbiAgICBndWlsZFNlbGVjdG9yOiAnI2d1aWxkLW1pbmlib3gtYWN0aW9uLXF1aWNrYnVmZicsXHJcbiAgICBhbGx5U2VsZWN0b3I6ICcjb25saW5lLWFsbGllcy1hY3Rpb24tcXVpY2tidWZmJ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbigpIHtyZXR1cm4gY2FsZi5oaWRlR3VpbGRJbmZvTWVzc2FnZTt9LFxyXG4gICAgZ3VpbGRTZWxlY3RvcjogJyNndWlsZC1taW5pYm94LWFjdGlvbi1zZW5kLW1lc3NhZ2UnLFxyXG4gICAgYWxseVNlbGVjdG9yOiAnI29ubGluZS1hbGxpZXMtYWN0aW9uLXNlbmQtbWVzc2FnZSdcclxuICB9XHJcbl07XHJcblxyXG5mdW5jdGlvbiBkb0hpZGVCdG4oY29udGV4dCwgc2VsZWN0b3IpIHtcclxuICBoaWRlQnRuLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcclxuICAgIGlmIChlbC5jb25kaXRpb24oKSkge1xyXG4gICAgICBoaWRlUXVlcnlTZWxlY3RvckFsbChjb250ZXh0LCBlbFtzZWxlY3Rvcl0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkR3VpbGRJbmZvV2lkZ2V0cygpIHtcclxuICB2YXIgZ3VpbGRNZW1ickxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWluaWJveC1ndWlsZC1tZW1iZXJzLWxpc3QnKTtcclxuICBpZiAoIWd1aWxkTWVtYnJMaXN0KSB7cmV0dXJuO30gLy8gbGlzdCBleGlzdHNcclxuICAvLyBoaWRlIGd1aWxkIGluZm8gbGlua3NcclxuICBkb0hpZGVCdG4oZ3VpbGRNZW1ickxpc3QsICdndWlsZFNlbGVjdG9yJyk7XHJcbiAgaWYgKGNhbGYuaGlkZUJ1ZmZTZWxlY3RlZCkge1xyXG4gICAgaGlkZU5vZGVMaXN0KFxyXG4gICAgICBndWlsZE1lbWJyTGlzdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdndWlsZC1idWZmLWNoZWNrLW9uJykpO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2d1aWxkLXF1aWNrLWJ1ZmYnKS5jbGFzc0xpc3QuYWRkKCdmc2hIaWRlJyk7XHJcbiAgfVxyXG4gIC8vIGFkZCBjb2xvcmluZyBmb3Igb2ZmbGluZSB0aW1lXHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChcclxuICAgIGd1aWxkTWVtYnJMaXN0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3BsYXllci1uYW1lJyksIGd1aWxkQ29sb3VyKTtcclxuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3BDUiBoNCcpLFxyXG4gICAgZnVuY3Rpb24oZWwpIHtcclxuICAgICAgaWYgKGVsLnRleHRDb250ZW50ICE9PSAnQ2hhdCcpIHtyZXR1cm47fVxyXG4gICAgICBlbC5pbm5lckhUTUwgPSAnPGEgaHJlZj1cImluZGV4LnBocD9jbWQ9Z3VpbGQmc3ViY21kPWNoYXRcIj4nICtcclxuICAgICAgICBlbC50ZXh0Q29udGVudCArICc8L2E+JztcclxuICAgIH1cclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkT25saW5lQWxsaWVzV2lkZ2V0cygpIHtcclxuICB2YXIgb25saW5lQWxsaWVzTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtaW5pYm94LWFsbGllcy1saXN0Jyk7XHJcbiAgaWYgKCFvbmxpbmVBbGxpZXNMaXN0KSB7cmV0dXJuO31cclxuICBkb0hpZGVCdG4ob25saW5lQWxsaWVzTGlzdCwgJ2FsbHlTZWxlY3RvcicpO1xyXG4gIGlmIChjYWxmLmhpZGVCdWZmU2VsZWN0ZWQpIHtcclxuICAgIGhpZGVOb2RlTGlzdChcclxuICAgICAgb25saW5lQWxsaWVzTGlzdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhbGx5LWJ1ZmYtY2hlY2stb24nKSk7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWxseS1xdWljay1idWZmJykuY2xhc3NMaXN0LmFkZCgnZnNoSGlkZScpO1xyXG4gIH1cclxuICAvLyBhZGQgY29sb3JpbmcgZm9yIG9mZmxpbmUgdGltZVxyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoXHJcbiAgICBvbmxpbmVBbGxpZXNMaXN0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3BsYXllci1uYW1lJyksIGFsbGllc0NvbG91cik7XHJcbn1cclxuIiwiaW1wb3J0IGFkZCBmcm9tICcuL3N1cHBvcnQvdGFzayc7XHJcbmltcG9ydCBjYWxmIGZyb20gJy4vc3VwcG9ydC9jYWxmJztcclxuaW1wb3J0IHtub3d9IGZyb20gJy4vc3VwcG9ydC9kYXRhT2JqJztcclxuaW1wb3J0IHJldHJ5QWpheCBmcm9tICcuL2FqYXgvcmV0cnlBamF4JztcclxuaW1wb3J0IHtcclxuICBjcmVhdGVEb2N1bWVudCxcclxuICBnZXRWYWx1ZSxcclxuICBpbWFnZVNlcnZlcixcclxuICBzZXRWYWx1ZVxyXG59IGZyb20gJy4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5cclxudmFyIGhhdmVQcmF5ZWRNc2cgPVxyXG4gICc8c3BhbiBjbGFzcz1cIm5vdGlmaWNhdGlvbi1pY29uXCI+PC9zcGFuPjxwIGNsYXNzPVwibm90aWZpY2F0aW9uLWNvbnRlbnRcIj4nICtcclxuICAnWW91IGFyZSBjdXJyZW50bHkgcHJheWluZyBhdCB0aGUgdGVtcGxlLjwvcD4nO1xyXG52YXIgZ29kc05vdGlmaWNhdGlvbiA9XHJcbiAgJzxsaSBjbGFzcz1cIm5vdGlmaWNhdGlvblwiPicgK1xyXG4gICc8c3BhbiBpZD1cImhlbHBlclByYXlUb0dvZHNcIiBjbGFzcz1cImZhc3RQcmF5XCI+JyArXHJcbiAgJzx0YWJsZT48dGJvZHk+PHRyPjx0ZD4nICtcclxuICAnPHNwYW4gY2xhc3M9XCJ0aXAtc3RhdGljXCIgZGF0YS10aXBwZWQ9XCJQcmF5IHRvIFNhaHJpYVwiICcgK1xyXG4gICdzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybChcXCcnICsgaW1hZ2VTZXJ2ZXIgK1xyXG4gICcvdGVtcGxlLzAuZ2lmXFwnKTtcIiBwcmF5dHlwZT1cIjBcIj48L3NwYW4+PC90ZD48dGQ+JyArXHJcbiAgJzxzcGFuIGNsYXNzPVwidGlwLXN0YXRpY1wiIGRhdGEtdGlwcGVkPVwiUHJheSB0byBPc3ZlcmluXCIgJyArXHJcbiAgJ3N0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcJycgKyBpbWFnZVNlcnZlciArXHJcbiAgJy90ZW1wbGUvMS5naWZcXCcpO1wiIHByYXl0eXBlPVwiMVwiPjwvc3Bhbj48L3RkPjwvdHI+PHRyPjx0ZD4nICtcclxuICAnPHNwYW4gY2xhc3M9XCJ0aXAtc3RhdGljXCIgZGF0YS10aXBwZWQ9XCJQcmF5IHRvIEd1cmdyaXNzXCIgJyArXHJcbiAgJ3N0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcJycgKyBpbWFnZVNlcnZlciArXHJcbiAgJy90ZW1wbGUvMi5naWZcXCcpO1wiIHByYXl0eXBlPVwiMlwiPjwvc3Bhbj48L3RkPjx0ZD4nICtcclxuICAnPHNwYW4gY2xhc3M9XCJ0aXAtc3RhdGljXCIgZGF0YS10aXBwZWQ9XCJQcmF5IHRvIExpbmRhcnNpbFwiICcgK1xyXG4gICdzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybChcXCcnICsgaW1hZ2VTZXJ2ZXIgK1xyXG4gICcvdGVtcGxlLzMuZ2lmXFwnKTtcIiBwcmF5dHlwZT1cIjNcIj48L3NwYW4+PC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT4nICtcclxuICAnPGEgaHJlZj1cImluZGV4LnBocD9jbWQ9dGVtcGxlXCI+JyArXHJcbiAgJzxwIGNsYXNzPVwibm90aWZpY2F0aW9uLWNvbnRlbnRcIj5Cb3cgZG93biB0byB0aGUgZ29kczwvcD4nICtcclxuICAnPC9hPjwvc3Bhbj48L2xpPic7XHJcbnZhciBnb2xkVXBncmFkZU1zZyA9XHJcbiAgJzxsaSBjbGFzcz1cIm5vdGlmaWNhdGlvblwiPjxhIGhyZWY9XCJpbmRleC5waHA/Y21kPXBvaW50cyZ0eXBlPTFcIj48c3BhbicgK1xyXG4gICcgY2xhc3M9XCJub3RpZmljYXRpb24taWNvblwiPjwvc3Bhbj48cCBjbGFzcz1cIm5vdGlmaWNhdGlvbi1jb250ZW50XCI+VXAnICtcclxuICAnZ3JhZGUgc3RhbWluYSB3aXRoIGdvbGQ8L3A+PC9hPjwvbGk+JztcclxuXHJcbmZ1bmN0aW9uIGhhdmVQcmF5ZWQoKSB7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hlbHBlclByYXlUb0dvZHMnKS5vdXRlckhUTUwgPSBoYXZlUHJheWVkTXNnO1xyXG4gIHNldFZhbHVlKCduZWVkVG9QcmF5JywgZmFsc2UpO1xyXG4gIHNldFZhbHVlKCdsYXN0VGVtcGxlQ2hlY2snLCBuZXcgRGF0ZSgpXHJcbiAgICAuc2V0VVRDSG91cnMoMjMsIDU5LCA1OSwgOTk5KSArIDEpOyAvLyBNaWRuaWdodFxyXG59XHJcblxyXG5mdW5jdGlvbiBwcmF5VG9Hb2RzKGUpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIG15R29kID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdwcmF5dHlwZScpO1xyXG4gIGlmICghbXlHb2QpIHtyZXR1cm47fVxyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoZWxwZXJQcmF5VG9Hb2RzJykucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLFxyXG4gICAgcHJheVRvR29kcyk7XHJcbiAgcmV0cnlBamF4KCdpbmRleC5waHA/Y21kPXRlbXBsZSZzdWJjbWQ9cHJheSZ0eXBlPScgKyBteUdvZClcclxuICAgIC5kb25lKGhhdmVQcmF5ZWQpO1xyXG4gICQoZS50YXJnZXQpLnF0aXAoJ2hpZGUnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGlzcGxheURpc2Nvbm5lY3RlZEZyb21Hb2RzTWVzc2FnZSgpIHtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbm90aWZpY2F0aW9ucycpLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsXHJcbiAgICBnb2RzTm90aWZpY2F0aW9uKTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGVscGVyUHJheVRvR29kcycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxcclxuICAgIHByYXlUb0dvZHMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkaXNwbGF5VXBncmFkZU1zZygpIHtcclxuICBpZiAobG9jYXRpb24uc2VhcmNoLmluZGV4T2YoJ2NtZD1wb2ludHMmdHlwZT0xJykgPT09IC0xKSB7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbm90aWZpY2F0aW9ucycpLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsXHJcbiAgICAgIGdvbGRVcGdyYWRlTXNnKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmROZXdHcm91cChlbCkge1xyXG4gIGlmIChlbC50ZXh0Q29udGVudC5pbmRleE9mKCdOZXcgYXR0YWNrIGdyb3VwIGNyZWF0ZWQuJykgPT09IC0xKSB7cmV0dXJuO31cclxuICB2YXIgZ3JvdXBKb2luSFRNTCA9ICcnO1xyXG4gIGlmICghZ2V0VmFsdWUoJ2VuYWJsZU1heEdyb3VwU2l6ZVRvSm9pbicpKSB7XHJcbiAgICBncm91cEpvaW5IVE1MID0gJzxhIGhyZWY9XCJpbmRleC5waHA/Y21kPWd1aWxkJnN1YmNtZD1ncm91cHMmJyArXHJcbiAgICAgICdzdWJjbWQyPWpvaW5hbGxcIj48c3BhbiBjbGFzcz1cIm5vdGlmaWNhdGlvbi1pY29uXCI+PC9zcGFuPicgK1xyXG4gICAgICAnPHAgY2xhc3M9XCJub3RpZmljYXRpb24tY29udGVudFwiPkpvaW4gYWxsIGF0dGFjayBncm91cHMuPC9wPjwvYT4nO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB2YXIgbWF4R3JvdXBTaXplVG9Kb2luID0gZ2V0VmFsdWUoJ21heEdyb3VwU2l6ZVRvSm9pbicpO1xyXG4gICAgZ3JvdXBKb2luSFRNTCA9ICc8YSBocmVmPVwiaW5kZXgucGhwP2NtZD1ndWlsZCZzdWJjbWQ9Z3JvdXBzJicgK1xyXG4gICAgICAnc3ViY21kMj1qb2luYWxsZ3JvdXBzdW5kZXJzaXplXCI+PHNwYW4gY2xhc3M9XCJub3RpZmljYXRpb24taWNvblwiPicgK1xyXG4gICAgICAnPC9zcGFuPjxwIGNsYXNzPVwibm90aWZpY2F0aW9uLWNvbnRlbnRcIj5Kb2luIGFsbCBhdHRhY2sgZ3JvdXBzICcgK1xyXG4gICAgICAnbGVzcyB0aGFuIHNpemUgJyArIG1heEdyb3VwU2l6ZVRvSm9pbiArICcuPC9wPjwvYT4nO1xyXG4gIH1cclxuICBlbC5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyZW5kJyxcclxuICAgICc8bGkgY2xhc3M9XCJub3RpZmljYXRpb25cIj4nICsgZ3JvdXBKb2luSFRNTCArICc8L2xpPicpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0ZW1wbGVBbGVydEVuYWJsZWQocmVzcG9uc2VUZXh0KSB7XHJcbiAgdmFyIGNoZWNrTmVlZFRvUHJheTtcclxuICB2YXIgZG9jO1xyXG4gIGlmIChjYWxmLmNtZCAhPT0gJ3RlbXBsZScpIHtcclxuICAgIGRvYyA9IGNyZWF0ZURvY3VtZW50KHJlc3BvbnNlVGV4dCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGRvYyA9IGRvY3VtZW50O1xyXG4gIH1cclxuICBjaGVja05lZWRUb1ByYXkgPSBkb2MucXVlcnlTZWxlY3RvcignaW5wdXRbdmFsdWU9XCJQcmF5IHRvIE9zdmVyaW5cIl0nKTtcclxuICB2YXIgbmVlZFRvUHJheSA9IGZhbHNlO1xyXG4gIGlmIChjaGVja05lZWRUb1ByYXkpIHtcclxuICAgIGRpc3BsYXlEaXNjb25uZWN0ZWRGcm9tR29kc01lc3NhZ2UoKTtcclxuICAgIG5lZWRUb1ByYXkgPSB0cnVlO1xyXG4gIH1cclxuICBzZXRWYWx1ZSgnbmVlZFRvUHJheScsIG5lZWRUb1ByYXkpO1xyXG4gIHNldFZhbHVlKCdsYXN0VGVtcGxlQ2hlY2snLCBuZXcgRGF0ZSgpXHJcbiAgICAuc2V0VVRDSG91cnMoMjMsIDU5LCA1OSwgOTk5KSArIDEpOyAvLyBtaWRuaWdodFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUZW1wbGVQYWdlKHJlc3BvbnNlVGV4dCkge1xyXG4gIGlmIChjYWxmLmVuYWJsZVRlbXBsZUFsZXJ0KSB7dGVtcGxlQWxlcnRFbmFibGVkKHJlc3BvbnNlVGV4dCk7fVxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0xhc3RVcGRhdGUodGVtcGxlQWxlcnRMYXN0VXBkYXRlKSB7XHJcbiAgcmV0dXJuICF0ZW1wbGVBbGVydExhc3RVcGRhdGUgfHwgbm93ID4gdGVtcGxlQWxlcnRMYXN0VXBkYXRlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb1dlTmVlZFRvUGFyc2UoKSB7XHJcbiAgaWYgKGNoZWNrTGFzdFVwZGF0ZShnZXRWYWx1ZSgnbGFzdFRlbXBsZUNoZWNrJykpKSB7cmV0dXJuIHRydWU7fVxyXG4gIGlmIChnZXRWYWx1ZSgnbmVlZFRvUHJheScpKSB7XHJcbiAgICBkaXNwbGF5RGlzY29ubmVjdGVkRnJvbUdvZHNNZXNzYWdlKCk7XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFRlbXBsZUFsZXJ0KCkgeyAvLyBqUXVlcnlcclxuICAvLyBDaGVja3MgdG8gc2VlIGlmIHRoZSB0ZW1wbGUgaXMgb3BlbiBmb3IgYnVzaW5lc3MuXHJcbiAgaWYgKGNhbGYuY21kID09PSAndGVtcGxlJykge3JldHVybjt9XHJcbiAgaWYgKGRvV2VOZWVkVG9QYXJzZSgpKSB7XHJcbiAgICByZXRyeUFqYXgoJ2luZGV4LnBocD9jbWQ9dGVtcGxlJykuZG9uZShwYXJzZVRlbXBsZVBhZ2UpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZmluZERvYyhkYXRhKSB7XHJcbiAgaWYgKGxvY2F0aW9uLnNlYXJjaC5pbmRleE9mKCdjbWQ9cG9pbnRzJnR5cGU9MScpID09PSAtMSkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZURvY3VtZW50KGRhdGEpO1xyXG4gIH1cclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjcENDIGlucHV0W25hbWU9XCJxdWFudGl0eVwiXScpWzFdLnZhbHVlID0gJzEwJztcclxuICByZXR1cm4gZG9jdW1lbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdvbGRVcGdyYWRlcyhkYXRhKSB7XHJcbiAgaWYgKCFjYWxmLmVuYWJsZVVwZ3JhZGVBbGVydCkge3JldHVybjt9XHJcbiAgdmFyIGRvYyA9IGZpbmREb2MoZGF0YSk7XHJcbiAgdmFyIGxpbWl0ID0gZG9jLmdldEVsZW1lbnRCeUlkKCdwQ0MnKS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnVEFCTEUnKVswXVxyXG4gICAgLnJvd3NbM10uY2VsbHNbMl07XHJcbiAgdmFyIGNoZWNrRG9uZVVwZ3JhZGUgPSBsaW1pdC50ZXh0Q29udGVudC5zcGxpdCgnIC8gJyk7XHJcbiAgaWYgKGNoZWNrRG9uZVVwZ3JhZGVbMF0gIT09IGNoZWNrRG9uZVVwZ3JhZGVbMV0pIHtcclxuICAgIGRpc3BsYXlVcGdyYWRlTXNnKCk7XHJcbiAgICBzZXRWYWx1ZSgnbmVlZFRvRG9VcGdyYWRlJywgdHJ1ZSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHNldFZhbHVlKCduZWVkVG9Eb1VwZ3JhZGUnLCBmYWxzZSk7XHJcbiAgICBzZXRWYWx1ZSgnbGFzdFVwZ3JhZGVDaGVjaycsXHJcbiAgICAgIERhdGUucGFyc2UobGltaXQubmV4dEVsZW1lbnRTaWJsaW5nLnRleHRDb250ZW50ICsgJyBHTVQnKSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBub3RVcGdyYWRlc1BhZ2UoKSB7XHJcbiAgdmFyIG5lZWRUb0RvVXBncmFkZSA9IGdldFZhbHVlKCduZWVkVG9Eb1VwZ3JhZGUnKTtcclxuICBpZiAobmVlZFRvRG9VcGdyYWRlKSB7XHJcbiAgICBkaXNwbGF5VXBncmFkZU1zZygpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB2YXIgbGFzdFVwZ3JhZGVDaGVjayA9IGdldFZhbHVlKCdsYXN0VXBncmFkZUNoZWNrJyk7XHJcbiAgaWYgKGxhc3RVcGdyYWRlQ2hlY2sgJiYgbm93IDwgbGFzdFVwZ3JhZGVDaGVjaykge3JldHVybjt9XHJcbiAgcmV0cnlBamF4KCdpbmRleC5waHA/Y21kPXBvaW50cyZ0eXBlPTEnKS5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgIGFkZCgzLCBwYXJzZUdvbGRVcGdyYWRlcywgW2RhdGFdKTtcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFVwZ3JhZGVBbGVydCgpIHsgLy8galF1ZXJ5XHJcbiAgaWYgKGxvY2F0aW9uLnNlYXJjaC5pbmRleE9mKCdjbWQ9cG9pbnRzJnR5cGU9MScpID09PSAtMSkge25vdFVwZ3JhZGVzUGFnZSgpO31cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdEpvaW5BbGxMaW5rKCkge1xyXG4gIHZhciBub2RlTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwQ0wnKS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGknKTtcclxuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKG5vZGVMaXN0LCBmaW5kTmV3R3JvdXApO1xyXG59XHJcbiIsImltcG9ydCB7aW50VmFsdWUsIHBhZFp9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHttb250aHMsIG5vd30gZnJvbSAnLi4vc3VwcG9ydC9kYXRhT2JqJztcclxuXHJcbnZhciBkYXlzID0gWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXTtcclxuXHJcbmZ1bmN0aW9uIGZvcm1hdFNob3J0RGF0ZShhRGF0ZSkge1xyXG4gIHZhciB5eXl5ID0gYURhdGUuZ2V0RnVsbFllYXIoKTtcclxuICB2YXIgZGQgPSBwYWRaKGFEYXRlLmdldERhdGUoKSk7XHJcbiAgdmFyIGRkZCA9IGRheXNbYURhdGUuZ2V0RGF5KCldO1xyXG4gIHZhciBtb250aCA9IG1vbnRoc1thRGF0ZS5nZXRNb250aCgpXTtcclxuICB2YXIgaGggPSBwYWRaKGFEYXRlLmdldEhvdXJzKCkpO1xyXG4gIHZhciBtbSA9IHBhZFooYURhdGUuZ2V0TWludXRlcygpKTtcclxuICByZXR1cm4gaGggKyAnOicgKyBtbSArICcgJyArIGRkZCArICcgJyArIGRkICsgJy8nICsgbW9udGggKyAnLycgKyB5eXl5O1xyXG59XHJcblxyXG5mdW5jdGlvbiB0aW1lQm94KG5leHRHYWluVGltZSwgaHJzVG9Hbykge1xyXG4gIHZhciBuZXh0R2FpbiA9IC8oWzAtOV0rKW0gKFswLTldKylzLy5leGVjKG5leHRHYWluVGltZSk7XHJcbiAgaWYgKCFuZXh0R2Fpbikge3JldHVybjt9XHJcbiAgcmV0dXJuICc8ZGQ+JyArXHJcbiAgICBmb3JtYXRTaG9ydERhdGUobmV3IERhdGUobm93ICtcclxuICAgIChocnNUb0dvICogNjAgKiA2MCArIHBhcnNlSW50KG5leHRHYWluWzFdLCAxMCkgKiA2MCArXHJcbiAgICBwYXJzZUludChuZXh0R2FpblsyXSwgMTApKSAqIDEwMDApKSArICc8L2RkPic7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RTdGFtaW5hQ2FsY3VsYXRvcigpIHtcclxuICB2YXIgbmV4dEdhaW4gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzdGF0LXN0YW1pbmEtbmV4dEdhaW4nKTtcclxuICBpZiAoIW5leHRHYWluKSB7cmV0dXJuO31cclxuICB2YXIgc3RhbWluYU1vdXNlb3ZlciA9XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGJhci1zdGFtaW5hLXRvb2x0aXAtc3RhbWluYScpO1xyXG4gIHZhciBzdGFtVmFscyA9IC8oWywwLTldKylcXHNcXC9cXHMoWywwLTldKykvLmV4ZWMoXHJcbiAgICBzdGFtaW5hTW91c2VvdmVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3N0YXQtbmFtZScpWzBdXHJcbiAgICAgIC5uZXh0RWxlbWVudFNpYmxpbmcudGV4dENvbnRlbnRcclxuICApO1xyXG4gIHN0YW1pbmFNb3VzZW92ZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLFxyXG4gICAgJzxkdCBjbGFzcz1cInN0YXQtc3RhbWluYS1uZXh0SHVudFRpbWVcIj5NYXggU3RhbSBBdDwvZHQ+JyArXHJcbiAgICB0aW1lQm94KFxyXG4gICAgICBuZXh0R2FpblswXS5uZXh0RWxlbWVudFNpYmxpbmcudGV4dENvbnRlbnQsXHJcbiAgICAgIC8vIGdldCB0aGUgbWF4IGhvdXJzIHRvIHN0aWxsIGJlIGluc2lkZSBzdGFtaW5hIG1heGltdW1cclxuICAgICAgTWF0aC5mbG9vcihcclxuICAgICAgICAoaW50VmFsdWUoc3RhbVZhbHNbMl0pIC1cclxuICAgICAgICBpbnRWYWx1ZShzdGFtVmFsc1sxXSkpIC9cclxuICAgICAgICBpbnRWYWx1ZShcclxuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3N0YXQtc3RhbWluYS1nYWluUGVySG91cicpWzBdXHJcbiAgICAgICAgICAgIC5uZXh0RWxlbWVudFNpYmxpbmcudGV4dENvbnRlbnRcclxuICAgICAgICApXHJcbiAgICAgIClcclxuICAgIClcclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0TGV2ZWx1cENhbGN1bGF0b3IoKSB7XHJcbiAgdmFyIG5leHRHYWluID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc3RhdC14cC1uZXh0R2FpbicpO1xyXG4gIGlmICghbmV4dEdhaW4pIHtyZXR1cm47fVxyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0YmFyLWxldmVsLXRvb2x0aXAtZ2VuZXJhbCcpXHJcbiAgICAuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLFxyXG4gICAgICAnPGR0IGNsYXNzPVwic3RhdC14cC1uZXh0TGV2ZWxcIj5OZXh0IExldmVsIEF0PC9kdD4nICtcclxuICAgICAgdGltZUJveChcclxuICAgICAgICBuZXh0R2FpblswXS5uZXh0RWxlbWVudFNpYmxpbmcudGV4dENvbnRlbnQsXHJcbiAgICAgICAgTWF0aC5jZWlsKFxyXG4gICAgICAgICAgaW50VmFsdWUoXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3N0YXQteHAtcmVtYWluaW5nJylbMF1cclxuICAgICAgICAgICAgICAubmV4dEVsZW1lbnRTaWJsaW5nLnRleHRDb250ZW50XHJcbiAgICAgICAgICApIC9cclxuICAgICAgICAgIGludFZhbHVlKFxyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzdGF0LXhwLWdhaW5QZXJIb3VyJylbMF1cclxuICAgICAgICAgICAgICAubmV4dEVsZW1lbnRTaWJsaW5nLnRleHRDb250ZW50XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKVxyXG4gICAgICApXHJcbiAgICApO1xyXG59XHJcbiIsImltcG9ydCBhZGQgZnJvbSAnLi4vc3VwcG9ydC90YXNrJztcclxuaW1wb3J0IGNhbGYgZnJvbSAnLi4vc3VwcG9ydC9jYWxmJztcclxuaW1wb3J0IGNoYW5nZUd1aWxkTG9nSFJFRiBmcm9tICcuL2NoYW5nZUd1aWxkTG9nSFJFRic7XHJcbmltcG9ydCB7Z2V0VmFsdWV9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IGd1aWxkQWN0aXZpdHkgZnJvbSAnLi4vZ3VpbGQvZ3VpbGRBY3Rpdml0eSc7XHJcbmltcG9ydCB7aW5qZWN0Q29tcG9zZUFsZXJ0fSBmcm9tICcuLi9jb21wb3NpbmcvY29tcG9zaW5nJztcclxuaW1wb3J0IGluamVjdEZTQm94TG9nIGZyb20gJy4vaW5qZWN0RlNCb3hMb2cnO1xyXG5pbXBvcnQgaW5qZWN0SGVscGVyTWVudSBmcm9tICcuL2hlbHBlck1lbnUnO1xyXG5pbXBvcnQgaW5qZWN0SG9tZVBhZ2VUd29MaW5rIGZyb20gJy4uL25ld3MvaW5qZWN0SG9tZVBhZ2VUd29MaW5rJztcclxuaW1wb3J0IGluamVjdE1lbnUgZnJvbSAnLi9hY2NvcmRpb24nO1xyXG5pbXBvcnQgaW5qZWN0UXVpY2tNc2dEaWFsb2dKUSBmcm9tICcuL21lc3NhZ2luZyc7XHJcbmltcG9ydCBwcmVwYXJlQWxseUVuZW15TGlzdCBmcm9tICcuL2FsbHlFbmVteSc7XHJcbmltcG9ydCBwcmVwYXJlQm91bnR5RGF0YSBmcm9tICcuL2FjdGl2ZVdhbnRlZEJvdW50aWVzJztcclxuaW1wb3J0IHJlcGxhY2VLZXlIYW5kbGVyIGZyb20gJy4va2V5SGFuZGxlcic7XHJcbmltcG9ydCBzdGF0YmFyIGZyb20gJy4vc3RhdEJhcic7XHJcbmltcG9ydCB1cGRhdGVIQ1NRdWlja0J1ZmZMaW5rcyBmcm9tICcuLi9jb21tb24vdXBkYXRlSENTUXVpY2tCdWZmTGlua3MnO1xyXG5pbXBvcnQge2FkZEd1aWxkSW5mb1dpZGdldHMsIGFkZE9ubGluZUFsbGllc1dpZGdldHN9IGZyb20gJy4vd2lkZ2V0cyc7XHJcbmltcG9ydCB7XHJcbiAgaW5qZWN0Sm9pbkFsbExpbmssXHJcbiAgaW5qZWN0VGVtcGxlQWxlcnQsXHJcbiAgaW5qZWN0VXBncmFkZUFsZXJ0XHJcbn0gZnJvbSAnLi4vbm90aWZpY2F0aW9uJztcclxuaW1wb3J0IHtpbmplY3RMZXZlbHVwQ2FsY3VsYXRvciwgaW5qZWN0U3RhbWluYUNhbGN1bGF0b3J9IGZyb20gJy4vY2FsYyc7XHJcblxyXG5mdW5jdGlvbiBnYW1lSGVscExpbmsoKSB7XHJcbiAgdmFyIG5vZGVMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3BDUiBoMycpO1xyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobm9kZUxpc3QsIGZ1bmN0aW9uKGVsKSB7XHJcbiAgICBpZiAoZWwudGV4dENvbnRlbnQgPT09ICdHYW1lIEhlbHAnKSB7XHJcbiAgICAgIGVsLmlubmVySFRNTCA9ICc8YSBocmVmPVwiaW5kZXgucGhwP2NtZD1zZXR0aW5nc1wiPkdhbWUgSGVscDwvYT4nO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRFbnZWYXJzKCkge1xyXG4gIGNhbGYuZW5hYmxlQWxseU9ubGluZUxpc3QgPSBnZXRWYWx1ZSgnZW5hYmxlQWxseU9ubGluZUxpc3QnKTtcclxuICBjYWxmLmVuYWJsZUVuZW15T25saW5lTGlzdCA9IGdldFZhbHVlKCdlbmFibGVFbmVteU9ubGluZUxpc3QnKTtcclxuICBjYWxmLmVuYWJsZUd1aWxkSW5mb1dpZGdldHMgPSBnZXRWYWx1ZSgnZW5hYmxlR3VpbGRJbmZvV2lkZ2V0cycpO1xyXG4gIGNhbGYuZW5hYmxlT25saW5lQWxsaWVzV2lkZ2V0cyA9XHJcbiAgICBnZXRWYWx1ZSgnZW5hYmxlT25saW5lQWxsaWVzV2lkZ2V0cycpO1xyXG4gIGNhbGYuaGlkZUd1aWxkSW5mb1RyYWRlID0gZ2V0VmFsdWUoJ2hpZGVHdWlsZEluZm9UcmFkZScpO1xyXG4gIGNhbGYuaGlkZUd1aWxkSW5mb1NlY3VyZVRyYWRlID0gZ2V0VmFsdWUoJ2hpZGVHdWlsZEluZm9TZWN1cmVUcmFkZScpO1xyXG4gIGNhbGYuaGlkZUd1aWxkSW5mb0J1ZmYgPSBnZXRWYWx1ZSgnaGlkZUd1aWxkSW5mb0J1ZmYnKTtcclxuICBjYWxmLmhpZGVHdWlsZEluZm9NZXNzYWdlID0gZ2V0VmFsdWUoJ2hpZGVHdWlsZEluZm9NZXNzYWdlJyk7XHJcbiAgY2FsZi5oaWRlQnVmZlNlbGVjdGVkID0gZ2V0VmFsdWUoJ2hpZGVCdWZmU2VsZWN0ZWQnKTtcclxuICBjYWxmLmVuYWJsZVRlbXBsZUFsZXJ0ID0gZ2V0VmFsdWUoJ2VuYWJsZVRlbXBsZUFsZXJ0Jyk7XHJcbiAgY2FsZi5lbmFibGVVcGdyYWRlQWxlcnQgPSBnZXRWYWx1ZSgnZW5hYmxlVXBncmFkZUFsZXJ0Jyk7XHJcbiAgY2FsZi5lbmFibGVDb21wb3NpbmdBbGVydCA9IGdldFZhbHVlKCdlbmFibGVDb21wb3NpbmdBbGVydCcpO1xyXG4gIGNhbGYuZW5hYmxlQWN0aXZlQm91bnR5TGlzdCA9IGdldFZhbHVlKCdlbmFibGVBY3RpdmVCb3VudHlMaXN0Jyk7XHJcbiAgY2FsZi5lbmFibGVXYW50ZWRMaXN0ID0gZ2V0VmFsdWUoJ2VuYWJsZVdhbnRlZExpc3QnKTtcclxuICBjYWxmLmFsbHlFbmVteU9ubGluZVJlZnJlc2hUaW1lID1cclxuICAgIGdldFZhbHVlKCdhbGx5RW5lbXlPbmxpbmVSZWZyZXNoVGltZScpICogMTAwMDtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsbEFsbHlFbmVteSgpIHtcclxuICBpZiAoY2FsZi5lbmFibGVBbGx5T25saW5lTGlzdCB8fFxyXG4gICAgICBjYWxmLmVuYWJsZUVuZW15T25saW5lTGlzdCkge1xyXG4gICAgYWRkKDMsIHByZXBhcmVBbGx5RW5lbXlMaXN0KTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGxCb3VudGllcygpIHtcclxuICBpZiAoY2FsZi5lbmFibGVXYW50ZWRMaXN0IHx8XHJcbiAgICAgIGNhbGYuZW5hYmxlQWN0aXZlQm91bnR5TGlzdCkge1xyXG4gICAgYWRkKDMsIHByZXBhcmVCb3VudHlEYXRhKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGxHdWlsZEluZm8oKSB7XHJcbiAgaWYgKGNhbGYuZW5hYmxlR3VpbGRJbmZvV2lkZ2V0cykge1xyXG4gICAgYWRkKDMsIGFkZEd1aWxkSW5mb1dpZGdldHMpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2FsbEFsbGllcygpIHtcclxuICBpZiAoY2FsZi5lbmFibGVPbmxpbmVBbGxpZXNXaWRnZXRzKSB7XHJcbiAgICBhZGQoMywgYWRkT25saW5lQWxsaWVzV2lkZ2V0cyk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxsVGVtcGxlKCkge1xyXG4gIGlmIChjYWxmLmVuYWJsZVRlbXBsZUFsZXJ0KSB7XHJcbiAgICBhZGQoMywgaW5qZWN0VGVtcGxlQWxlcnQpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2FsbFVwZ3JhZGUoKSB7XHJcbiAgaWYgKGNhbGYuZW5hYmxlVXBncmFkZUFsZXJ0KSB7XHJcbiAgICBhZGQoMywgaW5qZWN0VXBncmFkZUFsZXJ0KTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGxDb21wb3NpbmcoKSB7XHJcbiAgaWYgKGNhbGYuZW5hYmxlQ29tcG9zaW5nQWxlcnQpIHtcclxuICAgIGFkZCgzLCBpbmplY3RDb21wb3NlQWxlcnQpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY29uZGl0aW9uYWwoKSB7XHJcbiAgY2FsbEFsbHlFbmVteSgpO1xyXG4gIGNhbGxCb3VudGllcygpO1xyXG4gIGNhbGxHdWlsZEluZm8oKTtcclxuICBjYWxsQWxsaWVzKCk7XHJcbiAgY2FsbFRlbXBsZSgpO1xyXG4gIGNhbGxVcGdyYWRlKCk7XHJcbiAgY2FsbENvbXBvc2luZygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBuYXZNZW51KCkgeyAvLyBqUXVlcnlcclxuICB2YXIgbXlOYXYgPSAkKCcjbmF2JykuZGF0YSgnbmF2Jyk7XHJcbiAgaWYgKCFteU5hdikge3JldHVybjt9XHJcbiAgdmFyIG9sZFNhdmUgPSBteU5hdi5fc2F2ZVN0YXRlO1xyXG4gIG15TmF2Ll9zYXZlU3RhdGUgPSBmdW5jdGlvbihfaWQpIHtcclxuICAgIHZhciBpZCA9IF9pZDtcclxuICAgIHZhciBteUhlaWdodCA9ICQoJ2xpLm5hdi1sZXZlbC0wJywgJyNuYXYnKS5lcShpZCkuZmluZCgndWwnKS5oZWlnaHQoKTtcclxuICAgIGlmIChteUhlaWdodCA9PT0gMCkge2lkID0gLTE7fVxyXG4gICAgb2xkU2F2ZS5jYWxsKG15TmF2LCBpZCk7XHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gbW92ZVJIU0JveFVwT25SSFModGl0bGUpIHtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncENSJykuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmJlZ2luJyxcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRpdGxlKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1vdmVSSFNCb3hUb0xIUyh0aXRsZSkge1xyXG4gIHZhciBib3hEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aXRsZSk7XHJcbiAgYm94RGl2LmNsYXNzTGlzdC5hZGQoJ3BDUicpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwQ0wnKS5hcHBlbmRDaGlsZChib3hEaXYpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb01vdmVHdWlsZExpc3QoKSB7XHJcbiAgaWYgKGdldFZhbHVlKCdtb3ZlR3VpbGRMaXN0JykpIHtcclxuICAgIGFkZCgzLCBtb3ZlUkhTQm94VXBPblJIUywgWydtaW5pYm94LWd1aWxkJ10pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZG9Nb3ZlQWxseUxpc3QoKSB7XHJcbiAgaWYgKGdldFZhbHVlKCdtb3ZlT25saW5lQWxsaWVzTGlzdCcpKSB7XHJcbiAgICBhZGQoMywgbW92ZVJIU0JveFVwT25SSFMsIFsnbWluaWJveC1hbGxpZXMnXSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkb01vdmVGc0JveCgpIHtcclxuICBpZiAoZ2V0VmFsdWUoJ21vdmVGU0JveCcpKSB7XHJcbiAgICBhZGQoMywgbW92ZVJIU0JveFRvTEhTLCBbJ21pbmlib3gtZnNib3gnXSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBmaXhPbmxpbmVHdWlsZEJ1ZmZMaW5rcygpIHtcclxuICB1cGRhdGVIQ1NRdWlja0J1ZmZMaW5rcyhcclxuICAgICcjbWluaWJveC1ndWlsZC1tZW1iZXJzLWxpc3QgI2d1aWxkLW1pbmlib3gtYWN0aW9uLXF1aWNrYnVmZicpO1xyXG4gIHVwZGF0ZUhDU1F1aWNrQnVmZkxpbmtzKFxyXG4gICAgJyNtaW5pYm94LWFsbGllcy1saXN0ICNvbmxpbmUtYWxsaWVzLWFjdGlvbi1xdWlja2J1ZmYnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbm90SHVudE1vZGUoKSB7XHJcbiAgaWYgKGNhbGYuaHVudGluZ01vZGUpIHtyZXR1cm47fVxyXG4gIC8vIG1vdmUgYm94ZXMgaW4gb3Bwb3NpdGUgb3JkZXIgdGhhdCB5b3Ugd2FudCB0aGVtIHRvIGFwcGVhci5cclxuICBkb01vdmVHdWlsZExpc3QoKTtcclxuICBkb01vdmVBbGx5TGlzdCgpO1xyXG4gIGRvTW92ZUZzQm94KCk7XHJcblxyXG4gIGdldEVudlZhcnMoKTtcclxuICBjb25kaXRpb25hbCgpO1xyXG5cclxuICBhZGQoMywgbmF2TWVudSk7XHJcbiAgYWRkKDMsIHN0YXRiYXIpO1xyXG5cclxuICBhZGQoMywgaW5qZWN0U3RhbWluYUNhbGN1bGF0b3IpO1xyXG4gIGFkZCgzLCBpbmplY3RMZXZlbHVwQ2FsY3VsYXRvcik7XHJcblxyXG4gIGFkZCgzLCBpbmplY3RNZW51KTtcclxuXHJcbiAgaWYgKGdldFZhbHVlKCdmc2JveGxvZycpKSB7XHJcbiAgICBhZGQoMywgaW5qZWN0RlNCb3hMb2cpO1xyXG4gIH1cclxuICBhZGQoMywgZml4T25saW5lR3VpbGRCdWZmTGlua3MpO1xyXG5cclxuICBhZGQoMywgaW5qZWN0Sm9pbkFsbExpbmspO1xyXG4gIGFkZCgzLCBjaGFuZ2VHdWlsZExvZ0hSRUYpO1xyXG4gIGFkZCgzLCBpbmplY3RIb21lUGFnZVR3b0xpbmspO1xyXG5cclxuICBhZGQoMywgaW5qZWN0UXVpY2tNc2dEaWFsb2dKUSk7XHJcblxyXG4gIGFkZCg0LCBndWlsZEFjdGl2aXR5KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcHJlcGFyZUVudigpIHtcclxuICBpZiAoZ2V0VmFsdWUoJ2dhbWVIZWxwTGluaycpKSB7XHJcbiAgICBhZGQoMywgZ2FtZUhlbHBMaW5rKTtcclxuICB9XHJcbiAgY2FsZi5odW50aW5nTW9kZSA9IGdldFZhbHVlKCdodW50aW5nTW9kZScpO1xyXG4gIGFkZCgzLCByZXBsYWNlS2V5SGFuZGxlcik7XHJcbiAgbm90SHVudE1vZGUoKTtcclxuICBpZiAoIWdldFZhbHVlKCdoaWRlSGVscGVyTWVudScpKSB7XHJcbiAgICBhZGQoMywgaW5qZWN0SGVscGVyTWVudSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb29rRm9ySGNzRGF0YSgpIHtcclxuICB2YXIgaGNzRGF0YSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdodG1sJyk7XHJcbiAgaWYgKGhjc0RhdGEgJiYgSlNPTi5wYXJzZShoY3NEYXRhLmdldEF0dHJpYnV0ZSgnZGF0YS1oY3MnKSlbJ25ldy11aSddKSB7XHJcbiAgICBwcmVwYXJlRW52KCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7Y3JlYXRlRGl2fSBmcm9tICcuLi9jb21tb24vY0VsZW1lbnQnO1xyXG5pbXBvcnQge2NvbnZlcnRUZXh0VG9IdG1sLCBmaW5kTm9kZX0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlSGlzdG9yeUNoYXJhY3RlcnMoKSB7IC8vIExlZ2FjeVxyXG4gIHZhciB0ZXh0QXJlYSA9IGZpbmROb2RlKCcvL3RleHRhcmVhW0BpZD1cInRleHRJbnB1dEJveFwiXScpO1xyXG4gIHZhciBwcmV2aWV3QXJlYSA9IGZpbmROb2RlKCcvL3NwYW5bQGZpbmRtZT1cImJpb3ByZXZpZXdcIl0nKTtcclxuICB2YXIgYmlvUHJldmlld0hUTUwgPSBjb252ZXJ0VGV4dFRvSHRtbCh0ZXh0QXJlYS52YWx1ZSk7XHJcbiAgcHJldmlld0FyZWEuaW5uZXJIVE1MID0gYmlvUHJldmlld0hUTUw7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZEhpc3RvcnlXaWRnZXRzKCkgeyAvLyBMZWdhY3lcclxuICB2YXIgdGV4dEFyZWEgPSBmaW5kTm9kZSgnLy90ZXh0YXJlYVtAbmFtZT1cImhpc3RvcnlcIl0nKTtcclxuICBpZiAoIXRleHRBcmVhKSB7cmV0dXJuO31cclxuICB0ZXh0QXJlYS52YWx1ZSA9IHRleHRBcmVhLnZhbHVlLnJlcGxhY2UoLzxiciBcXC8+L2lnLCAnJyk7XHJcbiAgdmFyIHRleHRBcmVhRGl2ID0gdGV4dEFyZWEucGFyZW50Tm9kZTtcclxuICB2YXIgYmlvUHJldmlld0hUTUwgPSBjb252ZXJ0VGV4dFRvSHRtbCh0ZXh0QXJlYS52YWx1ZSk7XHJcbiAgdmFyIG5ld0RpdiA9IGNyZWF0ZURpdih7XHJcbiAgICBpbm5lckhUTUw6ICc8dGFibGUgYWxpZ249XCJjZW50ZXJcIiB3aWR0aD1cIjMyNVwiIGJvcmRlcj1cIjFcIj48dGJvZHk+JyArXHJcbiAgICAnPHRyPjx0ZCBzdHlsZT1cInRleHQtYWxpZ246Y2VudGVyO2NvbG9yOiM3RDIyNTI7JyArXHJcbiAgICAnYmFja2dyb3VuZC1jb2xvcjojQ0Q5RTRCXCI+UHJldmlldzwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+PHRkIGFsaWduPVwibGVmdFwiIHdpZHRoPVwiMzI1XCI+PHNwYW4gc3R5bGU9XCJmb250LXNpemU6c21hbGw7XCIgJyArXHJcbiAgICAnZmluZG1lPVwiYmlvcHJldmlld1wiPicgKyBiaW9QcmV2aWV3SFRNTCArXHJcbiAgICAnPC9zcGFuPjwvdGQ+PC90cj48L3Rib2R5PjwvdGFibGU+J1xyXG4gIH0pO1xyXG4gIHRleHRBcmVhRGl2LmFwcGVuZENoaWxkKG5ld0Rpdik7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RleHRJbnB1dEJveCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJyxcclxuICAgIHVwZGF0ZUhpc3RvcnlDaGFyYWN0ZXJzKTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhbGxvd0JhY2soKSB7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1cInN1Ym1pdFwiXScpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldnQpIHtcclxuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHZhciB1cmwgPSAnaW5kZXgucGhwPyc7XHJcbiAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQ6bm90KFt0eXBlPVwic3VibWl0XCJdKScgK1xyXG4gICAgICAgICAgJzpub3QoW3R5cGU9XCJjaGVja2JveFwiXSksIHNlbGVjdCwgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdOmNoZWNrZWQnKSxcclxuICAgICAgICBmdW5jdGlvbihlKSB7dXJsICs9ICcmJyArIGUubmFtZSArICc9JyArIGUudmFsdWU7fSk7XHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHVybDtcclxuICAgIH0pO1xyXG59XHJcbiIsImV4cG9ydCB2YXIgbW92ZU9wdGlvbnMgPVxyXG4gICc8dGQgY29sc3Bhbj0zICcgK1xyXG4gICdzdHlsZT1cInBhZGRpbmctdG9wOiAycHg7cGFkZGluZy1ib3R0b206IDJweDtcIj4nICtcclxuICAnPHNlbGVjdCBzdHlsZT1cIm1heC13aWR0aDogNTBweDtcIj4nICtcclxuICAnPG9wdGlvbiB2YWx1ZT1cInhcIj5CYXNpYyBBdHRhY2s8L29wdGlvbj4nICtcclxuICAnPG9wdGlvbiB2YWx1ZT1cIjBcIj5CbG9jazwvb3B0aW9uPicgK1xyXG4gICc8b3B0aW9uIHZhbHVlPVwiMVwiPkNvdW50ZXIgQXR0YWNrPC9vcHRpb24+JyArXHJcbiAgJzxvcHRpb24gdmFsdWU9XCIyXCI+Q3JpdGljYWwgSGl0PC9vcHRpb24+JyArXHJcbiAgJzxvcHRpb24gdmFsdWU9XCIzXCI+RGVmZW5kPC9vcHRpb24+JyArXHJcbiAgJzxvcHRpb24gdmFsdWU9XCI0XCI+RGVmbGVjdDwvb3B0aW9uPicgK1xyXG4gICc8b3B0aW9uIHZhbHVlPVwiNVwiPkRvZGdlPC9vcHRpb24+JyArXHJcbiAgJzxvcHRpb24gdmFsdWU9XCI2XCI+THVuZ2U8L29wdGlvbj4nICtcclxuICAnPG9wdGlvbiB2YWx1ZT1cIjdcIj5Qb3dlciBBdHRhY2s8L29wdGlvbj4nICtcclxuICAnPG9wdGlvbiB2YWx1ZT1cIjhcIj5TcGluIEF0dGFjazwvb3B0aW9uPicgK1xyXG4gICc8b3B0aW9uIHZhbHVlPVwiOVwiPlBpZXJjaW5nIFN0cmlrZTwvb3B0aW9uPicgK1xyXG4gICc8b3B0aW9uIHZhbHVlPVwiMTBcIj5DcnVzaDwvb3B0aW9uPicgK1xyXG4gICc8b3B0aW9uIHZhbHVlPVwiMTFcIj5XZWFrZW48L29wdGlvbj4nICtcclxuICAnPG9wdGlvbiB2YWx1ZT1cIjEyXCI+SWNlIFNoYXJkPC9vcHRpb24+JyArXHJcbiAgJzxvcHRpb24gdmFsdWU9XCIxM1wiPkZpcmUgQmxhc3Q8L29wdGlvbj4nICtcclxuICAnPG9wdGlvbiB2YWx1ZT1cIjE0XCI+UG9pc29uPC9vcHRpb24+JyArXHJcbiAgJzwvc2VsZWN0PjwvdGQ+JztcclxuZXhwb3J0IHZhciB0YWJsZU9wdHMgPSB7XHJcbiAgcGFnaW5nOiBmYWxzZSxcclxuICBpbmZvOiBmYWxzZSxcclxuICBvcmRlcjogW1szLCAnYXNjJ10sIFswLCAnYXNjJ11dLFxyXG4gIGNvbHVtbkRlZnM6IFtcclxuICAgIHtvcmRlcmFibGU6IGZhbHNlLCB0YXJnZXRzOiBbOV19XHJcbiAgXSxcclxuICBzdGF0ZVNhdmU6IHRydWUsXHJcbiAgc3RhdGVEdXJhdGlvbjogMFxyXG59O1xyXG5leHBvcnQgdmFyIGFyZW5hRmlsdGVyID1cclxuICAnPHRhYmxlIHdpZHRoPVwiMTAwJVwiPjx0Ym9keT48dHI+PHRkPicgK1xyXG4gICc8c3BhbiBjbGFzcz1cImZzaEJsdWVcIj48aW5wdXQgaWQ9XCJmc2hIaWRlTW92ZXNcIiB0eXBlPVwiY2hlY2tib3hcIj4nICtcclxuICAnJm5ic3A7SGlkZSBNYXRjaGVzIGZvciBDb21wbGV0ZWQgTW92ZXM8L3NwYW4+PC90ZD48dGQgYWxpZ249XCJyaWdodFwiPicgK1xyXG4gICc8c3BhbiBjbGFzcz1cImZzaEJsdWVcIj5NaW4gbHZsOiZuYnNwOzxpbnB1dCBpZD1cImZzaE1pbkx2bFwiIHNpemU9XCI1XCI+JyArXHJcbiAgJyZuYnNwO01heCBsdmw6Jm5ic3A7PGlucHV0IGlkPVwiZnNoTWF4THZsXCIgc2l6ZT1cIjVcIj4mbmJzcDsmbmJzcDsnICtcclxuICAnPGlucHV0IGlkPVwiZnNoUmVzZXRcIiBjbGFzcz1cImN1c3RvbWJ1dHRvblwiIHR5cGU9XCJidXR0b25cIiAnICtcclxuICAndmFsdWU9XCJSZXNldFwiPjwvc3Bhbj48L3RkPjwvdHI+PC90Ym9keT48L3RhYmxlPic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZG9udFBvc3QoZSkgeyAvLyBqUXVlcnlcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgdmFyIHNlbGYgPSAkKGUudGFyZ2V0KTtcclxuICB2YXIgcHZwSWQgPSBzZWxmLnByZXYoKS52YWwoKTtcclxuICB2YXIgc3ViY21kID0gc2VsZi5wcmV2KCkucHJldigpLnZhbCgpO1xyXG4gIHdpbmRvdy5sb2NhdGlvbiA9ICdpbmRleC5waHA/Y21kPWFyZW5hJnN1YmNtZD0nICsgc3ViY21kICtcclxuICAgICcmcHZwX2lkPScgKyBwdnBJZDtcclxufVxyXG4iLCJpbXBvcnQge2RvbnRQb3N0fSBmcm9tICcuL2Fzc2V0cyc7XHJcblxyXG5mdW5jdGlvbiBnb3RvUGFnZShwYWdlSWQpIHtcclxuICB3aW5kb3cubG9jYXRpb24gPSAnaW5kZXgucGhwP2NtZD1hcmVuYSZzdWJjbWQ9Y29tcGxldGVkJnBhZ2U9JyArIHBhZ2VJZDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcGxldGVkQXJlbmFzKCkgeyAvLyBqUXVlcnlcclxuICB2YXIgcHJldkJ1dHRvbiA9ICQoJyNwQ0MgaW5wdXRbdmFsdWU9XCI8XCJdJyk7XHJcbiAgdmFyIG5leHRCdXR0b24gPSAkKCcjcENDIGlucHV0W3ZhbHVlPVwiPlwiXScpO1xyXG4gIGlmIChwcmV2QnV0dG9uLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgdmFyIHN0YXJ0QnV0dG9uID0gJCgnPGlucHV0IHZhbHVlPVwiPDxcIiB0eXBlPVwiYnV0dG9uXCI+Jyk7XHJcbiAgICBwcmV2QnV0dG9uLmJlZm9yZShzdGFydEJ1dHRvbikuYmVmb3JlKCcmbmJzcDsnKTtcclxuICAgIHN0YXJ0QnV0dG9uLmNsaWNrKGZ1bmN0aW9uKCkge2dvdG9QYWdlKDEpO30pO1xyXG4gIH1cclxuICBpZiAobmV4dEJ1dHRvbi5sZW5ndGggPT09IDEpIHtcclxuICAgIHZhciBsYXN0UGFnZSA9ICQoJyNwQ0MgaW5wdXRbdmFsdWU9XCJHb1wiXScpLmNsb3Nlc3QoJ3RkJykucHJldigpLnRleHQoKVxyXG4gICAgICAucmVwbGFjZSgvXFxEL2csICcnKTtcclxuICAgIHZhciBmaW5pc2hCdXR0b24gPSAkKCc8aW5wdXQgdmFsdWU9XCI+PlwiIHR5cGU9XCJidXR0b25cIj4nKTtcclxuICAgIG5leHRCdXR0b24uYWZ0ZXIoZmluaXNoQnV0dG9uKS5hZnRlcignJm5ic3A7Jyk7XHJcbiAgICBmaW5pc2hCdXR0b24uY2xpY2soZnVuY3Rpb24oKSB7Z290b1BhZ2UobGFzdFBhZ2UpO30pO1xyXG4gIH1cclxuICAkKCcjcENDIGlucHV0W3ZhbHVlPVwiVmlld1wiXScpLmNsaWNrKGRvbnRQb3N0KTtcclxufVxyXG4iLCJpbXBvcnQgZ2V0SW52ZW50b3J5IGZyb20gJy4vZ2V0SW52ZW50b3J5JztcclxuXHJcbmZ1bmN0aW9uIHJla2V5SW52ZW50b3J5KGRhdGEpIHtcclxuICBkYXRhLml0ZW1zID0gZGF0YS5pdGVtcy5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3Vycikge1xyXG4gICAgaWYgKGN1cnIuaXNfaW5fc3QpIHtwcmV2LmZzaEhhc1NUID0gdHJ1ZTt9XHJcbiAgICBwcmV2W2N1cnIuaW52X2lkXSA9IGN1cnI7XHJcbiAgICByZXR1cm4gcHJldjtcclxuICB9LCB7fSk7XHJcbiAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEludmVudG9yeUJ5SWQoKSB7XHJcbiAgcmV0dXJuIGdldEludmVudG9yeSgpLnBpcGUocmVrZXlJbnZlbnRvcnkpO1xyXG59XHJcbiIsImltcG9ydCB7Y3JlYXRlRGl2fSBmcm9tICcuL2NFbGVtZW50JztcclxuaW1wb3J0IGdldEludmVudG9yeUJ5SWQgZnJvbSAnLi4vYWpheC9nZXRJbnZlbnRvcnlCeUlkJztcclxuaW1wb3J0IHtwQ0N9IGZyb20gJy4uL3N1cHBvcnQvbGF5b3V0JztcclxuXHJcbnZhciBpbnY7XHJcbnZhciB0YXJnZXQ7XHJcblxyXG5mdW5jdGlvbiBzZWxlY3RQZXJmKCkge1xyXG4gIHZhciBpdGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhcmdldCArICctaXRlbXMnKVxyXG4gICAgLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NlbGVjdGFibGUtaXRlbScpO1xyXG4gIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtyZXR1cm47fVxyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoaXRlbXMsIGZ1bmN0aW9uKGUpIHtcclxuICAgIHZhciB0aGlzSXRlbSA9IGUuaWQucmVwbGFjZSh0YXJnZXQgKyAnLWl0ZW0tJywgJycpO1xyXG4gICAgaWYgKGludlt0aGlzSXRlbV0uY3JhZnQgPT09ICdQZXJmZWN0Jykge2UuY2xpY2soKTt9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdGaWx0ZXJzKGRhdGEpIHtcclxuICBpbnYgPSBkYXRhLml0ZW1zO1xyXG4gIHZhciBidXR0b25EaXYgPSBjcmVhdGVEaXYoe2NsYXNzTmFtZTogJ2ZzaEFDJ30pO1xyXG4gIGJ1dHRvbkRpdi5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsXHJcbiAgICAnPGJ1dHRvbiBjbGFzcz1cImZzaEJsXCI+UGVyZmVjdDwvYnV0dG9uPicpO1xyXG4gIHBDQy5hcHBlbmRDaGlsZChidXR0b25EaXYpO1xyXG4gIGJ1dHRvbkRpdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNlbGVjdFBlcmYpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwZXJmRmlsdGVyKGxvYykgeyAvLyBqUXVlcnkubWluXHJcbiAgdGFyZ2V0ID0gbG9jO1xyXG4gIGdldEludmVudG9yeUJ5SWQoKS5kb25lKGRyYXdGaWx0ZXJzKTtcclxufVxyXG4iLCJpbXBvcnQge3BDQ30gZnJvbSAnLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5pbXBvcnQgcGVyZkZpbHRlciBmcm9tICcuLi9jb21tb24vcGVyZkZpbHRlcic7XHJcbmltcG9ydCByZXRyeUFqYXggZnJvbSAnLi4vYWpheC9yZXRyeUFqYXgnO1xyXG5pbXBvcnQge3NpbXBsZUNoZWNrYm94fSBmcm9tICcuLi9zZXR0aW5ncy9zZXR0aW5nc1BhZ2UnO1xyXG5pbXBvcnQge2dldFZhbHVlLCBzZXRWYWx1ZX0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5cclxudmFyIGRpc2FibGVCcmVha2Rvd25Qcm9tcHRzO1xyXG52YXIgc2VsZWN0ZWRMaXN0ID0gW107XHJcblxyXG5mdW5jdGlvbiBzaG93Q29tcG9zaW5nTWVzc2FnZShtZXNzYWdlLCBiZ2NvbG9yKSB7IC8vIGpRdWVyeVxyXG4gICQoJyNjb21wb3NpbmdNZXNzYWdlQ29udGFpbmVyJykucmVtb3ZlKCk7XHJcblxyXG4gICQoJyNjb21wb3NpbmdNZXNzYWdlJylcclxuICAgIC5hcHBlbmQoXHJcbiAgICAgICQoJzxkaXYvPicsIHtcclxuICAgICAgICBpZDogJ2NvbXBvc2luZ01lc3NhZ2VDb250YWluZXInLFxyXG4gICAgICAgIHdpZHRoOiAnMTAwJSdcclxuICAgICAgfSlcclxuICAgICAgICAuYXBwZW5kKFxyXG4gICAgICAgICAgJCgnPGRpdi8+Jywge2lkOiAnY29tcG9zaW5nTWVzc2FnZVRleHQnfSlcclxuICAgICAgICAgICAgLmNzcyh7XHJcbiAgICAgICAgICAgICAgd2lkdGg6ICc5MCUnLFxyXG4gICAgICAgICAgICAgICd0ZXh0LWFsaWduJzogJ2NlbnRlcicsXHJcbiAgICAgICAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiBiZ2NvbG9yLFxyXG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiKDI1NSwgMjU1LCAyNTUpJyxcclxuICAgICAgICAgICAgICBtYXJnaW46ICc1cHggYXV0byA1cHggYXV0bycsXHJcbiAgICAgICAgICAgICAgcGFkZGluZzogJzJweCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmh0bWwobWVzc2FnZSlcclxuICAgICAgICApXHJcbiAgICApO1xyXG5cclxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHNlbGYgPSAkKCcjY29tcG9zaW5nTWVzc2FnZUNvbnRhaW5lcicpO1xyXG4gICAgc2VsZi5hbmltYXRlKHtvcGFjaXR5OiAwfSwgNTAwLCBmdW5jdGlvbigpIHtcclxuICAgICAgc2VsZi5hbmltYXRlKHtoZWlnaHQ6IDB9LCA1MDAsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNlbGYuaGlkZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0sIDUwMDApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBicmVha0l0ZW1zKCkgeyAvLyBqUXVlcnkubWluXHJcbiAgcmV0dXJuIHJldHJ5QWpheCh7XHJcbiAgICB0eXBlOiAnUE9TVCcsXHJcbiAgICB1cmw6ICdpbmRleC5waHA/Y21kPWNvbXBvc2luZyZzdWJjbWQ9ZG9icmVha2Rvd24nLFxyXG4gICAgZGF0YTogeydpdGVtX2xpc3RbXSc6IHNlbGVjdGVkTGlzdH0sXHJcbiAgICBkYXRhVHlwZTogJ2pzb24nXHJcbiAgfSkuZG9uZShmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgaWYgKHJlc3BvbnNlLmVycm9yICE9PSAwKSB7XHJcbiAgICAgIHNob3dDb21wb3NpbmdNZXNzYWdlKCdFcnJvcjogJyArIHJlc3BvbnNlLm1zZywgJ3JnYigxNjQsIDI4LCAyOCknKTtcclxuICAgIH1cclxuICAgIHdpbmRvdy5sb2NhdGlvbiA9ICdpbmRleC5waHA/Y21kPWNvbXBvc2luZyZzdWJjbWQ9YnJlYWtkb3duJm09MSc7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJyZWFrRXZ0KGV2dCkge1xyXG4gIGlmIChkaXNhYmxlQnJlYWtkb3duUHJvbXB0cyAmJlxyXG4gICAgICBldnQudGFyZ2V0LmlkID09PSAnYnJlYWtkb3duLXNlbGVjdGVkLWl0ZW1zJykge1xyXG4gICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgaWYgKHNlbGVjdGVkTGlzdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgc2hvd0NvbXBvc2luZ01lc3NhZ2UoJ0Vycm9yOiBObyBpdGVtcyBzZWxlY3RlZC4nLCAncmdiKDE2NCwgMjgsIDI4KScpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBicmVha0l0ZW1zKCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpdGVtQ2xpY2soZXZ0KSB7XHJcbiAgaWYgKCFldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0YWJsZS1pdGVtJykpIHtyZXR1cm47fVxyXG4gIHZhciBteUl0ZW0gPSBldnQudGFyZ2V0LmlkLnJlcGxhY2UoJ2NvbXBvc2luZy1pdGVtLScsICcnKTtcclxuICB2YXIgaXRlbVBvcyA9IHNlbGVjdGVkTGlzdC5pbmRleE9mKG15SXRlbSk7XHJcbiAgaWYgKGl0ZW1Qb3MgPT09IC0xKSB7XHJcbiAgICBzZWxlY3RlZExpc3QucHVzaChteUl0ZW0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBzZWxlY3RlZExpc3Quc3BsaWNlKGl0ZW1Qb3MsIDEpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlUHJlZigpIHtcclxuICBkaXNhYmxlQnJlYWtkb3duUHJvbXB0cyA9ICFkaXNhYmxlQnJlYWtkb3duUHJvbXB0cztcclxuICBzZXRWYWx1ZSgnZGlzYWJsZUJyZWFrZG93blByb21wdHMnLCBkaXNhYmxlQnJlYWtkb3duUHJvbXB0cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXBvc2luZ0JyZWFrZG93bigpIHtcclxuICBwZXJmRmlsdGVyKCdjb21wb3NpbmcnKTtcclxuICBkaXNhYmxlQnJlYWtkb3duUHJvbXB0cyA9IGdldFZhbHVlKCdkaXNhYmxlQnJlYWtkb3duUHJvbXB0cycpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdicmVha2Rvd24tc2VsZWN0ZWQtaXRlbXMnKS5wYXJlbnROb2RlXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBicmVha0V2dCwgdHJ1ZSk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbXBvc2luZy1pdGVtcycpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBpdGVtQ2xpY2spO1xyXG4gIHBDQy5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsXHJcbiAgICAnPHRhYmxlIGNsYXNzPVwiZnNoVGJsQ2VudGVyXCI+PHRib2R5PicgK1xyXG4gICAgc2ltcGxlQ2hlY2tib3goJ2Rpc2FibGVCcmVha2Rvd25Qcm9tcHRzJykgK1xyXG4gICAgJzwvdGJvZHk+PC90YWJsZT4nKTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGlzYWJsZUJyZWFrZG93blByb21wdHMnKVxyXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlUHJlZik7XHJcbn1cclxuIiwiaW1wb3J0IHtwQ0N9IGZyb20gJy4uL3N1cHBvcnQvbGF5b3V0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdsb2JhbFF1ZXN0KCkge1xyXG4gIHZhciB0b3BUYWJsZSA9IHBDQy5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGFibGUnKVszXTtcclxuICBmb3IgKHZhciBpID0gMjsgaSA8IHRvcFRhYmxlLnJvd3MubGVuZ3RoOyBpICs9IDQpIHtcclxuICAgIHZhciBhQ2VsbCA9IHRvcFRhYmxlLnJvd3NbaV0uY2VsbHNbMV07XHJcbiAgICBhQ2VsbC5pbm5lckhUTUwgPSAnPGEgaHJlZj1cImluZGV4LnBocD9jbWQ9ZmluZHBsYXllcicgK1xyXG4gICAgICAnJnNlYXJjaF9zaG93X2ZpcnN0PTEmc2VhcmNoX2FjdGl2ZT0xJnNlYXJjaF91c2VybmFtZT0nICtcclxuICAgICAgYUNlbGwudGV4dENvbnRlbnQgKyAnXCI+JyArIGFDZWxsLnRleHRDb250ZW50ICsgJzwvYT4nO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZnVuY3Rpb24gY2xvc2VzdFRhYmxlKGVsKSB7XHJcbiAgaWYgKGVsLnRhZ05hbWUgPT09ICdUQUJMRScpIHtyZXR1cm4gZWw7fVxyXG4gIHJldHVybiBjbG9zZXN0VGFibGUoZWwucGFyZW50Tm9kZSk7XHJcbn1cclxuIiwiaW1wb3J0IHtjbG9zZXN0VGFibGV9IGZyb20gJy4uL2NvbW1vbi9jbG9zZXN0JztcclxuaW1wb3J0IHtkaWFsb2d9IGZyb20gJy4uL3N1cHBvcnQvYWpheCc7XHJcbmltcG9ydCByZXRyeUFqYXggZnJvbSAnLi4vYWpheC9yZXRyeUFqYXgnO1xyXG5pbXBvcnQge2luZm9Cb3gsIHBDQ30gZnJvbSAnLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5cclxuZnVuY3Rpb24gdHJhbnNsYXRlUmV0dXJuSW5mbyhkYXRhKSB7XHJcbiAgdmFyIGluZm8gPSBpbmZvQm94KGRhdGEpO1xyXG4gIHZhciBfciA9IHtyOiAxLCBtOiBpbmZvfTtcclxuICBpZiAoaW5mbyA9PT0gJ0l0ZW0gd2FzIHRyYW5zZmVycmVkIHRvIHRoZSBndWlsZCBzdG9yZSEnKSB7XHJcbiAgICBfciA9IHtyOiAwLCBtOiAnJ307XHJcbiAgfVxyXG4gIHJldHVybiBfcjtcclxufVxyXG5cclxuZnVuY3Rpb24gZ3VpbGRNYWlsYm94VGFrZShocmVmKSB7XHJcbiAgcmV0dXJuIHJldHJ5QWpheCh7dXJsOiBocmVmfSkucGlwZSh0cmFuc2xhdGVSZXR1cm5JbmZvKS5kb25lKGRpYWxvZyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRha2VSZXN1bHQoc2VsZiwgZGF0YSkge1xyXG4gIGlmIChkYXRhLnIgPT09IDApIHtcclxuICAgIGNsb3Nlc3RUYWJsZShzZWxmKS5uZXh0RWxlbWVudFNpYmxpbmcucm93c1swXS5jZWxsc1swXS5pbm5lckhUTUwgPVxyXG4gICAgICAnPHNwYW4gY2xhc3M9XCJmc2hHcmVlblwiPlRha2VuPC9zcGFuPic7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBndWlsZE1haWxib3hFdmVudChlKSB7XHJcbiAgdmFyIHNlbGYgPSBlLnRhcmdldDtcclxuICBpZiAoc2VsZi50YWdOYW1lID09PSAnSU1HJykge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgdmFyIGFuY2hvciA9IHNlbGYucGFyZW50Tm9kZS5ocmVmO1xyXG4gICAgZ3VpbGRNYWlsYm94VGFrZShhbmNob3IpLmRvbmUodGFrZVJlc3VsdC5iaW5kKG51bGwsIHNlbGYpKTtcclxuICB9XHJcbiAgaWYgKHNlbGYuY2xhc3NOYW1lID09PSAnc2VuZExpbmsnKSB7XHJcbiAgICB2YXIgbm9kZUxpc3QgPSBwQ0MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ltZycpO1xyXG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChub2RlTGlzdCwgZnVuY3Rpb24oZWwpIHtlbC5jbGljaygpO30pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ3VpbGRNYWlsYm94KCkge1xyXG4gIHBDQy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGd1aWxkTWFpbGJveEV2ZW50KTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcENDIHRkW2hlaWdodD1cIjI1XCJdJylcclxuICAgIC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsXHJcbiAgICAgICc8c3BhbiBjbGFzcz1cInNlbmRMaW5rXCI+VGFrZSBBbGw8L3NwYW4+Jyk7XHJcbn1cclxuIiwiaW1wb3J0IGNhbGYgZnJvbSAnLi4vc3VwcG9ydC9jYWxmJztcclxuaW1wb3J0IGdldEZvcmFnZSBmcm9tICcuL2dldEZvcmFnZSc7XHJcbmltcG9ydCB7bm93fSBmcm9tICcuLi9zdXBwb3J0L2RhdGFPYmonO1xyXG5pbXBvcnQgcmV0cnlBamF4IGZyb20gJy4vcmV0cnlBamF4JztcclxuaW1wb3J0IHNldEZvcmFnZSBmcm9tICcuL3NldEZvcmFnZSc7XHJcblxyXG5mdW5jdGlvbiBjdXJyZW50R3VpbGRJZCgpIHtcclxuICB2YXIgX2d1aWxkSWQ7XHJcbiAgdmFyIG5vZGVMaXN0ID0gZG9jdW1lbnQuYm9keS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChub2RlTGlzdCwgZnVuY3Rpb24gZ2V0R3VpbGRJZChlbCkge1xyXG4gICAgdmFyIG1hdGNoID0gZWwudGV4dENvbnRlbnQubWF0Y2goL1xccytndWlsZElkOiAoWzAtOV0rKSwvKTtcclxuICAgIGlmIChtYXRjaCkge19ndWlsZElkID0gcGFyc2VJbnQobWF0Y2hbMV0sIDEwKTt9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIF9ndWlsZElkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRHdWlsZChndWlsZElkKSB7XHJcbiAgcmV0dXJuIHJldHJ5QWpheCh7XHJcbiAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgdXJsOiAnaW5kZXgucGhwJyxcclxuICAgIGRhdGE6IHtcclxuICAgICAgY21kOiAnZXhwb3J0JyxcclxuICAgICAgc3ViY21kOiAnZ3VpbGRfbWVtYmVycycsXHJcbiAgICAgIGd1aWxkX2lkOiBndWlsZElkXHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZE1lbWJyTGlzdFRvRm9yYWdlKG1lbWJyTGlzdCkge1xyXG4gIGdldEZvcmFnZSgnZnNoX21lbWJyTGlzdCcpXHJcbiAgICAuZG9uZShmdW5jdGlvbiBzYXZlTWVtYnJMaXN0SW5Gb3JhZ2UoZGF0YSkge1xyXG4gICAgICB2YXIgb2xkTWVtTGlzdCA9IGRhdGEgfHwge307XHJcbiAgICAgIHNldEZvcmFnZSgnZnNoX21lbWJyTGlzdCcsICQuZXh0ZW5kKG9sZE1lbUxpc3QsIG1lbWJyTGlzdCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEd1aWxkTWVtYmVycyhndWlsZElkKSB7XHJcbiAgcmV0dXJuIGdldEd1aWxkKGd1aWxkSWQpLnBpcGUoZnVuY3Rpb24gbWVtYnJMaXN0VG9IYXNoKGRhdGEpIHtcclxuICAgIHZhciBtZW1ickxpc3QgPSB7fTtcclxuICAgIG1lbWJyTGlzdFtndWlsZElkXSA9IHt9O1xyXG4gICAgbWVtYnJMaXN0W2d1aWxkSWRdLmxhc3RVcGRhdGUgPSBub3c7XHJcbiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gbWVtYmVyVG9PYmplY3QoZWxlKSB7XHJcbiAgICAgIG1lbWJyTGlzdFtndWlsZElkXVtlbGUudXNlcm5hbWVdID0gZWxlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbWVtYnJMaXN0O1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRNZW1ickxpc3RGcm9tRm9yYWdlKGd1aWxkSWQsIG1lbWJyTGlzdCkge1xyXG4gIGlmIChtZW1ickxpc3QgJiYgbWVtYnJMaXN0W2d1aWxkSWRdICYmXHJcbiAgICAgIG1lbWJyTGlzdFtndWlsZElkXS5sYXN0VXBkYXRlICYmXHJcbiAgICAgIG1lbWJyTGlzdFtndWlsZElkXS5sYXN0VXBkYXRlID4gbm93IC0gMzAwMDAwKSB7XHJcbiAgICByZXR1cm4gbWVtYnJMaXN0O1xyXG4gIH1cclxuICByZXR1cm4gZ2V0R3VpbGRNZW1iZXJzKGd1aWxkSWQpLmRvbmUoYWRkTWVtYnJMaXN0VG9Gb3JhZ2UpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBndWlsZE1lbWJlcnMoZm9yY2UsIGd1aWxkSWQpIHtcclxuICBpZiAoZm9yY2UpIHtcclxuICAgIHJldHVybiBnZXRHdWlsZE1lbWJlcnMoZ3VpbGRJZCkuZG9uZShhZGRNZW1ickxpc3RUb0ZvcmFnZSk7XHJcbiAgfVxyXG4gIHJldHVybiBnZXRGb3JhZ2UoJ2ZzaF9tZW1ickxpc3QnKVxyXG4gICAgLnBpcGUoZ2V0TWVtYnJMaXN0RnJvbUZvcmFnZS5iaW5kKG51bGwsIGd1aWxkSWQpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0SGVscGVyTWVtYnJMaXN0KGd1aWxkSWQsIG1lbWJyTGlzdCkge1xyXG4gIGNhbGYubWVtYnJMaXN0ID0gbWVtYnJMaXN0W2d1aWxkSWRdO1xyXG4gIHJldHVybiBjYWxmLm1lbWJyTGlzdDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TWVtYnJMaXN0KGZvcmNlKSB7XHJcbiAgdmFyIGd1aWxkSWQgPSBjdXJyZW50R3VpbGRJZCgpO1xyXG4gIHJldHVybiBndWlsZE1lbWJlcnMoZm9yY2UsIGd1aWxkSWQpXHJcbiAgICAucGlwZShzZXRIZWxwZXJNZW1ickxpc3QuYmluZChudWxsLCBndWlsZElkKSk7XHJcbn1cclxuIiwiaW1wb3J0IGFkZCBmcm9tICcuL3N1cHBvcnQvdGFzayc7XHJcbmltcG9ydCBjYWxmIGZyb20gJy4vc3VwcG9ydC9jYWxmJztcclxuaW1wb3J0IHtjcmVhdGVURm9vdH0gZnJvbSAnLi9jb21tb24vY0VsZW1lbnQnO1xyXG5pbXBvcnQgZ2V0TWVtYnJMaXN0IGZyb20gJy4vYWpheC9nZXRNZW1ickxpc3QnO1xyXG5pbXBvcnQge3BDQ30gZnJvbSAnLi9zdXBwb3J0L2xheW91dCc7XHJcbmltcG9ydCByZXRyeUFqYXggZnJvbSAnLi9hamF4L3JldHJ5QWpheCc7XHJcbmltcG9ydCB7XHJcbiAgYWRkQ29tbWFzLFxyXG4gIGNyZWF0ZURvY3VtZW50LFxyXG4gIGZhbGxiYWNrLFxyXG4gIGltYWdlU2VydmVyLFxyXG4gIGludFZhbHVlXHJcbn0gZnJvbSAnLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCB7dGltZSwgdGltZUVuZH0gZnJvbSAnLi9zdXBwb3J0L2RlYnVnJztcclxuXHJcbnZhciBuZXdTdW1tYXJ5ID0ge307XHJcbnZhciBhZHZpc29yQ29sdW1ucyA9IFtcclxuICB7dGl0bGU6ICc8ZGl2IGNsYXNzPVwiZnNoQm9sZFwiPk1lbWJlcjwvZGl2Pid9LFxyXG4gIHt0aXRsZTogJzxkaXYgY2xhc3M9XCJmc2hCb2xkXCI+THZsPC9kaXY+JywgJ2NsYXNzJzogJ2R0LWNlbnRlcid9LFxyXG4gIHt0aXRsZTogJzxkaXYgY2xhc3M9XCJmc2hCb2xkXCI+UmFuazwvZGl2PicsICdjbGFzcyc6ICdkdC1jZW50ZXIgZHQtbm93cmFwJ30sXHJcbiAge1xyXG4gICAgdGl0bGU6ICc8ZGl2IGNsYXNzPVwiZnNoQm9sZFwiPkdvbGQgRnJvbSBEZXBvc2l0czwvZGl2PicsXHJcbiAgICAnY2xhc3MnOiAnZHQtY2VudGVyJ1xyXG4gIH0sXHJcbiAge3RpdGxlOiAnPGRpdiBjbGFzcz1cImZzaEJvbGRcIj5Hb2xkIEZyb20gVGF4PC9kaXY+JywgJ2NsYXNzJzogJ2R0LWNlbnRlcid9LFxyXG4gIHt0aXRsZTogJzxkaXYgY2xhc3M9XCJmc2hCb2xkXCI+R29sZCBUb3RhbDwvZGl2PicsICdjbGFzcyc6ICdkdC1jZW50ZXInfSxcclxuICB7dGl0bGU6ICc8ZGl2IGNsYXNzPVwiZnNoQm9sZFwiPkZTUDwvZGl2PicsICdjbGFzcyc6ICdkdC1jZW50ZXInfSxcclxuICB7dGl0bGU6ICc8ZGl2IGNsYXNzPVwiZnNoQm9sZFwiPlNraWxsIENhc3Q8L2Rpdj4nLCAnY2xhc3MnOiAnZHQtY2VudGVyJ30sXHJcbiAge3RpdGxlOiAnPGRpdiBjbGFzcz1cImZzaEJvbGRcIj5Hcm91cCBDcmVhdGU8L2Rpdj4nLCAnY2xhc3MnOiAnZHQtY2VudGVyJ30sXHJcbiAge3RpdGxlOiAnPGRpdiBjbGFzcz1cImZzaEJvbGRcIj5Hcm91cCBKb2luPC9kaXY+JywgJ2NsYXNzJzogJ2R0LWNlbnRlcid9LFxyXG4gIHt0aXRsZTogJzxkaXYgY2xhc3M9XCJmc2hCb2xkXCI+UmVsaWM8L2Rpdj4nLCAnY2xhc3MnOiAnZHQtY2VudGVyJ30sXHJcbiAge3RpdGxlOiAnPGRpdiBjbGFzcz1cImZzaEJvbGRcIj5YUCBDb250cmliPC9kaXY+JywgJ2NsYXNzJzogJ2R0LWNlbnRlcid9XHJcbl07XHJcbnZhciBtZW1ickxpc3Q7XHJcbnZhciBsaXN0O1xyXG52YXIgZGF0YSA9IFtdO1xyXG5cclxuZnVuY3Rpb24gZG9UYWJsZSgpIHsgLy8galF1ZXJ5XHJcbiAgJChsaXN0KS5kYXRhVGFibGUoe1xyXG4gICAgcGFnZUxlbmd0aDogMjUsXHJcbiAgICBsZW5ndGhNZW51OiBbWzI1LCA1MCwgLTFdLCBbMjUsIDUwLCAnQWxsJ11dLFxyXG4gICAgYXV0b1dpZHRoOiBmYWxzZSxcclxuICAgIGNvbHVtbnM6IGFkdmlzb3JDb2x1bW5zLFxyXG4gICAgc3RhdGVTYXZlOiB0cnVlLFxyXG4gICAgc3RhdGVEdXJhdGlvbjogMFxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdW1tYXJ5TGluaygpIHtcclxuICB2YXIgdXBkYXRlSW5wdXQgPSBwQ0MuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY3VzdG9tYnV0dG9uJyk7XHJcbiAgaWYgKCF1cGRhdGVJbnB1dCkge3JldHVybjt9XHJcbiAgdXBkYXRlSW5wdXRbMF0uaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmVuZCcsICc8c3Bhbj4gPGEgaHJlZj1cImluZGV4LnBocCcgK1xyXG4gICAgJz9jbWQ9Z3VpbGQmc3ViY21kPWFkdmlzb3Imc3ViY21kMj13ZWVrbHlcIj43LURheSBTdW1tYXJ5PC9hPjwvc3Bhbj4nKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGxheWVyTmFtZShmKSB7XHJcbiAgaWYgKCFtZW1ickxpc3RbZl0pIHtyZXR1cm4gZjt9XHJcbiAgcmV0dXJuICc8YSBocmVmPVwiaW5kZXgucGhwP2NtZD1wcm9maWxlJnBsYXllcl9pZD0nICtcclxuICAgIG1lbWJyTGlzdFtmXS5pZCArICdcIj4nICsgZiArICc8L2E+JztcclxufVxyXG5cclxuZnVuY3Rpb24gcGxheWVyTGV2ZWwoZikge1xyXG4gIGlmICghbWVtYnJMaXN0W2ZdKSB7cmV0dXJuICcnO31cclxuICByZXR1cm4gbWVtYnJMaXN0W2ZdLmxldmVsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwbGF5ZXJSYW5rKGYpIHtcclxuICBpZiAoIW1lbWJyTGlzdFtmXSkge3JldHVybiAnJzt9XHJcbiAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiZnNoQWR2UmFua1wiPicgK1xyXG4gICAgbWVtYnJMaXN0W2ZdLnJhbmtfbmFtZSArICc8L2Rpdj4nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmplY3RBZHZpc29yTmV3KCkge1xyXG5cclxuICB0aW1lKCdndWlsZEFkdmlzb3IuaW5qZWN0QWR2aXNvck5ldycpO1xyXG5cclxuICBsaXN0ID0gcENDLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdUQUJMRScpWzFdO1xyXG4gIGlmICghbGlzdCkge3JldHVybjt9XHJcbiAgdmFyIHRvdGFsUm93ID0gbGlzdC5maXJzdEVsZW1lbnRDaGlsZC5sYXN0RWxlbWVudENoaWxkO1xyXG4gIHZhciB0b3RhbENlbGwgPSB0b3RhbFJvdy5maXJzdEVsZW1lbnRDaGlsZDtcclxuICB0b3RhbENlbGwuY2xhc3NOYW1lID0gJ2ZzaFJpZ2h0JztcclxuICB0b3RhbENlbGwuc2V0QXR0cmlidXRlKCdjb2xzcGFuJywgJzMnKTtcclxuICB2YXIgdGZvb3QgPSBjcmVhdGVURm9vdCgpO1xyXG4gIHRmb290Lmluc2VydEFkamFjZW50RWxlbWVudCgnYmVmb3JlZW5kJywgdG90YWxSb3cpO1xyXG4gIGxpc3QuY2xhc3NOYW1lID0gJ2ZzaFhTbWFsbCBob3Zlcic7XHJcbiAgbGlzdC5maXJzdEVsZW1lbnRDaGlsZFxyXG4gICAgLnJlbW92ZUNoaWxkKGxpc3QuZmlyc3RFbGVtZW50Q2hpbGQuZmlyc3RFbGVtZW50Q2hpbGQpO1xyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobGlzdC5yb3dzLCBmdW5jdGlvbih0cikge1xyXG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCh0ci5jZWxscywgZnVuY3Rpb24odGQpIHtcclxuICAgICAgdGQucmVtb3ZlQXR0cmlidXRlKCdiZ2NvbG9yJyk7XHJcbiAgICB9KTtcclxuICAgIHZhciB0ZE9uZSA9IHRyLmNlbGxzWzBdO1xyXG4gICAgdmFyIHVzZXJuYW1lID0gdGRPbmUudGV4dENvbnRlbnQudHJpbSgpO1xyXG4gICAgdGRPbmUuaW5uZXJIVE1MID0gcGxheWVyTmFtZSh1c2VybmFtZSk7XHJcbiAgICB0ZE9uZS5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyZW5kJywgJzx0ZD4nICsgcGxheWVyTGV2ZWwodXNlcm5hbWUpICtcclxuICAgICAgJzwvdGQ+PHRkPicgKyBwbGF5ZXJSYW5rKHVzZXJuYW1lKSArICc8L3RkPicpO1xyXG4gIH0pO1xyXG4gIGxpc3QuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdiZWZvcmVlbmQnLCB0Zm9vdCk7XHJcbiAgYWRkKDMsIGRvVGFibGUpO1xyXG4gIHN1bW1hcnlMaW5rKCk7XHJcblxyXG4gIHRpbWVFbmQoJ2d1aWxkQWR2aXNvci5pbmplY3RBZHZpc29yTmV3Jyk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiByZXR1cm5BZHZpc29yUGFnZShlLCByZXNwb25zZSkge1xyXG5cclxuICB0aW1lKCdndWlsZEFkdmlzb3IucmV0dXJuQWR2aXNvclBhZ2UnICsgZSk7XHJcblxyXG4gIGxpc3QubGFzdEVsZW1lbnRDaGlsZC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsICcgZGF5ICcgKyBlICsgJywnKTtcclxuICB2YXIgZG9jID0gY3JlYXRlRG9jdW1lbnQocmVzcG9uc2UpO1xyXG4gIHZhciB0YWJsZSA9IGRvYy5nZXRFbGVtZW50QnlJZCgncENDJykuZmlyc3RFbGVtZW50Q2hpbGRcclxuICAgIC5maXJzdEVsZW1lbnRDaGlsZC5sYXN0RWxlbWVudENoaWxkLmZpcnN0RWxlbWVudENoaWxkLmZpcnN0RWxlbWVudENoaWxkO1xyXG4gIHZhciB0ciA9IHRhYmxlLnJvd3M7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCh0ciwgZnVuY3Rpb24oZWwpIHtcclxuICAgIHZhciB0ZHMgPSBlbC5jZWxscztcclxuICAgIHZhciBtZW1iZXIgPSB0ZHNbMF0udGV4dENvbnRlbnQudHJpbSgpO1xyXG4gICAgaWYgKG1lbWJlciA9PT0gJ01lbWJlcicpIHtyZXR1cm47fVxyXG4gICAgbmV3U3VtbWFyeVttZW1iZXJdID0gZmFsbGJhY2sobmV3U3VtbWFyeVttZW1iZXJdLCB7fSk7XHJcbiAgICBuZXdTdW1tYXJ5W21lbWJlcl0uZGVwb3NpdCA9XHJcbiAgICAgIGZhbGxiYWNrKG5ld1N1bW1hcnlbbWVtYmVyXS5kZXBvc2l0LCAwKSArXHJcbiAgICAgIGludFZhbHVlKHRkc1sxXS50ZXh0Q29udGVudCk7XHJcbiAgICBuZXdTdW1tYXJ5W21lbWJlcl0udGF4ID0gZmFsbGJhY2sobmV3U3VtbWFyeVttZW1iZXJdLnRheCwgMCkgK1xyXG4gICAgICBpbnRWYWx1ZSh0ZHNbMl0udGV4dENvbnRlbnQpO1xyXG4gICAgbmV3U3VtbWFyeVttZW1iZXJdLnRvdGFsID0gZmFsbGJhY2sobmV3U3VtbWFyeVttZW1iZXJdLnRvdGFsLCAwKSArXHJcbiAgICAgIGludFZhbHVlKHRkc1szXS50ZXh0Q29udGVudCk7XHJcbiAgICBuZXdTdW1tYXJ5W21lbWJlcl0uZnNwID0gZmFsbGJhY2sobmV3U3VtbWFyeVttZW1iZXJdLmZzcCwgMCkgK1xyXG4gICAgICBpbnRWYWx1ZSh0ZHNbNF0udGV4dENvbnRlbnQpO1xyXG4gICAgbmV3U3VtbWFyeVttZW1iZXJdLnNraWxscyA9IGZhbGxiYWNrKG5ld1N1bW1hcnlbbWVtYmVyXS5za2lsbHMsIDApICtcclxuICAgICAgaW50VmFsdWUodGRzWzVdLnRleHRDb250ZW50KTtcclxuICAgIG5ld1N1bW1hcnlbbWVtYmVyXS5ncnBDcnQgPSBmYWxsYmFjayhuZXdTdW1tYXJ5W21lbWJlcl0uZ3JwQ3J0LCAwKSArXHJcbiAgICAgIGludFZhbHVlKHRkc1s2XS50ZXh0Q29udGVudCk7XHJcbiAgICBuZXdTdW1tYXJ5W21lbWJlcl0uZ3JwSm9pbiA9XHJcbiAgICAgIGZhbGxiYWNrKG5ld1N1bW1hcnlbbWVtYmVyXS5ncnBKb2luLCAwKSArXHJcbiAgICAgIGludFZhbHVlKHRkc1s3XS50ZXh0Q29udGVudCk7XHJcbiAgICBuZXdTdW1tYXJ5W21lbWJlcl0ucmVsaWNzID0gZmFsbGJhY2sobmV3U3VtbWFyeVttZW1iZXJdLnJlbGljcywgMCkgK1xyXG4gICAgICBpbnRWYWx1ZSh0ZHNbOF0udGV4dENvbnRlbnQpO1xyXG4gICAgbmV3U3VtbWFyeVttZW1iZXJdLmNvbnRyaWIgPVxyXG4gICAgICBmYWxsYmFjayhuZXdTdW1tYXJ5W21lbWJlcl0uY29udHJpYiwgMCkgK1xyXG4gICAgICBpbnRWYWx1ZSh0ZHNbOV0udGV4dENvbnRlbnQpO1xyXG4gIH0pO1xyXG5cclxuICB0aW1lRW5kKCdndWlsZEFkdmlzb3IucmV0dXJuQWR2aXNvclBhZ2UnICsgZSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRBZHZpc29yUGFnZShlKSB7IC8vIGpRdWVyeVxyXG4gIHJldHVybiByZXRyeUFqYXgoe1xyXG4gICAgdXJsOiAnaW5kZXgucGhwJyxcclxuICAgIGRhdGE6IHtcclxuICAgICAgY21kOiAnZ3VpbGQnLFxyXG4gICAgICBzdWJjbWQ6ICdhZHZpc29yJyxcclxuICAgICAgcGVyaW9kOiBlXHJcbiAgICB9XHJcbiAgfSkuZG9uZShyZXR1cm5BZHZpc29yUGFnZS5iaW5kKG51bGwsIGUpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGlzcGxheUFkdmlzb3IoKSB7IC8vIGpRdWVyeVxyXG5cclxuICB0aW1lKCdndWlsZEFkdmlzb3IuZGlzcGxheUFkdmlzb3InKTtcclxuXHJcbiAgbGlzdC5jbGFzc05hbWUgPSAnZnNoWFNtYWxsIGhvdmVyJztcclxuICBsaXN0LmlubmVySFRNTCA9ICc8dGZvb3QgaWQ9XCJhZHZURm9vdFwiPjx0cj48dGQgY2xhc3M9XCJmc2hSaWdodFwiICcgK1xyXG4gICAgJ2NvbHNwYW49XCIzXCI+VG90YWw6IDwvdGQ+PHRkPjx1PicgK1xyXG4gICAgYWRkQ29tbWFzKG5ld1N1bW1hcnlbJ1RvdGFsOiddLmRlcG9zaXQpICsgJzwvdT48L3RkPjx0ZD48dT4nICtcclxuICAgIGFkZENvbW1hcyhuZXdTdW1tYXJ5WydUb3RhbDonXS50YXgpICsgJzwvdT48L3RkPjx0ZD48dT4nICtcclxuICAgIGFkZENvbW1hcyhuZXdTdW1tYXJ5WydUb3RhbDonXS50b3RhbCkgKyAnPC91PjwvdGQ+PHRkPjx1PicgK1xyXG4gICAgYWRkQ29tbWFzKG5ld1N1bW1hcnlbJ1RvdGFsOiddLmZzcCkgKyAnPC91PjwvdGQ+PHRkPjx1PicgK1xyXG4gICAgYWRkQ29tbWFzKG5ld1N1bW1hcnlbJ1RvdGFsOiddLnNraWxscykgKyAnPC91PjwvdGQ+PHRkPjx1PicgK1xyXG4gICAgYWRkQ29tbWFzKG5ld1N1bW1hcnlbJ1RvdGFsOiddLmdycENydCkgKyAnPC91PjwvdGQ+PHRkPjx1PicgK1xyXG4gICAgYWRkQ29tbWFzKG5ld1N1bW1hcnlbJ1RvdGFsOiddLmdycEpvaW4pICsgJzwvdT48L3RkPjx0ZD48dT4nICtcclxuICAgIGFkZENvbW1hcyhuZXdTdW1tYXJ5WydUb3RhbDonXS5yZWxpY3MpICsgJzwvdT48L3RkPjx0ZD48dT4nICtcclxuICAgIGFkZENvbW1hcyhuZXdTdW1tYXJ5WydUb3RhbDonXS5jb250cmliKSArXHJcbiAgICAgICc8L3U+PC90ZD48L3RyPjwvdGZvb3Q+JztcclxuICAkKGxpc3QpLmRhdGFUYWJsZSh7XHJcbiAgICBkYXRhOiBkYXRhLFxyXG4gICAgcGFnZUxlbmd0aDogMjUsXHJcbiAgICBsZW5ndGhNZW51OiBbWzI1LCA1MCwgLTFdLCBbMjUsIDUwLCAnQWxsJ11dLFxyXG4gICAgYXV0b1dpZHRoOiBmYWxzZSxcclxuICAgIGNvbHVtbnM6IGFkdmlzb3JDb2x1bW5zLFxyXG4gICAgc3RhdGVTYXZlOiB0cnVlLFxyXG4gICAgc3RhdGVEdXJhdGlvbjogMFxyXG4gIH0pO1xyXG5cclxuICB0aW1lRW5kKCdndWlsZEFkdmlzb3IuZGlzcGxheUFkdmlzb3InKTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0YXRzKGYpIHtcclxuICBpZiAoZiA9PT0gJ1RvdGFsOicpIHtyZXR1cm47fVxyXG4gIGRhdGEucHVzaChbXHJcbiAgICBwbGF5ZXJOYW1lKGYpLFxyXG4gICAgcGxheWVyTGV2ZWwoZiksXHJcbiAgICBwbGF5ZXJSYW5rKGYpLFxyXG4gICAgYWRkQ29tbWFzKG5ld1N1bW1hcnlbZl0uZGVwb3NpdCksXHJcbiAgICBhZGRDb21tYXMobmV3U3VtbWFyeVtmXS50YXgpLFxyXG4gICAgYWRkQ29tbWFzKG5ld1N1bW1hcnlbZl0udG90YWwpLFxyXG4gICAgYWRkQ29tbWFzKG5ld1N1bW1hcnlbZl0uZnNwKSxcclxuICAgIGFkZENvbW1hcyhuZXdTdW1tYXJ5W2ZdLnNraWxscyksXHJcbiAgICBhZGRDb21tYXMobmV3U3VtbWFyeVtmXS5ncnBDcnQpLFxyXG4gICAgYWRkQ29tbWFzKG5ld1N1bW1hcnlbZl0uZ3JwSm9pbiksXHJcbiAgICBhZGRDb21tYXMobmV3U3VtbWFyeVtmXS5yZWxpY3MpLFxyXG4gICAgYWRkQ29tbWFzKG5ld1N1bW1hcnlbZl0uY29udHJpYiksXHJcbiAgXSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZEFkdmlzb3JQYWdlcygpIHtcclxuICBPYmplY3Qua2V5cyhuZXdTdW1tYXJ5KS5mb3JFYWNoKGFkZFN0YXRzKTtcclxuICBhZGQoMywgZGlzcGxheUFkdmlzb3IpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmplY3RBZHZpc29yV2Vla2x5KCkgeyAvLyBqUXVlcnlcclxuXHJcbiAgdGltZSgnZ3VpbGRBZHZpc29yLmluamVjdEFkdmlzb3JXZWVrbHknKTtcclxuXHJcbiAgbGlzdCA9IHBDQy5maXJzdEVsZW1lbnRDaGlsZC5maXJzdEVsZW1lbnRDaGlsZFxyXG4gICAgLmxhc3RFbGVtZW50Q2hpbGQuZmlyc3RFbGVtZW50Q2hpbGQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgaWYgKCFsaXN0KSB7cmV0dXJuO31cclxuICBsaXN0LmlubmVySFRNTCA9ICc8c3BhbiBjbGFzcz1cImZzaEN1cnZlQnRuXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiAnICtcclxuICAgICd1cmwoXFwnJyArIGltYWdlU2VydmVyICtcclxuICAgICcvd29ybGQvYWN0aW9uTG9hZGluZ1NwaW5uZXIuZ2lmXFwnKTtcIj48L3NwYW4+JyArXHJcbiAgICAnPHNwYW4gY2xhc3M9XCJmc2hTcGlubmVyTXNnXCI+Jm5ic3A7UmV0cmlldmluZyBkYWlseSBkYXRhIC4uLjwvc3Bhbj4nO1xyXG5cclxuICAkLndoZW4oXHJcbiAgICBnZXRNZW1ickxpc3QoZmFsc2UpXHJcbiAgICAgIC5kb25lKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgbWVtYnJMaXN0ID0gcmVzcG9uc2U7XHJcbiAgICAgIH0pLFxyXG4gICAgZ2V0QWR2aXNvclBhZ2UoMSksXHJcbiAgICBnZXRBZHZpc29yUGFnZSgyKSxcclxuICAgIGdldEFkdmlzb3JQYWdlKDMpLFxyXG4gICAgZ2V0QWR2aXNvclBhZ2UoNCksXHJcbiAgICBnZXRBZHZpc29yUGFnZSg1KSxcclxuICAgIGdldEFkdmlzb3JQYWdlKDYpLFxyXG4gICAgZ2V0QWR2aXNvclBhZ2UoNylcclxuICApLmRvbmUoZnVuY3Rpb24oKSB7XHJcbiAgICBhZGQoMywgYWRkQWR2aXNvclBhZ2VzKTtcclxuICB9KTtcclxuXHJcbiAgdGltZUVuZCgnZ3VpbGRBZHZpc29yLmluamVjdEFkdmlzb3JXZWVrbHknKTtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluamVjdEFkdmlzb3IoKSB7XHJcbiAgaWYgKGNhbGYuc3ViY21kMiA9PT0gJ3dlZWtseScpIHtcclxuICAgIGluamVjdEFkdmlzb3JXZWVrbHkoKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZ2V0TWVtYnJMaXN0KGZhbHNlKS5kb25lKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgIG1lbWJyTGlzdCA9IHJlc3BvbnNlO1xyXG4gICAgICBhZGQoMywgaW5qZWN0QWR2aXNvck5ldyk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtkZWZhdWx0c30gZnJvbSAnLi4vc3VwcG9ydC9kYXRhT2JqJztcclxuaW1wb3J0IGdldEZvcmFnZSBmcm9tICcuLi9hamF4L2dldEZvcmFnZSc7XHJcbmltcG9ydCB7aW50VmFsdWV9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHNldEZvcmFnZSBmcm9tICcuLi9hamF4L3NldEZvcmFnZSc7XHJcbmltcG9ydCB7YXJlbmFGaWx0ZXIsIGRvbnRQb3N0LCB0YWJsZU9wdHN9IGZyb20gJy4vYXNzZXRzJztcclxuaW1wb3J0IHt0aW1lLCB0aW1lRW5kfSBmcm9tICcuLi9zdXBwb3J0L2RlYnVnJztcclxuXHJcbnZhciB0YWJzO1xyXG52YXIgdGhlVGFibGVzO1xyXG52YXIgb3B0cztcclxudmFyIG9sZElkcztcclxuXHJcbmZ1bmN0aW9uIGNoYW5nZUx2bHMoKSB7IC8vIGpRdWVyeVxyXG4gIHZhciBtaW5MdmwgPSBwYXJzZUludCgkKCcjZnNoTWluTHZsJykudmFsKCksIDEwKTtcclxuICB2YXIgbWF4THZsID0gcGFyc2VJbnQoJCgnI2ZzaE1heEx2bCcpLnZhbCgpLCAxMCk7XHJcbiAgaWYgKCFpc05hTihtaW5MdmwpICYmICFpc05hTihtYXhMdmwpKSB7XHJcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcclxuICAgIG9wdHMubWluTHZsID0gbWluTHZsO1xyXG4gICAgb3B0cy5tYXhMdmwgPSBtYXhMdmw7XHJcbiAgICBzZXRGb3JhZ2UoJ2ZzaF9hcmVuYScsIG9wdHMpO1xyXG4gICAgJCgnI2FyZW5hVHlwZVRhYnMgdGFibGVbd2lkdGg9XCI2MzVcIl0nKS5EYXRhVGFibGUoKS5kcmF3KCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldEx2bHMoKSB7IC8vIGpRdWVyeVxyXG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xyXG4gIG9wdHMubWluTHZsID0gZGVmYXVsdHMuYXJlbmFNaW5Mdmw7XHJcbiAgb3B0cy5tYXhMdmwgPSBkZWZhdWx0cy5hcmVuYU1heEx2bDtcclxuICBzZXRGb3JhZ2UoJ2ZzaF9hcmVuYScsIG9wdHMpO1xyXG4gICQoJyNmc2hNaW5MdmwnKS52YWwob3B0cy5taW5MdmwpO1xyXG4gICQoJyNmc2hNYXhMdmwnKS52YWwob3B0cy5tYXhMdmwpO1xyXG4gICQoJyNhcmVuYVR5cGVUYWJzIHRhYmxlW3dpZHRoPVwiNjM1XCJdJykuRGF0YVRhYmxlKCkuZHJhdygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlTW92ZXMoZXZ0KSB7IC8vIGpRdWVyeVxyXG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xyXG4gIG9wdHMuaGlkZU1vdmVzID0gZXZ0LnRhcmdldC5jaGVja2VkO1xyXG4gIHNldEZvcmFnZSgnZnNoX2FyZW5hJywgb3B0cyk7XHJcbiAgJCgnLm1vdmVNYXgnKS50b2dnbGUoIWV2dC50YXJnZXQuY2hlY2tlZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNvcnRIYW5kbGVyKGV2dCkgeyAvLyBqUXVlcnlcclxuICB2YXIgc2VsZiA9ICQoZXZ0LnRhcmdldCkuY2xvc2VzdCgndGQnKTtcclxuICB2YXIgdGFibGUgPSBzZWxmLmNsb3Nlc3QoJ3RhYmxlJykuRGF0YVRhYmxlKCk7XHJcbiAgdmFyIG15Q29sID0gc2VsZi5pbmRleCgpO1xyXG4gIHZhciBjbGFzc2VzID0gc2VsZi5hdHRyKCdjbGFzcycpO1xyXG4gIHZhciB0ZXN0ID0gL3NvcnRpbmcoW15cXHNdKykvLmV4ZWMoY2xhc3Nlcyk7XHJcbiAgdmFyIHNvcnRPcmRlciA9ICdkZXNjJztcclxuICBpZiAodGVzdCAmJiB0ZXN0WzFdID09PSAnX2Rlc2MnKSB7c29ydE9yZGVyID0gJ2FzYyc7fVxyXG4gIGlmIChteUNvbCAhPT0gMykge1xyXG4gICAgdGFibGUub3JkZXIoWzMsICdhc2MnXSwgW215Q29sLCBzb3J0T3JkZXJdKS5kcmF3KCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRhYmxlLm9yZGVyKFszLCBzb3J0T3JkZXJdKS5kcmF3KCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlTW92ZXNDaGVja2JveChhVGFibGUpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIGZzaEhpZGVNb3ZlcyA9ICQoJyNmc2hIaWRlTW92ZXMnLCBhVGFibGUpO1xyXG4gIGlmIChvcHRzICYmICdoaWRlTW92ZXMnIGluIG9wdHMpIHtcclxuICAgIGZzaEhpZGVNb3Zlcy5wcm9wKCdjaGVja2VkJywgb3B0cy5oaWRlTW92ZXMpO1xyXG4gICAgJCgnLm1vdmVNYXgnKS50b2dnbGUoIW9wdHMuaGlkZU1vdmVzKTtcclxuICB9XHJcbiAgZnNoSGlkZU1vdmVzLmNsaWNrKGhpZGVNb3Zlcyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1pbkx2bFZhbHVlKGFUYWJsZSkgeyAvLyBqUXVlcnlcclxuICB2YXIgZnNoTWluTHZsID0gJCgnI2ZzaE1pbkx2bCcsIGFUYWJsZSk7XHJcbiAgaWYgKG9wdHMgJiYgJ21pbkx2bCcgaW4gb3B0cykge1xyXG4gICAgZnNoTWluTHZsLnZhbChvcHRzLm1pbkx2bCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGZzaE1pbkx2bC52YWwoZGVmYXVsdHMuYXJlbmFNaW5MdmwpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gbWF4THZsVmFsdWUoYVRhYmxlKSB7IC8vIGpRdWVyeVxyXG4gIHZhciBmc2hNYXhMdmwgPSAkKCcjZnNoTWF4THZsJywgYVRhYmxlKTtcclxuICBpZiAob3B0cyAmJiAnbWF4THZsJyBpbiBvcHRzKSB7XHJcbiAgICBmc2hNYXhMdmwudmFsKG9wdHMubWF4THZsKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZnNoTWF4THZsLnZhbChkZWZhdWx0cy5hcmVuYU1heEx2bCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBmaWx0ZXJIZWFkZXIoKSB7IC8vIGpRdWVyeVxyXG4gIHZhciB0aGVSb3cgPSAkKCcjcENDID4gdGFibGUgPiB0Ym9keSA+IHRyOm50aC1jaGlsZCg3KScpO1xyXG4gIHRoZVJvdy5jbG9uZSgpLmluc2VydEJlZm9yZSh0aGVSb3cpLmZpbmQoJ3RkJykuYXR0cignaGVpZ2h0JywgJzInKTtcclxuICB0aGVSb3cuY2xvbmUoKS5pbnNlcnRBZnRlcih0aGVSb3cpLmZpbmQoJ3RkJykuYXR0cignaGVpZ2h0JywgJzEnKTtcclxuICB2YXIgYVRhYmxlID0gJChhcmVuYUZpbHRlcik7XHJcbiAgaGlkZU1vdmVzQ2hlY2tib3goYVRhYmxlKTtcclxuICBtaW5MdmxWYWx1ZShhVGFibGUpO1xyXG4gIG1heEx2bFZhbHVlKGFUYWJsZSk7XHJcbiAgJCgnI2ZzaE1pbkx2bCwgI2ZzaE1heEx2bCcsIGFUYWJsZSkua2V5dXAoY2hhbmdlTHZscyk7XHJcbiAgJCgnI2ZzaFJlc2V0JywgYVRhYmxlKS5jbGljayhyZXNldEx2bHMpO1xyXG4gICQoJ3RkJywgdGhlUm93KS5hcHBlbmQoYVRhYmxlKTtcclxufVxyXG5cclxudmFyIGRvTHZsRmlsdGVyID0gW1xyXG4gIGZ1bmN0aW9uKG1pbikge3JldHVybiAhbWluO30sXHJcbiAgZnVuY3Rpb24obWluLCBtYXgpIHtyZXR1cm4gIW1heDt9LFxyXG4gIGZ1bmN0aW9uKG1pbiwgbWF4KSB7cmV0dXJuIGlzTmFOKG1pbikgJiYgaXNOYU4obWF4KTt9LFxyXG4gIGZ1bmN0aW9uKG1pbiwgbWF4LCBsZXZlbCkge3JldHVybiBpc05hTihtaW4pICYmIGxldmVsIDw9IG1heDt9LFxyXG4gIGZ1bmN0aW9uKG1pbiwgbWF4LCBsZXZlbCkge3JldHVybiBtaW4gPD0gbGV2ZWwgJiYgaXNOYU4obWF4KTt9LFxyXG4gIGZ1bmN0aW9uKG1pbiwgbWF4LCBsZXZlbCkge3JldHVybiBtaW4gPD0gbGV2ZWwgJiYgbGV2ZWwgPD0gbWF4O31cclxuXTtcclxuXHJcbmZ1bmN0aW9uIGhhek9wdHMoX3NldHRpbmdzLCBkYXRhKSB7XHJcbiAgdmFyIG1pbiA9IG9wdHMubWluTHZsO1xyXG4gIHZhciBtYXggPSBvcHRzLm1heEx2bDtcclxuICB2YXIgbGV2ZWwgPSBpbnRWYWx1ZShkYXRhWzddKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRvTHZsRmlsdGVyLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICBpZiAoZG9MdmxGaWx0ZXJbaV0obWluLCBtYXgsIGxldmVsKSkge3JldHVybiB0cnVlO31cclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsdmxGaWx0ZXIoX3NldHRpbmdzLCBkYXRhKSB7XHJcbiAgaWYgKG9wdHMpIHtyZXR1cm4gaGF6T3B0cyhfc2V0dGluZ3MsIGRhdGEpO31cclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGxheWVycyhjZWxsKSB7IC8vIGpRdWVyeVxyXG4gIHZhciBtYXRjaGVzID0gLyhcXGQrKVxcc1xcL1xccyhcXGQrKS8uZXhlYyhjZWxsLnRleHQoKSk7XHJcbiAgaWYgKG1hdGNoZXMpIHtcclxuICAgIGNlbGwuYXR0cignZGF0YS1vcmRlcicsIG1hdGNoZXNbMl0gKiAxMDAwICsgTnVtYmVyKG1hdGNoZXNbMV0pKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJvb2xEYXRhKGNlbGwpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIG1hdGNoZXMgPSAvKFxcZClcXC5naWYvLmV4ZWMoJCgnaW1nJywgY2VsbCkuYXR0cignc3JjJykpO1xyXG4gIGlmIChtYXRjaGVzKSB7Y2VsbC5hdHRyKCdkYXRhLW9yZGVyJywgbWF0Y2hlc1sxXSk7fVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYXpNYXhNb3ZlcyhtYXRjaGVzLCByb3cpIHsgLy8galF1ZXJ5XHJcbiAgaWYgKG9wdHMubW92ZXNbbWF0Y2hlc1sxXV0gJiZcclxuICAgIG9wdHMubW92ZXNbbWF0Y2hlc1sxXV0uY291bnQgPT09IDMpIHtcclxuICAgIHJvdy5hZGRDbGFzcygnbW92ZU1heCcpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gbWF4TW92ZXMoY2VsbCwgcm93KSB7IC8vIGpRdWVyeVxyXG4gIGlmIChvcHRzICYmIG9wdHMubW92ZXMpIHtcclxuICAgIHZhciBtYXRjaGVzID0gL1xcL3B2cFxcLyhcXGQrKVxcLmdpZi8uZXhlYygkKCdpbWcnLCBjZWxsKS5hdHRyKCdzcmMnKSk7XHJcbiAgICBpZiAobWF0Y2hlcykge1xyXG4gICAgICBoYXpNYXhNb3ZlcyhtYXRjaGVzLCByb3cpO1xyXG4gICAgICBjZWxsLmF0dHIoJ2RhdGEtb3JkZXInLCBtYXRjaGVzWzFdKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJld2FyZChjZWxsKSB7IC8vIGpRdWVyeVxyXG4gIGlmIChjZWxsLmNoaWxkcmVuKCd0YWJsZScpLmxlbmd0aCAhPT0gMSkge3JldHVybjt9XHJcbiAgY2VsbC5hdHRyKCdkYXRhLW9yZGVyJywgY2VsbC5maW5kKCd0ZCcpLmZpcnN0KCkudGV4dCgpLnJlcGxhY2UoL1ssXFxzXS9nLCAnJykpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvcmRlckRhdGEoaSwgZSkgeyAvLyBqUXVlcnlcclxuXHJcbiAgdmFyIHJvdyA9ICQoZSk7XHJcbiAgdmFyIHRoZUNlbGxzID0gcm93LmNoaWxkcmVuKCk7XHJcblxyXG4gIHZhciBjZWxsID0gdGhlQ2VsbHMuZXEoMCk7XHJcbiAgdmFyIG1hdGNoZXMgPSAvI1xccyhcXGQrKS8uZXhlYyhjZWxsLnRleHQoKSk7XHJcbiAgaWYgKG1hdGNoZXMgJiYgb3B0cyAmJiBvcHRzLmlkKSB7XHJcbiAgICBvcHRzLmlkW21hdGNoZXNbMV1dID0gbWF0Y2hlc1sxXTtcclxuICAgIGlmIChvbGRJZHMgJiYgIW9sZElkc1ttYXRjaGVzWzFdXSkge1xyXG4gICAgICByb3cuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgJyNGNUYyOTgnKTtcclxuICAgICAgcm93LmZpbmQoJ3RyJykuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgJyNGNUYyOTgnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHBsYXllcnModGhlQ2VsbHMuZXEoMSkpO1xyXG4gIGNlbGwgPSB0aGVDZWxscy5lcSgyKTtcclxuICBjZWxsLmF0dHIoJ2RhdGEtb3JkZXInLCAkKCd0ZCcsIGNlbGwpLmZpcnN0KCkudGV4dCgpLnJlcGxhY2UoL1ssXFxzXS9nLCAnJykpO1xyXG4gIGJvb2xEYXRhKHRoZUNlbGxzLmVxKDQpKTtcclxuICBib29sRGF0YSh0aGVDZWxscy5lcSg1KSk7XHJcbiAgYm9vbERhdGEodGhlQ2VsbHMuZXEoNikpO1xyXG4gIG1heE1vdmVzKHRoZUNlbGxzLmVxKDgpLCByb3cpO1xyXG4gIHJld2FyZCh0aGVDZWxscy5lcSg4KSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiByZWRvSGVhZChpLCBlKSB7IC8vIGpRdWVyeVxyXG4gIHZhciBmaXJzdFJvdyA9ICQoJ3RyJywgZSkuZmlyc3QoKTtcclxuICAkKCdhJywgZmlyc3RSb3cpLmNvbnRlbnRzKCkudW53cmFwKCk7XHJcbiAgJChlKS5wcmVwZW5kKCQoJzx0aGVhZC8+JykuYXBwZW5kKGZpcnN0Um93KSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb2Nlc3MoYXJlbmEpIHsgLy8galF1ZXJ5XHJcblxyXG4gIHRpbWUoJ2FyZW5hLnByb2Nlc3MnKTtcclxuXHJcbiAgdGhlVGFibGVzLmVhY2gocmVkb0hlYWQpO1xyXG4gIG9wdHMgPSBhcmVuYSB8fCB7fTtcclxuICBvbGRJZHMgPSBvcHRzLmlkIHx8IHt9O1xyXG4gIG9wdHMuaWQgPSB7fTtcclxuICB2YXIgbXlSb3dzID0gdGhlVGFibGVzLmNoaWxkcmVuKCd0Ym9keScpLmNoaWxkcmVuKCd0cicpO1xyXG4gIG15Um93cy5lYWNoKG9yZGVyRGF0YSk7XHJcbiAgZmlsdGVySGVhZGVyKCk7XHJcbiAgc2V0Rm9yYWdlKCdmc2hfYXJlbmEnLCBvcHRzKTtcclxuICAkLmZuLmRhdGFUYWJsZS5leHQuc2VhcmNoLnB1c2gobHZsRmlsdGVyKTtcclxuICB0aGVUYWJsZXMuRGF0YVRhYmxlKHRhYmxlT3B0cyk7XHJcbiAgJCgndGQuc29ydGluZywgdGQuc29ydGluZ19hc2MsIHRkLnNvcnRpbmdfZGVzYycsIHRhYnMpLm9mZignY2xpY2snKTtcclxuICAkKCdkaXYuZGF0YVRhYmxlc19maWx0ZXInKS5oaWRlKCk7XHJcbiAgdGFicy5vbignY2xpY2snLCAndGQuc29ydGluZywgdGQuc29ydGluZ19hc2MsIHRkLnNvcnRpbmdfZGVzYycsIHNvcnRIYW5kbGVyKTtcclxuICB0YWJzLm9uKCdjbGljaycsICdpbnB1dC5jdXN0b21idXR0b25bdHlwZT1cInN1Ym1pdFwiXScsIGRvbnRQb3N0KTtcclxuXHJcbiAgdGltZUVuZCgnYXJlbmEucHJvY2VzcycpO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0QXJlbmEoKSB7IC8vIGpRdWVyeVxyXG4gIHRhYnMgPSAkKCcjYXJlbmFUeXBlVGFicycpO1xyXG4gIGlmICh0YWJzLmxlbmd0aCAhPT0gMSkge3JldHVybjt9IC8vIEpvaW4gZXJyb3Igc2NyZWVuXHJcbiAgdGhlVGFibGVzID0gJCgndGFibGVbd2lkdGg9XCI2MzVcIl0nLCB0YWJzKTtcclxuICBnZXRGb3JhZ2UoJ2ZzaF9hcmVuYScpLmRvbmUocHJvY2Vzcyk7XHJcbn1cclxuIiwiaW1wb3J0IGNhbGxBcHAgZnJvbSAnLi4vY2FsbEFwcCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidXlpdGVtKGl0ZW0pIHtcclxuICByZXR1cm4gY2FsbEFwcCh7XHJcbiAgICBjbWQ6ICdwb3Rpb25iYXphYXInLFxyXG4gICAgc3ViY21kOiAnYnV5aXRlbScsXHJcbiAgICBpdGVtX2lkOiBpdGVtXHJcbiAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IGJ1eWl0ZW0gZnJvbSAnLi9hcHAvcG90aW9uYmF6YWFyL2J1eWl0ZW0nO1xyXG5pbXBvcnQge3BDQ30gZnJvbSAnLi9zdXBwb3J0L2xheW91dCc7XHJcbmltcG9ydCB7dGVzdFF1YW50fSBmcm9tICcuL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbnZhciBJdGVtSWQ7XHJcbnZhciBiYXphYXJUYWJsZSA9XHJcbiAgJzx0YWJsZSBpZD1cImZzaEJhemFhclwiPjx0cj48dGQgY29sc3Bhbj1cIjVcIj5TZWxlY3QgYW4gaXRlbSB0byBxdWljay1idXk6JyArXHJcbiAgJzwvdGQ+PC90cj48dHI+PHRkIGNvbHNwYW49XCI1XCI+U2VsZWN0IGhvdyBtYW55IHRvIHF1aWNrLWJ1eTwvdGQ+PC90cj4nICtcclxuICAnPHRyPjx0ZCBjb2xzcGFuPVwiNVwiPjxpbnB1dCBpZD1cImJ1eV9hbW91bnRcIiBjbGFzcz1cImZzaE51bWJlcklucHV0XCIgJyArXHJcbiAgJ3R5cGU9XCJudW1iZXJcIiBtaW49XCIwXCIgbWF4PVwiOTlcIiB2YWx1ZT1cIjFcIj48L3RkPjwvdHI+PHRyPjx0ZD5AMEA8L3RkPicgK1xyXG4gICc8dGQ+QDFAPC90ZD48dGQ+QDJAPC90ZD48dGQ+QDNAPC90ZD48dGQ+QDRAPC90ZD48L3RyPjx0cj48dGQ+QDVAPC90ZD4nICtcclxuICAnPHRkPkA2QDwvdGQ+PHRkPkA3QDwvdGQ+PHRkPkA4QDwvdGQ+PHRkPkA5QDwvdGQ+PC90cj48dHI+JyArXHJcbiAgJzx0ZCBjb2xzcGFuPVwiM1wiPlNlbGVjdGVkIGl0ZW06PC90ZD48dGQgaWQ9XCJzZWxlY3RlZEl0ZW1cIiBjb2xzcGFuPVwiMlwiPicgK1xyXG4gICc8L3RkPjwvdHI+PHRyPjx0ZCBjb2xzcGFuPVwiNVwiPicgK1xyXG4gICc8c3BhbiBpZD1cImZzaEJhemFhcldhcm5pbmdcIiBjbGFzcz1cImZzaEhpZGVcIj4nICtcclxuICAnV2FybmluZzo8YnI+cHJlc3NpbmcgWzxzcGFuIGlkPVwiZnNoQnV5XCIgY2xhc3M9XCJmc2hMaW5rXCI+VGhpcyBidXR0b24nICtcclxuICAnPC9zcGFuPl0gbm93IHdpbGwgYnV5IHRoZSA8c3BhbiBpZD1cInF1YW50aXR5XCI+MTwvc3Bhbj4gaXRlbShzKSBXSVRIT1VUICcgK1xyXG4gICdjb25maXJtYXRpb24hPC9zcGFuPjwvdGQ+PC90cj48dHI+PHRkIGlkPVwiYnV5X3Jlc3VsdFwiIGNvbHNwYW49XCI1XCI+PC90ZD4nICtcclxuICAnPC90cj48L3RhYmxlPic7XHJcbnZhciBiYXphYXJJdGVtID1cclxuICAnPHNwYW4gY2xhc3M9XCJiYXphYXJCdXR0b24gdGlwLWR5bmFtaWNcIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6ICcgK1xyXG4gICd1cmwoXFwnQHNyY0BcXCcpO1wiIGl0ZW1pZD1cIkBpdGVtaWRAXCIgZGF0YS10aXBwZWQ9XCJAdGlwcGVkQFwiPjwvc3Bhbj4nO1xyXG5cclxuZnVuY3Rpb24gdGVzdEJ1eUFtb3VudCgpIHtcclxuICByZXR1cm4gdGVzdFF1YW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidXlfYW1vdW50JykudmFsdWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZWxlY3QoZXZ0KSB7XHJcbiAgdmFyIHRhcmdldCA9IGV2dC50YXJnZXQ7XHJcbiAgaWYgKCF0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdiYXphYXJCdXR0b24nKSkge3JldHVybjt9XHJcbiAgdmFyIHRoZVZhbHVlID0gdGVzdEJ1eUFtb3VudCgpO1xyXG4gIGlmICghdGhlVmFsdWUpIHtyZXR1cm47fVxyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWFudGl0eScpLnRleHRDb250ZW50ID0gdGhlVmFsdWU7XHJcbiAgSXRlbUlkID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnaXRlbWlkJyk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZzaEJhemFhcldhcm5pbmcnKS5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XHJcbiAgdmFyIGR1cE5vZGUgPSB0YXJnZXQuY2xvbmVOb2RlKGZhbHNlKTtcclxuICBkdXBOb2RlLmNsYXNzTmFtZSA9ICdiYXphYXJTZWxlY3RlZCB0aXAtZHluYW1pYyc7XHJcbiAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlbGVjdGVkSXRlbScpO1xyXG4gIHNlbGVjdGVkLmlubmVySFRNTCA9ICcnO1xyXG4gIHNlbGVjdGVkLmFwcGVuZENoaWxkKGR1cE5vZGUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBxdWFudGl0eSgpIHtcclxuICB2YXIgdGhlVmFsdWUgPSB0ZXN0QnV5QW1vdW50KCk7XHJcbiAgaWYgKHRoZVZhbHVlKSB7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVhbnRpdHknKS50ZXh0Q29udGVudCA9IHRoZVZhbHVlO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZG9uZShqc29uKSB7XHJcbiAgaWYgKGpzb24uc3VjY2Vzcykge1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1eV9yZXN1bHQnKS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsXHJcbiAgICAgICc8YnI+WW91IHB1cmNoYXNlZCB0aGUgaXRlbSEnKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJ1eSgpIHsgLy8galF1ZXJ5XHJcbiAgaWYgKCFJdGVtSWQpIHtyZXR1cm47fVxyXG4gIHZhciBidXlBbW91bnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVhbnRpdHknKS50ZXh0Q29udGVudDtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV5X3Jlc3VsdCcpLnRleHRDb250ZW50ID1cclxuICAgICdCdXlpbmcgJyArIGJ1eUFtb3VudCArICcgaXRlbXMnO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnV5QW1vdW50OyBpICs9IDEpIHtcclxuICAgIGJ1eWl0ZW0oSXRlbUlkKS5kb25lKGRvbmUpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0QmF6YWFyKCkgeyAvLyBUT0RPIHN0b3AgdXNpbmcgZ2V0RWxlbWVudEJ5SWRcclxuICB2YXIgcGJJbWcgPSBwQ0MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ0lNRycpWzBdO1xyXG4gIHBiSW1nLmNsYXNzTmFtZSA9ICdmc2hGbG9hdExlZnQnO1xyXG4gIHZhciBwb3Rpb25zID0gcENDLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdBJyk7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChwb3Rpb25zLCBmdW5jdGlvbihlbCwgaSkge1xyXG4gICAgdmFyIGl0ZW0gPSBlbC5maXJzdEVsZW1lbnRDaGlsZDtcclxuICAgIHZhciB0aXBwZWQgPSBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS10aXBwZWQnKTtcclxuICAgIGJhemFhclRhYmxlID0gYmF6YWFyVGFibGVcclxuICAgICAgLnJlcGxhY2UoJ0AnICsgaSArICdAJywgYmF6YWFySXRlbSlcclxuICAgICAgLnJlcGxhY2UoJ0BzcmNAJywgaXRlbS5nZXRBdHRyaWJ1dGUoJ3NyYycpKVxyXG4gICAgICAucmVwbGFjZSgnQGl0ZW1pZEAnLCB0aXBwZWQubWF0Y2goL1xcP2l0ZW1faWQ9KFxcZCspLylbMV0pXHJcbiAgICAgIC5yZXBsYWNlKCdAdGlwcGVkQCcsIHRpcHBlZCk7XHJcbiAgfSk7XHJcbiAgYmF6YWFyVGFibGUgPSBiYXphYXJUYWJsZS5yZXBsYWNlKC9AXFxkQC9nLCAnJyk7XHJcbiAgcGJJbWcucGFyZW50Tm9kZS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGJhemFhclRhYmxlKTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnNoQmF6YWFyJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzZWxlY3QpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidXlfYW1vdW50JykuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBxdWFudGl0eSk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZzaEJ1eScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYnV5KTtcclxufVxyXG4iLCJpbXBvcnQge2dldFZhbHVlfSBmcm9tICcuLi8uLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCB7cENDLCBwbGF5ZXJOYW1lfSBmcm9tICcuLi8uLi9zdXBwb3J0L2xheW91dCc7XHJcblxyXG52YXIgYnVmZkNvc3QgPSB7Y291bnQ6IDAsIGJ1ZmZzOiB7fX07XHJcbnZhciBudW1SRSA9IC9bXmEtekEtWjAtOS4sK1xcLSBdL2c7XHJcbnZhciBwcmljZVJFID1cclxuICAvKFsrLV17MCwxfVsuXFxkXSsgKmspfChbKy1dezAsMX1bLlxcZF0rICpmc3ApfChbKy1dezAsMX1bLlxcZF0rICpzdGFtKS87XHJcblxyXG5mdW5jdGlvbiBnZXRUYXJnZXRQbGF5ZXIoKSB7XHJcbiAgdmFyIHRhcmdldFBsYXllciA9IHBDQ1xyXG4gICAgLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoMScpO1xyXG4gIGlmICh0YXJnZXRQbGF5ZXIubGVuZ3RoICE9PSAwKSB7XHJcbiAgICB0YXJnZXRQbGF5ZXIgPSB0YXJnZXRQbGF5ZXJbMF0udGV4dENvbnRlbnQ7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRhcmdldFBsYXllciA9IHBsYXllck5hbWUoKTtcclxuICB9XHJcbiAgcmV0dXJuIHRhcmdldFBsYXllcjtcclxufVxyXG5cclxuZnVuY3Rpb24gZm9ybWF0QnVmZnNUb0J1eSgpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIHRhcmdldFBsYXllciA9IGdldFRhcmdldFBsYXllcigpO1xyXG4gIHZhciBidWZmc1RvQnV5ID0gT2JqZWN0LmtleXMoYnVmZkNvc3QuYnVmZnMpLmpvaW4oJywgJyk7XHJcbiAgdmFyIGdyZWV0aW5nVGV4dCA9IGdldFZhbHVlKCdidXlCdWZmc0dyZWV0aW5nJykudHJpbSgpO1xyXG4gIHZhciBoYXNCdWZmVGFnID0gZ3JlZXRpbmdUZXh0LmluZGV4T2YoJ3tidWZmc30nKSAhPT0gLTE7XHJcbiAgdmFyIGhhc0Nvc3RUYWcgPSBncmVldGluZ1RleHQuaW5kZXhPZigne2Nvc3R9JykgIT09IC0xO1xyXG4gIGdyZWV0aW5nVGV4dCA9IGdyZWV0aW5nVGV4dC5yZXBsYWNlKC97cGxheWVybmFtZX0vZywgdGFyZ2V0UGxheWVyKTtcclxuICBpZiAoIWhhc0J1ZmZUYWcpIHtcclxuICAgIGdyZWV0aW5nVGV4dCArPSAnICcgKyBidWZmc1RvQnV5O1xyXG4gIH0gZWxzZSBpZiAoIWhhc0Nvc3RUYWcpIHtcclxuICAgIGdyZWV0aW5nVGV4dCA9IGdyZWV0aW5nVGV4dFxyXG4gICAgICAucmVwbGFjZSgve2J1ZmZzfS9nLCAnYH4nICsgYnVmZnNUb0J1eSArICd+YCcpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBncmVldGluZ1RleHQgPSBncmVldGluZ1RleHRcclxuICAgICAgLnJlcGxhY2UoL3tidWZmc30vZywgJ2B+JyArIGJ1ZmZzVG9CdXkgKyAnfmAnKVxyXG4gICAgICAucmVwbGFjZSgve2Nvc3R9L2csIGJ1ZmZDb3N0LmJ1ZmZDb3N0VG90YWxUZXh0KTtcclxuICB9XHJcbiAgd2luZG93Lm9wZW5RdWlja01zZ0RpYWxvZyh0YXJnZXRQbGF5ZXIsIGdyZWV0aW5nVGV4dCwgJycpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRCdWZmc1RvQnV5KCkgeyAvLyBMZWdhY3lcclxuICBpZiAoYnVmZkNvc3QuY291bnQgPiAwKSB7Zm9ybWF0QnVmZnNUb0J1eSgpO31cclxufVxyXG5cclxudmFyIGNvc3RGb3JtYXR0ZXIgPSBbXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbih0b3RhbCkge1xyXG4gICAgICByZXR1cm4gdG90YWwuZnNwID4gMDtcclxuICAgIH0sXHJcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKHRvdGFsKSB7XHJcbiAgICAgIHJldHVybiBTdHJpbmcoTWF0aC5yb3VuZCh0b3RhbC5mc3AgKiAxMDApIC8gMTAwKSArICcgRlNQJztcclxuICAgIH1cclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24odG90YWwpIHtcclxuICAgICAgcmV0dXJuIHRvdGFsLmZzcCA+IDAgJiYgdG90YWwuayA+IDA7XHJcbiAgICB9LFxyXG4gICAgcmVzdWx0OiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuICcgYW5kICc7XHJcbiAgICB9XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKHRvdGFsKSB7XHJcbiAgICAgIHJldHVybiB0b3RhbC5rID4gMDtcclxuICAgIH0sXHJcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKHRvdGFsKSB7XHJcbiAgICAgIHJldHVybiB0b3RhbC5rICsgJyBrJztcclxuICAgIH1cclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24odG90YWwpIHtcclxuICAgICAgcmV0dXJuIHRvdGFsLnN0YW0gPiAwICYmICh0b3RhbC5mc3AgPiAwIHx8IHRvdGFsLmsgPiAwKTtcclxuICAgIH0sXHJcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gJyBhbmQgJztcclxuICAgIH1cclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24odG90YWwpIHtcclxuICAgICAgcmV0dXJuIHRvdGFsLnN0YW0gPiAwO1xyXG4gICAgfSxcclxuICAgIHJlc3VsdDogZnVuY3Rpb24odG90YWwpIHtcclxuICAgICAgcmV0dXJuIHRvdGFsLnN0YW0gKyAnIFN0YW0oJyArXHJcbiAgICAgICAgU3RyaW5nKE1hdGgucm91bmQodG90YWwuc3RhbSAvIDI1ICogMTApIC8gMTApICsgJ2ZzcCknO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbih0b3RhbCkge1xyXG4gICAgICByZXR1cm4gdG90YWwudW5rbm93biA+IDA7XHJcbiAgICB9LFxyXG4gICAgcmVzdWx0OiBmdW5jdGlvbih0b3RhbCkge1xyXG4gICAgICByZXR1cm4gJyAoJyArIHRvdGFsLnVua25vd24gKyAnIGJ1ZmYocykgd2l0aCB1bmtub3duIGNvc3QpJztcclxuICAgIH1cclxuICB9XHJcbl07XHJcblxyXG5mdW5jdGlvbiBmb3JtYXRDb3N0KHRvdGFsKSB7XHJcbiAgcmV0dXJuIGNvc3RGb3JtYXR0ZXIucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGVsKSB7XHJcbiAgICB2YXIgcmV0ID0gcHJldjtcclxuICAgIGlmIChlbC5jb25kaXRpb24odG90YWwpKSB7XHJcbiAgICAgIHJldCArPSBlbC5yZXN1bHQodG90YWwpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9LCAnJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhekJ1ZmZzKCkgeyAvLyBMZWdhY3lcclxuICB2YXIgdG90YWwgPSB7azogMCwgZnNwOiAwLCBzdGFtOiAwLCB1bmtub3duOiAwfTtcclxuICB2YXIgaHRtbCA9ICdUaGlzIGlzIGFuIGVzdGltYXRlZCBjb3N0IGJhc2VkIG9uIGhvdyB0aGUgc2NyaXB0IGZpbmRzICcgK1xyXG4gICAgJ3RoZSBjb3N0IGFzc29jaWF0ZWQgd2l0aCBidWZmcyBmcm9tIHZpZXdpbmcgYmlvLicgK1xyXG4gICAgJ0l0IGNhbiBiZSBpbmNvcnJlY3QsIHBsZWFzZSB1c2Ugd2l0aCBkaXNjcmV0aW9uLjxicj48aHI+JyArXHJcbiAgICAnPHRhYmxlIGJvcmRlcj0wPic7XHJcblxyXG4gIE9iamVjdC5rZXlzKGJ1ZmZDb3N0LmJ1ZmZzKS5mb3JFYWNoKGZ1bmN0aW9uKGJ1ZmYpIHtcclxuICAgIHRvdGFsW2J1ZmZDb3N0LmJ1ZmZzW2J1ZmZdWzFdXSArPSBidWZmQ29zdC5idWZmc1tidWZmXVswXTtcclxuICAgIGh0bWwgKz0gJzx0cj48dGQ+JyArIGJ1ZmYgKyAnPC90ZD48dGQ+OiAnICsgYnVmZkNvc3QuYnVmZnNbYnVmZl1bMF0gK1xyXG4gICAgICBidWZmQ29zdC5idWZmc1tidWZmXVsxXSArICc8L3RkPjwvdHI+JztcclxuICB9KTtcclxuXHJcbiAgdmFyIHRvdGFsVGV4dCA9IGZvcm1hdENvc3QodG90YWwpO1xyXG5cclxuICBodG1sICs9ICc8L3RhYmxlPjxiPlRvdGFsOiAnICsgdG90YWxUZXh0ICsgJzwvYj4nO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidWZmQ29zdCcpLmlubmVySFRNTCA9ICc8YnIvPjxzcGFuICcgK1xyXG4gICAgJ2NsYXNzPVwidGlwLXN0YXRpY1wiIGRhdGEtdGlwcGVkPVwiJyArIGh0bWwgKyAnXCI+RXN0aW1hdGVkIENvc3Q6IDxiPicgK1xyXG4gICAgdG90YWxUZXh0ICsgJzwvYj48L3NwYW4+JztcclxuICBidWZmQ29zdC5idWZmQ29zdFRvdGFsVGV4dCA9IHRvdGFsVGV4dDtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlQnVmZkNvc3QoKSB7IC8vIExlZ2FjeVxyXG4gIGlmIChidWZmQ29zdC5jb3VudCA+IDApIHtcclxuICAgIGhhekJ1ZmZzKCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidWZmQ29zdCcpLmlubmVySFRNTCA9ICcnO1xyXG4gICAgYnVmZkNvc3QuYnVmZkNvc3RUb3RhbFRleHQgPSAnJztcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByaWNlVW5pdChwcmljZSkge1xyXG4gIGlmIChwcmljZVswXS5pbmRleE9mKCdrJykgPiAwKSB7XHJcbiAgICByZXR1cm4gJ2snO1xyXG4gIH1cclxuICBpZiAocHJpY2VbMF0uaW5kZXhPZignZicpID4gMCkge1xyXG4gICAgcmV0dXJuICdmc3AnO1xyXG4gIH1cclxuICByZXR1cm4gJ3N0YW0nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcmljZUJlZm9yZU5hbWUoYnVmZk5hbWVOb2RlLCBwcmljZSkge1xyXG4gIGlmICghcHJpY2UpIHsgLy8gc29tZSBwbGF5ZXJzIGhhdmUgcHJpY2VzIEJFRk9SRSB0aGUgYnVmZiBuYW1lc1xyXG4gICAgdmFyIG5ld3RleHQ7XHJcbiAgICB2YXIgdGV4dCA9ICcnO1xyXG4gICAgdmFyIG5vZGUgPSBidWZmTmFtZU5vZGU7XHJcbiAgICB3aGlsZSAobm9kZSAmJiBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdicicpIHtcclxuICAgICAgbmV3dGV4dCA9IG5vZGUudGV4dENvbnRlbnQ7XHJcbiAgICAgIG5vZGUgPSBub2RlLnByZXZpb3VzU2libGluZztcclxuICAgICAgdGV4dCA9IG5ld3RleHQgKyB0ZXh0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRleHQucmVwbGFjZShudW1SRSwgJycpLnRvTG93ZXJDYXNlKCkubWF0Y2gocHJpY2VSRSk7XHJcbiAgfVxyXG4gIHJldHVybiBwcmljZTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QnVmZkNvc3QoYnVmZk5hbWVOb2RlKSB7XHJcbiAgdmFyIG5vZGUgPSBidWZmTmFtZU5vZGU7XHJcbiAgdmFyIGJ1ZmZOYW1lID0gbm9kZS50ZXh0Q29udGVudDtcclxuICB2YXIgbmV3dGV4dDtcclxuICB2YXIgdGV4dCA9ICcnO1xyXG4gIC8vIGdldCB0aGUgd2hvbGUgbGluZSBmcm9tIHRoZSBidWZmIG5hbWUgdG93YXJkcyB0aGUgZW5kIChldmVuIGFmdGVyXHJcbiAgLy8gdGhlICcsJywgaW4gY2FzZSBvZiAnQUwsIExpYiwgTWVyOiAxMGsgZWFjaCdcclxuICB3aGlsZSAobm9kZSAmJiBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdicicpIHtcclxuICAgIG5ld3RleHQgPSBub2RlLnRleHRDb250ZW50O1xyXG4gICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XHJcbiAgICB0ZXh0ICs9IG5ld3RleHQ7XHJcbiAgfVxyXG4gIHZhciBwcmljZSA9IHRleHQucmVwbGFjZShudW1SRSwgJycpLnRvTG93ZXJDYXNlKCkubWF0Y2gocHJpY2VSRSk7XHJcbiAgcHJpY2UgPSBwcmljZUJlZm9yZU5hbWUoYnVmZk5hbWVOb2RlLCBwcmljZSk7XHJcbiAgdmFyIHR5cGU7XHJcbiAgdmFyIGNvc3Q7XHJcbiAgaWYgKHByaWNlKSB7XHJcbiAgICB0eXBlID0gcHJpY2VVbml0KHByaWNlKTtcclxuICAgIGNvc3QgPSBwcmljZVswXS5tYXRjaCgvKFsrLV17MCwxfVsuXFxkXSspLylbMF07XHJcbiAgfSBlbHNlIHtcclxuICAgIHR5cGUgPSAndW5rbm93bic7XHJcbiAgICBjb3N0ID0gJzEnO1xyXG4gIH1cclxuICBidWZmQ29zdC5idWZmc1tidWZmTmFtZV0gPSBbcGFyc2VGbG9hdChjb3N0KSwgdHlwZV07XHJcbiAgYnVmZkNvc3QuY291bnQgKz0gMTtcclxufVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlQnVmZnNUb0J1eShldnQpIHsgLy8gTGVnYWN5XHJcbiAgLy8gVGhpcyBpcyBhbHNvIGNhbGxlZCBieSBiaW8gcHJldmlld1xyXG4gIHZhciBidWZmTmFtZU5vZGUgPSBldnQudGFyZ2V0O1xyXG4gIHdoaWxlIChidWZmTmFtZU5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnc3BhbicpIHtcclxuICAgIGJ1ZmZOYW1lTm9kZSA9IGJ1ZmZOYW1lTm9kZS5wYXJlbnROb2RlO1xyXG4gIH1cclxuICB2YXIgbm9kZSA9IGJ1ZmZOYW1lTm9kZTtcclxuICB2YXIgc2VsZWN0ZWQgPSBub2RlLmNsYXNzTGlzdC5jb250YWlucygnZnNoQmx1ZScpO1xyXG4gIG5vZGUuY2xhc3NMaXN0LnRvZ2dsZSgnZnNoQmx1ZScpO1xyXG4gIG5vZGUuY2xhc3NMaXN0LnRvZ2dsZSgnZnNoWWVsbG93Jyk7XHJcbiAgdmFyIGJ1ZmZOYW1lID0gbm9kZS50ZXh0Q29udGVudDtcclxuICBpZiAoc2VsZWN0ZWQpIHtcclxuICAgIGdldEJ1ZmZDb3N0KGJ1ZmZOYW1lTm9kZSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGJ1ZmZDb3N0LmNvdW50IC09IDE7XHJcbiAgICBkZWxldGUgYnVmZkNvc3QuYnVmZnNbYnVmZk5hbWVdO1xyXG4gIH1cclxuICB1cGRhdGVCdWZmQ29zdCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRCdWZmTmFtZU5vZGUoZSkge1xyXG4gIHZhciBidWZmTmFtZU5vZGUgPSBlLnRhcmdldDtcclxuICB3aGlsZSAoYnVmZk5hbWVOb2RlLnRhZ05hbWUgJiZcclxuICAgICAgYnVmZk5hbWVOb2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ3NwYW4nKSB7XHJcbiAgICBidWZmTmFtZU5vZGUgPSBidWZmTmFtZU5vZGUucGFyZW50Tm9kZTtcclxuICB9XHJcbiAgcmV0dXJuIGJ1ZmZOYW1lTm9kZTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmlvRXZ0SGRsKGUpIHtcclxuICB2YXIgYnVmZk5hbWVOb2RlID0gZ2V0QnVmZk5hbWVOb2RlKGUpO1xyXG4gIGlmIChidWZmTmFtZU5vZGUuY2xhc3NMaXN0ICYmXHJcbiAgICAgIGJ1ZmZOYW1lTm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2J1ZmZMaW5rJykpIHtcclxuICAgIHRvZ2dsZUJ1ZmZzVG9CdXkoZSk7XHJcbiAgfSBlbHNlIGlmIChlLnRhcmdldC5pZCA9PT0gJ2ZzaFNlbmRCdWZmTXNnJykge1xyXG4gICAgZ2V0QnVmZnNUb0J1eShlKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyQmlvKF9iaW9Db250ZW50cykge1xyXG4gIHZhciBiaW9Db250ZW50cyA9IF9iaW9Db250ZW50cy5yZXBsYWNlKC9cXHtiXFx9L2csICdgficpXHJcbiAgICAucmVwbGFjZSgvXFx7XFwvYlxcfS9nLCAnfmAnKTtcclxuICB2YXIgYnVmZnMgPSBiaW9Db250ZW50cy5tYXRjaCgvYH4oW15+XXx+KD8hYCkpKn5gL2cpO1xyXG4gIGlmICghYnVmZnMpIHtyZXR1cm47fVxyXG4gIGJ1ZmZzLmZvckVhY2goZnVuY3Rpb24oYnVmZiwgaSkge1xyXG4gICAgdmFyIGZ1bGxOYW1lID0gYnVmZi5yZXBsYWNlKC8oYH4pfCh+YCl8KFxce2JcXH0pfChcXHtcXC9iXFx9KS9nLCAnJyk7XHJcbiAgICB2YXIgY2JTdHJpbmcgPSAnPHNwYW4gaWQ9XCJmc2hCdWZmJyArIGkgKyAnXCIgY2xhc3M9XCJidWZmTGluayBmc2hCbHVlXCI+JyArXHJcbiAgICAgIGZ1bGxOYW1lICsgJzwvc3Bhbj4nO1xyXG4gICAgYmlvQ29udGVudHMgPSBiaW9Db250ZW50cy5yZXBsYWNlKGJ1ZmYsIGNiU3RyaW5nKTtcclxuICB9KTtcclxuICBpZiAoYmlvQ29udGVudHMuaW5kZXhPZignW2NtZF0nKSA8IDApIHtiaW9Db250ZW50cyArPSAnW2NtZF0nO31cclxuICBiaW9Db250ZW50cyA9IGJpb0NvbnRlbnRzLnJlcGxhY2UoJ1tjbWRdJyxcclxuICAgICc8YnI+PGlucHV0IGlkPVwiZnNoU2VuZEJ1ZmZNc2dcIiAnICtcclxuICAgICdjbGFzcz1cImN1c3RvbWJ1dHRvblwiIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cIkFzayBGb3IgQnVmZnNcIj4nICtcclxuICAgICc8c3BhbiBpZD1cImJ1ZmZDb3N0XCIgY2xhc3M9XCJmc2hSZWRcIj48L3NwYW4+Jyk7XHJcbiAgcmV0dXJuIGJpb0NvbnRlbnRzO1xyXG59XHJcbiIsImltcG9ydCBiaW9FdnRIZGwgZnJvbSAnLi9iaW9FdnRIZGwnO1xyXG5pbXBvcnQge3BDQ30gZnJvbSAnLi4vLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5pbXBvcnQgcmVuZGVyQmlvIGZyb20gJy4vcmVuZGVyJztcclxuaW1wb3J0IHtjb252ZXJ0VGV4dFRvSHRtbCwgZ2V0VmFsdWUsIHNldFZhbHVlfSBmcm9tICcuLi8uLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCB7Y3JlYXRlRGl2LCBjcmVhdGVJbnB1dH0gZnJvbSAnLi4vLi4vY29tbW9uL2NFbGVtZW50JztcclxuXHJcbnZhciBiaW9FZGl0TGluZXM7XHJcblxyXG5mdW5jdGlvbiBiaW9QcmV2aWV3KCkge1xyXG4gIHZhciB0ZXh0QXJlYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZXh0SW5wdXRCb3gnKTtcclxuICB2YXIgYmlvUHJldmlld0hUTUwgPSBjb252ZXJ0VGV4dFRvSHRtbCh0ZXh0QXJlYS52YWx1ZSk7XHJcbiAgdGV4dEFyZWEucGFyZW50Tm9kZS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsICc8ZGl2PicgK1xyXG4gICAgJzx0YWJsZSBhbGlnbj1cImNlbnRlclwiIHdpZHRoPVwiMzI1XCIgYm9yZGVyPVwiMVwiPicgK1xyXG4gICAgJzx0Ym9keT48dHI+PHRkIHN0eWxlPVwidGV4dC1hbGlnbjpjZW50ZXI7Y29sb3I6IzdEMjI1MjsnICtcclxuICAgICdiYWNrZ3JvdW5kLWNvbG9yOiNDRDlFNEJcIj5QcmV2aWV3PC90ZD48L3RyPjx0cj4nICtcclxuICAgICc8dGQgYWxpZ249XCJsZWZ0XCIgd2lkdGg9XCIzMjVcIj48c3BhbiBpZD1cImJpb3ByZXZpZXdcIj4nICtcclxuICAgIGJpb1ByZXZpZXdIVE1MICsgJzwvc3Bhbj48L3RkPjwvdHI+PC90Ym9keT48L3RhYmxlPjwvZGl2PicpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBiaW9Xb3JkcygpIHtcclxuICAvLyBBZGQgZGVzY3JpcHRpb24gdGV4dCBmb3IgdGhlIG5ldyB0YWdzXHJcbiAgcENDLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgJzxkaXY+JyArXHJcbiAgICAnYH5UaGlzIHdpbGwgYWxsb3cgRlNIIFNjcmlwdCB1c2VycyB0byAnICtcclxuICAgICdzZWxlY3QgYnVmZnMgZnJvbSB5b3VyIGJpb35gPGJyPllvdSBjYW4gdXNlIHRoZSBbY21kXSB0YWcgYXMgd2VsbCB0byAnICtcclxuICAgICdkZXRlcm1pbmUgd2hlcmUgdG8gcHV0IHRoZSBcIkFzayBGb3IgQnVmZnNcIiBidXR0b248YnI+PGJyPicgK1xyXG4gICAgJyZuYnNwOyZuYnNwOyZuYnNwOy0gTm90ZSAxOiBUaGUgYCBhbmQgfiBjaGFyYWN0ZXJzIGFyZSBvbiB0aGUgc2FtZSAnICtcclxuICAgICdrZXkgb24gUVdFUlRZIGtleWJvYXJkcy4gYCBpcyA8Yj5OT1Q8L2I+IGFuIGFwb3N0cm9waGUuPGJyPicgK1xyXG4gICAgJyZuYnNwOyZuYnNwOyZuYnNwOy0gTm90ZSAyOiBJbm5lciB0ZXh0IHdpbGwgbm90IGNvbnRhaW4gc3BlY2lhbCAnICtcclxuICAgICdjaGFyYWN0ZXJzIChub24tYWxwaGFudW1lcmljKS48YnI+JyArXHJcbiAgICAnJm5ic3A7Jm5ic3A7Jm5ic3A7LSBQLlMuIEJlIGNyZWF0aXZlIHdpdGggdGhlc2UhIFdyYXAgeW91ciBidWZmICcgK1xyXG4gICAgJ3BhY2sgbmFtZXMgaW4gdGhlbSB0byBtYWtlIGJ1ZmZpbmcgZXZlbiBlYXNpZXIhPC9kaXY+Jyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRlc3RIZWlnaHRWYWxpZChib3hWYWwpIHtcclxuICByZXR1cm4gaXNOYU4oYm94VmFsKSB8fCBib3hWYWwgPCAnMScgfHwgYm94VmFsID4gJzk5JztcclxufVxyXG5cclxuZnVuY3Rpb24gY2hhbmdlSGVpZ2h0KCkge1xyXG4gIHZhciB0aGVCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnNoTGluZXNUb1Nob3cnKTtcclxuICB2YXIgYm94VmFsID0gcGFyc2VJbnQodGhlQm94LnZhbHVlLCAxMCk7XHJcbiAgaWYgKHRlc3RIZWlnaHRWYWxpZChib3hWYWwpKSB7cmV0dXJuO31cclxuICBiaW9FZGl0TGluZXMgPSBib3hWYWw7XHJcbiAgc2V0VmFsdWUoJ2Jpb0VkaXRMaW5lcycsIGJveFZhbCk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RleHRJbnB1dEJveCcpLnJvd3MgPSBiaW9FZGl0TGluZXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJpb0hlaWdodCgpIHtcclxuICB2YXIgYmlvRWRpdExpbmVzRGl2ID0gY3JlYXRlRGl2KHtcclxuICAgIGlubmVySFRNTDogJyBEaXNwbGF5IDxpbnB1dCBpZD1cImZzaExpbmVzVG9TaG93XCInICtcclxuICAgICAgJyB0eXBlPVwibnVtYmVyXCIgbWluPVwiMVwiIG1heD1cIjk5XCIgdmFsdWU9XCInICtcclxuICAgICAgYmlvRWRpdExpbmVzICsgJ1wiLz4gTGluZXMgJ1xyXG4gIH0pO1xyXG4gIHZhciBzYXZlTGluZXMgPSBjcmVhdGVJbnB1dCh7XHJcbiAgICBjbGFzc05hbWU6ICdjdXN0b21idXR0b24nLFxyXG4gICAgdmFsdWU6ICdVcGRhdGUgUm93cyBUbyBTaG93JyxcclxuICAgIHR5cGU6ICdidXR0b24nXHJcbiAgfSk7XHJcbiAgc2F2ZUxpbmVzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2hhbmdlSGVpZ2h0KTtcclxuICBiaW9FZGl0TGluZXNEaXYuYXBwZW5kQ2hpbGQoc2F2ZUxpbmVzKTtcclxuICBwQ0MuYXBwZW5kQ2hpbGQoYmlvRWRpdExpbmVzRGl2KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlQmlvQ2hhcmFjdGVycygpIHtcclxuICB2YXIgdGV4dEFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGV4dElucHV0Qm94Jyk7XHJcbiAgdmFyIHByZXZpZXdBcmVhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Jpb3ByZXZpZXcnKTtcclxuICB2YXIgYmlvQ29udGVudHMgPSBjb252ZXJ0VGV4dFRvSHRtbCh0ZXh0QXJlYS52YWx1ZSk7XHJcbiAgYmlvQ29udGVudHMgPSByZW5kZXJCaW8oYmlvQ29udGVudHMpO1xyXG4gIGlmIChiaW9Db250ZW50cykge1xyXG4gICAgcHJldmlld0FyZWEuaW5uZXJIVE1MID0gYmlvQ29udGVudHM7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmplY3RCaW9XaWRnZXRzKCkge1xyXG4gIGJpb0VkaXRMaW5lcyA9IGdldFZhbHVlKCdiaW9FZGl0TGluZXMnKTtcclxuICB2YXIgdGV4dEFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGV4dElucHV0Qm94Jyk7XHJcbiAgYmlvUHJldmlldygpO1xyXG4gIGJpb1dvcmRzKCk7XHJcbiAgYmlvSGVpZ2h0KCk7XHJcbiAgdGV4dEFyZWEucm93cyA9IGJpb0VkaXRMaW5lcztcclxuXHJcbiAgdGV4dEFyZWEucGFyZW50Tm9kZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGJpb0V2dEhkbCk7XHJcbiAgdGV4dEFyZWEuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB1cGRhdGVCaW9DaGFyYWN0ZXJzKTtcclxuICAvLyBGb3JjZSB0aGUgcHJldmlldyBhcmVhIHRvIHJlbmRlclxyXG4gIHVwZGF0ZUJpb0NoYXJhY3RlcnMoKTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhbHBoYShhLCBiKSB7XHJcbiAgaWYgKGEudG9Mb3dlckNhc2UoKSA8IGIudG9Mb3dlckNhc2UoKSkge3JldHVybiAtMTt9XHJcbiAgaWYgKGEudG9Mb3dlckNhc2UoKSA+IGIudG9Mb3dlckNhc2UoKSkge3JldHVybiAxO31cclxuICByZXR1cm4gMDtcclxufVxyXG4iLCJpbXBvcnQge3BhZFp9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERhdGVUaW1lKGFEYXRlKSB7XHJcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhRGF0ZSkgPT09ICdbb2JqZWN0IERhdGVdJyAmJlxyXG4gICAgICAhaXNOYU4oYURhdGUuZ2V0VGltZSgpKSkge1xyXG4gICAgdmFyIHl5eXkgPSBhRGF0ZS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCk7XHJcbiAgICB2YXIgbW9uID0gcGFkWihhRGF0ZS5nZXRNb250aCgpICsgMSk7XHJcbiAgICB2YXIgZGQgPSBwYWRaKGFEYXRlLmdldERhdGUoKSk7XHJcbiAgICB2YXIgaGggPSBwYWRaKGFEYXRlLmdldEhvdXJzKCkpO1xyXG4gICAgdmFyIG1tID0gcGFkWihhRGF0ZS5nZXRNaW51dGVzKCkpO1xyXG4gICAgdmFyIHNzID0gcGFkWihhRGF0ZS5nZXRTZWNvbmRzKCkpO1xyXG4gICAgcmV0dXJuIHl5eXkgKyAnLScgKyBtb24gKyAnLScgKyBkZCArICcgJyArIGhoICsgJzonICsgbW0gKyAnOicgKyBzcztcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGFkZCBmcm9tICcuLi8uLi9zdXBwb3J0L3Rhc2snO1xyXG5pbXBvcnQgYWxwaGEgZnJvbSAnLi4vLi4vY29tbW9uL2FscGhhJztcclxuaW1wb3J0IGZvcm1hdERhdGVUaW1lIGZyb20gJy4uLy4uL2NvbW1vbi9mb3JtYXREYXRlVGltZSc7XHJcbmltcG9ydCB7YWN0LCBjdXIsIGd4cCwgbHZsLCBtYXgsIHV0Yywgdmx9IGZyb20gJy4vaW5kZXhDb25zdGFudHMnO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZURpdixcclxuICBjcmVhdGVUQm9keSxcclxuICBjcmVhdGVUYWJsZSxcclxuICBjcmVhdGVUaCxcclxufSBmcm9tICcuLi8uLi9jb21tb24vY0VsZW1lbnQnO1xyXG5cclxudmFyIGFjdEJvZHk7XHJcbnZhciBzZWxNZW1iZXI7XHJcbnZhciB0Z0NvbnQ7XHJcbnZhciBtZW1iZXJTZWxlY3Q7XHJcbnZhciBteU1lbWJlcnM7XHJcblxyXG5mdW5jdGlvbiBidWlsZE9wdGlvbnMoKSB7XHJcbiAgcmV0dXJuICc8c2VsZWN0IG5hbWU9XCJtZW1iZXJcIj4nICtcclxuICAgICc8b3B0aW9uIHZhbHVlPVwiLSBBbGwgLVwiIHNlbGVjdGVkPi0gQWxsIC08L29wdGlvbj4nICtcclxuICAgIE9iamVjdC5rZXlzKG15TWVtYmVycykuc29ydChhbHBoYSkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG1lbWJlcikge1xyXG4gICAgICByZXR1cm4gcHJldiArICc8b3B0aW9uIHZhbHVlPVwiJyArIG1lbWJlciArICdcIj4nICsgbWVtYmVyICsgJzwvb3B0aW9uPic7XHJcbiAgICB9LCAnJykgKyAnPC9zZWxlY3Q+JztcclxufVxyXG5cclxuZnVuY3Rpb24gdG9UZXh0KHZhbCkge1xyXG4gIGlmICh0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge3JldHVybiAnI0RFRic7fVxyXG4gIHJldHVybiB2YWwudG9Mb2NhbGVTdHJpbmcoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWVtYmVyUm93cygpIHtcclxuICByZXR1cm4gT2JqZWN0LmtleXMobXlNZW1iZXJzKS5yZWR1Y2UoZnVuY3Rpb24ob3V0c2lkZSwgbWVtYmVyS2V5KSB7XHJcbiAgICBpZiAoc2VsTWVtYmVyICYmXHJcbiAgICAgICAgc2VsTWVtYmVyICE9PSAnLSBBbGwgLScgJiZcclxuICAgICAgICBzZWxNZW1iZXIgIT09IG1lbWJlcktleSkge3JldHVybiBvdXRzaWRlO31cclxuICAgIHJldHVybiBvdXRzaWRlICsgbXlNZW1iZXJzW21lbWJlcktleV0ucmVkdWNlKFxyXG4gICAgICBmdW5jdGlvbihpbnNpZGUsIGFjdGl2aXR5KSB7XHJcbiAgICAgICAgcmV0dXJuIGluc2lkZSArICc8dHI+JyArXHJcbiAgICAgICAgICAnPHRkPicgK1xyXG4gICAgICAgICAgZm9ybWF0RGF0ZVRpbWUobmV3IERhdGUoYWN0aXZpdHlbdXRjXSAqIDEwMDApKSArXHJcbiAgICAgICAgICAnPC90ZD4nICtcclxuICAgICAgICAgICc8dGQ+JyArIG1lbWJlcktleSArICc8L3RkPicgK1xyXG4gICAgICAgICAgJzx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+JyArIHRvVGV4dChhY3Rpdml0eVtsdmxdKSArICc8L3RkPicgK1xyXG4gICAgICAgICAgJzx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+JyArIHRvVGV4dChhY3Rpdml0eVt2bF0pICsgJzwvdGQ+JyArXHJcbiAgICAgICAgICAnPHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4nICsgdG9UZXh0KGFjdGl2aXR5W2N1cl0pICsgJzwvdGQ+JyArXHJcbiAgICAgICAgICAnPHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4nICsgdG9UZXh0KGFjdGl2aXR5W21heF0pICsgJzwvdGQ+JyArXHJcbiAgICAgICAgICAnPHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4nICtcclxuICAgICAgICAgICAgTWF0aC5mbG9vcihhY3Rpdml0eVtjdXJdIC8gYWN0aXZpdHlbbWF4XSAqIDEwMCkgK1xyXG4gICAgICAgICAgJzwvdGQ+JyArXHJcbiAgICAgICAgICAnPHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4nICsgYWN0aXZpdHlbYWN0XSArICc8L3RkPicgK1xyXG4gICAgICAgICAgJzx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+JyArIHRvVGV4dChhY3Rpdml0eVtneHBdKSArICc8L3RkPicgK1xyXG4gICAgICAgICAgJzwvdHI+JztcclxuICAgICAgfSwgJycpO1xyXG4gIH0sICcnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1Jvd3MoKSB7XHJcbiAgYWN0Qm9keS5pbm5lckhUTUwgPSBtZW1iZXJSb3dzKCk7XHJcbiAgdGdDb250LmNsYXNzTGlzdC5yZW1vdmUoJ2ZzaFNwaW5uZXInKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcXVldWVEcmF3Um93cygpIHtcclxuICBhZGQoMywgZHJhd1Jvd3MpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBteUNoYW5nZShlKSB7XHJcbiAgc2VsTWVtYmVyID0gZS50YXJnZXQudmFsdWU7XHJcbiAgcXVldWVEcmF3Um93cygpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdFRhYmxlKHRoZU1lbWJlcnMpIHtcclxuICBteU1lbWJlcnMgPSB0aGVNZW1iZXJzO1xyXG4gIG1lbWJlclNlbGVjdC5pbm5lckhUTUwgPSBidWlsZE9wdGlvbnMoKTtcclxuICBxdWV1ZURyYXdSb3dzKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlVGcoKSB7XHJcbiAgdmFyIHRnID0gY3JlYXRlVGFibGUoe2lkOiAndGcnfSk7XHJcbiAgdmFyIGhyb3cgPSB0Zy5jcmVhdGVUSGVhZCgpLmluc2VydFJvdygtMSk7XHJcbiAgaHJvdy5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsICc8dGg+RGF0ZTwvdGg+Jyk7XHJcblxyXG4gIHZhciBtZW1iZXJIZWFkID0gY3JlYXRlVGgoe3RleHRDb250ZW50OiAnTWVtYmVyJ30pO1xyXG4gIG1lbWJlclNlbGVjdCA9IGNyZWF0ZURpdigpO1xyXG4gIG1lbWJlckhlYWQuYXBwZW5kQ2hpbGQobWVtYmVyU2VsZWN0KTtcclxuICBocm93LmFwcGVuZENoaWxkKG1lbWJlckhlYWQpO1xyXG5cclxuICBocm93Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgJzx0aD5MZXZlbDwvdGg+PHRoPlZMPC90aD4nICtcclxuICAnPHRoPlN0YW08L3RoPjx0aD5NYXg8YnI+U3RhbTwvdGg+PHRoPlN0YW08YnI+JTwvdGg+JyArXHJcbiAgJzx0aD5MYXN0PGJyPkFjdGl2aXR5PGJyPihEYXlzKTwvdGg+PHRoPkdYUDwvdGg+Jyk7XHJcblxyXG4gIGFjdEJvZHkgPSBjcmVhdGVUQm9keSgpO1xyXG4gIHRnLmFwcGVuZENoaWxkKGFjdEJvZHkpO1xyXG4gIHRnLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG15Q2hhbmdlKTtcclxuICB0Z0NvbnQgPSBjcmVhdGVEaXYoe2NsYXNzTmFtZTogJ3RnQ29udCBmc2hTcGlubmVyIGZzaFNwaW5uZXI2NCd9KTtcclxuICB0Z0NvbnQuYXBwZW5kQ2hpbGQodGcpO1xyXG4gIHJldHVybiB0Z0NvbnQ7XHJcbn1cclxuIiwiXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGpzb25QYXJzZShzdHIpIHtcclxuICB0cnkge1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICAvLyBJZ25vcmUgYmFkIGpzb25cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGFkZCBmcm9tICcuLi8uLi9zdXBwb3J0L3Rhc2snO1xyXG5pbXBvcnQge2luaXRUYWJsZX0gZnJvbSAnLi90cmFja2VyVGFibGUnO1xyXG5pbXBvcnQganNvblBhcnNlIGZyb20gJy4uLy4uL2NvbW1vbi9qc29uUGFyc2UnO1xyXG5pbXBvcnQgc2V0Rm9yYWdlIGZyb20gJy4uLy4uL2FqYXgvc2V0Rm9yYWdlJztcclxuaW1wb3J0IHtcclxuICBjcmVhdGVCcixcclxuICBjcmVhdGVCdXR0b24sXHJcbiAgY3JlYXRlRGl2LFxyXG4gIGNyZWF0ZVRleHRBcmVhLFxyXG59IGZyb20gJy4uLy4uL2NvbW1vbi9jRWxlbWVudCc7XHJcblxyXG52YXIgaW9UZXh0O1xyXG52YXIgc2F2ZUJ0bjtcclxudmFyIHJlc2V0QnRuO1xyXG52YXIgaW87XHJcblxyXG5mdW5jdGlvbiBkcmF3UmF3RGF0YSh0cmFja2VyRGF0YSkge1xyXG4gIGlvVGV4dC52YWx1ZSA9IHRyYWNrZXJEYXRhO1xyXG4gIGlvLmNsYXNzTGlzdC5yZW1vdmUoJ2ZzaFNwaW5uZXInKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHF1ZXVlUmF3RGF0YSh0cmFja2VyRGF0YSkge1xyXG4gIGlvLmNsYXNzTmFtZSA9ICdmc2hTcGlubmVyIGZzaFNwaW5uZXI2NCc7XHJcbiAgYWRkKDQsIGRyYXdSYXdEYXRhLCBbdHJhY2tlckRhdGFdKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZG9SZXNldCgpIHtcclxuICBpb1RleHQudmFsdWUgPSAne1wibGFzdFVwZGF0ZVwiOiAwLCBcIm1lbWJlcnNcIjoge319JztcclxufVxyXG5cclxuZnVuY3Rpb24gZG9TYXZlKCkge1xyXG4gIHZhciBuZXdEYXRhID0ganNvblBhcnNlKGlvVGV4dC52YWx1ZSk7XHJcbiAgc2V0Rm9yYWdlKCdmc2hfZ3VpbGRBY3Rpdml0eScsIG5ld0RhdGEpXHJcbiAgICAuZG9uZShmdW5jdGlvbigpIHtcclxuICAgICAgJCgnI2RpYWxvZ19tc2cnKS50ZXh0KCdVcGRhdGUgc3VjY2Vzc2Z1bCcpLmRpYWxvZygnb3BlbicpO1xyXG4gICAgICBpbml0VGFibGUobmV3RGF0YS5tZW1iZXJzKTtcclxuICAgIH0pXHJcbiAgICAuZmFpbChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgJCgnI2RpYWxvZ19tc2cnKS50ZXh0KGVycikuZGlhbG9nKCdvcGVuJyk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3VzdG9tQnV0dG9uKHRleHQsIGZuKSB7XHJcbiAgdmFyIGJ0biA9IGNyZWF0ZUJ1dHRvbih7XHJcbiAgICBjbGFzc05hbWU6ICdjdXN0b21idXR0b24nLFxyXG4gICAgdGV4dENvbnRlbnQ6IHRleHRcclxuICB9KTtcclxuICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmbik7XHJcbiAgcmV0dXJuIGJ0bjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VJbk91dCgpIHtcclxuICBpbyA9IGNyZWF0ZURpdih7aWQ6ICdpbyd9KTtcclxuICBpb1RleHQgPSBjcmVhdGVUZXh0QXJlYSgpO1xyXG4gIGlvVGV4dC5zZXRBdHRyaWJ1dGUoJ2F1dG9jYXBpdGFsaXplJywgJ29mZicpO1xyXG4gIGlvVGV4dC5zZXRBdHRyaWJ1dGUoJ2F1dG9jb21wbGV0ZScsICdvZmYnKTtcclxuICBpb1RleHQuc2V0QXR0cmlidXRlKCdhdXRvY29ycmVjdCcsICdvZmYnKTtcclxuICBpb1RleHQuc2V0QXR0cmlidXRlKCdzcGVsbGNoZWNrJywgJ2ZhbHNlJyk7XHJcbiAgc2F2ZUJ0biA9IGN1c3RvbUJ1dHRvbignU2F2ZScsIGRvU2F2ZSk7XHJcbiAgcmVzZXRCdG4gPSBjdXN0b21CdXR0b24oJ1Jlc2V0JywgZG9SZXNldCk7XHJcbiAgaW8uYXBwZW5kQ2hpbGQoaW9UZXh0KTtcclxuICBpby5hcHBlbmRDaGlsZChjcmVhdGVCcigpKTtcclxuICBpby5hcHBlbmRDaGlsZChzYXZlQnRuKTtcclxuICBpby5hcHBlbmRDaGlsZChyZXNldEJ0bik7XHJcbiAgcmV0dXJuIGlvO1xyXG59XHJcbiIsImltcG9ydCBkcmFnZ2FibGUgZnJvbSAnLi4vLi4vY29tbW9uL2RyYWdTdGFydCc7XHJcbmltcG9ydCBnZXRGb3JhZ2UgZnJvbSAnLi4vLi4vYWpheC9nZXRGb3JhZ2UnO1xyXG5pbXBvcnQge3NpbXBsZUNoZWNrYm94SHRtbH0gZnJvbSAnLi4vLi4vc2V0dGluZ3Mvc2V0dGluZ3NQYWdlJztcclxuaW1wb3J0IHtcclxuICBjcmVhdGVEaXYsXHJcbiAgY3JlYXRlSW5wdXQsXHJcbiAgY3JlYXRlVHIsXHJcbiAgY3JlYXRlVWxcclxufSBmcm9tICcuLi8uLi9jb21tb24vY0VsZW1lbnQnO1xyXG5pbXBvcnQge2dldFZhbHVlLCBzZXRWYWx1ZX0gZnJvbSAnLi4vLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5pbXBvcnQge2luaXRUYWJsZSwgbWFrZVRnfSBmcm9tICcuL3RyYWNrZXJUYWJsZSc7XHJcbmltcG9ydCB7bWFrZUluT3V0LCBxdWV1ZVJhd0RhdGF9IGZyb20gJy4vcmF3RGF0YSc7XHJcblxyXG52YXIgdHJhY2tlckRhdGE7XHJcbnZhciB0cmFja2VyO1xyXG52YXIgdHJEaWFsb2c7XHJcbnZhciBhY3R0YWIyO1xyXG5cclxuZnVuY3Rpb24gbWFrZURyYWdIYW5kbGUoKSB7XHJcbiAgcmV0dXJuIGNyZWF0ZVVsKHtcclxuICAgIGNsYXNzTmFtZTogJ2ZzaE1vdmUgdWktdGFicy1uYXYgdWktd2lkZ2V0LWhlYWRlciB1aS1jb3JuZXItYWxsICcgK1xyXG4gICAgICAndWktaGVscGVyLXJlc2V0IHVpLWhlbHBlci1jbGVhcmZpeCcsXHJcbiAgICBpbm5lckhUTUw6ICc8bGkgY2xhc3M9XCJ1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci10b3BcIj4nICtcclxuICAgICAgJzxsYWJlbCBjbGFzcz1cImZzaC10YWItbGFiZWxcIiBmb3I9XCJhY3R0YWIxXCI+JyArXHJcbiAgICAgICdHdWlsZCBBY3Rpdml0eSBUcmFja2VyPC9sYWJlbD48L2xpPicgK1xyXG4gICAgICAnPGxpIGNsYXNzPVwidWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItdG9wXCI+JyArXHJcbiAgICAgICc8bGFiZWwgY2xhc3M9XCJmc2gtdGFiLWxhYmVsXCIgZm9yPVwiYWN0dGFiMlwiPkltcG9ydC9FeHBvcnQ8L2xhYmVsPjwvbGk+JyArXHJcbiAgICAgICc8bGFiZWwgZm9yPVwidHJhY2tlclwiIGNsYXNzPVwiZnNoLWRpYWxvZy1jbG9zZSAnICtcclxuICAgICAgJ3VpLWRpYWxvZy10aXRsZWJhci1jbG9zZVwiPiZ0aW1lczs8L2xhYmVsPidcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlUmF3RGF0YSgpIHtcclxuICBhY3R0YWIyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHVwZGF0ZVJhd0RhdGEpO1xyXG4gIHF1ZXVlUmF3RGF0YSh0cmFja2VyRGF0YSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1ha2VJbm5lclBvcHVwKCkge1xyXG4gIHZhciBkaWFsb2dQb3B1cCA9IGNyZWF0ZURpdih7XHJcbiAgICBjbGFzc05hbWU6ICdmc2gtZGlhbG9nLXBvcHVwICcgK1xyXG4gICAgICAndWktZGlhbG9nIHVpLXRhYnMgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwnLFxyXG4gICAgaW5uZXJIVE1MOiAnPGlucHV0IGlkPVwiYWN0dGFiMVwiIGNsYXNzPVwiZnNoLXRhYi1vcGVuXCIgJyArXHJcbiAgICAgICduYW1lPVwiYWN0dGFic1wiIGNoZWNrZWQgdHlwZT1cInJhZGlvXCI+J1xyXG4gIH0pO1xyXG4gIGFjdHRhYjIgPSBjcmVhdGVJbnB1dCh7XHJcbiAgICBjbGFzc05hbWU6ICdmc2gtdGFiLW9wZW4nLFxyXG4gICAgaWQ6ICdhY3R0YWIyJyxcclxuICAgIG5hbWU6ICdhY3R0YWJzJyxcclxuICAgIHR5cGU6ICdyYWRpbydcclxuICB9KTtcclxuICBhY3R0YWIyLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHVwZGF0ZVJhd0RhdGEpO1xyXG4gIGRpYWxvZ1BvcHVwLmFwcGVuZENoaWxkKGFjdHRhYjIpO1xyXG4gIHJldHVybiBkaWFsb2dQb3B1cDtcclxufVxyXG5cclxuZnVuY3Rpb24gbWFrZVBvcHVwKCkge1xyXG4gIHZhciByZXQgPSBtYWtlSW5uZXJQb3B1cCgpO1xyXG4gIHZhciBoZGwgPSBtYWtlRHJhZ0hhbmRsZSgpO1xyXG4gIHJldC5hcHBlbmRDaGlsZChoZGwpO1xyXG4gIHZhciBjb250YWluZXIgPSBjcmVhdGVEaXYoe2NsYXNzTmFtZTogJ2ZzaC1kaWFsb2ctY29udGVudCd9KTtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQobWFrZVRnKCkpO1xyXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChtYWtlSW5PdXQoKSk7XHJcbiAgcmV0LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcbiAgZHJhZ2dhYmxlKGhkbCwgcmV0KTtcclxuICB0ckRpYWxvZy5hcHBlbmRDaGlsZChyZXQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRPdmVybGF5KCkge1xyXG4gIHRyRGlhbG9nLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJyxcclxuICAgICc8ZGl2IGNsYXNzPVwiZnNoLWRpYWxvZy1vdmVybGF5XCI+JyArXHJcbiAgICAnPGxhYmVsIGNsYXNzPVwiZnNoLWRpYWxvZy1jYW5jZWxcIiBmb3I9XCJ0cmFja2VyXCI+PC9sYWJlbD4nICtcclxuICAgICc8L2Rpdj4nKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ290QWN0aXZpdHkoZGF0YSkge1xyXG4gIC8vIGNvbnNvbGUubG9nKCdndWlsZFRyYWNrZXInLCBkYXRhKTtcclxuICB0cmFja2VyRGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xyXG4gIC8vIHZhciB0ZW1wQWN0ID0gdHJhbnNmb3JtQWN0aXZpdHkoZGF0YSk7XHJcbiAgLy8gdHJhY2tlckRhdGEgPSBKU09OLnN0cmluZ2lmeSh0ZW1wQWN0KTtcclxuICBpbml0VGFibGUoZGF0YS5tZW1iZXJzKTtcclxuICAvLyBpbml0VGFibGUodGVtcEFjdC5tZW1iZXJzKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlUHJlZihldnQpIHtcclxuICBpZiAoZXZ0LnRhcmdldC5pZCA9PT0gJ2VuYWJsZUd1aWxkQWN0aXZpdHlUcmFja2VyJykge1xyXG4gICAgc2V0VmFsdWUoJ2VuYWJsZUd1aWxkQWN0aXZpdHlUcmFja2VyJyxcclxuICAgICAgIWdldFZhbHVlKCdlbmFibGVHdWlsZEFjdGl2aXR5VHJhY2tlcicpKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9wZW5EaWFsb2coKSB7XHJcbiAgZ2V0Rm9yYWdlKCdmc2hfZ3VpbGRBY3Rpdml0eScpLmRvbmUoZ290QWN0aXZpdHkpO1xyXG4gIHRyYWNrZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb3BlbkRpYWxvZyk7XHJcbiAgYWRkT3ZlcmxheSgpO1xyXG4gIG1ha2VQb3B1cCgpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBndWlsZFRyYWNrZXIoKSB7XHJcbiAgdmFyIGdzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BDQyBpbWcuZ3VpbGRfb3Blbkd1aWxkU3RvcmUnKTtcclxuICB2YXIgb2xkVHIgPSBncy5wYXJlbnROb2RlLnBhcmVudE5vZGU7XHJcbiAgdmFyIG5ld1RyID0gY3JlYXRlVHIoKTtcclxuICB2YXIgY2VsbE9uZSA9IG5ld1RyLmluc2VydENlbGwoLTEpO1xyXG4gIHZhciBjZWxsVHdvID0gbmV3VHIuaW5zZXJ0Q2VsbCgtMSk7XHJcbiAgY2VsbE9uZS5hcHBlbmRDaGlsZChncyk7XHJcbiAgY2VsbFR3by5pbm5lckhUTUwgPSBzaW1wbGVDaGVja2JveEh0bWwoJ2VuYWJsZUd1aWxkQWN0aXZpdHlUcmFja2VyJykgK1xyXG4gICAgJyZuYnNwOzxsYWJlbCBjbGFzcz1cImN1c3RvbWJ1dHRvblwiIGZvcj1cInRyYWNrZXJcIj5TaG93PC9sYWJlbD4nO1xyXG4gIG5ld1RyLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRvZ2dsZVByZWYpO1xyXG4gIG9sZFRyLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5ld1RyLCBvbGRUcik7XHJcbiAgdHJhY2tlciA9IGNyZWF0ZUlucHV0KHtcclxuICAgIGlkOiAndHJhY2tlcicsXHJcbiAgICBjbGFzc05hbWU6ICdmc2gtZGlhbG9nLW9wZW4nLFxyXG4gICAgdHlwZTogJ2NoZWNrYm94J1xyXG4gIH0pO1xyXG4gIHRyYWNrZXIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb3BlbkRpYWxvZyk7XHJcbiAgdHJEaWFsb2cgPSBjcmVhdGVEaXYoe2NsYXNzTmFtZTogJ2ZzaC1kaWFsb2cnfSk7XHJcbiAgdHJEaWFsb2cuYXBwZW5kQ2hpbGQodHJhY2tlcik7XHJcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0ckRpYWxvZyk7XHJcbn1cclxuIiwiaW1wb3J0IHthZGRDb21tYXMsIGdldEludEZyb21SZWdFeHB9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVHdWlsZEF2eUltZ0JvcmRlcigpIHtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcENDIGltZ1tvbGR0aXRsZSQ9XCJcXCdzIExvZ29cIl0nKVxyXG4gICAgLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGd1aWxkWFBMb2NrKCkge1xyXG4gIHZhciB4cExvY2sgPSBkb2N1bWVudFxyXG4gICAgLnF1ZXJ5U2VsZWN0b3IoJyNwQ0MgYVtkYXRhLXRpcHBlZF49XCI8Yj5HdWlsZCBYUDwvYj5cIl0nKTtcclxuICBpZiAoIXhwTG9jaykge3JldHVybjt9XHJcbiAgdmFyIHhwTG9ja21vdXNlb3ZlciA9IHhwTG9jay5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwcGVkJyk7XHJcbiAgdmFyIHhwTG9ja1hQID0gZ2V0SW50RnJvbVJlZ0V4cCh4cExvY2ttb3VzZW92ZXIsXHJcbiAgICAvWFAgTG9jazogPGI+KFxcZCopLyk7XHJcbiAgdmFyIGFjdHVhbFhQID0gZ2V0SW50RnJvbVJlZ0V4cCh4cExvY2ttb3VzZW92ZXIsXHJcbiAgICAvWFA6IDxiPihcXGQqKS8pO1xyXG4gIGlmIChhY3R1YWxYUCA8IHhwTG9ja1hQKSB7XHJcbiAgICB4cExvY2sucGFyZW50Tm9kZS5uZXh0RWxlbWVudFNpYmxpbmcuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLFxyXG4gICAgICAnICg8Yj4nICsgYWRkQ29tbWFzKHhwTG9ja1hQIC0gYWN0dWFsWFApICsgJzwvYj4pJyk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBhZGQgZnJvbSAnLi4vc3VwcG9ydC90YXNrJztcclxuaW1wb3J0IGd1aWxkVHJhY2tlciBmcm9tICcuL2d1aWxkVHJhY2tlci9ndWlsZFRyYWNrZXInO1xyXG5pbXBvcnQgcmV0cnlBamF4IGZyb20gJy4uL2FqYXgvcmV0cnlBamF4JztcclxuaW1wb3J0IHtcclxuICBjb2xvdXJlZERvdHMsXHJcbiAgb3BlblF1aWNrQnVmZkJ5TmFtZSxcclxuICBwQ0MsXHJcbiAgcGxheWVyTmFtZVxyXG59IGZyb20gJy4uL3N1cHBvcnQvbGF5b3V0JztcclxuaW1wb3J0IHtcclxuICBjcmVhdGVEb2N1bWVudCxcclxuICBmaW5kTm9kZSxcclxuICBnZXRWYWx1ZSxcclxuICB0b2dnbGVWaXNpYmlsdHksXHJcbiAgeG1saHR0cFxyXG59IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtndWlsZFhQTG9jaywgcmVtb3ZlR3VpbGRBdnlJbWdCb3JkZXJ9IGZyb20gJy4vZ3VpbGRVdGlscyc7XHJcblxyXG52YXIgbGVmdEhhbmRTaWRlQ29sdW1uVGFibGU7XHJcbnZhciBtZW1iZXJzO1xyXG52YXIgbWVtQ291bnQ7XHJcblxyXG5mdW5jdGlvbiBoYXpDb25mbGljdChjb25mbGljdFRhYmxlLCBjdXJQYWdlLCBpbnNlcnRIZXJlKSB7IC8vIExlZ2FjeVxyXG4gIGlmIChjdXJQYWdlID09PSAxKSB7XHJcbiAgICB2YXIgbmV3Tm9kZSA9IGluc2VydEhlcmUuaW5zZXJ0Um93KGluc2VydEhlcmUucm93cy5sZW5ndGggLSAyKTtcclxuICAgIG5ld05vZGUuaW5zZXJ0Q2VsbCgwKTtcclxuICAgIG5ld05vZGUuaW5zZXJ0Q2VsbCgwKTtcclxuICAgIG5ld05vZGUuY2VsbHNbMF0uaW5uZXJIVE1MID1cclxuICAgICAgJzxhIGhyZWY9XCJpbmRleC5waHA/Y21kPWd1aWxkJnN1YmNtZD1jb25mbGljdHNcIj5BY3RpdmUgQ29uZmxpY3RzPC9hPic7XHJcbiAgICBuZXdOb2RlLmNlbGxzWzFdLmlubmVySFRNTCA9ICdTY29yZSc7XHJcbiAgfVxyXG4gIGZvciAodmFyIGkgPSAxOyBpIDw9IGNvbmZsaWN0VGFibGUucm93cy5sZW5ndGggLSA0OyBpICs9IDIpIHtcclxuICAgIHZhciBuZXdSb3cgPSBpbnNlcnRIZXJlLmluc2VydFJvdyhpbnNlcnRIZXJlLnJvd3MubGVuZ3RoIC0gMik7XHJcbiAgICBuZXdSb3cuaW5zZXJ0Q2VsbCgwKTtcclxuICAgIG5ld1Jvdy5pbnNlcnRDZWxsKDApO1xyXG4gICAgbmV3Um93LmNlbGxzWzBdLmlubmVySFRNTCA9IGNvbmZsaWN0VGFibGUucm93c1tpXS5jZWxsc1swXS5pbm5lckhUTUw7XHJcbiAgICBuZXdSb3cuY2VsbHNbMV0uaW5uZXJIVE1MID0gJzxiPicgKyBjb25mbGljdFRhYmxlLnJvd3NbaV0uY2VsbHNbNl1cclxuICAgICAgLmlubmVySFRNTCArICc8L2I+JztcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFjdGl2ZUNvbmZsaWN0cyhkb2MsIGN1clBhZ2UsIGluc2VydEhlcmUpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIGNvbmZsaWN0VGFibGUgPSBmaW5kTm9kZShcclxuICAgICcvL2ZvbnRbY29udGFpbnMoLixcIlBhcnRpY2lwYW50c1wiKV0vYW5jZXN0b3I6OnRhYmxlWzFdJywgZG9jKTtcclxuICBpZiAoY29uZmxpY3RUYWJsZSAmJiBjb25mbGljdFRhYmxlLnJvd3MubGVuZ3RoID4gMykge1xyXG4gICAgaGF6Q29uZmxpY3QoY29uZmxpY3RUYWJsZSwgY3VyUGFnZSwgaW5zZXJ0SGVyZSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnb3RDb25mbGljdEluZm8ocmVzcG9uc2VUZXh0LCBjYWxsYmFjaykgeyAvLyBMZWdhY3lcclxuICB2YXIgZG9jID0gY3JlYXRlRG9jdW1lbnQocmVzcG9uc2VUZXh0KTtcclxuICB2YXIgcGFnZSA9IGZpbmROb2RlKCcvL3RkW2NvbnRhaW5zKC4sXCJQYWdlOlwiKV0nLCBkb2MpO1xyXG4gIHZhciBjdXJQYWdlID0gcGFyc2VJbnQoZmluZE5vZGUoJy8vaW5wdXRbQG5hbWU9XCJwYWdlXCJdJyxcclxuICAgIGRvYykudmFsdWUsIDEwKTtcclxuICB2YXIgbWF4UGFnZSA9IHBhZ2UuaW5uZXJIVE1MLm1hdGNoKC9vZiZuYnNwOyhcXGQqKS8pO1xyXG4gIGFjdGl2ZUNvbmZsaWN0cyhkb2MsIGN1clBhZ2UsIGNhbGxiYWNrLm5vZGUpO1xyXG4gIGlmIChtYXhQYWdlICYmIHBhcnNlSW50KG1heFBhZ2VbMV0sIDEwKSA+IGN1clBhZ2UpIHtcclxuICAgIHhtbGh0dHAoXHJcbiAgICAgICdpbmRleC5waHA/Y21kPWd1aWxkJnN1YmNtZD1jb25mbGljdHMmc3ViY21kMj0mcGFnZT0nICtcclxuICAgICAgKGN1clBhZ2UgKyAxKSArICcmc2VhcmNoX3RleHQ9JyxcclxuICAgICAgZ290Q29uZmxpY3RJbmZvLFxyXG4gICAgICB7bm9kZTogY2FsbGJhY2subm9kZX0pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY29uZmxpY3RJbmZvKCkgeyAvLyBqUXVlcnlcclxuICByZXRyeUFqYXgoJ2luZGV4LnBocD9jbWQ9Z3VpbGQmc3ViY21kPWNvbmZsaWN0cycpLmRvbmUoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgZ290Q29uZmxpY3RJbmZvKGRhdGEsXHJcbiAgICAgIHtub2RlOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGlzdGljc0NvbnRyb2wnKX0pO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb2dvVG9nZ2xlKCkge1xyXG4gIHZhciBjaGFuZ2VMb2dvQ2VsbCA9IGxlZnRIYW5kU2lkZUNvbHVtblRhYmxlLnJvd3NbMF0uY2VsbHNbMV0uZmlyc3RDaGlsZDtcclxuICBjaGFuZ2VMb2dvQ2VsbC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsICdbIDxzcGFuIGNsYXNzPVwiZnNoTGluaycgK1xyXG4gICAgJyB0aXAtc3RhdGljXCIgaWQ9XCJ0b2dnbGVHdWlsZExvZ29Db250cm9sXCIgJyArXHJcbiAgICAnbGlua3RvPVwiZ3VpbGRMb2dvQ29udHJvbFwiIGRhdGEtdGlwcGVkPVwiVG9nZ2xlIFNlY3Rpb25cIj5YPC9zcGFuPiBdJyk7XHJcbiAgdmFyIGd1aWxkTG9nb0VsZW1lbnQgPSBsZWZ0SGFuZFNpZGVDb2x1bW5UYWJsZS5yb3dzWzJdLmNlbGxzWzBdXHJcbiAgICAuZmlyc3RDaGlsZC5uZXh0U2libGluZztcclxuICBndWlsZExvZ29FbGVtZW50LmlkID0gJ2d1aWxkTG9nb0NvbnRyb2wnO1xyXG4gIGlmIChnZXRWYWx1ZSgnZ3VpbGRMb2dvQ29udHJvbCcpKSB7XHJcbiAgICBndWlsZExvZ29FbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2ZzaEhpZGUnKTtcclxuICB9XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZ2dsZUd1aWxkTG9nb0NvbnRyb2wnKVxyXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlVmlzaWJpbHR5KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3RhdFRvZ2dsZSgpIHtcclxuICB2YXIgbGVhdmVHdWlsZENlbGwgPSBsZWZ0SGFuZFNpZGVDb2x1bW5UYWJsZS5yb3dzWzRdLmNlbGxzWzFdLmZpcnN0Q2hpbGQ7XHJcbiAgbGVhdmVHdWlsZENlbGwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCAnPHNwYW4gY2xhc3M9XCJmc2hOb1dyYXBcIj4nICtcclxuICAgICdbIDxzcGFuIGNsYXNzPVwiZnNoTGluayB0aXAtc3RhdGljXCIgaWQ9XCJ0b2dnbGVTdGF0aXN0aWNzQ29udHJvbFwiICcgK1xyXG4gICAgJ2xpbmt0bz1cInN0YXRpc3RpY3NDb250cm9sXCIgZGF0YS10aXBwZWQ9XCJUb2dnbGUgU2VjdGlvblwiPlg8L3NwYW4+IF0nICtcclxuICAgICc8L3NwYW4+Jyk7XHJcbiAgdmFyIHN0YXRpc3RpY3NDb250cm9sRWxlbWVudCA9IGxlZnRIYW5kU2lkZUNvbHVtblRhYmxlLnJvd3NbNl0uY2VsbHNbMF1cclxuICAgIC5maXJzdENoaWxkLm5leHRTaWJsaW5nO1xyXG4gIHN0YXRpc3RpY3NDb250cm9sRWxlbWVudC5pZCA9ICdzdGF0aXN0aWNzQ29udHJvbCc7XHJcbiAgaWYgKGdldFZhbHVlKCdzdGF0aXN0aWNzQ29udHJvbCcpKSB7XHJcbiAgICBzdGF0aXN0aWNzQ29udHJvbEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZnNoSGlkZScpO1xyXG4gIH1cclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9nZ2xlU3RhdGlzdGljc0NvbnRyb2wnKVxyXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlVmlzaWJpbHR5KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3RydWN0dXJlVG9nZ2xlKCkge1xyXG4gIHZhciBidWlsZENlbGwgPSBsZWZ0SGFuZFNpZGVDb2x1bW5UYWJsZS5yb3dzWzE1XS5jZWxsc1sxXS5maXJzdENoaWxkO1xyXG4gIGJ1aWxkQ2VsbC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsICdbIDxzcGFuIGNsYXNzPVwiZnNoTGluayAnICtcclxuICAgICd0aXAtc3RhdGljXCIgaWQ9XCJ0b2dnbGVHdWlsZFN0cnVjdHVyZUNvbnRyb2xcIiAnICtcclxuICAgICdsaW5rdG89XCJndWlsZFN0cnVjdHVyZUNvbnRyb2xcIiBkYXRhLXRpcHBlZD1cIlRvZ2dsZSBTZWN0aW9uXCI+WDwvc3Bhbj4gXScpO1xyXG4gIHZhciBndWlsZFN0cnVjdHVyZUNvbnRyb2xFbGVtZW50ID0gbGVmdEhhbmRTaWRlQ29sdW1uVGFibGUucm93c1sxN11cclxuICAgIC5jZWxsc1swXS5maXJzdENoaWxkLm5leHRTaWJsaW5nO1xyXG4gIGd1aWxkU3RydWN0dXJlQ29udHJvbEVsZW1lbnQuaWQgPSAnZ3VpbGRTdHJ1Y3R1cmVDb250cm9sJztcclxuICBpZiAoZ2V0VmFsdWUoJ2d1aWxkU3RydWN0dXJlQ29udHJvbCcpKSB7XHJcbiAgICBndWlsZFN0cnVjdHVyZUNvbnRyb2xFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2ZzaEhpZGUnKTtcclxuICB9XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZ2dsZUd1aWxkU3RydWN0dXJlQ29udHJvbCcpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVWaXNpYmlsdHkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBiYXRjaEJ1ZmZMaW5rcygpIHtcclxuICB2YXIgbGltaXQgPSBwZXJmb3JtYW5jZS5ub3coKSArIDU7XHJcbiAgd2hpbGUgKHBlcmZvcm1hbmNlLm5vdygpIDwgbGltaXQgJiYgbWVtQ291bnQgPCBtZW1iZXJzLmxlbmd0aCkge1xyXG4gICAgbWVtYmVyc1ttZW1Db3VudF0ucGFyZW50Tm9kZS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsXHJcbiAgICAgICcgPHNwYW4gY2xhc3M9XCJzbWFsbExpbmtcIj5bYl08L3NwYW4+Jyk7XHJcbiAgICBtZW1Db3VudCArPSAxO1xyXG4gIH1cclxuICBpZiAobWVtQ291bnQgPCBtZW1iZXJzLmxlbmd0aCkge1xyXG4gICAgYWRkKDMsIGJhdGNoQnVmZkxpbmtzKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJ1ZmZMaW5rcygpIHtcclxuICAvLyBUT0RPIHByZWZlcmVuY2VcclxuICBtZW1Db3VudCA9IDA7XHJcbiAgbWVtYmVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAnI3BDQyBhW2hyZWZePVwiaW5kZXgucGhwP2NtZD1wcm9maWxlJnBsYXllcl9pZD1cIl0nKTtcclxuICBhZGQoMywgYmF0Y2hCdWZmTGlua3MpO1xyXG4gIHBDQy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2dCkge1xyXG4gICAgaWYgKGV2dC50YXJnZXQuY2xhc3NOYW1lICE9PSAnc21hbGxMaW5rJykge3JldHVybjt9XHJcbiAgICBvcGVuUXVpY2tCdWZmQnlOYW1lKGV2dC50YXJnZXQucHJldmlvdXNFbGVtZW50U2libGluZy50ZXh0KTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2VsZlJlY2FsbExpbmsoKSB7XHJcbiAgLy8gc2VsZiByZWNhbGxcclxuICB2YXIgZ2V0TGkgPSBsZWZ0SGFuZFNpZGVDb2x1bW5UYWJsZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnTEknKTtcclxuICB2YXIgc2VsZlJlY2FsbCA9IGdldExpW2dldExpLmxlbmd0aCAtIDFdLnBhcmVudE5vZGU7XHJcbiAgc2VsZlJlY2FsbC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsXHJcbiAgICAnPGxpPjxhIGhyZWY9XCJpbmRleC5waHA/Y21kPWd1aWxkJnN1YmNtZD1pbnZlbnRvcnkmc3ViY21kMj1yZXBvcnQmJyArXHJcbiAgICAndXNlcj0nICsgcGxheWVyTmFtZSgpICtcclxuICAgICdcIiBjbGFzcz1cInRpcC1zdGF0aWNcIiBkYXRhLXRpcHBlZD1cIlNlbGYgUmVjYWxsXCI+U2VsZiBSZWNhbGw8L2E+PC9saT4nKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0R3VpbGQoKSB7XHJcbiAgYWRkKDMsIGNvbG91cmVkRG90cyk7XHJcbiAgYWRkKDMsIHJlbW92ZUd1aWxkQXZ5SW1nQm9yZGVyKTtcclxuICBhZGQoMywgZ3VpbGRYUExvY2spO1xyXG4gIGxlZnRIYW5kU2lkZUNvbHVtblRhYmxlID0gcENDXHJcbiAgICAubGFzdEVsZW1lbnRDaGlsZC5yb3dzWzJdLmNlbGxzWzBdLmZpcnN0RWxlbWVudENoaWxkO1xyXG4gIGFkZCgzLCBsb2dvVG9nZ2xlKTtcclxuICBhZGQoMywgc3RhdFRvZ2dsZSk7XHJcbiAgYWRkKDMsIHN0cnVjdHVyZVRvZ2dsZSk7XHJcbiAgYWRkKDMsIGJ1ZmZMaW5rcyk7XHJcbiAgYWRkKDMsIHNlbGZSZWNhbGxMaW5rKTtcclxuICAvLyBEZXRhaWxlZCBjb25mbGljdCBpbmZvcm1hdGlvblxyXG4gIGlmIChnZXRWYWx1ZSgnZGV0YWlsZWRDb25mbGljdEluZm8nKSkge1xyXG4gICAgYWRkKDMsIGNvbmZsaWN0SW5mbyk7XHJcbiAgfVxyXG4gIGFkZCg0LCBndWlsZFRyYWNrZXIpO1xyXG59XHJcbiIsImltcG9ydCB7Y3JlYXRlSW5wdXR9IGZyb20gJy4uL2NvbW1vbi9jRWxlbWVudCc7XHJcbmltcG9ydCB7aW1hZ2VTZXJ2ZXJ9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtwQ0N9IGZyb20gJy4uL3N1cHBvcnQvbGF5b3V0JztcclxuaW1wb3J0IHt0YWtlSXRlbX0gZnJvbSAnLi4vc3VwcG9ydC9hamF4JztcclxuXHJcbmZ1bmN0aW9uIGRvSXRlbVRhYmxlKHJvd3MpIHtcclxuICBmb3IgKHZhciBpID0gMTsgaSA8IHJvd3MubGVuZ3RoIC0gMTsgaSArPSAyKSB7XHJcbiAgICByb3dzW2ldLmNlbGxzWzJdLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJyxcclxuICAgICAgJyZuYnNwOzxzcGFuIGNsYXNzPVwic2VuZExpbmtcIj5GYXN0IEJQPC9zcGFuPicpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZG9DaGVja0FsbCgpIHtcclxuICB2YXIgYm94ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjcENDIGlucHV0W25hbWU9XCJ0YWdJbmRleFtdXCJdJyk7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChib3hlcywgZnVuY3Rpb24oZWwpIHtcclxuICAgIGVsLmNsaWNrKCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRha2VSZXN1bHQoc2VsZiwgZGF0YSkge1xyXG4gIGlmIChkYXRhLnIgPT09IDApIHtcclxuICAgIHNlbGYucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xyXG4gICAgc2VsZi5jbGFzc05hbWUgPSAnZnNoR3JlZW4nO1xyXG4gICAgc2VsZi50ZXh0Q29udGVudCA9ICdUYWtlbic7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBmYXN0QnAoZWwpIHtcclxuICB2YXIgaXRtSWQgPSBlbC5wYXJlbnROb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcucHJldmlvdXNFbGVtZW50U2libGluZ1xyXG4gICAgLmZpcnN0RWxlbWVudENoaWxkLnZhbHVlO1xyXG4gIHRha2VJdGVtKGl0bUlkKS5kb25lKHRha2VSZXN1bHQuYmluZChudWxsLCBlbCkpO1xyXG4gIGVsLnRleHRDb250ZW50ID0gJyc7XHJcbiAgZWwuY2xhc3NOYW1lID0gJ2d1aWxkVGFnU3Bpbm5lcic7XHJcbiAgZWwuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gJ3VybChcXCcnICsgaW1hZ2VTZXJ2ZXIgK1xyXG4gICAgJy9za2luL2xvYWRpbmcuZ2lmXFwnKSc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV2dEhkbHIoZSkge1xyXG4gIHZhciBzZWxmID0gZS50YXJnZXQ7XHJcbiAgaWYgKHNlbGYudmFsdWUgPT09ICdDaGVjayBBbGwnKSB7ZG9DaGVja0FsbCgpO31cclxuICBpZiAoc2VsZi5jbGFzc05hbWUgPT09ICdzZW5kTGluaycpIHtmYXN0QnAoc2VsZik7fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmplY3RHdWlsZEFkZFRhZ3NXaWRnZXRzKCkge1xyXG4gIHBDQy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2dEhkbHIpO1xyXG5cclxuICB2YXIgbm9kZUxpc3QgPSBwQ0MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RhYmxlJyk7XHJcbiAgdmFyIGl0ZW1UYWJsZSA9IG5vZGVMaXN0W25vZGVMaXN0Lmxlbmd0aCAtIDFdO1xyXG4gIGlmIChpdGVtVGFibGUpIHtkb0l0ZW1UYWJsZShpdGVtVGFibGUucm93cyk7fVxyXG5cclxuICB2YXIgY2hlY2tBbGwgPSBjcmVhdGVJbnB1dCh7dHlwZTogJ2J1dHRvbicsIHZhbHVlOiAnQ2hlY2sgQWxsJ30pO1xyXG4gIG5vZGVMaXN0WzBdLnJvd3NbNV0uY2VsbHNbMF0uYXBwZW5kQ2hpbGQoY2hlY2tBbGwpO1xyXG59XHJcbiIsImltcG9ydCBhZGQgZnJvbSAnLi9zdXBwb3J0L3Rhc2snO1xyXG5pbXBvcnQge2NyZWF0ZUlucHV0fSBmcm9tICcuL2NvbW1vbi9jRWxlbWVudCc7XHJcbmltcG9ydCBnZXRNZW1ickxpc3QgZnJvbSAnLi9hamF4L2dldE1lbWJyTGlzdCc7XHJcbmltcG9ydCByZXRyeUFqYXggZnJvbSAnLi9hamF4L3JldHJ5QWpheCc7XHJcbmltcG9ydCB7Y3JlYXRlRG9jdW1lbnQsIGdldFZhbHVlfSBmcm9tICcuL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtwQ0MsIHBsYXllck5hbWV9IGZyb20gJy4vc3VwcG9ydC9sYXlvdXQnO1xyXG5cclxudmFyIHJhbmtzO1xyXG52YXIgbXlSYW5rO1xyXG52YXIgdGhlUm93cztcclxudmFyIHJhbmtDb3VudDtcclxudmFyIGNoYXJhY3RlclJvdztcclxuXHJcbnZhciBwcml2TG9va3VwID0ge1xyXG4gICdCYW5rIFdpdGhkcmF3JzogNSxcclxuICAnQnVpbGQvVXBncmFkZS9EZW1vbGlzaCBTdHJ1Y3R1cmVzJzogNSxcclxuICAnQ2FuIFVuLVRhZyBJdGVtcyc6IDUsXHJcbiAgJ0J1aWxkL1VwZ3JhZGUgU3RydWN0dXJlcyc6IDQsXHJcbiAgJ0NhbiBLaWNrIE1lbWJlcnMnOiA0LFxyXG4gICdDYW4gTWFzcyBNZXNzYWdlcyc6IDAuNSxcclxuICAnVGFrZSBJdGVtcyc6IDAuMixcclxuICAnQ2FuIFJlY2FsbCBUYWdnZWQgSXRlbXMnOiAwLjIsXHJcbiAgJ1N0b3JlIEl0ZW1zJzogMC4xLFxyXG4gICdDYW4gVmlldyBBZHZpc29yJzogMC4xXHJcbn07XHJcblxyXG5mdW5jdGlvbiBwYXJzZVJhbmtEYXRhKGxpbmtFbGVtZW50LCByZXNwb25zZVRleHQpIHtcclxuICAvLyBNYWtlcyBhIHdlaWdodGVkIGNhbGN1bGF0aW9uIG9mIGF2YWlsYWJsZSBwZXJtaXNzaW9ucyBhbmQgZ2V0cyB0YXggcmF0ZVxyXG4gIHZhciBkb2MgPSBjcmVhdGVEb2N1bWVudChyZXNwb25zZVRleHQpO1xyXG4gIHZhciBjaGVja0JveGVzID0gZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAnI3BDQyBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl06Y2hlY2tlZCcpO1xyXG4gIHZhciBjb3VudCA9IDA7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChjaGVja0JveGVzLCBmdW5jdGlvbihjaGVja2JveCkge1xyXG4gICAgdmFyIHByaXZOYW1lID0gY2hlY2tib3gubmV4dEVsZW1lbnRTaWJsaW5nLnRleHRDb250ZW50LnRyaW0oKTtcclxuICAgIGlmIChwcml2TmFtZSBpbiBwcml2TG9va3VwKSB7XHJcbiAgICAgIGNvdW50ICs9IHByaXZMb29rdXBbcHJpdk5hbWVdO1xyXG4gICAgfSBlbHNlIHtjb3VudCArPSAxO31cclxuICB9KTtcclxuICB2YXIgdGF4UmF0ZSA9IGRvYy5xdWVyeVNlbGVjdG9yKCcjcENDIGlucHV0W25hbWU9XCJyYW5rX3RheFwiXScpLnZhbHVlO1xyXG4gIGxpbmtFbGVtZW50Lmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsICc8c3BhbiBjbGFzcz1cImZzaEJsdWVcIj4oJyArXHJcbiAgICBNYXRoLnJvdW5kKDEwICogY291bnQpIC8gMTAgKyAnKSBUYXg6KCcgKyB0YXhSYXRlICsgJyUpPC9zcGFuPiAnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZmV0Y2hSYW5rRGF0YSgpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIGNhbGNCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2V0cmFua3dlaWdodGluZ3MnKTtcclxuICBjYWxjQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2ZzaEhpZGUnKTtcclxuICB2YXIgYWxsSXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjcENDIGlucHV0W3ZhbHVlPVwiRWRpdFwiXScpO1xyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYWxsSXRlbXMsIGZ1bmN0aW9uKGFuSXRlbSkge1xyXG4gICAgdmFyIHRhcmdldE5vZGUgPSBhbkl0ZW0ucGFyZW50Tm9kZS5wYXJlbnROb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XHJcbiAgICB2YXIgaHJlZiA9IC93aW5kb3dcXC5sb2NhdGlvbj0nKC4qKSc7Ly5leGVjKGFuSXRlbVxyXG4gICAgICAuZ2V0QXR0cmlidXRlKCdvbmNsaWNrJykpWzFdO1xyXG4gICAgcmV0cnlBamF4KGhyZWYpLmRvbmUocGFyc2VSYW5rRGF0YS5iaW5kKG51bGwsIHRhcmdldE5vZGUpKTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gbm90VmFsaWRSb3codGhpc1JhbmtSb3dOdW0sIHRhcmdldFJvd051bSwgcGFyZW50VGFibGUpIHtcclxuICByZXR1cm4gY2hhcmFjdGVyUm93ID49IE1hdGgubWluKHRoaXNSYW5rUm93TnVtLCB0YXJnZXRSb3dOdW0pIHx8XHJcbiAgICB0YXJnZXRSb3dOdW0gPCAxIHx8XHJcbiAgICB0YXJnZXRSb3dOdW0gPiBwYXJlbnRUYWJsZS5yb3dzLmxlbmd0aDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VGFyZ2V0Um93TnVtYmVyKHZhbCkge1xyXG4gIGlmICh2YWwgPT09ICdVcCcpIHtyZXR1cm4gLTE7fVxyXG4gIHJldHVybiAyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRQeFNjcm9sbCh2YWwpIHtcclxuICBpZiAodmFsID09PSAnVXAnKSB7cmV0dXJuIC0yMjt9XHJcbiAgcmV0dXJuIDIyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhamF4aWZ5UmFua0NvbnRyb2xzKGV2dCkgeyAvLyBqUXVlcnlcclxuICB2YXIgdmFsID0gZXZ0LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XHJcbiAgaWYgKHZhbCAhPT0gJ1VwJyAmJiB2YWwgIT09ICdEb3duJykge3JldHVybjt9XHJcbiAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gIHZhciBvbmNsaWNrSFJFRiA9IC93aW5kb3cubG9jYXRpb249JyguKiknOy9cclxuICAgIC5leGVjKGV2dC50YXJnZXQuZ2V0QXR0cmlidXRlKCdvbmNsaWNrJykpWzFdO1xyXG4gIHZhciB0aGlzUmFua1JvdyA9IGV2dC50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGU7XHJcbiAgdmFyIHRoaXNSYW5rUm93TnVtID0gdGhpc1JhbmtSb3cucm93SW5kZXg7XHJcbiAgdmFyIHRhcmdldFJvd051bSA9IHRoaXNSYW5rUm93TnVtICsgZ2V0VGFyZ2V0Um93TnVtYmVyKHZhbCk7XHJcbiAgdmFyIHBhcmVudFRhYmxlID0gdGhpc1JhbmtSb3cucGFyZW50Tm9kZTtcclxuICBpZiAobm90VmFsaWRSb3codGhpc1JhbmtSb3dOdW0sIHRhcmdldFJvd051bSwgcGFyZW50VGFibGUpKSB7cmV0dXJuO31cclxuICByZXRyeUFqYXgob25jbGlja0hSRUYpO1xyXG4gIHZhciBpbmplY3RSb3cgPSBwYXJlbnRUYWJsZS5yb3dzW3RhcmdldFJvd051bV07XHJcbiAgcGFyZW50VGFibGUuaW5zZXJ0QmVmb3JlKHRoaXNSYW5rUm93LCBpbmplY3RSb3cpO1xyXG4gIHZhciBweFNjcm9sbCA9IGdldFB4U2Nyb2xsKHZhbCk7XHJcbiAgd2luZG93LnNjcm9sbEJ5KDAsIHB4U2Nyb2xsKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZG9CdXR0b25zKCkge1xyXG4gIC8vIGdhdGhlciByYW5rIGluZm8gYnV0dG9uXHJcbiAgdmFyIHdlaWdodEJ1dHRvbiA9IGNyZWF0ZUlucHV0KHtcclxuICAgIGlkOiAnZ2V0cmFua3dlaWdodGluZ3MnLFxyXG4gICAgY2xhc3NOYW1lOiAnY3VzdG9tYnV0dG9uJyxcclxuICAgIHR5cGU6ICdidXR0b24nLFxyXG4gICAgdmFsdWU6ICdHZXQgUmFuayBXZWlnaHRpbmdzJ1xyXG4gIH0pO1xyXG4gIHdlaWdodEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZldGNoUmFua0RhdGEpO1xyXG4gIHZhciB0aGVUZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaG93LWd1aWxkLWZvdW5kZXItcmFuay1uYW1lJylcclxuICAgIC5wYXJlbnROb2RlO1xyXG4gIHRoZVRkLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgJyZuYnNwOycpO1xyXG4gIHRoZVRkLmluc2VydEFkamFjZW50RWxlbWVudCgnYmVmb3JlZW5kJywgd2VpZ2h0QnV0dG9uKTtcclxuXHJcbiAgaWYgKGdldFZhbHVlKCdhamF4aWZ5UmFua0NvbnRyb2xzJykpIHtcclxuICAgIHBDQy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsXHJcbiAgICAgIGFqYXhpZnlSYW5rQ29udHJvbHMsIHRydWUpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gd3JpdGVNZW1iZXJzKGVsKSB7XHJcbiAgdmFyIHJhbmtDZWxsID0gZWwuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgdmFyIHJhbmtOYW1lID0gcmFua0NlbGwudGV4dENvbnRlbnQ7XHJcbiAgaWYgKHJhbmtzW3JhbmtOYW1lXSkgeyAvLyBoYXMgbWVtYmVyc1xyXG4gICAgaWYgKHJhbmtOYW1lID09PSBteVJhbmspIHtcclxuICAgICAgY2hhcmFjdGVyUm93ID0gcmFua0NvdW50OyAvLyBsaW1pdCBmb3IgYWpheGlmeSBsYXRlclxyXG4gICAgfVxyXG4gICAgcmFua0NlbGwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCAnIDxzcGFuIGNsYXNzPVwiZnNoQmx1ZVwiPi0gJyArXHJcbiAgICAgIHJhbmtzW3JhbmtOYW1lXS5qb2luKCcsICcpICsgJzwvc3Bhbj4nKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhaW50UmFua3MoKSB7XHJcbiAgdmFyIGxpbWl0ID0gcGVyZm9ybWFuY2Uubm93KCkgKyAxMDtcclxuICB3aGlsZSAocGVyZm9ybWFuY2Uubm93KCkgPCBsaW1pdCAmJlxyXG4gICAgICByYW5rQ291bnQgPCB0aGVSb3dzLmxlbmd0aCkge1xyXG4gICAgdmFyIGVsID0gdGhlUm93c1tyYW5rQ291bnRdO1xyXG5cclxuICAgIHdyaXRlTWVtYmVycyhlbCk7XHJcblxyXG4gICAgcmFua0NvdW50ICs9IDE7XHJcbiAgfVxyXG4gIGlmIChyYW5rQ291bnQgPCB0aGVSb3dzLmxlbmd0aCkge1xyXG4gICAgYWRkKDMsIHBhaW50UmFua3MpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UmFua3MobWVtYnJMaXN0KSB7XHJcbiAgcmFua3MgPSBPYmplY3Qua2V5cyhtZW1ickxpc3QpLnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXJyKSB7XHJcbiAgICBpZiAoY3VyciAhPT0gJ2xhc3RVcGRhdGUnKSB7XHJcbiAgICAgIHZhciByYW5rTmFtZSA9IG1lbWJyTGlzdFtjdXJyXS5yYW5rX25hbWU7XHJcbiAgICAgIHByZXZbcmFua05hbWVdID0gcHJldltyYW5rTmFtZV0gfHwgW107XHJcbiAgICAgIHByZXZbcmFua05hbWVdLnB1c2goY3Vycik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJldjtcclxuICB9LCB7fSk7XHJcbiAgbXlSYW5rID0gbWVtYnJMaXN0W3BsYXllck5hbWUoKV0ucmFua19uYW1lO1xyXG4gIHRoZVJvd3MgPSBwQ0MuZmlyc3RFbGVtZW50Q2hpbGRcclxuICAgIC5uZXh0RWxlbWVudFNpYmxpbmcucm93c1sxM10uZmlyc3RFbGVtZW50Q2hpbGQuZmlyc3RFbGVtZW50Q2hpbGQucm93cztcclxuICByYW5rQ291bnQgPSAxO1xyXG4gIGFkZCgzLCBwYWludFJhbmtzKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0R3VpbGRSYW5rcygpIHsgLy8galF1ZXJ5XHJcbiAgZ2V0TWVtYnJMaXN0KHRydWUpLmRvbmUoZnVuY3Rpb24obWVtYnJMaXN0KSB7XHJcbiAgICBhZGQoMywgZ2V0UmFua3MsIFttZW1ickxpc3RdKTtcclxuICB9KTtcclxuICBhZGQoMywgZG9CdXR0b25zKTtcclxufVxyXG4iLCJpbXBvcnQge3RoZUludn0gZnJvbSAnLi9pbnZlbnRvcnknO1xyXG5cclxudmFyIGxvY2F0aW9ucyA9IFtcclxuICB7XHJcbiAgICB0ZXN0OiBmdW5jdGlvbihyb3cpIHtyZXR1cm4gcm93LnBsYXllcl9pZCAmJiByb3cucGxheWVyX2lkID09PSAtMTt9LFxyXG4gICAgcmVzOiBmdW5jdGlvbihyb3csIGFjdCkge1xyXG4gICAgICByZXR1cm4gJ3Rha2VJdGVtXCIgYWN0aW9uPVwiJyArIGFjdC5hO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAge1xyXG4gICAgdGVzdDogZnVuY3Rpb24ocm93KSB7XHJcbiAgICAgIHJldHVybiByb3cucGxheWVyX2lkICYmXHJcbiAgICAgICAgcm93LnBsYXllcl9pZCAhPT0gdGhlSW52LmN1cnJlbnRfcGxheWVyX2lkO1xyXG4gICAgfSxcclxuICAgIHJlczogZnVuY3Rpb24ocm93LCBhY3QpIHtcclxuICAgICAgcmV0dXJuICdyZWNhbGxJdGVtXCIgcGxheWVyaWQ9XCInICsgcm93LnBsYXllcl9pZCArXHJcbiAgICAgICAgJ1wiIG1vZGU9XCIwXCIgYWN0aW9uPVwiJyArIGFjdC5hO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAge1xyXG4gICAgdGVzdDogZnVuY3Rpb24ocm93KSB7XHJcbiAgICAgIHJldHVybiByb3cuZm9sZGVyX2lkICYmICFyb3cuZXF1aXBwZWQgfHxcclxuICAgICAgICByb3cucGxheWVyX2lkICYmICFyb3cuZXF1aXBwZWQgJiZcclxuICAgICAgICByb3cucGxheWVyX2lkID09PSB0aGVJbnYuY3VycmVudF9wbGF5ZXJfaWQ7XHJcbiAgICB9LFxyXG4gICAgcmVzOiBmdW5jdGlvbihyb3csIGFjdCkge3JldHVybiBhY3QuYzt9XHJcbiAgfVxyXG5dO1xyXG5cclxuZnVuY3Rpb24gd3VSZW5kZXIocm93LCBhY3QpIHtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxvY2F0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgaWYgKGxvY2F0aW9uc1tpXS50ZXN0KHJvdykpIHtcclxuICAgICAgcmV0dXJuICc8c3BhbiBjbGFzcz1cImZzaExpbmsgJyArIGxvY2F0aW9uc1tpXS5yZXMocm93LCBhY3QpICtcclxuICAgICAgICAnXCIgaW52aWQ9XCInICsgcm93Lmludl9pZCArICdcIj4nICsgYWN0LmIgKyAnPC9zcGFuPic7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiAnJztcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2VhclVzZVJlbmRlcihkYXRhLCBfdHlwZSwgcm93KSB7XHJcbiAgLy8gICAgICAgICAgICAwICAxICAyICAzICA0ICA1ICA2ICA3ICA4IDkgMTAgMTExMjEzMTQgMTVcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc3BhcnNlLWFycmF5c1xyXG4gIHZhciBhY3Rpb24gPSBbMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLCAyLCAyLCAsICwgLCAyXVtkYXRhXTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcbiAgaWYgKGFjdGlvbiA9PT0gMSkge1xyXG4gICAgcmV0dXJuIHd1UmVuZGVyKHJvdywge1xyXG4gICAgICBhOiAnd2VhcicsXHJcbiAgICAgIGI6ICdXZWFyJyxcclxuICAgICAgYzogJ3dlYXJJdGVtJ1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmIChhY3Rpb24gPT09IDIpIHtcclxuICAgIHJldHVybiB3dVJlbmRlcihyb3csIHtcclxuICAgICAgYTogJ3VzZScsXHJcbiAgICAgIGI6ICdVc2UnLFxyXG4gICAgICBjOiAndXNlSXRlbSdcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgdmFyIGludk1hbkZpbHRlciA9XHJcbiAgJzx0YWJsZSBjbGFzcz1cImZzaEludkZpbHRlclwiPicgK1xyXG4gICc8dHI+PHRoIGNvbHNwYW49XCIxNFwiPkBAcmVwb3J0VGl0bGVAQDwvdGg+JyArXHJcbiAgJzx0aD48c3BhbiBpZD1cImZzaFJlZnJlc2hcIiBjbGFzcz1cImZzaExpbmtcIj5bUmVmcmVzaF08L3NwYW4+PC90aD48L3RyPicgK1xyXG4gICc8dHI+PHRkIGNvbHNwYW49XCIyXCIgcm93c3Bhbj1cIjNcIj48Yj4mbmJzcDtTaG93IEl0ZW1zOjwvYj48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO0hlbG1ldDo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoSGVsbWV0XCIgdHlwZT1cImNoZWNrYm94XCIgaXRlbT1cIjBcIi8+PC90ZD4nICtcclxuICAnPHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4mbmJzcDtBcm1vcjo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoQXJtb3JcIiB0eXBlPVwiY2hlY2tib3hcIiBpdGVtPVwiMVwiLz48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO0dsb3Zlczo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoR2xvdmVzXCIgdHlwZT1cImNoZWNrYm94XCIgaXRlbT1cIjJcIi8+PC90ZD4nICtcclxuICAnPHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4mbmJzcDtCb290czo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoQm9vdHNcIiB0eXBlPVwiY2hlY2tib3hcIiBpdGVtPVwiM1wiLz48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO1dlYXBvbjo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoV2VhcG9uXCIgdHlwZT1cImNoZWNrYm94XCIgaXRlbT1cIjRcIi8+PC90ZD4nICtcclxuICAnPHRkPjwvdGQ+JyArXHJcbiAgJzx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+Jm5ic3A7TWluIGx2bDo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoTWluTHZsXCIgc2l6ZT1cIjVcIiB2YWx1ZT1cIjFcIi8+PC90ZD4nICtcclxuICAnPC90cj48dHI+JyArXHJcbiAgJzx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+Jm5ic3A7U2hpZWxkOjwvdGQ+JyArXHJcbiAgJzx0ZD48aW5wdXQgaWQ9XCJmc2hTaGllbGRcIiB0eXBlPVwiY2hlY2tib3hcIiBpdGVtPVwiNVwiLz48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO1Jpbmc6PC90ZD4nICtcclxuICAnPHRkPjxpbnB1dCBpZD1cImZzaFJpbmdcIiB0eXBlPVwiY2hlY2tib3hcIiBpdGVtPVwiNlwiLz48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO0FtdWxldDo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoQW11bGV0XCIgdHlwZT1cImNoZWNrYm94XCIgaXRlbT1cIjdcIi8+PC90ZD4nICtcclxuICAnPHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4mbmJzcDtSdW5lOjwvdGQ+JyArXHJcbiAgJzx0ZD48aW5wdXQgaWQ9XCJmc2hSdW5lXCIgdHlwZT1cImNoZWNrYm94XCIgaXRlbT1cIjhcIi8+PC90ZD4nICtcclxuICAnPHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4mbmJzcDtTZXRzIE9ubHk6PC90ZD4nICtcclxuICAnPHRkPjxpbnB1dCBpZD1cImZzaFNldHNcIiBpdGVtPVwiLTFcIiB0eXBlPVwiY2hlY2tib3hcIi8+PC90ZD4nICtcclxuICAnPHRkPjwvdGQ+JyArXHJcbiAgJzx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+Jm5ic3A7TWF4IGx2bDo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoTWF4THZsXCIgc2l6ZT1cIjVcIiB2YWx1ZT1cIjk5OTlcIi8+PC90ZD4nICtcclxuICAnPC90cj48dHI+JyArXHJcbiAgJzx0ZCBjb2xzcGFuPVwiMlwiPicgK1xyXG4gICcmbmJzcDtbPHNwYW4gaWQ9XCJmc2hBbGxcIiBjbGFzcz1cImZzaExpbmtcIj5TZWxlY3QgQWxsPC9zcGFuPl08L3RkPicgK1xyXG4gICc8dGQgY29sc3Bhbj1cIjJcIj4nICtcclxuICAnJm5ic3A7WzxzcGFuIGlkPVwiZnNoTm9uZVwiIGNsYXNzPVwiZnNoTGlua1wiPlNlbGVjdCBOb25lPC9zcGFuPl08L3RkPicgK1xyXG4gICc8dGQgY29sc3Bhbj1cIjJcIj4nICtcclxuICAnJm5ic3A7WzxzcGFuIGlkPVwiZnNoRGVmYXVsdFwiIGNsYXNzPVwiZnNoTGlua1wiPkRlZmF1bHRzPC9zcGFuPl08L3RkPicgK1xyXG4gICc8dGQgY29sc3Bhbj1cIjZcIj48L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoUmVzZXRcIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJSZXNldFwiLz48L3RkPicgK1xyXG4gICc8L3RyPicgK1xyXG4gICc8dHI+JyArXHJcbiAgJzx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+Jm5ic3A7UXVlc3QgSXRlbTo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoUXVlc3RcIiBpdGVtPVwiOVwiIHR5cGU9XCJjaGVja2JveFwiLz48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO1BvdGlvbjo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoUG90aW9uXCIgaXRlbT1cIjEwXCIgdHlwZT1cImNoZWNrYm94XCIvPjwvdGQ+JyArXHJcbiAgJzx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+Jm5ic3A7UmVzb3VyY2U6PC90ZD4nICtcclxuICAnPHRkPjxpbnB1dCBpZD1cImZzaFJlc291cmNlXCIgaXRlbT1cIjEyXCIgdHlwZT1cImNoZWNrYm94XCIvPjwvdGQ+JyArXHJcbiAgJzx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+Jm5ic3A7UmVjaXBlOjwvdGQ+JyArXHJcbiAgJzx0ZD48aW5wdXQgaWQ9XCJmc2hSZWNpcGVcIiBpdGVtPVwiMTNcIiB0eXBlPVwiY2hlY2tib3hcIi8+PC90ZD4nICtcclxuICAnPHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4mbmJzcDtDb250YWluZXI6PC90ZD4nICtcclxuICAnPHRkPjxpbnB1dCBpZD1cImZzaENvbnRhaW5lclwiIGl0ZW09XCIxNFwiIHR5cGU9XCJjaGVja2JveFwiLz48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO0ZyYWcgU3Rhc2g6PC90ZD4nICtcclxuICAnPHRkPjxpbnB1dCBpZD1cImZzaFN0YXNoXCIgaXRlbT1cIjE2XCIgdHlwZT1cImNoZWNrYm94XCIvPjwvdGQ+JyArXHJcbiAgLy8gJyBDb21wb3NlZDogPGlucHV0IGlkPVwiZnNoQ29tcG9zZWRcIiBpdGVtPVwiMTVcIiB0eXBlPVwiY2hlY2tib3hcIi8+JyArXHJcbiAgJzx0ZCBjb2xzcGFuPVwiM1wiPjwvdGQ+PC90cj4nICtcclxuICAnPHRyPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO0NvbW1vbjo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoQ29tbW9uXCIgaXRlbT1cIjEwMFwiIHR5cGU9XCJjaGVja2JveFwiIGNoZWNrZWQvPjwvdGQ+JyArXHJcbiAgJzx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+Jm5ic3A7UmFyZTo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoUmFyZVwiIGl0ZW09XCIxMDFcIiB0eXBlPVwiY2hlY2tib3hcIiBjaGVja2VkLz48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO1VuaXF1ZTo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoVW5pcXVlXCIgaXRlbT1cIjEwMlwiIHR5cGU9XCJjaGVja2JveFwiIGNoZWNrZWQvPjwvdGQ+JyArXHJcbiAgJzx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+Jm5ic3A7TGVnZW5kYXJ5OjwvdGQ+JyArXHJcbiAgJzx0ZD48aW5wdXQgaWQ9XCJmc2hMZWdlbmRhcnlcIiBpdGVtPVwiMTAzXCIgdHlwZT1cImNoZWNrYm94XCIgY2hlY2tlZC8+PC90ZD4nICtcclxuICAnPHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4mbmJzcDtTdXBlciBFbGl0ZTo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoU3VwZXJFbGl0ZVwiIGl0ZW09XCIxMDRcIiB0eXBlPVwiY2hlY2tib3hcIiBjaGVja2VkLz48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO0NyeXN0YWxsaW5lOjwvdGQ+JyArXHJcbiAgJzx0ZD48aW5wdXQgaWQ9XCJmc2hDcnlzdGFsbGluZVwiIGl0ZW09XCIxMDVcIiB0eXBlPVwiY2hlY2tib3hcIiBjaGVja2VkLz48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO0VwaWM6PC90ZD4nICtcclxuICAnPHRkIGNvbHNwYW49XCIyXCI+PGlucHV0IGlkPVwiZnNoRXBpY1wiIGl0ZW09XCIxMDZcIiB0eXBlPVwiY2hlY2tib3hcIiBjaGVja2VkLz4nICtcclxuICAnPC90ZD4nICtcclxuICAnPC90cj4nICtcclxuICAnPC90YWJsZT4nO1xyXG5leHBvcnQgdmFyIGludmVudG9yeUNoZWNrQWxsID0ge1xyXG4gICcwJzogMSxcclxuICAnMSc6IDEsXHJcbiAgJzInOiAxLFxyXG4gICczJzogMSxcclxuICAnNCc6IDEsXHJcbiAgJzUnOiAxLFxyXG4gICc2JzogMSxcclxuICAnNyc6IDEsXHJcbiAgJzgnOiAxLFxyXG4gICc5JzogMSxcclxuICAnMTAnOiAxLFxyXG4gICcxMSc6IDEsXHJcbiAgJzEyJzogMSxcclxuICAnMTMnOiAxLFxyXG4gICcxNCc6IDEsXHJcbiAgJzE1JzogMSxcclxuICAnMTYnOiAxLFxyXG4gICcxMDAnOiAxLFxyXG4gICcxMDEnOiAxLFxyXG4gICcxMDInOiAxLFxyXG4gICcxMDMnOiAxLFxyXG4gICcxMDQnOiAxLFxyXG4gICcxMDUnOiAxLFxyXG4gICcxMDYnOiAxXHJcbn07XHJcbmV4cG9ydCB2YXIgaXRlbVR5cGUgPSBbJ0hlbG1ldCcsICdBcm1vcicsICdHbG92ZXMnLCAnQm9vdHMnLCAnV2VhcG9uJywgJ1NoaWVsZCcsXHJcbiAgJ1JpbmcnLCAnQW11bGV0JywgJ1J1bmUnLCAnUXVlc3QgSXRlbScsICdQb3Rpb24nLCAnQ29tcG9uZW50JyxcclxuICAnUmVzb3VyY2UnLCAnUmVjaXBlJywgJ0NvbnRhaW5lcicsICdDb21wb3NlZCcsICdGcmFnIFN0YXNoJ107XHJcbmV4cG9ydCB2YXIgY3JhZnRIYXNoID0ge1xyXG4gIFBlcmZlY3Q6IHthYmJyOiAnUGVyZicsIGNvbG91cjogJyMwMGI2MDAnLCBpbmRleDogOH0sXHJcbiAgRXhjZWxsZW50OiB7YWJicjogJ0V4YycsIGNvbG91cjogJyNmNmVkMDAnLCBpbmRleDogN30sXHJcbiAgJ1ZlcnkgR29vZCc6IHthYmJyOiAnVkcnLCBjb2xvdXI6ICcjZjY3YTAwJywgaW5kZXg6IDZ9LFxyXG4gIEdvb2Q6IHthYmJyOiAnR29vZCcsIGNvbG91cjogJyNmNjVkMDAnLCBpbmRleDogNX0sXHJcbiAgQXZlcmFnZToge2FiYnI6ICdBdmUnLCBjb2xvdXI6ICcjZjY0NTAwJywgaW5kZXg6IDR9LFxyXG4gIFBvb3I6IHthYmJyOiAnUG9vcicsIGNvbG91cjogJyNmNjFkMDAnLCBpbmRleDogM30sXHJcbiAgJ1ZlcnkgUG9vcic6IHthYmJyOiAnVlByJywgY29sb3VyOiAnI2IyMTUwMCcsIGluZGV4OiAyfSxcclxuICBVbmNyYWZ0ZWQ6IHthYmJyOiAnVW5jJywgY29sb3VyOiAnIzY2NjY2NicsIGluZGV4OiAxfVxyXG59O1xyXG4iLCJpbXBvcnQgY2FsZiBmcm9tICcuLi9zdXBwb3J0L2NhbGYnO1xyXG5pbXBvcnQge2NyYWZ0SGFzaH0gZnJvbSAnLi9hc3NldHMnO1xyXG5pbXBvcnQge3Jhcml0eX0gZnJvbSAnLi4vc3VwcG9ydC9kYXRhT2JqJztcclxuaW1wb3J0IHt0aGVJbnZ9IGZyb20gJy4vaW52ZW50b3J5JztcclxuaW1wb3J0IHtmYWxsYmFjaywgaXNTZWxlY3RlZH0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5cclxuZnVuY3Rpb24gZ2V0VChwbGF5ZXJfaWQpIHtcclxuICBpZiAocGxheWVyX2lkID09PSAtMSkge3JldHVybiA0O31cclxuICByZXR1cm4gMTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGxheWVyKGludlBsYXllciwgcm93UGxheWVyLCBndWlsZCkge1xyXG4gIGlmIChpbnZQbGF5ZXIpIHtyZXR1cm4gaW52UGxheWVyO31cclxuICBpZiAocm93UGxheWVyICE9PSAtMSkge3JldHVybiByb3dQbGF5ZXI7fVxyXG4gIHJldHVybiBndWlsZDtcclxufVxyXG5cclxuZnVuY3Rpb24gbmFtZVJlbmRlckRpc3BsYXkoZGF0YSwgcm93KSB7XHJcbiAgdmFyIGN1ciA9IGZhbGxiYWNrKHRoZUludi5wbGF5ZXJfaWQsXHJcbiAgICB0aGVJbnYuY3VycmVudF9wbGF5ZXJfaWQpO1xyXG4gIHZhciB0ID0gZ2V0VChyb3cucGxheWVyX2lkKTtcclxuICB2YXIgcCA9IHBsYXllcih0aGVJbnYucGxheWVyX2lkLCByb3cucGxheWVyX2lkLFxyXG4gICAgdGhlSW52Lmd1aWxkX2lkKTtcclxuXHJcbiAgdmFyIGJvbGQgPSBkYXRhO1xyXG4gIGlmIChyb3cuZXF1aXBwZWQpIHtib2xkID0gJzxiPicgKyBkYXRhICsgJzwvYj4nO31cclxuXHJcbiAgdmFyIF9zZXROYW1lID0gJyc7XHJcbiAgaWYgKHJvdy5zdGF0cyAmJiByb3cuc3RhdHMuc2V0X25hbWUgIT09ICcnKSB7XHJcbiAgICBfc2V0TmFtZSA9ICcgKDxzcGFuIGNsYXNzPVwiZnNoTGluayBzZXROYW1lXCIgc2V0PVwiJyArIHJvdy5zdGF0cy5zZXRfbmFtZSArXHJcbiAgICAgICdcIj5zZXQ8L3NwYW4+KSc7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gJzxhIGhyZWY9XCJpbmRleC5waHA/Y21kPWF1Y3Rpb25ob3VzZSZzZWFyY2hfdGV4dD0nICsgZGF0YSArXHJcbiAgICAnXCIgY2xhc3M9XCJmc2hJbnZJdGVtIHRpcC1keW5hbWljICcgK1xyXG4gICAgcmFyaXR5W3Jvdy5yYXJpdHldLmNsYXMgKyAnXCIgJyArXHJcbiAgICAnZGF0YS10aXBwZWQ9XCJmZXRjaGl0ZW0ucGhwP2l0ZW1faWQ9JyArIHJvdy5pdGVtX2lkICtcclxuICAgICcmaW52X2lkPScgKyByb3cuaW52X2lkICsgJyZ0PScgKyB0ICsgJyZwPScgKyBwICtcclxuICAgICcmY3VycmVudFBsYXllcklkPScgKyBjdXIgKyAnXCI+JyArXHJcbiAgICBib2xkICsgJzwvYT4nICsgX3NldE5hbWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBuYW1lUmVuZGVyKGRhdGEsIHR5cGUsIHJvdykge1xyXG4gIGlmICh0eXBlICE9PSAnZGlzcGxheScpIHtyZXR1cm4gZGF0YTt9XHJcbiAgcmV0dXJuIG5hbWVSZW5kZXJEaXNwbGF5KGRhdGEsIHJvdyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB3aGVyZURhdGEocm93KSB7XHJcbiAgcmV0dXJuIGZhbGxiYWNrKHJvdy5mb2xkZXJfaWQsIHJvdy5wbGF5ZXJfaWQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB3aGVyZVJlbmRlclVzZXJGb2xkZXIocm93KSB7XHJcbiAgaWYgKHJvdy5lcXVpcHBlZCkge3JldHVybiAtMjt9XHJcbiAgcmV0dXJuIHBhcnNlSW50KHJvdy5mb2xkZXJfaWQsIDEwKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGxheWVyTmFtZShmKSB7XHJcbiAgaWYgKCFjYWxmLm1lbWJyTGlzdFtmXSkge3JldHVybiAnPz8/Jzt9XHJcbiAgcmV0dXJuIGNhbGYubWVtYnJMaXN0W2ZdLnVzZXJuYW1lO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd2hlcmVSZW5kZXIoZGF0YSwgdHlwZSwgcm93KSB7XHJcbiAgaWYgKHJvdy5mb2xkZXJfaWQpIHtcclxuICAgIHJldHVybiB3aGVyZVJlbmRlclVzZXJGb2xkZXIocm93KTtcclxuICB9XHJcbiAgaWYgKHJvdy5wbGF5ZXJfaWQgPT09IC0xKSB7cmV0dXJuICd+Jzt9XHJcbiAgcmV0dXJuIHBsYXllck5hbWUocm93LnBsYXllcl9pZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdoZXJlUmVuZGVyR3VpbGREaXNwbGF5KHJvdykge1xyXG4gIGlmIChyb3cucGxheWVyX2lkID09PSAtMSkge3JldHVybiAnR1MnO31cclxuICByZXR1cm4gJzxhIGNsYXNzPVwiZnNoTWFyb29uXCIgaHJlZj1cImluZGV4LnBocD9jbWQ9cHJvZmlsZSZwbGF5ZXJfaWQ9JyArXHJcbiAgICByb3cucGxheWVyX2lkICsgJ1wiPicgKyBwbGF5ZXJOYW1lKHJvdy5wbGF5ZXJfaWQpICsgJzwvYT4nO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd2hlcmVSZW5kZXJEaXNwbGF5KGRhdGEsIHR5cGUsIHJvdykge1xyXG4gIGlmIChyb3cucGxheWVyX2lkKSB7XHJcbiAgICByZXR1cm4gd2hlcmVSZW5kZXJHdWlsZERpc3BsYXkocm93KTtcclxuICB9XHJcbiAgaWYgKHJvdy5lcXVpcHBlZCkge3JldHVybiAnV29ybic7fVxyXG4gIHZhciBmb2xkZXJTZWxlY3QgPSAnPHNlbGVjdCBjbGFzcz1cImZzaE1vdmVJdGVtXCIgZGF0YS1pbnY9XCInICsgcm93Lmludl9pZCArXHJcbiAgICAnXCI+JztcclxuICB2YXIga2V5c0FycmF5ID0gT2JqZWN0LmtleXModGhlSW52LmZvbGRlcnMpXHJcbiAgICAuc29ydChmdW5jdGlvbihhLCBiKSB7cmV0dXJuIGEgLSBiO30pO1xyXG4gIGtleXNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICBmb2xkZXJTZWxlY3QgKz0gJzxvcHRpb24gdmFsdWU9XCInICsgdmFsdWUgKyAnXCInICtcclxuICAgICAgaXNTZWxlY3RlZCh2YWx1ZSwgcm93LmZvbGRlcl9pZCkgKyAnPicgK1xyXG4gICAgICB0aGVJbnYuZm9sZGVyc1t2YWx1ZV0gKyAnPC9vcHRpb24+JztcclxuICB9KTtcclxuICBmb2xkZXJTZWxlY3QgKz0gJzwvc2VsZWN0Pic7XHJcbiAgcmV0dXJuIGZvbGRlclNlbGVjdDtcclxufVxyXG5cclxuZnVuY3Rpb24gd2hlcmVSZW5kZXJHdWlsZEZpbHRlcihyb3cpIHtcclxuICBpZiAocm93LnBsYXllcl9pZCA9PT0gLTEpIHtyZXR1cm4gJ0dTJzt9XHJcbiAgcmV0dXJuIHBsYXllck5hbWUocm93LnBsYXllcl9pZCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB3aGVyZVJlbmRlckZpbHRlcihkYXRhLCB0eXBlLCByb3cpIHtcclxuICBpZiAocm93LnBsYXllcl9pZCkge1xyXG4gICAgcmV0dXJuIHdoZXJlUmVuZGVyR3VpbGRGaWx0ZXIocm93KTtcclxuICB9XHJcbiAgaWYgKHJvdy5lcXVpcHBlZCkge3JldHVybiAnV29ybic7fVxyXG4gIHJldHVybiB0aGVJbnYuZm9sZGVyc1tyb3cuZm9sZGVyX2lkXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyYWZ0UmVuZGVyKGNyYWZ0KSB7XHJcbiAgaWYgKGNyYWZ0SGFzaFtjcmFmdF0pIHtyZXR1cm4gY3JhZnRIYXNoW2NyYWZ0XS5hYmJyO31cclxuICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkdXJhYmlsaXR5UmVuZGVyKGRhdGEsIHR5cGUsIHJvdykge1xyXG4gIGlmIChwYXJzZUludChyb3cubWF4X2R1cmFiaWxpdHksIDEwKSA+IDApIHtcclxuICAgIHJldHVybiBNYXRoLmNlaWwocm93LmR1cmFiaWxpdHkgLyByb3cubWF4X2R1cmFiaWxpdHkgKiAxMDApO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYnBEaXNwbGF5VHlwZSh0eXBlLCByb3cpIHtcclxuICBpZiAodHlwZSAhPT0gJ2Rpc3BsYXknKSB7cmV0dXJuICdCUCc7fVxyXG4gIGlmIChyb3cucGxheWVyX2lkID09PSAtMSkge1xyXG4gICAgcmV0dXJuICc8c3BhbiBjbGFzcz1cImZzaExpbmsgdGFrZUl0ZW1cIiBpbnZpZD1cIicgKyByb3cuaW52X2lkICtcclxuICAgICAgJ1wiIGFjdGlvbj1cInRha2VcIj5CUDwvc3Bhbj4nO1xyXG4gIH1cclxuICByZXR1cm4gJzxzcGFuIGNsYXNzPVwiZnNoTGluayByZWNhbGxJdGVtXCIgaW52aWQ9XCInICsgcm93Lmludl9pZCArXHJcbiAgICAnXCIgcGxheWVyaWQ9XCInICsgcm93LnBsYXllcl9pZCArXHJcbiAgICAnXCIgbW9kZT1cIjBcIiBhY3Rpb249XCJyZWNhbGxcIj5CUDwvc3Bhbj4nO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYnBSZW5kZXIod2hlcmUsIHR5cGUsIHJvdykge1xyXG4gIGlmIChyb3cuZm9sZGVyX2lkIHx8IHJvdy5wbGF5ZXJfaWQgPT09XHJcbiAgICB0aGVJbnYuY3VycmVudF9wbGF5ZXJfaWQpIHtyZXR1cm47fVxyXG4gIHJldHVybiBicERpc3BsYXlUeXBlKHR5cGUsIHJvdyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdzRGlzcGxheVR5cGUoX2RhdGEsIHR5cGUsIHJvdykge1xyXG4gIGlmICh0eXBlID09PSAnZGlzcGxheScpIHtcclxuICAgIHJldHVybiAnPHNwYW4gY2xhc3M9XCJmc2hMaW5rIHJlY2FsbEl0ZW1cIiBpbnZpZD1cIicgK1xyXG4gICAgcm93Lmludl9pZCArICdcIiBwbGF5ZXJpZD1cIicgK1xyXG4gICAgZmFsbGJhY2socm93LnBsYXllcl9pZCwgdGhlSW52LnBsYXllcl9pZCkgK1xyXG4gICAgJ1wiIG1vZGU9XCIxXCIgYWN0aW9uPVwicmVjYWxsXCI+R1M8L3NwYW4+JztcclxuICB9XHJcbiAgcmV0dXJuICdHUyc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnc1JlbmRlcihfZGF0YSwgdHlwZSwgcm93KSB7XHJcbiAgaWYgKHJvdy5wbGF5ZXJfaWQgJiYgcm93LnBsYXllcl9pZCAhPT0gLTEgfHxcclxuICAgICAgcm93LmZvbGRlcl9pZCAmJiByb3cuZ3VpbGRfdGFnICE9PSAnLTEnKSB7XHJcbiAgICByZXR1cm4gZ3NEaXNwbGF5VHlwZShfZGF0YSwgdHlwZSwgcm93KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcm9wUmVuZGVyKGRhdGEsIHR5cGUsIHJvdykge1xyXG4gIGlmIChmYWxsYmFjayhyb3cuZ3VpbGRfdGFnICE9PSAnLTEnLCByb3cuZXF1aXBwZWQpKSB7cmV0dXJuO31cclxuICBpZiAodHlwZSAhPT0gJ2Rpc3BsYXknKSB7cmV0dXJuICdEcm9wJzt9XHJcbiAgcmV0dXJuICc8c3BhbiBjbGFzcz1cImRyb3BJdGVtIHRpcC1zdGF0aWMgZHJvcExpbmtcIiBkYXRhLXRpcHBlZD0nICtcclxuICAgICdcIklOU1RBTlRMWSBERVNUUk9ZIFRIRSBJVEVNLiBOTyBSRUZVTkRTIE9SIERPLU9WRVJTISBVc2UgYXQgb3duIHJpc2suXCInICtcclxuICAgICcgZGF0YS1pbnY9XCInICsgcm93Lmludl9pZCArICdcIj5Ecm9wPC9zcGFuPic7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZW5kUmVuZGVyKGRhdGEsIHR5cGUsIHJvdykge1xyXG4gIGlmIChmYWxsYmFjayhyb3cuYm91bmQsIHJvdy5lcXVpcHBlZCkpIHtyZXR1cm47fVxyXG4gIGlmICh0eXBlICE9PSAnZGlzcGxheScpIHtyZXR1cm4gJ1NlbmQnO31cclxuICByZXR1cm4gJzxzcGFuIGNsYXNzPVwic2VuZEl0ZW0gdGlwLXN0YXRpYyBzZW5kTGlua1wiIGRhdGEtdGlwcGVkPScgK1xyXG4gICAgJ1wiSU5TVEFOVExZIFNFTkQgVEhFIElURU0uIE5PIFJFRlVORFMgT1IgRE8tT1ZFUlMhIFVzZSBhdCBvd24gcmlzay5cIicgK1xyXG4gICAgJyBkYXRhLWludj1cIicgKyByb3cuaW52X2lkICsgJ1wiPlNlbmQ8L3NwYW4+JztcclxufVxyXG5cclxuZnVuY3Rpb24gc2VsZlJvd0NvbG9yKGRhdGEpIHtcclxuICBpZiAoZGF0YS5lcXVpcHBlZCkge3JldHVybiAnZnNoR3JlZW4nO31cclxuICByZXR1cm4gJ2ZzaE5hdnknO1xyXG59XHJcblxyXG5mdW5jdGlvbiBndWlsZFJvd0NvbG9yKGRhdGEpIHtcclxuICBpZiAoZGF0YS5wbGF5ZXJfaWQgPT09IC0xKSB7cmV0dXJuICdmc2hOYXZ5Jzt9XHJcbiAgcmV0dXJuICdmc2hNYXJvb24nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRSb3dDb2xvcihkYXRhKSB7XHJcbiAgaWYgKGRhdGEuZm9sZGVyX2lkKSB7cmV0dXJuIHNlbGZSb3dDb2xvcihkYXRhKTt9XHJcbiAgcmV0dXJuIGd1aWxkUm93Q29sb3IoZGF0YSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVkUm93KHJvdywgZGF0YSkge1xyXG4gIHZhciBjb2xvdXIgPSBnZXRSb3dDb2xvcihkYXRhKTtcclxuICByb3cuY2xhc3NMaXN0LmFkZChjb2xvdXIpO1xyXG59XHJcbiIsImltcG9ydCB3ZWFyVXNlUmVuZGVyIGZyb20gJy4vd2VhclVzZVJlbmRlcic7XHJcbmltcG9ydCB7XHJcbiAgYnBSZW5kZXIsXHJcbiAgY3JhZnRSZW5kZXIsXHJcbiAgY3JlYXRlZFJvdyxcclxuICBkcm9wUmVuZGVyLFxyXG4gIGR1cmFiaWxpdHlSZW5kZXIsXHJcbiAgZ3NSZW5kZXIsXHJcbiAgbmFtZVJlbmRlcixcclxuICBzZW5kUmVuZGVyLFxyXG4gIHdoZXJlRGF0YSxcclxuICB3aGVyZVJlbmRlcixcclxuICB3aGVyZVJlbmRlckRpc3BsYXksXHJcbiAgd2hlcmVSZW5kZXJGaWx0ZXJcclxufSBmcm9tICcuL3JlbmRlcic7XHJcbmltcG9ydCB7Y3JhZnRIYXNoLCBpdGVtVHlwZX0gZnJvbSAnLi9hc3NldHMnO1xyXG5pbXBvcnQge3Nob3dRdWlja0Ryb3BMaW5rcywgc2hvd1F1aWNrU2VuZExpbmtzLCB0aGVJbnZ9IGZyb20gJy4vaW52ZW50b3J5JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRvVGFibGUoKSB7IC8vIGpRdWVyeVxyXG4gICQoJyNwQ0MnKS5hcHBlbmQoJzx0YWJsZSBpZD1cImZzaEludlwiIGNsYXNzPVwiaG92ZXJcIiAnICtcclxuICAgICdzdHlsZT1cImZvbnQtc2l6ZTogeC1zbWFsbDtcIj48L3RhYmxlPicpO1xyXG4gIHZhciB0YWJsZSA9ICQoJyNmc2hJbnYnKS5EYXRhVGFibGUoe1xyXG4gICAgZGF0YTogdGhlSW52Lml0ZW1zLFxyXG4gICAgYXV0b1dpZHRoOiBmYWxzZSxcclxuICAgIHBhZ2VMZW5ndGg6IDUwLFxyXG4gICAgbGVuZ3RoTWVudTogW1s1MCwgMTAwLCAxNTAsIDIwMCwgLTFdLCBbNTAsIDEwMCwgMTUwLCAyMDAsICdBbGwnXV0sXHJcbiAgICBjb2x1bW5EZWZzOiBbe3RhcmdldHM6ICdfYWxsJywgZGVmYXVsdENvbnRlbnQ6ICcnfSxcclxuICAgICAge1xyXG4gICAgICAgIHRhcmdldHM6IFsxLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTIsIDEzXSxcclxuICAgICAgICBvcmRlclNlcXVlbmNlOiBbJ2Rlc2MnLCAnYXNjJ11cclxuICAgICAgfV0sXHJcbiAgICBjb2x1bW5zOiBbXHJcbiAgICAgIHtcclxuICAgICAgICB0aXRsZTogJ05hbWUnLFxyXG4gICAgICAgIGRhdGE6ICdpdGVtX25hbWUnLFxyXG4gICAgICAgIHJlbmRlcjogbmFtZVJlbmRlclxyXG4gICAgICB9LFxyXG4gICAgICB7dGl0bGU6ICdMZXZlbCcsIGRhdGE6ICdzdGF0cy5taW5fbGV2ZWwnfSxcclxuICAgICAge1xyXG4gICAgICAgIHRpdGxlOiAnV2hlcmUnLFxyXG4gICAgICAgIGRhdGE6IHdoZXJlRGF0YSxcclxuICAgICAgICByZW5kZXI6IHtcclxuICAgICAgICAgIF86IHdoZXJlUmVuZGVyLFxyXG4gICAgICAgICAgZGlzcGxheTogd2hlcmVSZW5kZXJEaXNwbGF5LFxyXG4gICAgICAgICAgZmlsdGVyOiB3aGVyZVJlbmRlckZpbHRlclxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHRpdGxlOiAnVHlwZScsXHJcbiAgICAgICAgZGF0YTogJ3R5cGUnLFxyXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24odHlwZSkge3JldHVybiBpdGVtVHlwZVt0eXBlXTt9XHJcbiAgICAgIH0sXHJcbiAgICAgIHt0aXRsZTogJ0F0dCcsIGRhdGE6ICdzdGF0cy5hdHRhY2snfSxcclxuICAgICAge3RpdGxlOiAnRGVmJywgZGF0YTogJ3N0YXRzLmRlZmVuc2UnfSxcclxuICAgICAge3RpdGxlOiAnQXJtJywgZGF0YTogJ3N0YXRzLmFybW9yJ30sXHJcbiAgICAgIHt0aXRsZTogJ0RhbScsIGRhdGE6ICdzdGF0cy5kYW1hZ2UnfSxcclxuICAgICAge3RpdGxlOiAnSFAnLCBkYXRhOiAnc3RhdHMuaHAnfSxcclxuICAgICAge3RpdGxlOiAnRnJnJywgZGF0YTogJ2ZvcmdlJ30sXHJcbiAgICAgIHtcclxuICAgICAgICB0aXRsZTogJ0NyYWZ0JyxcclxuICAgICAgICBkYXRhOiAnY3JhZnQnLFxyXG4gICAgICAgIHJlbmRlcjoge1xyXG4gICAgICAgICAgXzogZnVuY3Rpb24oY3JhZnQpIHtcclxuICAgICAgICAgICAgaWYgKGNyYWZ0SGFzaFtjcmFmdF0pIHtcclxuICAgICAgICAgICAgICByZXR1cm4gY3JhZnRIYXNoW2NyYWZ0XS5pbmRleDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBkaXNwbGF5OiBjcmFmdFJlbmRlcixcclxuICAgICAgICAgIGZpbHRlcjogY3JhZnRSZW5kZXJcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB0aXRsZTogJ0R1JScsXHJcbiAgICAgICAgZGF0YTogJ2R1cmFiaWxpdHknLFxyXG4gICAgICAgIHJlbmRlcjogZHVyYWJpbGl0eVJlbmRlclxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgdGl0bGU6ICdCUCcsXHJcbiAgICAgICAgZGF0YTogd2hlcmVEYXRhLFxyXG4gICAgICAgIHJlbmRlcjogYnBSZW5kZXJcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHRpdGxlOiAnR1MnLFxyXG4gICAgICAgIGRhdGE6IHdoZXJlRGF0YSxcclxuICAgICAgICByZW5kZXI6IGdzUmVuZGVyXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB0aXRsZTogJ1cvVScsXHJcbiAgICAgICAgZGF0YTogJ3R5cGUnLFxyXG4gICAgICAgIHJlbmRlcjogd2VhclVzZVJlbmRlclxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgdGl0bGU6ICdzZXROYW1lJyxcclxuICAgICAgICBkYXRhOiAnc3RhdHMuc2V0X25hbWUnLFxyXG4gICAgICAgIG9yZGVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgdmlzaWJsZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHRpdGxlOiAnVGFnJyxcclxuICAgICAgICBkYXRhOiAnZ3VpbGRfdGFnJyxcclxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHRhZykge1xyXG4gICAgICAgICAgaWYgKHRhZyA9PT0gJy0xJykge3JldHVybiAnTm8nO31cclxuICAgICAgICAgIHJldHVybiAnWWVzJztcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB0aXRsZTogJ0Ryb3AnLFxyXG4gICAgICAgIGRhdGE6ICd0eXBlJyxcclxuICAgICAgICByZW5kZXI6IGRyb3BSZW5kZXJcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIHRpdGxlOiAnU2VuZCcsXHJcbiAgICAgICAgZGF0YTogJ3R5cGUnLFxyXG4gICAgICAgIHJlbmRlcjogc2VuZFJlbmRlclxyXG4gICAgICB9XHJcbiAgICBdLFxyXG4gICAgY3JlYXRlZFJvdzogY3JlYXRlZFJvdyxcclxuICAgIHN0YXRlU2F2ZTogdHJ1ZSxcclxuICAgIHN0YXRlRHVyYXRpb246IDBcclxuICB9KTtcclxuICB0YWJsZS5jb2x1bW4oMTIpLnZpc2libGUoJ2N1cnJlbnRfcGxheWVyX2lkJyBpbiB0aGVJbnYpO1xyXG4gIHRhYmxlLmNvbHVtbigxNykudmlzaWJsZSgncGxheWVyX2lkJyBpbiB0aGVJbnYgJiZcclxuICAgIHNob3dRdWlja0Ryb3BMaW5rcyk7XHJcbiAgdGFibGUuY29sdW1uKDE4KS52aXNpYmxlKCdwbGF5ZXJfaWQnIGluIHRoZUludiAmJlxyXG4gICAgc2hvd1F1aWNrU2VuZExpbmtzKTtcclxufVxyXG4iLCJpbXBvcnQge2RpYWxvZ30gZnJvbSAnLi4vc3VwcG9ydC9hamF4JztcclxuaW1wb3J0IHJldHJ5QWpheCBmcm9tICcuL3JldHJ5QWpheCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkcm9wSXRlbShpbnZJZExpc3QpIHtcclxuICByZXR1cm4gcmV0cnlBamF4KHtcclxuICAgIHVybDogJ2luZGV4LnBocCcsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIGNtZDogJ3Byb2ZpbGUnLFxyXG4gICAgICBzdWJjbWQ6ICdkb2Ryb3BpdGVtcycsXHJcbiAgICAgIHJlbW92ZUluZGV4OiBpbnZJZExpc3QsXHJcbiAgICAgIGFqYXg6IDFcclxuICAgIH0sXHJcbiAgICBkYXRhVHlwZTogJ2pzb24nXHJcbiAgfSkuZG9uZShkaWFsb2cpO1xyXG59XHJcbiIsImltcG9ydCB7ZGlhbG9nfSBmcm9tICcuLi9zdXBwb3J0L2FqYXgnO1xyXG5pbXBvcnQgcmV0cnlBamF4IGZyb20gJy4vcmV0cnlBamF4JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1vdmVJdGVtKGludklkTGlzdCwgZm9sZGVySWQpIHtcclxuICByZXR1cm4gcmV0cnlBamF4KHtcclxuICAgIHVybDogJ2luZGV4LnBocCcsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIGNtZDogJ3Byb2ZpbGUnLFxyXG4gICAgICBzdWJjbWQ6ICdzZW5kdG9mb2xkZXInLFxyXG4gICAgICBpbnZfbGlzdDogSlNPTi5zdHJpbmdpZnkoaW52SWRMaXN0KSxcclxuICAgICAgZm9sZGVyX2lkOiBmb2xkZXJJZCxcclxuICAgICAgYWpheDogMVxyXG4gICAgfSxcclxuICAgIGRhdGFUeXBlOiAnanNvbidcclxuICB9KS5kb25lKGRpYWxvZyk7XHJcbn1cclxuIiwiaW1wb3J0IHtnZXRWYWx1ZX0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5pbXBvcnQgcmV0cnlBamF4IGZyb20gJy4vcmV0cnlBamF4JztcclxuaW1wb3J0IHtkaWFsb2csIGh0bWxSZXN1bHR9IGZyb20gJy4uL3N1cHBvcnQvYWpheCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZW5kSXRlbShpbnZJZExpc3QpIHtcclxuICByZXR1cm4gcmV0cnlBamF4KHtcclxuICAgIHVybDogJ2luZGV4LnBocCcsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIGNtZDogJ3RyYWRlJyxcclxuICAgICAgc3ViY21kOiAnc2VuZGl0ZW1zJyxcclxuICAgICAgeGM6IHdpbmRvdy5hamF4WEMsXHJcbiAgICAgIHRhcmdldF91c2VybmFtZTogZ2V0VmFsdWUoJ2l0ZW1SZWNpcGllbnQnKSxcclxuICAgICAgc2VuZEl0ZW1MaXN0OiBpbnZJZExpc3RcclxuICAgIH1cclxuICB9KS5waXBlKGh0bWxSZXN1bHQpXHJcbiAgICAuZG9uZShkaWFsb2cpO1xyXG59XHJcbiIsImltcG9ydCB7aW50VmFsdWV9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtvcHRpb25zfSBmcm9tICcuL2ludmVudG9yeSc7XHJcblxyXG52YXIgbHZsVGVzdHMgPSBbXHJcbiAgZnVuY3Rpb24obGV2ZWwpIHtyZXR1cm4gbGV2ZWwgPT09IDA7fSxcclxuICBmdW5jdGlvbihsZXZlbCwgbWluLCBtYXgpIHtyZXR1cm4gaXNOYU4obWluKSAmJiBpc05hTihtYXgpO30sXHJcbiAgZnVuY3Rpb24obGV2ZWwsIG1pbiwgbWF4KSB7cmV0dXJuIGlzTmFOKG1pbikgJiYgbGV2ZWwgPD0gbWF4O30sXHJcbiAgZnVuY3Rpb24obGV2ZWwsIG1pbiwgbWF4KSB7cmV0dXJuIG1pbiA8PSBsZXZlbCAmJiBpc05hTihtYXgpO30sXHJcbiAgZnVuY3Rpb24obGV2ZWwsIG1pbiwgbWF4KSB7cmV0dXJuIG1pbiA8PSBsZXZlbCAmJiBsZXZlbCA8PSBtYXg7fVxyXG5dO1xyXG5cclxuZnVuY3Rpb24gZG9MdmxGaWx0ZXIoX3NldHRpbmdzLCBkYXRhKSB7XHJcbiAgdmFyIG1pbiA9IG9wdGlvbnMuZnNoTWluTHZsO1xyXG4gIHZhciBtYXggPSBvcHRpb25zLmZzaE1heEx2bDtcclxuICB2YXIgbGV2ZWwgPSBpbnRWYWx1ZShkYXRhWzFdKTsgLy8gdXNlIGRhdGEgZm9yIHRoZSBsZXZlbCBjb2x1bW5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGx2bFRlc3RzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICBpZiAobHZsVGVzdHNbaV0obGV2ZWwsIG1pbiwgbWF4KSkge3JldHVybiB0cnVlO31cclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbHZsRmlsdGVyKCkgeyAvLyBqUXVlcnlcclxuICAvKiBDdXN0b20gZmlsdGVyaW5nIGZ1bmN0aW9uIHdoaWNoIHdpbGwgc2VhcmNoXHJcbiAgZGF0YSBpbiBjb2x1bW4gMiBiZXR3ZWVuIHR3byB2YWx1ZXMgKi9cclxuICAkLmZuLmRhdGFUYWJsZS5leHQuc2VhcmNoLnB1c2goZG9MdmxGaWx0ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdHlwZUZpbHRlcigpIHsgLy8galF1ZXJ5XHJcbiAgJC5mbi5kYXRhVGFibGUuZXh0LnNlYXJjaC5wdXNoKFxyXG4gICAgZnVuY3Rpb24oX3NldHRpbmdzLCBfcm93LCBfaW5kZXgsIGRhdGEpIHtcclxuICAgICAgcmV0dXJuICFvcHRpb25zLmNoZWNrZWRFbGVtZW50cyB8fFxyXG4gICAgICAgIG9wdGlvbnMuY2hlY2tlZEVsZW1lbnRzW2RhdGEudHlwZV07XHJcbiAgICB9XHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEZpbHRlcigpIHsgLy8galF1ZXJ5XHJcbiAgJC5mbi5kYXRhVGFibGUuZXh0LnNlYXJjaC5wdXNoKFxyXG4gICAgZnVuY3Rpb24oX3NldHRpbmdzLCBfcm93LCBfaW5kZXgsIGRhdGEpIHtcclxuICAgICAgcmV0dXJuICFvcHRpb25zLmNoZWNrZWRFbGVtZW50cyB8fFxyXG4gICAgICAgICFvcHRpb25zLmNoZWNrZWRFbGVtZW50c1snLTEnXSB8fFxyXG4gICAgICAgIG9wdGlvbnMuY2hlY2tlZEVsZW1lbnRzWyctMSddICYmXHJcbiAgICAgICAgZGF0YS5zdGF0cyAmJlxyXG4gICAgICAgIGRhdGEuc3RhdHMuc2V0X2lkICE9PSAnLTEnO1xyXG4gICAgfVxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYXJpdHlGaWx0ZXIoKSB7IC8vIGpRdWVyeVxyXG4gICQuZm4uZGF0YVRhYmxlLmV4dC5zZWFyY2gucHVzaChcclxuICAgIGZ1bmN0aW9uKF9zZXR0aW5ncywgX3JvdywgX2luZGV4LCBkYXRhKSB7XHJcbiAgICAgIHZhciByYXJpdHkgPSAocGFyc2VJbnQoZGF0YS5yYXJpdHksIDEwKSArIDEwMCkudG9TdHJpbmcoKTtcclxuICAgICAgcmV0dXJuICFvcHRpb25zLmNoZWNrZWRFbGVtZW50cyB8fFxyXG4gICAgICAgIG9wdGlvbnMuY2hlY2tlZEVsZW1lbnRzW3Jhcml0eV07XHJcbiAgICB9XHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgYWRkIGZyb20gJy4uL3N1cHBvcnQvdGFzayc7XHJcbmltcG9ydCBjYWxmIGZyb20gJy4uL3N1cHBvcnQvY2FsZic7XHJcbmltcG9ydCB7ZGVmYXVsdHN9IGZyb20gJy4uL3N1cHBvcnQvZGF0YU9iaic7XHJcbmltcG9ydCBkb1RhYmxlIGZyb20gJy4vdGFibGUnO1xyXG5pbXBvcnQgZHJvcEl0ZW0gZnJvbSAnLi4vYWpheC9kcm9wSXRlbSc7XHJcbmltcG9ydCBnZXRGb3JhZ2UgZnJvbSAnLi4vYWpheC9nZXRGb3JhZ2UnO1xyXG5pbXBvcnQgZ2V0SW52ZW50b3J5IGZyb20gJy4uL2FqYXgvZ2V0SW52ZW50b3J5JztcclxuaW1wb3J0IGdldE1lbWJyTGlzdCBmcm9tICcuLi9hamF4L2dldE1lbWJyTGlzdCc7XHJcbmltcG9ydCBtb3ZlSXRlbSBmcm9tICcuLi9hamF4L21vdmVJdGVtJztcclxuaW1wb3J0IHNlbmRJdGVtIGZyb20gJy4uL2FqYXgvc2VuZEl0ZW0nO1xyXG5pbXBvcnQgc2V0Rm9yYWdlIGZyb20gJy4uL2FqYXgvc2V0Rm9yYWdlJztcclxuaW1wb3J0IHtcclxuICBlcXVpcEl0ZW0sXHJcbiAgcXVldWVSZWNhbGxJdGVtLFxyXG4gIHF1ZXVlVGFrZUl0ZW0sXHJcbiAgdXNlSXRlbVxyXG59IGZyb20gJy4uL3N1cHBvcnQvYWpheCc7XHJcbmltcG9ydCB7ZmFsbGJhY2ssIGdldFZhbHVlLCBpbWFnZVNlcnZlcn0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5pbXBvcnQge2ludk1hbkZpbHRlciwgaW52ZW50b3J5Q2hlY2tBbGx9IGZyb20gJy4vYXNzZXRzJztcclxuaW1wb3J0IHtsdmxGaWx0ZXIsIHJhcml0eUZpbHRlciwgc2V0RmlsdGVyLCB0eXBlRmlsdGVyfSBmcm9tICcuL2ZpbHRlcnMnO1xyXG5pbXBvcnQge3RpbWUsIHRpbWVFbmR9IGZyb20gJy4uL3N1cHBvcnQvZGVidWcnO1xyXG5cclxuLyoganNoaW50IGxhdGVkZWY6IG5vZnVuYyAqL1xyXG5leHBvcnQgdmFyIG9wdGlvbnM7XHJcbmV4cG9ydCB2YXIgc2hvd1F1aWNrRHJvcExpbmtzO1xyXG5leHBvcnQgdmFyIHNob3dRdWlja1NlbmRMaW5rcztcclxuZXhwb3J0IHZhciB0aGVJbnY7XHJcblxyXG5mdW5jdGlvbiBkb1NwaW5uZXIoKSB7IC8vIGpRdWVyeVxyXG4gICQoJyNwQ0MnKS5odG1sKCc8c3BhbiBpZD1cImZzaEludk1hblwiPjxpbWcgc3JjID0gXCInICtcclxuICBpbWFnZVNlcnZlciArICcvd29ybGQvYWN0aW9uTG9hZGluZ1NwaW5uZXIuZ2lmXCI+Jm5ic3A7JyArXHJcbiAgICAnR2V0dGluZyBpbnZlbnRvcnkgZGF0YS4uLjwvc3Bhbj4nKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVrZXlNZW1ickxpc3QoKSB7XHJcbiAgY2FsZi5tZW1ickxpc3QgPSBPYmplY3Qua2V5cyhjYWxmLm1lbWJyTGlzdClcclxuICAgIC8vIFVzaW5nIHJlZHVjZSgpIHRvIHJla2V5IHRoZSBtZW1ickxpc3QgZnJvbSBuYW1lcyB0byBpZCdzXHJcbiAgICAucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cnIpIHtcclxuICAgICAgaWYgKGN1cnIgIT09ICdsYXN0VXBkYXRlJykge1xyXG4gICAgICAgIHByZXZbY2FsZi5tZW1ickxpc3RbY3Vycl0uaWRdID1cclxuICAgICAgICAgIGNhbGYubWVtYnJMaXN0W2N1cnJdO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBwcmV2O1xyXG4gICAgfSwge30pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZWNvcmF0ZSgpIHtcclxuICBpZiAodGhlSW52LmZvbGRlcnMpIHtcclxuICAgIHRoZUludi5mb2xkZXJzWyctMSddID0gJ01haW4nO1xyXG4gIH1cclxuICAvLyBIaWRlIGNvbXBvc2VkIHBvdGlvbnMgdW50aWwgWm9yZyBmaXhlcyB0aGUgZmVlZFxyXG4gIHRoZUludi5pdGVtcyA9XHJcbiAgICB0aGVJbnYuaXRlbXMuZmlsdGVyKGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICByZXR1cm4gb2JqLnR5cGUgIT09ICcxNSc7XHJcbiAgICB9KTtcclxuICAvL1xyXG59XHJcblxyXG5mdW5jdGlvbiBoZWFkZXJzKCkgeyAvLyBqUXVlcnlcclxuICB2YXIgcmVwb3J0VGl0bGU7XHJcbiAgaWYgKHRoZUludi5wbGF5ZXJfaWQpIHtcclxuICAgIHJlcG9ydFRpdGxlID0gJzxiPiZuYnNwO0ludmVudG9yeSBNYW5hZ2VyPC9iPiAnICtcclxuICAgICAgdGhlSW52Lml0ZW1zLmxlbmd0aCArXHJcbiAgICAgICcgaXRlbXMgKGdyZWVuID0gd29ybiwgYmx1ZSA9IGJhY2twYWNrKSc7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJlcG9ydFRpdGxlID0gJzxiPiZuYnNwO0d1aWxkIEludmVudG9yeSBNYW5hZ2VyPC9iPiAnICtcclxuICAgICAgdGhlSW52Lml0ZW1zLmxlbmd0aCArXHJcbiAgICAgICcgaXRlbXMgKG1hcm9vbiA9IGluIEJQLCBibHVlPWd1aWxkIHN0b3JlKSc7XHJcbiAgfVxyXG4gIHZhciBteUh0bWwgPSBpbnZNYW5GaWx0ZXIucmVwbGFjZSgnQEByZXBvcnRUaXRsZUBAJywgcmVwb3J0VGl0bGUpO1xyXG4gICQoJyNwQ0MnKS5odG1sKG15SHRtbCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldENoZWNrcygpIHtcclxuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgndGFibGUuZnNoSW52RmlsdGVyIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXScpLFxyXG4gICAgZnVuY3Rpb24oZWwpIHtcclxuICAgICAgZWwuY2hlY2tlZCA9XHJcbiAgICAgICAgb3B0aW9ucy5jaGVja2VkRWxlbWVudHNbZWwuZ2V0QXR0cmlidXRlKCdpdGVtJyldID09PSAxO1xyXG4gICAgfSk7XHJcbiAgc2V0Rm9yYWdlKCdmc2hfaW52ZW50b3J5Jywgb3B0aW9ucyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldEx2bHMoKSB7IC8vIGpRdWVyeVxyXG4gICQoJyNmc2hNaW5MdmwnKS52YWwob3B0aW9ucy5mc2hNaW5MdmwpO1xyXG4gICQoJyNmc2hNYXhMdmwnKS52YWwob3B0aW9ucy5mc2hNYXhMdmwpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZWZyZXNoKCkge1xyXG4gIGRvU3Bpbm5lcigpO1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxyXG4gIHN5bmNJbnZNYW4oKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hhbmdlTHZscygpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIG1pbkx2bCA9IHBhcnNlSW50KCQoJyNmc2hNaW5MdmwnKS52YWwoKSwgMTApO1xyXG4gIHZhciBtYXhMdmwgPSBwYXJzZUludCgkKCcjZnNoTWF4THZsJykudmFsKCksIDEwKTtcclxuICBpZiAoaXNOYU4obWluTHZsKSB8fCBpc05hTihtYXhMdmwpKSB7cmV0dXJuO31cclxuICBvcHRpb25zLmZzaE1pbkx2bCA9IG1pbkx2bDtcclxuICBvcHRpb25zLmZzaE1heEx2bCA9IG1heEx2bDtcclxuICBzZXRGb3JhZ2UoJ2ZzaF9pbnZlbnRvcnknLCBvcHRpb25zKTtcclxuICAkKCcjZnNoSW52JykuRGF0YVRhYmxlKCkuZHJhdyhmYWxzZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0THZscygpIHsgLy8galF1ZXJ5XHJcbiAgb3B0aW9ucy5mc2hNaW5MdmwgPSBkZWZhdWx0cy5pbnZlbnRvcnlNaW5Mdmw7XHJcbiAgb3B0aW9ucy5mc2hNYXhMdmwgPSBkZWZhdWx0cy5pbnZlbnRvcnlNYXhMdmw7XHJcbiAgc2V0Rm9yYWdlKCdmc2hfaW52ZW50b3J5Jywgb3B0aW9ucyk7XHJcbiAgJCgnI2ZzaE1pbkx2bCcpLnZhbChvcHRpb25zLmZzaE1pbkx2bCk7XHJcbiAgJCgnI2ZzaE1heEx2bCcpLnZhbChvcHRpb25zLmZzaE1heEx2bCk7XHJcbiAgJCgnI2ZzaEludicpLkRhdGFUYWJsZSgpLmRyYXcoZmFsc2UpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDaGVja3MoKSB7IC8vIGpRdWVyeVxyXG4gIG9wdGlvbnMuY2hlY2tlZEVsZW1lbnRzID0ge307XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAgICd0YWJsZS5mc2hJbnZGaWx0ZXIgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdW2l0ZW1dOmNoZWNrZWQnKSxcclxuICAgIGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgIG9wdGlvbnMuY2hlY2tlZEVsZW1lbnRzW2VsLmdldEF0dHJpYnV0ZSgnaXRlbScpXSA9IDE7XHJcbiAgICB9KTtcclxuICBzZXRGb3JhZ2UoJ2ZzaF9pbnZlbnRvcnknLCBvcHRpb25zKTtcclxuICAkKCcjZnNoSW52JykuRGF0YVRhYmxlKCkuZHJhdyhmYWxzZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFsbENoZWNrcygpIHsgLy8galF1ZXJ5XHJcbiAgb3B0aW9ucy5jaGVja2VkRWxlbWVudHMgPSBpbnZlbnRvcnlDaGVja0FsbDtcclxuICBzZXRDaGVja3MoKTtcclxuICAkKCcjZnNoSW52JykuRGF0YVRhYmxlKCkuZHJhdyhmYWxzZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsZWFyR2Vhck9ubHkoY2hlY2tlZEVsZW1lbnRzKSB7XHJcbiAgdmFyIG5ld0VsZSA9IHt9O1xyXG4gIE9iamVjdC5rZXlzKGNoZWNrZWRFbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcclxuICAgIGlmIChwYXJzZUludChrZXksIDEwKSA+PSAxMDApIHtcclxuICAgICAgbmV3RWxlW2tleV0gPSBjaGVja2VkRWxlbWVudHNba2V5XTtcclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gbmV3RWxlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbGVhckNoZWNrcygpIHsgLy8galF1ZXJ5XHJcbiAgb3B0aW9ucy5jaGVja2VkRWxlbWVudHMgPSBjbGVhckdlYXJPbmx5KG9wdGlvbnMuY2hlY2tlZEVsZW1lbnRzKTtcclxuICBzZXRDaGVja3MoKTtcclxuICAkKCcjZnNoSW52JykuRGF0YVRhYmxlKCkuZHJhdygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldENoZWNrcygpIHsgLy8galF1ZXJ5XHJcbiAgb3B0aW9ucy5jaGVja2VkRWxlbWVudHMgPSBkZWZhdWx0cy5pbnZlbnRvcnlDaGVja2VkRWxlbWVudHM7XHJcbiAgc2V0Q2hlY2tzKCk7XHJcbiAgJCgnI2ZzaEludicpLkRhdGFUYWJsZSgpLmRyYXcoZmFsc2UpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXROYW1lKGUpIHsgLy8galF1ZXJ5XHJcbiAgJCgnI2ZzaEludicpLkRhdGFUYWJsZSgpLnNlYXJjaCgkKGUudGFyZ2V0KS5hdHRyKCdzZXQnKSkuZHJhdygpO1xyXG4gICQoJyNmc2hJbnZfZmlsdGVyIGlucHV0JykuZm9jdXMoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3Moc2VsZikge1xyXG4gIHNlbGYuY2xvc2VzdCgndHInKVxyXG4gICAgLmZpbmQoJy50YWtlSXRlbSwgLnJlY2FsbEl0ZW0sIC53ZWFySXRlbSwgLmRyb3BJdGVtLCAuc2VuZEl0ZW0nKVxyXG4gICAgLnJlbW92ZUNsYXNzKCkucXRpcCgnaGlkZScpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBraWxsUm93KHNlbGYsIGRhdGEpIHsgLy8galF1ZXJ5XHJcbiAgaWYgKGRhdGEuciA9PT0gMSkge3JldHVybjt9XHJcbiAgdmFyIHRyID0gc2VsZi5jbG9zZXN0KCd0cicpO1xyXG4gIHZhciB0ZCA9ICQoJ3RkJywgdHIpO1xyXG4gIHRkLmVxKDIpLmVtcHR5KCk7IC8vIFdoZXJlXHJcbiAgdGQuZXEoMTIpLmVtcHR5KCk7IC8vIEJQIC0gR1NcclxuICB0ZC5lcSgxMykuZW1wdHkoKTsgLy8gR1MgLSBXL1VcclxuICB0ZC5lcSgxNCkuZW1wdHkoKTsgLy8gVy9VIC0gVGFnXHJcbiAgdGQuZXEoMTUpLmVtcHR5KCk7IC8vIFRhZyAtIERyb3BcclxuICB0ZC5lcSgxNikuZW1wdHkoKTsgLy8gPyAtIFNlbmRcclxuICB0ci5jc3MoJ3RleHQtZGVjb3JhdGlvbicsICdsaW5lLXRocm91Z2gnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYW5vdGhlclNwaW5uZXIoc2VsZikge1xyXG4gIHNlbGYuZW1wdHkoKS5hcHBlbmQoJzxpbWcgc3JjPVwiJyArIGltYWdlU2VydmVyICtcclxuICAgICcvc2tpbi9sb2FkaW5nLmdpZlwiIHdpZHRoPVwiMTFcIiBoZWlnaHQ9XCIxMVwiPicpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb0FjdGlvbihmbiwgc2VsZikgeyAvLyBqUXVlcnlcclxuICByZW1vdmVDbGFzcyhzZWxmKTtcclxuICBmbigpLmRvbmUoa2lsbFJvdy5iaW5kKG51bGwsIHNlbGYpKTtcclxuICBhbm90aGVyU3Bpbm5lcihzZWxmKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdGFrZUl0ZW0oZSkgeyAvLyBqUXVlcnlcclxuICB2YXIgc2VsZiA9ICQoZS50YXJnZXQpO1xyXG4gIGRvQWN0aW9uKFxyXG4gICAgcXVldWVUYWtlSXRlbS5iaW5kKG51bGwsIHNlbGYuYXR0cignaW52aWQnKSwgc2VsZi5hdHRyKCdhY3Rpb24nKSksXHJcbiAgICBzZWxmXHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVjYWxsSXRlbShlKSB7IC8vIGpRdWVyeVxyXG4gIHZhciBzZWxmID0gJChlLnRhcmdldCk7XHJcbiAgZG9BY3Rpb24oXHJcbiAgICBxdWV1ZVJlY2FsbEl0ZW0uYmluZChudWxsLCB7XHJcbiAgICAgIGludklkOiBzZWxmLmF0dHIoJ2ludmlkJyksXHJcbiAgICAgIHBsYXllcklkOiBzZWxmLmF0dHIoJ3BsYXllcmlkJyksXHJcbiAgICAgIG1vZGU6IHNlbGYuYXR0cignbW9kZScpLFxyXG4gICAgICBhY3Rpb246IHNlbGYuYXR0cignYWN0aW9uJylcclxuICAgIH0pLFxyXG4gICAgc2VsZlxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdlYXJJdGVtKGUpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIHNlbGYgPSAkKGUudGFyZ2V0KTtcclxuICBkb0FjdGlvbihlcXVpcEl0ZW0uYmluZChudWxsLCBzZWxmLmF0dHIoJ2ludmlkJykpLCBzZWxmKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZG9Vc2VJdGVtKGUpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIHNlbGYgPSAkKGUudGFyZ2V0KTtcclxuICBkb0FjdGlvbih1c2VJdGVtLmJpbmQobnVsbCwgc2VsZi5hdHRyKCdpbnZpZCcpKSwgc2VsZik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvTW92ZUl0ZW0oZSkgeyAvLyBqUXVlcnlcclxuICB2YXIgc2VsZiA9ICQoZS50YXJnZXQpO1xyXG4gIG1vdmVJdGVtKFtzZWxmLmRhdGEoJ2ludicpXSwgc2VsZi52YWwoKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvRHJvcEl0ZW0oZSkgeyAvLyBqUXVlcnlcclxuICB2YXIgc2VsZiA9ICQoZS50YXJnZXQpO1xyXG4gIGRvQWN0aW9uKGRyb3BJdGVtLmJpbmQobnVsbCwgW3NlbGYuZGF0YSgnaW52JyldKSwgc2VsZik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvU2VuZEl0ZW0oZSkgeyAvLyBqUXVlcnlcclxuICB2YXIgc2VsZiA9ICQoZS50YXJnZXQpO1xyXG4gIGRvQWN0aW9uKHNlbmRJdGVtLmJpbmQobnVsbCwgW3NlbGYuZGF0YSgnaW52JyldKSwgc2VsZik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV2ZW50SGFuZGxlcnMoKSB7IC8vIGpRdWVyeVxyXG4gICQoJyNmc2hSZWZyZXNoJykuY2xpY2socmVmcmVzaCk7XHJcbiAgJCgnI2ZzaE1pbkx2bCwgI2ZzaE1heEx2bCcpLmtleXVwKGNoYW5nZUx2bHMpO1xyXG4gICQoJyNmc2hSZXNldCcpLmNsaWNrKHJlc2V0THZscyk7XHJcbiAgJCgndGFibGUuZnNoSW52RmlsdGVyJykub24oJ2NsaWNrJywgJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXScsIGdldENoZWNrcyk7XHJcbiAgJCgnI2ZzaEFsbCcpLmNsaWNrKGFsbENoZWNrcyk7XHJcbiAgJCgnI2ZzaE5vbmUnKS5jbGljayhjbGVhckNoZWNrcyk7XHJcbiAgJCgnI2ZzaERlZmF1bHQnKS5jbGljayhyZXNldENoZWNrcyk7XHJcbiAgJCgnI2ZzaEludicpLm9uKCdjbGljaycsICdzcGFuLnNldE5hbWUnLCBzZXROYW1lKTtcclxuICAkKCcjZnNoSW52Jykub24oJ2NsaWNrJywgJ3NwYW4udGFrZUl0ZW0nLCB0YWtlSXRlbSk7XHJcbiAgJCgnI2ZzaEludicpLm9uKCdjbGljaycsICdzcGFuLnJlY2FsbEl0ZW0nLCByZWNhbGxJdGVtKTtcclxuICAkKCcjZnNoSW52Jykub24oJ2NsaWNrJywgJ3NwYW4ud2Vhckl0ZW0nLCB3ZWFySXRlbSk7XHJcbiAgJCgnI2ZzaEludicpLm9uKCdjbGljaycsICdzcGFuLnVzZUl0ZW0nLCBkb1VzZUl0ZW0pO1xyXG4gICQoJyNmc2hJbnYnKS5vbignY2hhbmdlJywgJ3NlbGVjdC5mc2hNb3ZlSXRlbScsIGRvTW92ZUl0ZW0pO1xyXG4gICQoJyNmc2hJbnYnKS5vbignY2xpY2snLCAnc3Bhbi5kcm9wSXRlbScsIGRvRHJvcEl0ZW0pO1xyXG4gICQoJyNmc2hJbnYnKS5vbignY2xpY2snLCAnc3Bhbi5zZW5kSXRlbScsIGRvU2VuZEl0ZW0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbGVhckJ1dHRvbigpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIGlucHV0ID0gJCgnI2ZzaEludl9maWx0ZXIgaW5wdXQnKTtcclxuICBpbnB1dC5wcm9wKCd0eXBlJywgJ3RleHQnKTtcclxuICB2YXIgY2xlYXIgPSAkKCc8c3Bhbj4mdGltZXM7PC9zcGFuPicpO1xyXG4gIGlucHV0LndyYXAoJCgnPHNwYW4gY2xhc3M9XCJ0ZXh0LWlucHV0LXdyYXBwZXJcIi8+JykpO1xyXG4gIGlucHV0LmFmdGVyKGNsZWFyKTtcclxuICBjbGVhci5jbGljayhmdW5jdGlvbigpIHtcclxuICAgIGlucHV0LnZhbCgnJyk7XHJcbiAgICAkKCcjZnNoSW52JykuRGF0YVRhYmxlKCkuc2VhcmNoKCcnKS5kcmF3KCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEludk1hbigpIHtcclxuXHJcbiAgdGltZSgnaW52ZW50b3J5LmdldEludk1hbicpO1xyXG5cclxuICBzaG93UXVpY2tEcm9wTGlua3MgPSBnZXRWYWx1ZSgnc2hvd1F1aWNrRHJvcExpbmtzJyk7XHJcbiAgc2hvd1F1aWNrU2VuZExpbmtzID0gZ2V0VmFsdWUoJ3Nob3dRdWlja1NlbmRMaW5rcycpO1xyXG5cclxuICBpZiAoY2FsZi5tZW1ickxpc3QpIHtyZWtleU1lbWJyTGlzdCgpO31cclxuXHJcbiAgZGVjb3JhdGUoKTtcclxuICBsdmxGaWx0ZXIoKTtcclxuICB0eXBlRmlsdGVyKCk7XHJcbiAgc2V0RmlsdGVyKCk7XHJcbiAgcmFyaXR5RmlsdGVyKCk7XHJcbiAgaGVhZGVycygpO1xyXG4gIHNldENoZWNrcygpO1xyXG4gIHNldEx2bHMoKTtcclxuICBkb1RhYmxlKCk7XHJcbiAgZXZlbnRIYW5kbGVycygpO1xyXG4gIGNsZWFyQnV0dG9uKCk7XHJcblxyXG4gIHRpbWVFbmQoJ2ludmVudG9yeS5nZXRJbnZNYW4nKTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV4dGVuZE9wdGlvbnMoZGF0YSkge1xyXG4gIG9wdGlvbnMgPSBmYWxsYmFjayhkYXRhLCB7fSk7XHJcbiAgb3B0aW9ucy5mc2hNaW5MdmwgPSBmYWxsYmFjayhvcHRpb25zLmZzaE1pbkx2bCxcclxuICAgIGRlZmF1bHRzLmludmVudG9yeU1pbkx2bCk7XHJcbiAgb3B0aW9ucy5mc2hNYXhMdmwgPSBmYWxsYmFjayhvcHRpb25zLmZzaE1heEx2bCxcclxuICAgIGRlZmF1bHRzLmludmVudG9yeU1heEx2bCk7XHJcbiAgb3B0aW9ucy5jaGVja2VkRWxlbWVudHMgPSBmYWxsYmFjayhvcHRpb25zLmNoZWNrZWRFbGVtZW50cyxcclxuICAgIGRlZmF1bHRzLmludmVudG9yeUNoZWNrZWRFbGVtZW50cyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN5bmNJbnZNYW4oKSB7IC8vIGpRdWVyeVxyXG4gIHZhciBwcm0gPSBbXTtcclxuICBwcm0ucHVzaChnZXRJbnZlbnRvcnkoKS5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgIHRoZUludiA9IGRhdGE7XHJcbiAgfSkpO1xyXG4gIGlmIChjYWxmLnN1YmNtZCA9PT0gJ2d1aWxkaW52bWdyJykge1xyXG4gICAgcHJtLnB1c2goZ2V0TWVtYnJMaXN0KGZhbHNlKSk7XHJcbiAgfVxyXG4gIHBybS5wdXNoKGdldEZvcmFnZSgnZnNoX2ludmVudG9yeScpXHJcbiAgICAuZG9uZShleHRlbmRPcHRpb25zKVxyXG4gICk7XHJcbiAgJC53aGVuLmFwcGx5KCQsIHBybSkuZG9uZShmdW5jdGlvbigpIHtcclxuICAgIGFkZCgzLCBnZXRJbnZNYW4pO1xyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQge3JlZnJlc2ggYXMgaW5qZWN0SW52ZW50b3J5TWFuYWdlck5ld307XHJcbiIsImltcG9ydCB7aXRlbVJFfSBmcm9tICcuLi9zdXBwb3J0L2RhdGFPYmonO1xyXG5pbXBvcnQgb3V0cHV0UmVzdWx0IGZyb20gJy4uL2NvbW1vbi9vdXRwdXRSZXN1bHQnO1xyXG5pbXBvcnQgcmV0cnlBamF4IGZyb20gJy4uL2FqYXgvcmV0cnlBamF4JztcclxuXHJcbmZ1bmN0aW9uIHNob3dFcnJvcihkYXRhKSB7IC8vIGpRdWVyeVxyXG4gIHZhciAkdGVtcEVycm9yID0gJCgnI3RlbXBfZXJyb3InKTtcclxuICAkdGVtcEVycm9yLmh0bWwoJzxzcGFuIHN0eWxlPVwiY29sb3I6IHJlZFwiPkVycm9yOjwvc3Bhbj4gJyArIGRhdGEubSk7XHJcbiAgJHRlbXBFcnJvci5zaG93KCkuZGVsYXkoNTAwMCkuaGlkZSg0MDApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmYWlsSG5kbHIoanFYSFIpIHtcclxuICBzaG93RXJyb3Ioe206IGpxWEhSLnN0YXR1cyArICcgJyArIGpxWEhSLnN0YXR1c1RleHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcXVpY2tEb25lVGFrZW4oZGF0YSkgeyAvLyBqUXVlcnlcclxuICBpZiAoZGF0YS5yICE9PSAwKSB7XHJcbiAgICBzaG93RXJyb3IoZGF0YSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHZhciBxdGlwSWQgPSAkKCcjdGVtcC1pbnYtaW1nLScgKyBkYXRhLnRlbXBfaWQpLmRhdGEoJ2hhc3F0aXAnKTtcclxuICAgICQoJyN0ZW1wLWludi0nICsgZGF0YS50ZW1wX2lkKS5yZW1vdmUoKTtcclxuICAgICQoJyNxdGlwLScgKyBxdGlwSWQpLnJlbW92ZSgpO1xyXG4gIH1cclxuICBvdXRwdXRSZXN1bHQoJ0l0ZW0gdGFrZW4uJywgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rha2VfcmVzdWx0JykpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0YWtlQWxsU2ltaWxhcihldnQpIHsgLy8galF1ZXJ5Lm1pblxyXG4gIHZhciBpbnZJZHMgPSBldnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnaW52SURzJykuc3BsaXQoJywnKTtcclxuICBldnQudGFyZ2V0LnBhcmVudE5vZGUuaW5uZXJIVE1MID0gJ3Rha2luZyBhbGwgJyArXHJcbiAgICBpbnZJZHMubGVuZ3RoICsgJyBpdGVtcyc7XHJcbiAgaW52SWRzLmZvckVhY2goZnVuY3Rpb24oaW52SWQpIHtcclxuICAgIHJldHJ5QWpheCh7XHJcbiAgICAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgdXJsOiAnaW5kZXgucGhwJyxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIGNtZDogJ3RlbXBpbnYnLFxyXG4gICAgICAgIHN1YmNtZDogJ3Rha2VpdGVtJyxcclxuICAgICAgICB0ZW1wX2lkOiBpbnZJZCxcclxuICAgICAgICBhamF4OiAnMSdcclxuICAgICAgfSxcclxuICAgICAgZGF0YVR5cGU6ICdqc29uJ1xyXG4gICAgfSkuZG9uZShxdWlja0RvbmVUYWtlbikuZmFpbChmYWlsSG5kbHIpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0b2dnbGVRdWlja1Rha2UoKSB7IC8vIGpRdWVyeVxyXG4gIGlmICgkKCcjY3VycmVudE1CRGlzcGxheScpLmF0dHIoJ3ZhbHVlJykgPT09ICdtYWlsYm94Jykge1xyXG4gICAgJCgnI21haWxib3hTd2l0Y2hlcicpLmh0bWwoJ1RvZ2dsZSBNYWlsYm94Jyk7XHJcbiAgICAkKCcjcXVpY2tUYWtlJykuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XHJcbiAgICAkKCcjcmVndWxhck1haWxib3gnKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgJCgnI2N1cnJlbnRNQkRpc3BsYXknKS5hdHRyKCd2YWx1ZScsICdxdWlja3Rha2UnKTtcclxuICB9IGVsc2Uge1xyXG4gICAgJCgnI21haWxib3hTd2l0Y2hlcicpLmh0bWwoJ1RvZ2dsZSBRdWljayBUYWtlJyk7XHJcbiAgICAkKCcjcXVpY2tUYWtlJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcclxuICAgICQoJyNyZWd1bGFyTWFpbGJveCcpLmNzcygnZGlzcGxheScsICdibG9jaycpO1xyXG4gICAgJCgnI2N1cnJlbnRNQkRpc3BsYXknKS5hdHRyKCd2YWx1ZScsICdtYWlsYm94Jyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmplY3RNYWlsYm94KCkgeyAvLyBCYWQgalF1ZXJ5XHJcbiAgdmFyIGl0ZW1zID0gJCgnI3BDQyBhJyk7XHJcbiAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge3JldHVybjt9IC8vIEVtcHR5IG1haWxib3hcclxuICAkKCcjcENDJykud3JhcElubmVyKCc8ZGl2IGlkPVwicmVndWxhck1haWxib3hcIiAvPicpO1xyXG4gIHZhciBxdWlja1Rha2VEaXYgPSAnPGRpdiBpZD1cInF1aWNrVGFrZVwiIHN0eWxlPVwiZGlzcGxheTpub25lXCI+PGJyIC8+JyArXHJcbiAgICAnPGJyIC8+PGNlbnRlcj48Zm9udCBzaXplPVwiM1wiPjxiPlF1aWNrIFRha2U8L2I+PC9mb250PicgK1xyXG4gICAgJzxiciAvPlNlbGVjdCB3aGljaCBpdGVtIHRvIHRha2UgYWxsIHNpbWlsYXIgaXRlbXMgZnJvbSB5b3VyICcgK1xyXG4gICAgJ01haWxib3guPGJyIC8+PC9jZW50ZXI+JyArXHJcbiAgICAnPHRhYmxlIGlkPVwicXVpY2tUYWtlVGFibGVcIiBhbGlnbj1cImxlZnRcIj48dHI+PHRoIHdpZHRoPTIwJT4nICtcclxuICAgICdBY3Rpb25zPC90aD48dGg+SXRlbXM8L3RoPjwvdHI+PHRyPjx0ZCBpZD1cInRha2VfcmVzdWx0XCIgJyArXHJcbiAgICAnY29sc3Bhbj0yPjwvdGQ+PC90cj48L3RhYmxlPicgK1xyXG4gICAgJzwvZGl2Pic7XHJcbiAgJCgnI3BDQycpLnByZXBlbmQoJzxzcGFuIGlkPVwibWFpbGJveFN3aXRjaGVyXCIgJyArXHJcbiAgICAnc3R5bGU9XCJjdXJzb3I6cG9pbnRlcjsgdGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTsgJyArXHJcbiAgICAnY29sb3I6Ymx1ZTtcIj5Ub2dnbGUgUXVpY2sgVGFrZTwvc3Bhbj48aW5wdXQgdHlwZT1cImhpZGRlblwiICcgK1xyXG4gICAgJ2lkPVwiY3VycmVudE1CRGlzcGxheVwiIHZhbHVlPVwibWFpbGJveFwiIC8+JyArIHF1aWNrVGFrZURpdik7XHJcbiAgdmFyIGl0ZW1MaXN0ID0ge307XHJcbiAgJCgnI3JlZ3VsYXJNYWlsYm94IGltZ1tkYXRhLXRpcHBlZCo9XCJ0PTVcIl0nKS5lYWNoKGZ1bmN0aW9uKGksIGUpIHtcclxuICAgIHZhciBpdGVtSURzID0gaXRlbVJFLmV4ZWMoJChlKS5hdHRyKCdkYXRhLXRpcHBlZCcpKTtcclxuICAgIGlmICghaXRlbUlEcykge3JldHVybjt9XHJcbiAgICB2YXIgaXRlbUlkID0gaXRlbUlEc1sxXTtcclxuICAgIHZhciBpbnZJZCA9IGl0ZW1JRHNbMl07XHJcbiAgICB2YXIgdGlwcGVkID0gJChlKS5hdHRyKCdkYXRhLXRpcHBlZCcpO1xyXG4gICAgdmFyIHNyYyA9ICQoZSkuYXR0cignc3JjJyk7XHJcbiAgICBpZiAoIWl0ZW1MaXN0W2l0ZW1JZF0pIHtcclxuICAgICAgdmFyIGludklkcyA9IFtdO1xyXG4gICAgICBpbnZJZHMucHVzaChpbnZJZCk7XHJcbiAgICAgIGl0ZW1MaXN0W2l0ZW1JZF0gPSB7XHJcbiAgICAgICAgaW52SWRzOiBpbnZJZHMsXHJcbiAgICAgICAgdGlwcGVkOiB0aXBwZWQsXHJcbiAgICAgICAgc3JjOiBzcmNcclxuICAgICAgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGl0ZW1MaXN0W2l0ZW1JZF0uaW52SWRzLnB1c2goaW52SWQpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHZhciBxdWlja1Rha2VUYWJsZSA9ICQoJyNxdWlja1Rha2VUYWJsZScpO1xyXG4gIE9iamVjdC5rZXlzKGl0ZW1MaXN0KS5mb3JFYWNoKGZ1bmN0aW9uKGlkKSB7XHJcbiAgICB2YXIgdGl0ZW0gPSBpdGVtTGlzdFtpZF07XHJcbiAgICBxdWlja1Rha2VUYWJsZS5hcHBlbmQoJzx0cj48dGQgYWxpZ249Y2VudGVyPicgK1xyXG4gICAgICAnPHNwYW4gc3R5bGU9XCJjdXJzb3I6cG9pbnRlcjsgdGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTsgJyArXHJcbiAgICAgICdjb2xvcjpibHVlOyBmb250LXNpemU6eC1zbWFsbDtcIiAnICtcclxuICAgICAgJ2lkPVwiSGVscGVyOnRha2VBbGxTaW1pbGFyJyArIGlkICsgJ1wiIGludklEcz1cIicgKyB0aXRlbS5pbnZJZHMuam9pbigpICtcclxuICAgICAgJ1wiPlRha2UgQWxsICcgKyB0aXRlbS5pbnZJZHMubGVuZ3RoICsgJzwvc3Bhbj48L3RkPicgK1xyXG4gICAgICAnPHRkPjxpbWcgc3JjPVwiJyArIHRpdGVtLnNyYyArXHJcbiAgICAgICdcIiBjbGFzcz1cInRpcC1keW5hbWljXCIgYm9yZGVyPVwiMFwiIGRhdGEtdGlwcGVkPVwiJyArXHJcbiAgICAgIHRpdGVtLnRpcHBlZCArICdcIj48L3RkPjwvdHI+Jyk7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnSGVscGVyOnRha2VBbGxTaW1pbGFyJyArIGlkKVxyXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0YWtlQWxsU2ltaWxhciwgdHJ1ZSk7XHJcbiAgfSk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21haWxib3hTd2l0Y2hlcicpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVRdWlja1Rha2UsIHRydWUpO1xyXG59XHJcbiIsImltcG9ydCB7Z2V0VmFsdWV9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtwQ0MsIHBsYXllcklkLCBwbGF5ZXJOYW1lfSBmcm9tICcuLi9zdXBwb3J0L2xheW91dCc7XHJcblxyXG52YXIgY3VycmVudFBsYXllcklkO1xyXG5cclxuZnVuY3Rpb24gZ2V0UGxheWVyKHBsYXllckFyeSkgeyAvLyBMZWdhY3lcclxuICBpZiAocGxheWVyQXJ5KSB7cmV0dXJuIE51bWJlcihwbGF5ZXJBcnlbMV0pO31cclxuICByZXR1cm4gMDtcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZFBsYXllcnMoYVJvdykgeyAvLyBMZWdhY3lcclxuICB2YXIgbWVzc2FnZUhUTUwgPSBhUm93LmNlbGxzWzJdLmlubmVySFRNTDtcclxuICB2YXIgZG91YmxlclBsYXllck1lc3NhZ2VSRSA9XHJcbiAgICAvbWVtYmVyXFxzPGFcXHNocmVmPVwiaW5kZXgucGhwXFw/Y21kPXByb2ZpbGUmYW1wO3BsYXllcl9pZD0oXFxkKykvO1xyXG4gIHZhciBzZWNvbmRQbGF5ZXIgPSBkb3VibGVyUGxheWVyTWVzc2FnZVJFLmV4ZWMobWVzc2FnZUhUTUwpO1xyXG4gIHZhciBzaW5nbGVQbGF5ZXJNZXNzYWdlUkUgPVxyXG4gICAgLzxhXFxzaHJlZj1cImluZGV4LnBocFxcP2NtZD1wcm9maWxlJmFtcDtwbGF5ZXJfaWQ9KFxcZCspLztcclxuICB2YXIgZmlyc3RQbGF5ZXIgPSBzaW5nbGVQbGF5ZXJNZXNzYWdlUkUuZXhlYyhtZXNzYWdlSFRNTCk7XHJcblxyXG4gIHZhciBmaXJzdFBsYXllcklEID0gZ2V0UGxheWVyKGZpcnN0UGxheWVyKTtcclxuICB2YXIgc2Vjb25kUGxheWVySUQgPSBnZXRQbGF5ZXIoc2Vjb25kUGxheWVyKTtcclxuXHJcbiAgaWYgKGZpcnN0UGxheWVyICYmIGZpcnN0UGxheWVySUQgIT09IGN1cnJlbnRQbGF5ZXJJZCAmJlxyXG4gICAgICBzZWNvbmRQbGF5ZXJJRCAhPT0gY3VycmVudFBsYXllcklkKSB7XHJcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IDM7IGogKz0gMSkge1xyXG4gICAgICBhUm93LmNlbGxzW2pdLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcclxuICAgIH1cclxuICAgIGFSb3cuY2xhc3NMaXN0LmFkZCgnZnNoR3JleScpO1xyXG4gICAgYVJvdy5jbGFzc0xpc3QuYWRkKCdmc2hYWFNtYWxsJyk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBsaWtlSW52aXRlKGFSb3csIGhhc0ludml0ZWQpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIG1lc3NhZ2UgPSBhUm93LmNlbGxzWzJdLmlubmVySFRNTDtcclxuICB2YXIgZmlyc3RRdW90ZSA9IG1lc3NhZ2UuaW5kZXhPZignXFwnJyk7XHJcbiAgdmFyIGZpcnN0UGFydCA9ICcnO1xyXG4gIGZpcnN0UGFydCA9IG1lc3NhZ2Uuc3Vic3RyaW5nKDAsIGZpcnN0UXVvdGUpO1xyXG4gIHZhciBzZWNvbmRRdW90ZSA9IG1lc3NhZ2UuaW5kZXhPZignXFwnJywgZmlyc3RRdW90ZSArIDEpO1xyXG4gIHZhciB0YXJnZXRQbGF5ZXJOYW1lID0gbWVzc2FnZS5zdWJzdHJpbmcoZmlyc3RRdW90ZSArIDEsIHNlY29uZFF1b3RlKTtcclxuICBhUm93LmNlbGxzWzJdLmlubmVySFRNTCA9IGZpcnN0UGFydCArICdcXCcnICtcclxuICAgICc8YSBocmVmPVwiaW5kZXgucGhwP2NtZD1maW5kcGxheWVyJnNlYXJjaF9hY3RpdmU9MSYnICtcclxuICAgICdzZWFyY2hfbGV2ZWxfbWF4PSZzZWFyY2hfbGV2ZWxfbWluPSZzZWFyY2hfdXNlcm5hbWU9JyArXHJcbiAgICB0YXJnZXRQbGF5ZXJOYW1lICsgJyZzZWFyY2hfc2hvd19maXJzdD0xXCI+JyArIHRhcmdldFBsYXllck5hbWUgK1xyXG4gICAgJzwvYT4nICsgbWVzc2FnZS5zdWJzdHJpbmcoc2Vjb25kUXVvdGUsIG1lc3NhZ2UubGVuZ3RoKTtcclxuICBpZiAoIWhhc0ludml0ZWQgJiZcclxuICAgIHRhcmdldFBsYXllck5hbWUgIT09IHBsYXllck5hbWUoKSkge1xyXG4gICAgJChhUm93KS5maW5kKCd0ZCcpLnJlbW92ZUNsYXNzKCdyb3cnKS5jc3MoJ2ZvbnQtc2l6ZScsICd4eC1zbWFsbCcpO1xyXG4gICAgYVJvdy5zdHlsZS5jb2xvciA9ICdncmF5JztcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGd1aWxkSW52aXRlKGFSb3cpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIGhhc0ludml0ZWQgPSBhUm93LmNlbGxzWzJdLnRleHRDb250ZW50XHJcbiAgICAuc2VhcmNoKCdoYXMgaW52aXRlZCB0aGUgcGxheWVyJykgIT09IC0xO1xyXG4gIGlmIChhUm93LmNlbGxzWzJdLnRleHRDb250ZW50LmNoYXJBdCgwKSA9PT0gJ1xcJycgfHwgaGFzSW52aXRlZCkge1xyXG4gICAgbGlrZUludml0ZShhUm93LCBoYXNJbnZpdGVkKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb2Nlc3NHdWlsZFdpZGdldFJvdyhhUm93KSB7IC8vIExlZ2FjeVxyXG4gIGZpbmRQbGF5ZXJzKGFSb3cpO1xyXG4gIGd1aWxkSW52aXRlKGFSb3cpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRNZXNzYWdlSGVhZGVyKCkge1xyXG4gIHZhciBub2RlTGlzdCA9IHBDQy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnVEQnKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICBpZiAobm9kZUxpc3RbaV0udGV4dENvbnRlbnQgPT09ICdNZXNzYWdlJykge1xyXG4gICAgICByZXR1cm4gbm9kZUxpc3RbaV07XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBndWlsZExvZ1dpZGdldHNFbmFibGVkKCkgeyAvLyBMZWdhY3lcclxuICB2YXIgbWVzc2FnZU5hbWVDZWxsID0gZ2V0TWVzc2FnZUhlYWRlcigpO1xyXG4gIGlmICghbWVzc2FnZU5hbWVDZWxsKSB7cmV0dXJuO31cclxuICB2YXIgbG9nVGFibGUgPSBtZXNzYWdlTmFtZUNlbGwucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGU7XHJcbiAgbWVzc2FnZU5hbWVDZWxsLmlubmVySFRNTCArPSAnJm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9XCJmc2hXaGl0ZVwiPicgK1xyXG4gICAgJyhHdWlsZCBMb2cgbWVzc2FnZXMgbm90IGludm9sdmluZyBzZWxmIGFyZSBkaW1tZWQhKTwvc3Bhbj4nO1xyXG5cclxuICBjdXJyZW50UGxheWVySWQgPSBwbGF5ZXJJZCgpO1xyXG5cclxuICBmb3IgKHZhciBpID0gMTsgaSA8IGxvZ1RhYmxlLnJvd3MubGVuZ3RoOyBpICs9IDIpIHtcclxuICAgIHZhciBhUm93ID0gbG9nVGFibGUucm93c1tpXTtcclxuICAgIHByb2Nlc3NHdWlsZFdpZGdldFJvdyhhUm93KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZEd1aWxkTG9nV2lkZ2V0cygpIHtcclxuICBpZiAoZ2V0VmFsdWUoJ2hpZGVOb25QbGF5ZXJHdWlsZExvZ01lc3NhZ2VzJykpIHtcclxuICAgIGd1aWxkTG9nV2lkZ2V0c0VuYWJsZWQoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtxdWlja0J1ZmZIcmVmfSBmcm9tICcuLi9zdXBwb3J0L2xheW91dCc7XHJcbmltcG9ydCB7XHJcbiAgZmluZE5vZGUsXHJcbiAgZ2V0VmFsdWUsXHJcbiAgcGFyc2VEYXRlQXNUaW1lc3RhbXAsXHJcbiAgc2V0VmFsdWVcclxufSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG52YXIgbm93VXRjO1xyXG52YXIgbGFzdENoZWNrVXRjO1xyXG5cclxuZnVuY3Rpb24gZmluZENoYXRUYWJsZSgpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIGNoYXRUYWJsZSA9IGZpbmROb2RlKCcvL3RhYmxlW0BjbGFzcz1cIndpZHRoX2Z1bGxcIl0nKTsgLy8gR3VpbGQgTG9nXHJcbiAgaWYgKCFjaGF0VGFibGUpIHtcclxuICAgIGNoYXRUYWJsZSA9IGZpbmROb2RlKCcvL3RhYmxlW3Rib2R5L3RyL3RkWy49XCJNZXNzYWdlXCJdXScpOyAvLyBPdXRib3ggJiBHdWlsZCBDaGF0XHJcbiAgfVxyXG4gIGlmICghY2hhdFRhYmxlKSB7XHJcbiAgICBjaGF0VGFibGUgPSBmaW5kTm9kZSgnLy90YWJsZVt0Ym9keS90ci90ZC9zcGFuWycgK1xyXG4gICAgICAnY29udGFpbnMoLixcIkN1cnJlbnRseSBzaG93aW5nOlwiKV1dJyk7IC8vIHBlcnNvbmFsIGxvZ1xyXG4gIH1cclxuICByZXR1cm4gY2hhdFRhYmxlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGF0Um93QnVmZkxpbmsoYVJvdywgbG9nU2NyZWVuLCBhZGRCdWZmVGFnKSB7IC8vIExlZ2FjeVxyXG4gIGlmIChsb2dTY3JlZW4gPT09ICdDaGF0JyAmJiBhZGRCdWZmVGFnKSB7XHJcbiAgICB2YXIgcGxheWVySURSRSA9IC9wbGF5ZXJfaWQ9KFxcZCspLztcclxuICAgIHZhciBwbGF5ZXJJRCA9IHBsYXllcklEUkUuZXhlYyhhUm93LmNlbGxzWzFdLmlubmVySFRNTClbMV07XHJcbiAgICBhUm93LmNlbGxzWzFdLmlubmVySFRNTCArPSAnIDxhIGNsYXNzPVwiZnNoQmZcIiAnICtcclxuICAgICAgcXVpY2tCdWZmSHJlZihwbGF5ZXJJRCkgKyAnPltiXTwvYT4nO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcm93Q29sb3IoYVJvdywgbG9nU2NyZWVuLCBkYXRlQ29sdW1uKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBhZGRCdWZmVGFnID0gdHJ1ZTtcclxuICB2YXIgY2VsbENvbnRlbnRzID0gYVJvdy5jZWxsc1tkYXRlQ29sdW1uXS50ZXh0Q29udGVudDtcclxuICB2YXIgcG9zdERhdGVVdGMgPSBwYXJzZURhdGVBc1RpbWVzdGFtcChjZWxsQ29udGVudHMpO1xyXG4gIHZhciBwb3N0QWdlTWlucyA9IChub3dVdGMgLSBwb3N0RGF0ZVV0YykgLyAoMTAwMCAqIDYwKTtcclxuICBpZiAocG9zdERhdGVVdGMgPiBsYXN0Q2hlY2tVdGMpIHtcclxuICAgIGFSb3cuY2xhc3NMaXN0LmFkZCgnZnNoTnInKTtcclxuICB9IGVsc2UgaWYgKHBvc3RBZ2VNaW5zID4gMjAgJiYgcG9zdERhdGVVdGMgPD0gbGFzdENoZWNrVXRjKSB7XHJcbiAgICBhUm93LmNsYXNzTGlzdC5hZGQoJ2ZzaE9yJyk7XHJcbiAgICBhZGRCdWZmVGFnID0gZmFsc2U7XHJcbiAgfVxyXG4gIGNoYXRSb3dCdWZmTGluayhhUm93LCBsb2dTY3JlZW4sIGFkZEJ1ZmZUYWcpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRMYXN0Q2hlY2sobGFzdENoZWNrU2NyZWVuKSB7XHJcbiAgcmV0dXJuIGdldFZhbHVlKGxhc3RDaGVja1NjcmVlbikgfHwgbm93VXRjO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb0xvZ0NvbG9yaW5nKGxvZ1NjcmVlbiwgZGF0ZUNvbHVtbiwgY2hhdFRhYmxlKSB7IC8vIExlZ2FjeVxyXG4gIG5vd1V0YyA9IChuZXcgRGF0ZSgpKS5zZXRVVENTZWNvbmRzKDAsIDApIC0gMTtcclxuICB2YXIgbGFzdENoZWNrU2NyZWVuID0gJ2xhc3QnICsgbG9nU2NyZWVuICsgJ0NoZWNrJztcclxuICBsYXN0Q2hlY2tVdGMgPSBnZXRMYXN0Q2hlY2sobGFzdENoZWNrU2NyZWVuKTtcclxuICB2YXIgaW5jcmVtZW50ID0gMjtcclxuICBpZiAobG9nU2NyZWVuID09PSAnQ2hhdCcpIHtcclxuICAgIGluY3JlbWVudCA9IDQ7XHJcbiAgICBjaGF0VGFibGUuY2xhc3NMaXN0LmFkZCgnZnNoR2MnKTtcclxuICB9XHJcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBjaGF0VGFibGUucm93cy5sZW5ndGg7IGkgKz0gaW5jcmVtZW50KSB7XHJcbiAgICByb3dDb2xvcihjaGF0VGFibGUucm93c1tpXSwgbG9nU2NyZWVuLCBkYXRlQ29sdW1uKTtcclxuICB9XHJcbiAgc2V0VmFsdWUobGFzdENoZWNrU2NyZWVuLCBub3dVdGMpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRMb2dDb2xvcmluZyhsb2dTY3JlZW4sIGRhdGVDb2x1bW4pIHsgLy8gTGVnYWN5XHJcbiAgaWYgKCFnZXRWYWx1ZSgnZW5hYmxlTG9nQ29sb3JpbmcnKSkge3JldHVybjt9XHJcbiAgdmFyIGNoYXRUYWJsZSA9IGZpbmRDaGF0VGFibGUoKTtcclxuICBpZiAoY2hhdFRhYmxlKSB7ZG9Mb2dDb2xvcmluZyhsb2dTY3JlZW4sIGRhdGVDb2x1bW4sIGNoYXRUYWJsZSk7fVxyXG59XHJcbiIsInZhciBkZXBvUmUgPSAvZGVwb3NpdGVkIChbLDAtOV0rKSBGYWxsZW5Td29yZCBQb2ludHMgaW50byB0aGUgZ3VpbGQuLztcclxudmFyIGxvb2t1cCA9IFtcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtyZXR1cm4gZGF0YS5pbmRleE9mKCcoUG90aW9uKScpICE9PSAtMTt9LFxyXG4gICAgaWQ6IDFcclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICByZXR1cm4gZGF0YS5pbmRleE9mKCdyZWNhbGxlZCB0aGUgaXRlbScpICE9PSAtMTtcclxuICAgIH0sXHJcbiAgICBpZDogMlxyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHJldHVybiBkYXRhLmluZGV4T2YoJ3Rvb2sgdGhlIGl0ZW0nKSAhPT0gLTE7XHJcbiAgICB9LFxyXG4gICAgaWQ6IDJcclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICByZXR1cm4gZGF0YS5pbmRleE9mKCdhdXRvLXJldHVybmVkIHRoZScpICE9PSAtMTtcclxuICAgIH0sXHJcbiAgICBpZDogMlxyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHJldHVybiBkYXRhLmluZGV4T2YoJ3N0b3JlZCB0aGUgaXRlbScpICE9PSAtMTtcclxuICAgIH0sXHJcbiAgICBpZDogMlxyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHJldHVybiBkYXRhLmluZGV4T2YoJ2hhcyBhZGRlZCBmbGFncyB0bycpICE9PSAtMTtcclxuICAgIH0sXHJcbiAgICBpZDogM1xyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHJldHVybiBkYXRhLmluZGV4T2YoJ2hhcyByZW1vdmVkIGZsYWdzIHRvJykgIT09IC0xO1xyXG4gICAgfSxcclxuICAgIGlkOiAzXHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuaW5kZXhPZihcclxuICAgICAgICAncmVsaWMuIFRoaXMgcmVsaWMgbm93IGhhcyBhbiBlbXBvd2VyIGxldmVsIG9mJykgIT09IC0xO1xyXG4gICAgfSxcclxuICAgIGlkOiA0XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuaW5kZXhPZihcclxuICAgICAgICAncmVsaWMuIFRoZSByZWxpYyBlbXBvd2VyIGxldmVsIGhhcyBiZWVuIHJlc2V0IHRvIHplcm8uJykgIT09IC0xO1xyXG4gICAgfSxcclxuICAgIGlkOiA0XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuaW5kZXhPZignZmFpbGVkIHRvIGNhcHR1cmUgdGhlIHJlbGljJykgIT09IC0xO1xyXG4gICAgfSxcclxuICAgIGlkOiA0XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuaW5kZXhPZignY2FwdHVyZWQgdGhlIHJlbGljJykgIT09IC0xO1xyXG4gICAgfSxcclxuICAgIGlkOiA0XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuaW5kZXhPZignY2FwdHVyZWQgeW91ciByZWxpYycpICE9PSAtMTtcclxuICAgIH0sXHJcbiAgICBpZDogNFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHJldHVybiBkYXRhLmluZGV4T2YoJ2hhcyBjYXB0dXJlZCB0aGUgdW5kZWZlbmRlZCByZWxpYycpICE9PSAtMTtcclxuICAgIH0sXHJcbiAgICBpZDogNFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHJldHVybiBkYXRhLmluZGV4T2YoJ2F0dGVtcHRlZCB0byBjYXB0dXJlIHlvdXIgcmVsaWMnKSAhPT0gLTE7XHJcbiAgICB9LFxyXG4gICAgaWQ6IDRcclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICByZXR1cm4gLyBlbXBvd2VyZWQgdGhlIC4rIHJlbGljLy50ZXN0KGRhdGEpO1xyXG4gICAgfSxcclxuICAgIGlkOiA0XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIC8gcmVtb3ZlZCB0aGUgZW1wb3dlcm1lbnQgZnJvbSB0aGUgLisgcmVsaWMvLnRlc3QoZGF0YSk7XHJcbiAgICB9LFxyXG4gICAgaWQ6IDRcclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICByZXR1cm4gZGF0YS5pbmRleE9mKCdkaXNiYW5kZWQgYSBtZXJjZW5hcnkuJykgIT09IC0xO1xyXG4gICAgfSxcclxuICAgIGlkOiA1XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuaW5kZXhPZignaGlyZWQgdGhlIG1lcmNlbmFyeScpICE9PSAtMTtcclxuICAgIH0sXHJcbiAgICBpZDogNVxyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHJldHVybiBkYXRhLmluZGV4T2YoJ2hhcyBkaXNiYW5kZWQgb25lIG9mIHRoZWlyIGdyb3VwcycpICE9PSAtMTtcclxuICAgIH0sXHJcbiAgICBpZDogNlxyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHJldHVybiAvQSBncm91cCBmcm9tIHlvdXIgZ3VpbGQgd2FzICguKikgaW4gY29tYmF0Li8udGVzdChkYXRhKTtcclxuICAgIH0sXHJcbiAgICBpZDogNlxyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHJldHVybiAvZGVwb3NpdGVkIChbLDAtOV0rKSBnb2xkIGludG8gdGhlIGd1aWxkIGJhbmsvLnRlc3QoZGF0YSk7XHJcbiAgICB9LFxyXG4gICAgaWQ6IDdcclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICByZXR1cm4gZGVwb1JlLnRlc3QoZGF0YSk7XHJcbiAgICB9LFxyXG4gICAgaWQ6IDdcclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICByZXR1cm4gZGF0YS5pbmRleE9mKCdoYXMgYWRkZWQgYSBuZXcgcmFuayBlbnRpdGxlZCcpICE9PSAtMTtcclxuICAgIH0sXHJcbiAgICBpZDogOFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHJldHVybiBkYXRhLmluZGV4T2YoJ2hhcyBkZWxldGVkIHRoZSByYW5rJykgIT09IC0xO1xyXG4gICAgfSxcclxuICAgIGlkOiA4XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuaW5kZXhPZignaGFzIHJlcXVlc3RlZCB0byBqb2luIHRoZSBndWlsZCcpICE9PSAtMTtcclxuICAgIH0sXHJcbiAgICBpZDogOFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHJldHVybiBkYXRhLmluZGV4T2YoJ2hhcyBpbnZpdGVkIHRoZSBwbGF5ZXInKSAhPT0gLTE7XHJcbiAgICB9LFxyXG4gICAgaWQ6IDhcclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICByZXR1cm4gZGF0YS5pbmRleE9mKCdoYXMgb2ZmaWNpYWxseSBqb2luZWQgdGhlIGd1aWxkJykgIT09IC0xO1xyXG4gICAgfSxcclxuICAgIGlkOiA4XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuaW5kZXhPZignaGFzIGJlZW4ga2lja2VkIGZyb20gdGhlIGd1aWxkIGJ5JykgIT09IC0xO1xyXG4gICAgfSxcclxuICAgIGlkOiA4XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuaW5kZXhPZignaGFzIGxlZnQgdGhlIGd1aWxkJykgIT09IC0xO1xyXG4gICAgfSxcclxuICAgIGlkOiA4XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuaW5kZXhPZignaGFzIGJlZW4gYXNzaWduZWQgdGhlIHJhbmsnKSAhPT0gLTE7XHJcbiAgICB9LFxyXG4gICAgaWQ6IDhcclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICByZXR1cm4gL3Jlc3VsdGVkIGluICguKikgd2l0aCBhIGZpbmFsIHNjb3JlIG9mLy50ZXN0KGRhdGEpO1xyXG4gICAgfSxcclxuICAgIGlkOiA5XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuaW5kZXhPZigncmVzdWx0ZWQgaW4gYSBkcmF3LiBZb3VyIEd2RyByYXRpbmcgJykgIT09IC0xO1xyXG4gICAgfSxcclxuICAgIGlkOiA5XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuaW5kZXhPZihcclxuICAgICAgICAnaGFzIGp1c3QgaW5pdGlhdGVkIGEgY29uZmxpY3Qgd2l0aCB0aGUgZ3VpbGQnKSAhPT0gLTE7XHJcbiAgICB9LFxyXG4gICAgaWQ6IDlcclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICByZXR1cm4gZGF0YS5pbmRleE9mKCdoYXMgaW5pdGlhdGVkIGEgY29uZmxpY3Qgd2l0aCB5b3VyIGd1aWxkJykgIT09IC0xO1xyXG4gICAgfSxcclxuICAgIGlkOiA5XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuaW5kZXhPZignaXMgcGFydGljaXBhdGluZyBpbiB0aGUgY29uZmxpY3QgJyArXHJcbiAgICAgICAgJ2FnYWluc3QgdGhlIGd1aWxkJykgIT09IC0xO1xyXG4gICAgfSxcclxuICAgIGlkOiA5XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuaW5kZXhPZignYm91Z2h0IHRoZSBUaXRhbiBSZXdhcmQgaXRlbScpICE9PSAtMTtcclxuICAgIH0sXHJcbiAgICBpZDogMTBcclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICByZXR1cm4gZGF0YS5pbmRleE9mKCdmcm9tIHlvdXIgZ3VpbGRcXCdzIGNvbnRyaWJ1dGlvbiB0byB0aGUgJyArXHJcbiAgICAgICAgJ2RlZmVhdCBvZiB0aGUgdGl0YW4nKSAhPT0gLTE7XHJcbiAgICB9LFxyXG4gICAgaWQ6IDEwXHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIGRhdGEuaW5kZXhPZignYSA3IGRheSBjb29sZG93biBoYXMgYmVlbiBhY3RpdmF0ZWQgJyArXHJcbiAgICAgICAgJ29uIHlvdXIgZ3VpbGQgZm9yIHRoaXMgdGl0YW4nKSAhPT0gLTE7XHJcbiAgICB9LFxyXG4gICAgaWQ6IDEwXHJcbiAgfVxyXG5dO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJvd1Byb2ZpbGUoZGF0YSkge1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbG9va3VwLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICB2YXIgdGVzdCA9IGxvb2t1cFtpXTtcclxuICAgIGlmICh0ZXN0LmNvbmRpdGlvbihkYXRhKSkge3JldHVybiB0ZXN0LmlkO31cclxuICB9XHJcbiAgcmV0dXJuIDA7XHJcbn1cclxuIiwiZXhwb3J0IHZhciBndWlsZExvZ0ZpbHRlciA9XHJcbiAgJzx0YWJsZSBpZD1cImZzaE5ld0d1aWxkTG9nXCIgY2xhc3M9XCJmc2hJbnZGaWx0ZXJcIj48dGhlYWQ+PHRyPicgK1xyXG4gICc8dGggY29sc3Bhbj1cIjExXCI+PGI+R3VpbGQgTG9nIFZlcnNpb24gNDwvYj48L3RoPicgK1xyXG4gICc8dGggY29sc3Bhbj1cIjNcIj48c3BhbiBpZD1cInJmc2hcIiBjbGFzcz1cInNlbmRMaW5rXCI+UmVzZXQ8L3NwYW4+ICcgK1xyXG4gICc8YSBocmVmPVwiaW5kZXgucGhwP2NtZD1ndWlsZCZzdWJjbWQ9bG9nXCIgY2xhc3M9XCJzZW5kTGlua1wiPicgK1xyXG4gICdPbGQgR3VpbGQgTG9nPC9hPjwvdGg+JyArXHJcbiAgJzwvdHI+PC90aGVhZD48dGJvZHk+JyArXHJcbiAgJzx0cj48dGQgcm93c3Bhbj1cIjNcIj48Yj4mbmJzcDtGaWx0ZXJzOjwvYj48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO1BvdGlvbnM6PC90ZD4nICtcclxuICAnPHRkPjxpbnB1dCBpZD1cImZzaFBvdGlvblwiIHR5cGU9XCJjaGVja2JveFwiIGl0ZW09XCIxXCIvPjwvdGQ+JyArXHJcbiAgJzx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+Jm5ic3A7U3RvcmUvUmVjYWxsczo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoU3RvcmVcIiB0eXBlPVwiY2hlY2tib3hcIiBpdGVtPVwiMlwiLz48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO1JlbGljczo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoUmVsaWNcIiB0eXBlPVwiY2hlY2tib3hcIiBpdGVtPVwiNFwiLz48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO01lcmNlbmFyaWVzOjwvdGQ+JyArXHJcbiAgJzx0ZD48aW5wdXQgaWQ9XCJmc2hNZXJjXCIgdHlwZT1cImNoZWNrYm94XCIgaXRlbT1cIjVcIi8+PC90ZD4nICtcclxuICAnPHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4mbmJzcDtHcm91cCBDb21iYXRzOjwvdGQ+JyArXHJcbiAgJzx0ZD48aW5wdXQgaWQ9XCJmc2hHcm91cFwiIHR5cGU9XCJjaGVja2JveFwiIGl0ZW09XCI2XCIvPjwvdGQ+JyArXHJcbiAgJzx0ZCBjb2xzcGFuPVwiM1wiPiZuYnNwOzwvdGQ+JyArXHJcbiAgJzwvdHI+PHRyPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO0RvbmF0aW9uczo8L3RkPicgK1xyXG4gICc8dGQ+PGlucHV0IGlkPVwiZnNoRG9uYXRpb25cIiB0eXBlPVwiY2hlY2tib3hcIiBpdGVtPVwiN1wiLz48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO1JhbmtpbmdzOjwvdGQ+JyArXHJcbiAgJzx0ZD48aW5wdXQgaWQ9XCJmc2hSYW5rXCIgdHlwZT1cImNoZWNrYm94XCIgaXRlbT1cIjhcIi8+PC90ZD4nICtcclxuICAnPHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4mbmJzcDtHdkdzOjwvdGQ+JyArXHJcbiAgJzx0ZD48aW5wdXQgaWQ9XCJmc2hHdkdcIiB0eXBlPVwiY2hlY2tib3hcIiBpdGVtPVwiOVwiLz48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO1RhZy9VblRhZ3M6PC90ZD4nICtcclxuICAnPHRkPjxpbnB1dCBpZD1cImZzaFRhZ1wiIHR5cGU9XCJjaGVja2JveFwiIGl0ZW09XCIzXCIvPjwvdGQ+JyArXHJcbiAgJzx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+Jm5ic3A7VGl0YW5zOjwvdGQ+JyArXHJcbiAgJzx0ZD48aW5wdXQgaWQ9XCJmc2hUaXRhblwiIHR5cGU9XCJjaGVja2JveFwiIGl0ZW09XCIxMFwiLz48L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPiZuYnNwO090aGVyOjwvdGQ+JyArXHJcbiAgJzx0ZD48aW5wdXQgaWQ9XCJmc2hPdGhlclwiIHR5cGU9XCJjaGVja2JveFwiIGl0ZW09XCIwXCIvPjwvdGQ+JyArXHJcbiAgJzx0ZD4mbmJzcDs8L3RkPicgK1xyXG4gICc8L3RyPjx0cj4nICtcclxuICAnPHRkIGNvbHNwYW49XCIyXCI+JyArXHJcbiAgJyZuYnNwO1s8c3BhbiBpZD1cImZzaEFsbFwiIGNsYXNzPVwiZnNoTGlua1wiPlNlbGVjdCBBbGw8L3NwYW4+XTwvdGQ+JyArXHJcbiAgJzx0ZCBjb2xzcGFuPVwiMlwiPicgK1xyXG4gICcmbmJzcDtbPHNwYW4gaWQ9XCJmc2hOb25lXCIgY2xhc3M9XCJmc2hMaW5rXCI+U2VsZWN0IE5vbmU8L3NwYW4+XTwvdGQ+JyArXHJcbiAgJzx0ZCBjb2xzcGFuPVwiOVwiPjwvdGQ+JyArXHJcbiAgJzwvdHI+PHRyPjx0ZCBpZD1cImZzaE91dHB1dFwiIGNsYXNzPVwiZnNoQmx1ZVwiIGNvbHNwYW49XCIxNFwiPicgK1xyXG4gICdMb2FkaW5nIFBhZ2UgMSAuLi48L3RkPjwvdHI+JyArXHJcbiAgJzwvdGJvZHk+PC90YWJsZT4nICtcclxuICAnPHRhYmxlIGlkPVwiZnNoSW5qZWN0SGVyZVwiPicgK1xyXG4gICc8L3RhYmxlPic7XHJcbmV4cG9ydCB2YXIgaGVhZGVyUm93ID0gJzx0Ym9keT48dHI+JyArXHJcbiAgJzx0ZCBjbGFzcz1cImhlYWRlclwiIHdpZHRoPVwiMTZcIj4mbmJzcDs8L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJoZWFkZXJcIiB3aWR0aD1cIjIwJVwiPkRhdGU8L3RkPicgK1xyXG4gICc8dGQgY2xhc3M9XCJoZWFkZXJcIiB3aWR0aD1cIjgwJVwiPk1lc3NhZ2U8L3RkPjwvdHI+PC90Ym9keT4nO1xyXG5leHBvcnQgdmFyIG1zZ1R5cGUgPSBbXHJcbiAgJ1Vua25vd24nLCAvLyAwXHJcbiAgJ1BvdGlvbicsIC8vIDFcclxuICAnc2hvd1JlY2FsbE1lc3NhZ2VzJywgLy8gMlxyXG4gICdzaG93VGFnZ2luZ01lc3NhZ2VzJywgLy8gM1xyXG4gICdzaG93UmVsaWNNZXNzYWdlcycsIC8vIDRcclxuICAnc2hvd01lcmNlbmFyeU1lc3NhZ2VzJywgLy8gNVxyXG4gICdzaG93R3JvdXBDb21iYXRNZXNzYWdlcycsIC8vIDZcclxuICAnc2hvd0RvbmF0aW9uTWVzc2FnZXMnLCAvLyA3XHJcbiAgJ3Nob3dSYW5raW5nTWVzc2FnZXMnLCAvLyA4XHJcbiAgJ3Nob3dHdkdNZXNzYWdlcycsIC8vIDlcclxuICAnc2hvd1RpdGFuTWVzc2FnZXMnIC8vIDEwXHJcbl07XHJcbmV4cG9ydCB2YXIgZGVmQ2hlY2tzID0gW3RydWUsIHRydWUsIHRydWUsIHRydWUsIHRydWUsIHRydWUsXHJcbiAgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZV07XHJcbmV4cG9ydCB2YXIgbm9DaGVja3MgPSBbZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSxcclxuICBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2VdO1xyXG4iLCJpbXBvcnQgYWRkR3VpbGRMb2dXaWRnZXRzIGZyb20gJy4uL2xvZ3MvYWRkR3VpbGRMb2dXaWRnZXRzJztcclxuaW1wb3J0IGFkZExvZ0NvbG9yaW5nIGZyb20gJy4uL2xvZ3MvYWRkTG9nQ29sb3JpbmcnO1xyXG5pbXBvcnQge2NyZWF0ZVRhYmxlfSBmcm9tICcuLi9jb21tb24vY0VsZW1lbnQnO1xyXG5pbXBvcnQgZ2V0Rm9yYWdlIGZyb20gJy4uL2FqYXgvZ2V0Rm9yYWdlJztcclxuaW1wb3J0IHtwQ0N9IGZyb20gJy4uL3N1cHBvcnQvbGF5b3V0JztcclxuaW1wb3J0IHJldHJ5QWpheCBmcm9tICcuLi9hamF4L3JldHJ5QWpheCc7XHJcbmltcG9ydCB7cm93UHJvZmlsZX0gZnJvbSAnLi9wcm9maWxlcic7XHJcbmltcG9ydCBzZXRGb3JhZ2UgZnJvbSAnLi4vYWpheC9zZXRGb3JhZ2UnO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZURvY3VtZW50LFxyXG4gIGdldFZhbHVlLFxyXG4gIGltYWdlU2VydmVyLFxyXG4gIHBhcnNlRGF0ZUFzVGltZXN0YW1wXHJcbn0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5pbXBvcnQge2RlZkNoZWNrcywgZ3VpbGRMb2dGaWx0ZXIsIGhlYWRlclJvdywgbm9DaGVja3N9IGZyb20gJy4vYXNzZXRzJztcclxuXHJcbnZhciBvcHRpb25zID0ge307XHJcbnZhciBmc2hOZXdHdWlsZExvZztcclxudmFyIGZzaE91dHB1dDtcclxudmFyIG1heFBhZ2VzVG9GZXRjaDtcclxudmFyIG1heFBhZ2U7XHJcbnZhciBkb2M7XHJcbnZhciBjdXJyUGFnZTtcclxudmFyIGxhc3RQYWdlO1xyXG52YXIgdG1wR3VpbGRMb2cgPSBbXTtcclxudmFyIGNvbXBsZXRlUmVsb2FkID0gdHJ1ZTtcclxudmFyIG15VGFibGU7XHJcblxyXG5mdW5jdGlvbiBnZXRHdWlsZExvZ1BhZ2UocGFnZSkge1xyXG4gIHJldHVybiByZXRyeUFqYXgoe1xyXG4gICAgdXJsOiAnaW5kZXgucGhwJyxcclxuICAgIGRhdGE6IHtjbWQ6ICdndWlsZCcsIHN1YmNtZDogJ2xvZycsIHBhZ2U6IHBhZ2V9LFxyXG4gICAgZGF0YXR5cGU6ICdodG1sJ1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kUGFnZUlucHV0KHByZXYsIGN1cnIpIHtcclxuICB2YXIgb3V0cHV0ID0gcHJldjtcclxuICBpZiAoIXByZXYgJiYgY3Vyci5uYW1lID09PSAncGFnZScpIHtvdXRwdXQgPSBjdXJyO31cclxuICByZXR1cm4gb3V0cHV0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRQYWdlSW5wdXQoKSB7XHJcbiAgdmFyIGlucHV0TGlzdCA9IGRvYy5nZXRFbGVtZW50QnlJZCgncENDJylcclxuICAgIC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjdXN0b21pbnB1dCcpO1xyXG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUucmVkdWNlLmNhbGwoaW5wdXRMaXN0LCBmaW5kUGFnZUlucHV0LCBudWxsKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VQYWdlKGRhdGEpIHtcclxuICBkb2MgPSBjcmVhdGVEb2N1bWVudChkYXRhKTtcclxuICB2YXIgcGFnZUlucHV0ID0gZ2V0UGFnZUlucHV0KCk7XHJcbiAgY3VyclBhZ2UgPSBOdW1iZXIocGFnZUlucHV0LnZhbHVlKTtcclxuICBsYXN0UGFnZSA9IE51bWJlcigvXFxkKy8uZXhlYyhwYWdlSW5wdXQucGFyZW50Tm9kZS50ZXh0Q29udGVudClbMF0pO1xyXG4gIGlmIChjdXJyUGFnZSA9PT0gMSkge21heFBhZ2UgPSBNYXRoLm1pbihsYXN0UGFnZSwgbWF4UGFnZXNUb0ZldGNoKTt9XHJcbiAgZnNoT3V0cHV0LnRleHRDb250ZW50ID0gJ0xvYWRpbmcgJyArIGN1cnJQYWdlICsgJyBvZiAnICsgbWF4UGFnZSArICcuLi4nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUYWJsZUxpc3QodGFibGVMaXN0KSB7XHJcbiAgdmFyIHRoZVRhYmxlID0gdGFibGVMaXN0WzBdO1xyXG4gIHZhciBsaW1pdCA9IHRoZVRhYmxlLnJvd3MubGVuZ3RoIC0gMTtcclxuICBmb3IgKHZhciBpID0gMTsgaSA8IGxpbWl0OyBpICs9IDIpIHtcclxuICAgIHZhciBteVJvdyA9IHRoZVRhYmxlLnJvd3NbaV07XHJcbiAgICB2YXIgbXlEYXRlID0gbXlSb3cuY2VsbHNbMV0udGV4dENvbnRlbnQ7XHJcbiAgICB2YXIgdGltZXN0YW1wID0gcGFyc2VEYXRlQXNUaW1lc3RhbXAobXlEYXRlKTtcclxuICAgIHZhciBteU1zZyA9IG15Um93LmNlbGxzWzJdLmlubmVySFRNTDtcclxuICAgIGlmIChjdXJyUGFnZSA9PT0gMSAmJlxyXG4gICAgICAgIG9wdGlvbnMubG9nICYmXHJcbiAgICAgICAgdGltZXN0YW1wID09PSBvcHRpb25zLmxvZ1swXVswXSAmJlxyXG4gICAgICAgIG15TXNnID09PSBvcHRpb25zLmxvZ1swXVsyXSkge1xyXG4gICAgICBjb21wbGV0ZVJlbG9hZCA9IGZhbHNlO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHRtcEd1aWxkTG9nLnB1c2goW2N1cnJQYWdlICogMTAwICsgaSwgdGltZXN0YW1wLCBteURhdGUsIG15TXNnLFxyXG4gICAgICByb3dQcm9maWxlKG15TXNnKV0pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VUYWJsZSgpIHtcclxuICB2YXIgdGFibGVMaXN0ID0gZG9jLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3dpZHRoX2Z1bGwnKTtcclxuICBpZiAodGFibGVMaXN0Lmxlbmd0aCA9PT0gMSkge2dldFRhYmxlTGlzdCh0YWJsZUxpc3QpO31cclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc1BhZ2UoZGF0YSkge1xyXG4gIHBhcnNlUGFnZShkYXRhKTtcclxuICBwYXJzZVRhYmxlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE90aGVyUGFnZXMoKSB7XHJcbiAgdmFyIHBybSA9IFtdO1xyXG4gIGlmIChjb21wbGV0ZVJlbG9hZCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPD0gbWF4UGFnZTsgaSArPSAxKSB7XHJcbiAgICAgIHBybS5wdXNoKGdldEd1aWxkTG9nUGFnZShpKS5kb25lKHByb2Nlc3NQYWdlKSk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIG9wdGlvbnMubG9nLmZvckVhY2goZnVuY3Rpb24oZSkge1xyXG4gICAgICB0bXBHdWlsZExvZy5wdXNoKFswLCBlWzBdLCBlWzFdLCBlWzJdLCBlWzNdXSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgcmV0dXJuICQud2hlbi5hcHBseSgkLCBwcm0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdG9yZU9wdGlvbnMoKSB7XHJcbiAgc2V0Rm9yYWdlKCdmc2hfZ3VpbGRMb2cnLCBvcHRpb25zKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlT3B0aW9uc0xvZygpIHtcclxuICAvLyBEb24ndCBjYWNoZSBjdXJyZW50IG1pbnV0ZSBhcyBpdCBtYXkgYmUgaW5jb21wbGV0ZVxyXG4gIHZhciBub3dVdGMgPSAobmV3IERhdGUoKSkuc2V0U2Vjb25kcygwLCAwKTtcclxuICBvcHRpb25zLmxvZyA9IHRtcEd1aWxkTG9nLnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXJyKSB7XHJcbiAgICBpZiAoY3VyclsxXSAhPT0gbm93VXRjKSB7XHJcbiAgICAgIHByZXYucHVzaChbY3VyclsxXSwgY3VyclsyXSwgY3VyclszXSwgY3Vycls0XV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByZXY7XHJcbiAgfSwgW10pO1xyXG4gIHN0b3JlT3B0aW9ucygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBidWlsZFRhYmxlKCkge1xyXG4gIG15VGFibGUgPSBjcmVhdGVUYWJsZSh7aWQ6ICdmc2hJbmplY3RIZXJlJywgY2xhc3NOYW1lOiAnd2lkdGhfZnVsbCd9KTtcclxuICBteVRhYmxlLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgaGVhZGVyUm93KTtcclxuXHJcbiAgdG1wR3VpbGRMb2cuZm9yRWFjaChmdW5jdGlvbihyKSB7XHJcbiAgICB2YXIgbXlSb3cgPSBteVRhYmxlLmluc2VydFJvdygtMSk7XHJcbiAgICByLnB1c2gobXlSb3cpO1xyXG4gICAgaWYgKCFvcHRpb25zLmNoZWNrc1tyWzRdXSkge215Um93LmNsYXNzTmFtZSA9ICdmc2hIaWRlJzt9XHJcbiAgICBteVJvdy5pbnNlcnRDZWxsKC0xKS5pbm5lckhUTUwgPVxyXG4gICAgICAnPHNwYW4gY2xhc3M9XCJuZXdHdWlsZExvZ1wiIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcJycgK1xyXG4gICAgICBpbWFnZVNlcnZlciArICcvc2tpbi9sb2dfMS5naWZcXCcpO1wiPjwvc3Bhbj4nO1xyXG4gICAgbXlSb3cuY2VsbHNbMF0uY2xhc3NOYW1lID0gJ3Jvdyc7XHJcbiAgICBteVJvdy5pbnNlcnRDZWxsKC0xKS5pbm5lckhUTUwgPSAnPG5vYnI+JyArIHJbMl0gKyAnPC9ub2JyPic7XHJcbiAgICBteVJvdy5jZWxsc1sxXS5jbGFzc05hbWUgPSAncm93JztcclxuICAgIG15Um93Lmluc2VydENlbGwoLTEpLmlubmVySFRNTCA9IHJbM107XHJcbiAgICBteVJvdy5jZWxsc1syXS5jbGFzc05hbWUgPSAncm93JztcclxuICAgIHZhciBzZXBSb3cgPSBteVRhYmxlLmluc2VydFJvdygtMSk7XHJcbiAgICByLnB1c2goc2VwUm93KTtcclxuICAgIGlmICghb3B0aW9ucy5jaGVja3Nbcls0XV0pIHtzZXBSb3cuY2xhc3NOYW1lID0gJ2ZzaEhpZGUnO31cclxuICAgIHZhciBzZXAgPSBzZXBSb3cuaW5zZXJ0Q2VsbCgtMSk7XHJcbiAgICBzZXAuY2xhc3NOYW1lID0gJ2RpdmlkZXInO1xyXG4gICAgc2VwLmNvbFNwYW4gPSAzO1xyXG4gIH0pO1xyXG5cclxuICB2YXIgaW5qZWN0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnNoSW5qZWN0SGVyZScpO1xyXG4gIHBDQy5yZXBsYWNlQ2hpbGQobXlUYWJsZSwgaW5qZWN0b3IpO1xyXG4gIGFkZExvZ0NvbG9yaW5nKCdteUd1aWxkTG9nJywgMSk7XHJcbiAgYWRkR3VpbGRMb2dXaWRnZXRzKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldENoZWNrcygpIHtcclxuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKFxyXG4gICAgZnNoTmV3R3VpbGRMb2cuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lucHV0JyksXHJcbiAgICBmdW5jdGlvbihlbCkge1xyXG4gICAgICBlbC5jaGVja2VkID0gb3B0aW9ucy5jaGVja3NbZWwuZ2V0QXR0cmlidXRlKCdpdGVtJyldO1xyXG4gICAgfVxyXG4gICk7XHJcbiAgc3RvcmVPcHRpb25zKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdvdE90aGVyUGFnZXMoKSB7XHJcbiAgaWYgKGNvbXBsZXRlUmVsb2FkKSB7XHJcbiAgICB0bXBHdWlsZExvZy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgcmV0dXJuIGFbMF0gLSBiWzBdO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGZzaE91dHB1dC50ZXh0Q29udGVudCA9ICdMb2FkaW5nIGNvbXBsZXRlLic7XHJcbiAgdXBkYXRlT3B0aW9uc0xvZygpO1xyXG4gIGJ1aWxkVGFibGUoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc0ZpcnN0UGFnZShkYXRhKSB7XHJcbiAgcHJvY2Vzc1BhZ2UoZGF0YSk7XHJcbiAgZ2V0T3RoZXJQYWdlcygpLmRvbmUoZ290T3RoZXJQYWdlcyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZUl0ZW0oc2VsZikge1xyXG4gIHZhciBpdGVtID0gTnVtYmVyKHNlbGYuZ2V0QXR0cmlidXRlKCdpdGVtJykpO1xyXG4gIG9wdGlvbnMuY2hlY2tzW2l0ZW1dID0gIW9wdGlvbnMuY2hlY2tzW2l0ZW1dO1xyXG4gIHN0b3JlT3B0aW9ucygpO1xyXG4gIHRtcEd1aWxkTG9nLmZvckVhY2goZnVuY3Rpb24ocikge1xyXG4gICAgaWYgKHJbNF0gIT09IGl0ZW0pIHtyZXR1cm47fVxyXG4gICAgcls1XS5jbGFzc0xpc3QudG9nZ2xlKCdmc2hIaWRlJyk7XHJcbiAgICByWzZdLmNsYXNzTGlzdC50b2dnbGUoJ2ZzaEhpZGUnKTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2VsZWN0QWxsKCkge1xyXG4gIG9wdGlvbnMuY2hlY2tzID0gZGVmQ2hlY2tzLnNsaWNlKDApO1xyXG4gIHNldENoZWNrcygpO1xyXG4gIHRtcEd1aWxkTG9nLmZvckVhY2goZnVuY3Rpb24ocikge1xyXG4gICAgcls1XS5jbGFzc0xpc3QucmVtb3ZlKCdmc2hIaWRlJyk7XHJcbiAgICByWzZdLmNsYXNzTGlzdC5yZW1vdmUoJ2ZzaEhpZGUnKTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2VsZWN0Tm9uZSgpIHtcclxuICBvcHRpb25zLmNoZWNrcyA9IG5vQ2hlY2tzLnNsaWNlKDApO1xyXG4gIHNldENoZWNrcygpO1xyXG4gIHRtcEd1aWxkTG9nLmZvckVhY2goZnVuY3Rpb24ocikge1xyXG4gICAgcls1XS5jbGFzc0xpc3QuYWRkKCdmc2hIaWRlJyk7XHJcbiAgICByWzZdLmNsYXNzTGlzdC5hZGQoJ2ZzaEhpZGUnKTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVmcmVzaCgpIHtcclxuICBvcHRpb25zLmxvZyA9IGZhbHNlO1xyXG4gIHN0b3JlT3B0aW9ucygpO1xyXG4gIGZzaE91dHB1dC50ZXh0Q29udGVudCA9ICdMb2FkaW5nIFBhZ2UgMSAuLi4nO1xyXG4gIHRtcEd1aWxkTG9nID0gW107XHJcbiAgY29tcGxldGVSZWxvYWQgPSB0cnVlO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmc2hJbmplY3RIZXJlJykuaW5uZXJIVE1MID0gJyc7XHJcbiAgZ2V0R3VpbGRMb2dQYWdlKDEpLmRvbmUocHJvY2Vzc0ZpcnN0UGFnZSk7XHJcbn1cclxuXHJcbnZhciBndWlsZExvZ0V2ZW50cyA9IFtcclxuICB7dGVzdDogZnVuY3Rpb24oc2VsZikge3JldHVybiBzZWxmLnRhZ05hbWUgPT09ICdJTlBVVCc7fSwgZm46IHRvZ2dsZUl0ZW19LFxyXG4gIHt0ZXN0OiBmdW5jdGlvbihzZWxmKSB7cmV0dXJuIHNlbGYuaWQgPT09ICdmc2hBbGwnO30sIGZuOiBzZWxlY3RBbGx9LFxyXG4gIHt0ZXN0OiBmdW5jdGlvbihzZWxmKSB7cmV0dXJuIHNlbGYuaWQgPT09ICdmc2hOb25lJzt9LCBmbjogc2VsZWN0Tm9uZX0sXHJcbiAge3Rlc3Q6IGZ1bmN0aW9uKHNlbGYpIHtyZXR1cm4gc2VsZi5pZCA9PT0gJ3Jmc2gnO30sIGZuOiByZWZyZXNofVxyXG5dO1xyXG5cclxuZnVuY3Rpb24gZXZlbnRIYW5kbGVyKGV2dCkge1xyXG4gIHZhciBzZWxmID0gZXZ0LnRhcmdldDtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGd1aWxkTG9nRXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICBpZiAoZ3VpbGRMb2dFdmVudHNbaV0udGVzdChzZWxmKSkge2d1aWxkTG9nRXZlbnRzW2ldLmZuKHNlbGYpO31cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdvdE9wdGlvbnMoZ3VpbGRMb2cpIHtcclxuICBvcHRpb25zID0gZ3VpbGRMb2cgfHwgb3B0aW9ucztcclxuICBvcHRpb25zLmNoZWNrcyA9IG9wdGlvbnMuY2hlY2tzIHx8IGRlZkNoZWNrcy5zbGljZSgwKTtcclxuICBwQ0MuaW5uZXJIVE1MID0gZ3VpbGRMb2dGaWx0ZXI7XHJcbiAgZnNoTmV3R3VpbGRMb2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnNoTmV3R3VpbGRMb2cnKTtcclxuICBmc2hOZXdHdWlsZExvZy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50SGFuZGxlcik7XHJcbiAgc2V0Q2hlY2tzKCk7XHJcbiAgZnNoT3V0cHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZzaE91dHB1dCcpO1xyXG4gIG1heFBhZ2VzVG9GZXRjaCA9IE51bWJlcihnZXRWYWx1ZSgnbmV3R3VpbGRMb2dIaXN0b3J5UGFnZXMnKSk7XHJcbiAgbWF4UGFnZSA9IG1heFBhZ2VzVG9GZXRjaDtcclxuICBnZXRHdWlsZExvZ1BhZ2UoMSkuZG9uZShwcm9jZXNzRmlyc3RQYWdlKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0TmV3R3VpbGRMb2coKSB7XHJcbiAgZ2V0Rm9yYWdlKCdmc2hfZ3VpbGRMb2cnKS5kb25lKGdvdE9wdGlvbnMpO1xyXG59XHJcbiIsImltcG9ydCB7Y2xvc2VzdFRhYmxlfSBmcm9tICcuL2Nsb3Nlc3QnO1xyXG5pbXBvcnQge2NyZWF0ZURpdn0gZnJvbSAnLi9jRWxlbWVudCc7XHJcblxyXG5mdW5jdGlvbiByZWR1Y2VTdGF0VGFibGUocHJldiwgY3VyciwgaW5kZXgpIHtcclxuICB2YXIga2V5ID0gY3Vyci5jZWxsc1swXS50ZXh0Q29udGVudC50cmltKCkucmVwbGFjZSgnOicsICcnKTtcclxuICBpZiAoIWtleSkge3JldHVybiBwcmV2O31cclxuICBwcmV2W2tleV0gPSB7aW5kOiBpbmRleH07XHJcbiAgaWYgKGN1cnIuY2VsbHNbMV0gJiYgY3Vyci5jZWxsc1sxXS50ZXh0Q29udGVudCkge1xyXG4gICAgcHJldltrZXldLnZhbHVlID0gTnVtYmVyKFxyXG4gICAgICBjdXJyLmNlbGxzWzFdLnRleHRDb250ZW50LnRyaW0oKS5yZXBsYWNlKCcrJywgJycpXHJcbiAgICApO1xyXG4gIH1cclxuICByZXR1cm4gcHJldjtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VmFsKHByb3AsIG9iaikge1xyXG4gIGlmIChvYmpbcHJvcF0gJiYgb2JqW3Byb3BdLnZhbHVlKSB7XHJcbiAgICByZXR1cm4gb2JqW3Byb3BdLnZhbHVlO1xyXG4gIH1cclxuICByZXR1cm4gMDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TGFzdEluZGV4KG9iaiwgdGJsKSB7XHJcbiAgaWYgKG9iai5FbmhhbmNlbWVudHMpIHtcclxuICAgIHJldHVybiB0Ymwucm93c1tvYmouRW5oYW5jZW1lbnRzLmluZCAtIDFdO1xyXG4gIH1cclxuICByZXR1cm4gdGJsLnJvd3NbdGJsLnJvd3MubGVuZ3RoIC0gMV07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0YXRzKGVsKSB7XHJcbiAgdmFyIHN0YXRUYWJsZSA9IGNsb3Nlc3RUYWJsZShlbCk7XHJcbiAgdmFyIHN0YXRPYmogPSBBcnJheS5wcm90b3R5cGUucmVkdWNlLmNhbGwoc3RhdFRhYmxlLnJvd3MsXHJcbiAgICByZWR1Y2VTdGF0VGFibGUsIHt9KTtcclxuICB2YXIgdG90YWxTdGF0cyA9IGdldFZhbCgnQXR0YWNrJywgc3RhdE9iaikgKyBnZXRWYWwoJ0RlZmVuc2UnLCBzdGF0T2JqKSArXHJcbiAgICBnZXRWYWwoJ0FybW9yJywgc3RhdE9iaikgKyBnZXRWYWwoJ0RhbWFnZScsIHN0YXRPYmopICtcclxuICAgIGdldFZhbCgnSFAnLCBzdGF0T2JqKTtcclxuICBnZXRMYXN0SW5kZXgoc3RhdE9iaiwgc3RhdFRhYmxlKS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWJlZ2luJyxcclxuICAgICc8dHIgY2xhc3M9XCJmc2hEb2RnZXJCbHVlXCI+PHRkPlN0YXQgVG90YWw6PC90ZD48dGQgYWxpZ249XCJyaWdodFwiPicgK1xyXG4gICAgdG90YWxTdGF0cyArICcmbmJzcDs8L3RkPjwvdHI+Jyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZzaERhdGFGaWx0ZXIoZGF0YSkge1xyXG4gIHZhciBjb250YWluZXIgPSBjcmVhdGVEaXYoKTtcclxuICBjb250YWluZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBkYXRhKTtcclxuICB2YXIgYm9udXMgPSBjb250YWluZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ZvbnQnKTtcclxuICBib251cyA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChib251cywgZnVuY3Rpb24oZWwpIHtcclxuICAgIHJldHVybiBlbC50ZXh0Q29udGVudCA9PT0gJ0JvbnVzZXMnO1xyXG4gIH0pO1xyXG4gIGJvbnVzLmZvckVhY2goYWRkU3RhdHMpO1xyXG4gIHJldHVybiBjb250YWluZXIuaW5uZXJIVE1MO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmc2hQcmVGaWx0ZXIob3B0aW9ucykge1xyXG4gIGlmIChvcHRpb25zLnVybC5pbmRleE9mKCdmZXRjaGl0ZW0nKSAhPT0gMCkge3JldHVybjt9XHJcbiAgb3B0aW9ucy5kYXRhRmlsdGVyID0gZnNoRGF0YUZpbHRlcjtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkU3RhdFRvdGFsVG9Nb3VzZW92ZXIoKSB7IC8vIGpRdWVyeVxyXG4gICQuYWpheFByZWZpbHRlcihmc2hQcmVGaWx0ZXIpO1xyXG59XHJcbiIsImltcG9ydCB7Z2V0VmFsdWV9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtqQ29uZmlybX0gZnJvbSAnLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5pbXBvcnQgcmV0cnlBamF4IGZyb20gJy4uL2FqYXgvcmV0cnlBamF4JztcclxuXHJcbnZhciBkaXNhYmxlRGVhY3RpdmF0ZVByb21wdHMgPSBnZXRWYWx1ZSgnZGlzYWJsZURlYWN0aXZhdGVQcm9tcHRzJyk7XHJcblxyXG5mdW5jdGlvbiBkZWJ1ZmYoYnVmZklkKSB7XHJcbiAgcmV0dXJuIHJldHJ5QWpheCh7XHJcbiAgICB1cmw6ICdmZXRjaGRhdGEucGhwJyxcclxuICAgIGRhdGE6IHtcclxuICAgICAgYTogJzIyJyxcclxuICAgICAgZDogJzAnLFxyXG4gICAgICBpZDogYnVmZklkXHJcbiAgICB9LFxyXG4gICAgZGF0YVR5cGU6ICdqc29uJ1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb0RlYnVmZihhTGluaykgeyAvLyBqUXVlcnlcclxuICB2YXIgYnVmZklkID0gYUxpbmsuaHJlZi5tYXRjaCgvKFxcZCspJC8pWzFdO1xyXG4gIGRlYnVmZihidWZmSWQpXHJcbiAgICAuZG9uZShmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIGlmIChkYXRhLnJlc3BvbnNlLnJlc3BvbnNlID09PSAwKSB7XHJcbiAgICAgICAgYUxpbmsucGFyZW50Tm9kZS5pbm5lckhUTUwgPSAnJztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkKCcjZGlhbG9nX21zZycpLmh0bWwoZGF0YS5yZXNwb25zZS5tc2cpLmRpYWxvZygnb3BlbicpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZG9Qcm9tcHQoYUxpbmspIHtcclxuICB2YXIgb25jbGljayA9IGFMaW5rLmdldEF0dHJpYnV0ZSgnb25jbGljaycpO1xyXG4gIHZhciB3YXJuID0gb25jbGlja1xyXG4gICAgLm1hdGNoKC9BcmUgeW91IHN1cmUgeW91IHdpc2ggdG8gcmVtb3ZlIHRoZSAuKiBza2lsbFxcPy8pWzBdO1xyXG4gIGpDb25maXJtKCdSZW1vdmUgU2tpbGwnLCB3YXJuLCBmdW5jdGlvbigpIHtcclxuICAgIGRvRGVidWZmKGFMaW5rKTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tGb3JQcm9tcHQoYUxpbmspIHtcclxuICBpZiAoIWRpc2FibGVEZWFjdGl2YXRlUHJvbXB0cykge1xyXG4gICAgZG9Qcm9tcHQoYUxpbmspO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBkb0RlYnVmZihhTGluayk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbnRlcmNlcHREZWJ1ZmYoZSkgeyAvLyBqUXVlcnlcclxuICB2YXIgYUxpbmsgPSBlLnRhcmdldDtcclxuICBpZiAoYUxpbmsudGFnTmFtZSA9PT0gJ0lNRycpIHtcclxuICAgICQoZS50YXJnZXQpLnF0aXAoJ2hpZGUnKTtcclxuICAgIGFMaW5rID0gYUxpbmsucGFyZW50Tm9kZTtcclxuICB9IGVsc2UgaWYgKGFMaW5rLnRhZ05hbWUgIT09ICdBJykge3JldHVybjt9XHJcbiAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgY2hlY2tGb3JQcm9tcHQoYUxpbmspO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmYXN0RGVidWZmKCkge1xyXG4gIHZhciBwcm9maWxlUmlnaHRDb2x1bW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZmlsZVJpZ2h0Q29sdW1uJylcclxuICAgIC5sYXN0RWxlbWVudENoaWxkO1xyXG4gIHByb2ZpbGVSaWdodENvbHVtbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGludGVyY2VwdERlYnVmZiwgdHJ1ZSk7XHJcbn1cclxuIiwiaW1wb3J0IGFkZCBmcm9tICcuLi9zdXBwb3J0L3Rhc2snO1xyXG5pbXBvcnQge2NyZWF0ZURpdn0gZnJvbSAnLi4vY29tbW9uL2NFbGVtZW50JztcclxuaW1wb3J0IHtnZXRWYWx1ZX0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5pbXBvcnQge2VxdWlwSXRlbSwgdXNlSXRlbX0gZnJvbSAnLi4vc3VwcG9ydC9hamF4JztcclxuXHJcbmZ1bmN0aW9uIGJhY2twYWNrUmVtb3ZlKGludklkKSB7IC8vIGpRdWVyeVxyXG4gIHZhciBfaW52SWQgPSBwYXJzZUludChpbnZJZCwgMTApO1xyXG4gIHZhciB0aGVCYWNrcGFjayA9ICQoJyNiYWNrcGFja0NvbnRhaW5lcicpLmRhdGEoJ2JhY2twYWNrJyk7XHJcbiAgLy8gcmVtb3ZlIGZyb20gc3JjRGF0YVxyXG4gIHRoZUJhY2twYWNrLnNyY0RhdGEuc29tZShmdW5jdGlvbihlbCwgaSwgYXJ5KSB7XHJcbiAgICBpZiAoZWwuYSA9PT0gX2ludklkKSB7XHJcbiAgICAgIGFyeS5zcGxpY2UoaSwgMSk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmYXN0V2VhclVzZShldnQpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIEludmVudG9yeUl0ZW1JRCA9IGV2dC50YXJnZXQuZ2V0QXR0cmlidXRlKCdpdGVtSUQnKTtcclxuICB1c2VJdGVtKEludmVudG9yeUl0ZW1JRCkuZG9uZShmdW5jdGlvbihkYXRhKSB7XHJcbiAgICBpZiAoZGF0YS5yICE9PSAwKSB7cmV0dXJuO31cclxuICAgIGJhY2twYWNrUmVtb3ZlKEludmVudG9yeUl0ZW1JRCk7XHJcbiAgICBldnQudGFyZ2V0LnBhcmVudE5vZGUuaW5uZXJIVE1MID0gJzxzcGFuIGNsYXNzPVwiZmFzdFdvcm5cIj5Vc2VkPC9zcGFuPic7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZhc3RXZWFyRXF1aXAoZSkgeyAvLyBqUXVlcnlcclxuICB2YXIgc2VsZiA9IGUudGFyZ2V0O1xyXG4gIHZhciBpbnZJZCA9IHNlbGYuZ2V0QXR0cmlidXRlKCdpdGVtaWQnKTtcclxuICBlcXVpcEl0ZW0oaW52SWQpLmRvbmUoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgaWYgKGRhdGEuciAhPT0gMCkge3JldHVybjt9XHJcbiAgICBiYWNrcGFja1JlbW92ZShpbnZJZCk7XHJcbiAgICAvLyBUT0RPIEluc2VydCBpdGVtIGZyb20gd29yblxyXG4gICAgc2VsZi5wYXJlbnROb2RlLmlubmVySFRNTCA9ICc8c3BhbiBjbGFzcz1cImZhc3RXb3JuXCI+V29ybjwvc3Bhbj4nO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhY3Rpb25DbGFzcyh1c2FibGUpIHtcclxuICBpZiAodXNhYmxlKSB7cmV0dXJuICdmYXN0VXNlJzt9XHJcbiAgcmV0dXJuICdmYXN0V2Vhcic7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFjdGlvblRleHQodXNhYmxlKSB7XHJcbiAgaWYgKHVzYWJsZSkge3JldHVybiAnVXNlJzt9XHJcbiAgcmV0dXJuICdXZWFyJztcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0J1dHRvbnModGhlU3Bhbikge1xyXG4gIHZhciB0b1VzZSA9IHRoZVNwYW4uY2xhc3NMaXN0LmNvbnRhaW5zKCdiYWNrcGFja0NvbnRleHRNZW51VXNhYmxlJyk7XHJcbiAgdmFyIG15RGl2ID0gY3JlYXRlRGl2KHtcclxuICAgIGNsYXNzTmFtZTogJ2Zhc3REaXYnLFxyXG4gICAgaW5uZXJIVE1MOiAnPHNwYW4gY2xhc3M9XCInICsgYWN0aW9uQ2xhc3ModG9Vc2UpICtcclxuICAgICAgJ1wiIGl0ZW1pZD1cIicgKyB0aGVTcGFuLmdldEF0dHJpYnV0ZSgnZGF0YS1pbnYnKSArICdcIj4nICtcclxuICAgICAgYWN0aW9uVGV4dCh0b1VzZSkgKyAnPC9zcGFuPiZuYnNwOydcclxuICB9KTtcclxuICBpZiAodGhlU3Bhbi5wYXJlbnROb2RlLm5leHRFbGVtZW50U2libGluZykge1xyXG4gICAgbXlEaXYuYXBwZW5kQ2hpbGQodGhlU3Bhbi5wYXJlbnROb2RlLm5leHRFbGVtZW50U2libGluZy5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG4gIH1cclxuICB0aGVTcGFuLnBhcmVudE5vZGUucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChteURpdik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZhc3RXZWFyTGlua3MoKSB7XHJcbiAgdmFyIGJwVGFicyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYWNrcGFja190YWJzJyk7XHJcbiAgdmFyIHR5cGUgPSBicFRhYnMuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndGFiLXNlbGVjdGVkJylbMF1cclxuICAgIC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdHlwZScpO1xyXG4gIHZhciBpdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNiYWNrcGFja1RhYl8nICsgdHlwZSArXHJcbiAgICAnIC5iYWNrcGFja0NvbnRleHRNZW51RXF1aXBwYWJsZSwuYmFja3BhY2tDb250ZXh0TWVudVVzYWJsZScpO1xyXG4gIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtyZXR1cm47fVxyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoaXRlbXMsIGRyYXdCdXR0b25zKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZm91bmRCYWNrcGFjayhiYWNrcGFja0NvbnRhaW5lciwgdGhlQmFja3BhY2spIHtcclxuICB2YXIgb2xkU2hvdyA9IHRoZUJhY2twYWNrLl9zaG93UGFnZTtcclxuICB0aGVCYWNrcGFjay5fc2hvd1BhZ2UgPSBmdW5jdGlvbih0eXBlLCBwYWdlKSB7XHJcbiAgICBvbGRTaG93LmNhbGwodGhlQmFja3BhY2ssIHR5cGUsIHBhZ2UpO1xyXG4gICAgZmFzdFdlYXJMaW5rcygpO1xyXG4gIH07XHJcbiAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYWNrcGFja19jdXJyZW50JykudGV4dENvbnRlbnQubGVuZ3RoICE9PSAwKSB7XHJcbiAgICBhZGQoMywgZmFzdFdlYXJMaW5rcyk7XHJcbiAgfVxyXG4gIGJhY2twYWNrQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZmFzdFdlYXInKSkge2Zhc3RXZWFyRXF1aXAoZSk7fVxyXG4gICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZmFzdFVzZScpKSB7ZmFzdFdlYXJVc2UoZSk7fVxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmplY3RGYXN0V2VhcigpIHsgLy8galF1ZXJ5XHJcbiAgaWYgKCFnZXRWYWx1ZSgnZW5hYmxlUXVpY2tEcmluaycpKSB7cmV0dXJuO31cclxuICB2YXIgYnBCYWNrID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhY2twYWNrJyk7XHJcbiAgYnBCYWNrLmNsYXNzTmFtZSA9ICdmc2hCYWNrcGFjayc7XHJcbiAgYnBCYWNrLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcclxuICB2YXIgYmFja3BhY2tDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFja3BhY2tDb250YWluZXInKTtcclxuICB2YXIgdGhlQmFja3BhY2sgPSAkKGJhY2twYWNrQ29udGFpbmVyKS5kYXRhKCdiYWNrcGFjaycpO1xyXG4gIGlmICh0aGVCYWNrcGFjaykge2ZvdW5kQmFja3BhY2soYmFja3BhY2tDb250YWluZXIsIHRoZUJhY2twYWNrKTt9XHJcbn1cclxuIiwiaW1wb3J0IGNhbGxBcHAgZnJvbSAnLi4vY2FsbEFwcCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bmVxdWlwaXRlbShpdGVtKSB7XHJcbiAgcmV0dXJuIGNhbGxBcHAoe1xyXG4gICAgY21kOiAncHJvZmlsZScsXHJcbiAgICBzdWJjbWQ6ICd1bmVxdWlwaXRlbScsXHJcbiAgICBpbnZlbnRvcnlfaWQ6IGl0ZW1cclxuICB9KTtcclxufVxyXG4iLCJpbXBvcnQgdW5lcXVpcGl0ZW0gZnJvbSAnLi4vYXBwL3Byb2ZpbGUvdW5lcXVpcGl0ZW0nO1xyXG5pbXBvcnQge2NyZWF0ZUJ1dHRvbiwgY3JlYXRlRGl2fSBmcm9tICcuLi9jb21tb24vY0VsZW1lbnQnO1xyXG5cclxudmFyIHByb2ZpbGVDb21iYXRTZXREaXY7XHJcblxyXG5mdW5jdGlvbiBnZXROZWtpZCgpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIHByb2ZpbGVCbG9jayA9IHByb2ZpbGVDb21iYXRTZXREaXYubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gIHZhciBhTGlua3MgPSBwcm9maWxlQmxvY2suZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKTtcclxuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGFMaW5rcywgZnVuY3Rpb24obGluaykge1xyXG4gICAgdmFyIGl0ZW0gPSAvaW52ZW50b3J5X2lkPShcXGQrKS8uZXhlYyhsaW5rLmhyZWYpWzFdO1xyXG4gICAgaWYgKGl0ZW0pIHtcclxuICAgICAgdW5lcXVpcGl0ZW0oaXRlbSkuZG9uZShmdW5jdGlvbigpIHtcclxuICAgICAgICBsaW5rLnBhcmVudE5vZGUuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuZWtpZEJ0bigpIHtcclxuICB2YXIgcHJvZmlsZVJpZ2h0Q29sdW1uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2ZpbGVSaWdodENvbHVtbicpO1xyXG4gIHByb2ZpbGVDb21iYXRTZXREaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZmlsZUNvbWJhdFNldERpdicpO1xyXG4gIHZhciB0YXJnZXRCciA9IHByb2ZpbGVDb21iYXRTZXREaXYucGFyZW50Tm9kZS5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgdmFyIG5la2lkRGl2ID0gY3JlYXRlRGl2KHtjbGFzc05hbWU6ICdmc2hDZW50ZXInfSk7XHJcbiAgdmFyIHRoZUJ0biA9IGNyZWF0ZUJ1dHRvbih7XHJcbiAgICBjbGFzc05hbWU6ICdmc2hCbCBmc2hCbHMnLFxyXG4gICAgdGV4dENvbnRlbnQ6ICdOZWtpZCdcclxuICB9KTtcclxuICBuZWtpZERpdi5pbnNlcnRBZGphY2VudFRleHQoJ2JlZm9yZWVuZCcsICdbICcpO1xyXG4gIG5la2lkRGl2Lmluc2VydEFkamFjZW50RWxlbWVudCgnYmVmb3JlZW5kJywgdGhlQnRuKTtcclxuICBuZWtpZERpdi5pbnNlcnRBZGphY2VudFRleHQoJ2JlZm9yZWVuZCcsICcgXScpO1xyXG4gIHByb2ZpbGVSaWdodENvbHVtbi5yZXBsYWNlQ2hpbGQobmVraWREaXYsIHRhcmdldEJyKTtcclxuICB0aGVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBnZXROZWtpZCk7XHJcbn1cclxuXHJcbiIsImltcG9ydCB7aW5mb0JveH0gZnJvbSAnLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5pbXBvcnQgaW5zZXJ0UXVpY2tFeHRyYWN0IGZyb20gJy4uL3F1aWNrRXh0cmFjdCc7XHJcbmltcG9ydCBqUXVlcnlEaWFsb2cgZnJvbSAnLi4vY2hyb21lL2pRdWVyeURpYWxvZyc7XHJcbmltcG9ydCByZXRyeUFqYXggZnJvbSAnLi4vYWpheC9yZXRyeUFqYXgnO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZURpdixcclxuICBjcmVhdGVTcGFuLFxyXG4gIGNyZWF0ZVRCb2R5LFxyXG4gIGNyZWF0ZVRhYmxlXHJcbn0gZnJvbSAnLi4vY29tbW9uL2NFbGVtZW50JztcclxuaW1wb3J0IHtjcmVhdGVEb2N1bWVudCwgaW1hZ2VTZXJ2ZXJ9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbnZhciBxdWlja0RlbERpdjtcclxudmFyIHN1bUNvbXA7XHJcbnZhciBkZWxBbGxEaXY7XHJcbnZhciBjb21wRGVsO1xyXG52YXIgY29tcFN1bTtcclxudmFyIGNvbXBEZWxBbGw7XHJcbnZhciBxZTtcclxudmFyIHRoaXNJbnZUYWJsZTtcclxudmFyIGNvbXBvbmVudExpc3QgPSB7fTtcclxudmFyIHVzZWRDb3VudDtcclxudmFyIHVzZWRDb3VudERvbTtcclxudmFyIHRvdGFsQ291bnQ7XHJcbnZhciBwYWdlQ291bnQ7XHJcblxyXG5mdW5jdGlvbiBnZXRJbnZUYWJsZXMoZG9jKSB7XHJcbiAgcmV0dXJuIGRvYy5nZXRFbGVtZW50QnlJZCgncHJvZmlsZVJpZ2h0Q29sdW1uJylcclxuICAgIC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdpbnZlbnRvcnktdGFibGUnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdGFsbHlDb21wb25lbnQodmlzaWJsZSwgZWwpIHtcclxuICB2YXIgbW91c2VvdmVyID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXRpcHBlZCcpO1xyXG4gIHZhciBpZCA9IG1vdXNlb3Zlci5tYXRjaCgvZmV0Y2hpdGVtLnBocFxcP2l0ZW1faWQ9KFxcZCspLylbMV07XHJcbiAgY29tcG9uZW50TGlzdFtpZF0gPSBjb21wb25lbnRMaXN0W2lkXSB8fCB7XHJcbiAgICBjb3VudDogMCxcclxuICAgIHNyYzogZWwuZ2V0QXR0cmlidXRlKCdzcmMnKSxcclxuICAgIG9ubW91c2VvdmVyOiBtb3VzZW92ZXIsXHJcbiAgICBkZWw6IFtdLFxyXG4gICAgZG9tOiBbXVxyXG4gIH07XHJcbiAgY29tcG9uZW50TGlzdFtpZF0uY291bnQgKz0gMTtcclxuICBjb21wb25lbnRMaXN0W2lkXS5kZWwucHVzaChlbC5wYXJlbnROb2RlLmhyZWYpO1xyXG4gIGlmICh2aXNpYmxlKSB7Y29tcG9uZW50TGlzdFtpZF0uZG9tLnB1c2goZWwucGFyZW50Tm9kZS5wYXJlbnROb2RlKTt9XHJcbiAgdXNlZENvdW50ICs9IDE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJldHJpdmVDb21wb25lbnQoZG9jKSB7XHJcbiAgdmFyIHZpc2libGUgPSBkb2MgPT09IGRvY3VtZW50O1xyXG4gIHZhciBpbnZUYmwgPSBnZXRJbnZUYWJsZXMoZG9jKVsxXTtcclxuICB2YXIgbm9kZUxpc3QgPSBpbnZUYmwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ0lNRycpO1xyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobm9kZUxpc3QsIHRhbGx5Q29tcG9uZW50LmJpbmQobnVsbCwgdmlzaWJsZSkpO1xyXG4gIHRvdGFsQ291bnQgKz0gaW52VGJsLnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAndGRbYmFja2dyb3VuZCQ9XCJpbnZlbnRvcnkvMXgxbWluaS5naWZcIl0nKS5sZW5ndGg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRhbGx5VGFibGVSb3cocHJldiwgaWQpIHtcclxuICB2YXIgY29tcCA9IGNvbXBvbmVudExpc3RbaWRdO1xyXG4gIHJldHVybiBwcmV2ICsgJzx0cj48dGQ+PGltZyBzcmM9XCInICsgY29tcC5zcmMgK1xyXG4gICAgJ1wiIGNsYXNzPVwiZnNoVGJsQ2VudGVyIHRpcC1keW5hbWljXCIgZGF0YS10aXBwZWQ9XCInICsgY29tcC5vbm1vdXNlb3ZlciArXHJcbiAgICAnXCI+PC90ZD48dGQ+JyArIGNvbXAuY291bnQgKyAnPC90ZD4nICtcclxuICAgICc8dGQ+WzxzcGFuIGNsYXNzPVwic2VuZExpbmsgY29tcERlbFR5cGVcIiBkYXRhLWNvbXBpZD1cIicgKyBpZCArXHJcbiAgICAnXCI+RGVsPC9zcGFuPl08L3RkPjwvdHI+JztcclxufVxyXG5cclxuZnVuY3Rpb24gZGlzcGxheUNvbXBvbmVudFRhbGx5KCkge1xyXG4gIHZhciB0YmwgPSBjcmVhdGVUYWJsZSh7Y2xhc3NOYW1lOiAnZnNoVGJsQ2VudGVyJ30pO1xyXG4gIHZhciB0Qm9keSA9IGNyZWF0ZVRCb2R5KCk7XHJcbiAgdGJsLmFwcGVuZENoaWxkKHRCb2R5KTtcclxuICB0Qm9keS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsXHJcbiAgICAnPHRyPjx0ZCBjb2xzcGFuPVwiM1wiPkNvbXBvbmVudCBTdW1tYXJ5PC90ZD48L3RyPicgK1xyXG4gICAgT2JqZWN0LmtleXMoY29tcG9uZW50TGlzdCkucmVkdWNlKHRhbGx5VGFibGVSb3csICcnKSk7XHJcbiAgdmFyIHRvdFJvdyA9IHRibC5pbnNlcnRSb3coLTEpO1xyXG4gIHRvdFJvdy5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsICc8dGQ+VG90YWw6PC90ZD4nKTtcclxuICB2YXIgdG90Q2VsbCA9IHRvdFJvdy5pbnNlcnRDZWxsKC0xKTtcclxuICB0b3RDZWxsLmNvbFNwYW4gPSAyO1xyXG4gIHVzZWRDb3VudERvbSA9IGNyZWF0ZVNwYW4oKTtcclxuICB1c2VkQ291bnREb20uaW5uZXJIVE1MID0gdXNlZENvdW50LnRvU3RyaW5nKCk7XHJcbiAgdG90Q2VsbC5hcHBlbmRDaGlsZCh1c2VkQ291bnREb20pO1xyXG4gIHRvdENlbGwuaW5zZXJ0QWRqYWNlbnRUZXh0KCdiZWZvcmVlbmQnLCAnIC8gJyArIHRvdGFsQ291bnQudG9TdHJpbmcoKSk7XHJcbiAgc3VtQ29tcC5pbm5lckhUTUwgPSAnJztcclxuICBzdW1Db21wLmFwcGVuZENoaWxkKHRibCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdvdENvbXBvbmVudHNQYWdlKGRhdGEpIHtcclxuICBwYWdlQ291bnQgKz0gMTtcclxuICBzdW1Db21wLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgcGFnZUNvdW50ICsgJywgJyk7XHJcbiAgcmV0cml2ZUNvbXBvbmVudChjcmVhdGVEb2N1bWVudChkYXRhKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvdW50Q29tcG9uZW50KHNlbGYpIHsgLy8galF1ZXJ5Lm1pblxyXG4gIHNlbGYucGFyZW50Tm9kZS5pbm5lckhUTUwgPSAnUmV0cmlldmUgcGFnZTogMSwgJztcclxuICB1c2VkQ291bnQgPSAwO1xyXG4gIHRvdGFsQ291bnQgPSAwO1xyXG4gIHBhZ2VDb3VudCA9IDE7XHJcbiAgdmFyIHBybSA9IFskLndoZW4oZG9jdW1lbnQpLmRvbmUocmV0cml2ZUNvbXBvbmVudCldO1xyXG4gIHZhciBsYXN0Um93SW5kZXggPSB0aGlzSW52VGFibGUucm93cy5sZW5ndGggLSAxO1xyXG4gIHZhciBwYWdlTGlua3MgPSB0aGlzSW52VGFibGUucm93c1tsYXN0Um93SW5kZXhdLmZpcnN0Q2hpbGQuY2hpbGRyZW47XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChwYWdlTGlua3MsIGZ1bmN0aW9uKGVsKSB7XHJcbiAgICBpZiAoZWwuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHBybS5wdXNoKHJldHJ5QWpheChlbC5ocmVmKS5kb25lKGdvdENvbXBvbmVudHNQYWdlKSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgJC53aGVuLmFwcGx5KCQsIHBybSkuZG9uZShkaXNwbGF5Q29tcG9uZW50VGFsbHkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZWxBbGxDb21wb25lbnQoKSB7XHJcbiAgdmFyIG5vZGVMaXN0ID0gdGhpc0ludlRhYmxlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NvbXBEZWxCdG4nKTtcclxuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKG5vZGVMaXN0LCBmdW5jdGlvbihlbCkge1xyXG4gICAgZWwuY2xpY2soKTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gY29tcERlbGV0ZWQoc2VsZiwgZGF0YSkge1xyXG4gIHZhciByZXNwb25zZSA9IGluZm9Cb3goZGF0YSk7XHJcbiAgaWYgKHJlc3BvbnNlID09PSAnQ29tcG9uZW50IGRlc3Ryb3llZC4nKSB7XHJcbiAgICBzZWxmLnBhcmVudE5vZGUuaW5uZXJIVE1MID0gJyc7XHJcbiAgfSBlbHNlIHtcclxuICAgICQoJyNkaWFsb2dfbXNnJykuaHRtbChyZXNwb25zZSkuZGlhbG9nKCdvcGVuJyk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkZWxDb21wb25lbnQoc2VsZikgeyAvLyBqUXVlcnkubWluXHJcbiAgdmFyIGhyZWYgPSBzZWxmLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuaHJlZjtcclxuICByZXRyeUFqYXgoaHJlZikuZG9uZShjb21wRGVsZXRlZC5iaW5kKG51bGwsIHNlbGYpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkRGVsQnRuKGVsKSB7XHJcbiAgZWwucGFyZW50Tm9kZS5wYXJlbnROb2RlLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJyxcclxuICAgICc8c3BhbiBjbGFzcz1cImNvbXBEZWxCdG5cIj5EZWw8L3NwYW4+Jyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuYWJsZURlbENvbXBvbmVudCgpIHtcclxuICBxdWlja0RlbERpdi5jbGFzc0xpc3QuYWRkKCdmc2hIaWRlJyk7XHJcbiAgZGVsQWxsRGl2LmNsYXNzTGlzdC5yZW1vdmUoJ2ZzaEhpZGUnKTtcclxuICB2YXIgbm9kZUxpc3QgPSB0aGlzSW52VGFibGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ0lNRycpO1xyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobm9kZUxpc3QsIGFkZERlbEJ0bik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVVzZWRDb3VudCgpIHtcclxuICB1c2VkQ291bnQgLT0gMTtcclxuICB1c2VkQ291bnREb20udGV4dENvbnRlbnQgPSB1c2VkQ291bnQudG9TdHJpbmcoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVsQ29tcFR5cGUoc2VsZikgeyAvLyBqUXVlcnkubWluXHJcbiAgdmFyIGlkID0gc2VsZi5kYXRhc2V0LmNvbXBpZDtcclxuICB2YXIgdGQgPSBzZWxmLnBhcmVudE5vZGU7XHJcbiAgdGQuaW5uZXJIVE1MID0gJyc7XHJcbiAgdGQuY2xhc3NOYW1lID0gJ2d1aWxkVGFnU3Bpbm5lcic7XHJcbiAgdGQuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gJ3VybChcXCcnICsgaW1hZ2VTZXJ2ZXIgK1xyXG4gICAgJy9za2luL2xvYWRpbmcuZ2lmXFwnKSc7XHJcbiAgdmFyIHBybSA9IFtdO1xyXG4gIGNvbXBvbmVudExpc3RbaWRdLmRlbC5mb3JFYWNoKGZ1bmN0aW9uKGhyZWYpIHtcclxuICAgIHBybS5wdXNoKHJldHJ5QWpheChocmVmKS5kb25lKHVwZGF0ZVVzZWRDb3VudCkpO1xyXG4gIH0pO1xyXG4gICQud2hlbi5hcHBseSgkLCBwcm0pLmRvbmUoZnVuY3Rpb24oKSB7XHJcbiAgICBjb21wb25lbnRMaXN0W2lkXS5kb20uZm9yRWFjaChmdW5jdGlvbihlbCkge2VsLmlubmVySFRNTCA9ICcnO30pO1xyXG4gICAgdGQucGFyZW50Tm9kZS5yZW1vdmUoKTtcclxuICB9KTtcclxufVxyXG5cclxudmFyIGV2dEhkbCA9IFtcclxuICB7XHJcbiAgICB0ZXN0OiBmdW5jdGlvbihzZWxmKSB7cmV0dXJuIHNlbGYgPT09IGNvbXBEZWw7fSxcclxuICAgIGFjdDogZW5hYmxlRGVsQ29tcG9uZW50XHJcbiAgfSxcclxuICB7XHJcbiAgICB0ZXN0OiBmdW5jdGlvbihzZWxmKSB7cmV0dXJuIHNlbGYgPT09IGNvbXBTdW07fSxcclxuICAgIGFjdDogY291bnRDb21wb25lbnRcclxuICB9LFxyXG4gIHtcclxuICAgIHRlc3Q6IGZ1bmN0aW9uKHNlbGYpIHtyZXR1cm4gc2VsZiA9PT0gY29tcERlbEFsbDt9LFxyXG4gICAgYWN0OiBkZWxBbGxDb21wb25lbnRcclxuICB9LFxyXG4gIHtcclxuICAgIHRlc3Q6IGZ1bmN0aW9uKHNlbGYpIHtyZXR1cm4gc2VsZiA9PT0gcWU7fSxcclxuICAgIGFjdDogZnVuY3Rpb24oKSB7alF1ZXJ5RGlhbG9nKGluc2VydFF1aWNrRXh0cmFjdCk7fVxyXG4gIH0sXHJcbiAge1xyXG4gICAgdGVzdDogZnVuY3Rpb24oc2VsZikge3JldHVybiBzZWxmLmNsYXNzTGlzdC5jb250YWlucygnY29tcERlbEJ0bicpO30sXHJcbiAgICBhY3Q6IGRlbENvbXBvbmVudFxyXG4gIH0sXHJcbiAge1xyXG4gICAgdGVzdDogZnVuY3Rpb24oc2VsZikge3JldHVybiBzZWxmLmNsYXNzTGlzdC5jb250YWlucygnY29tcERlbFR5cGUnKTt9LFxyXG4gICAgYWN0OiBkZWxDb21wVHlwZVxyXG4gIH1cclxuXTtcclxuXHJcbmZ1bmN0aW9uIGNvbXBFdnQoZXZ0KSB7XHJcbiAgdmFyIHNlbGYgPSBldnQudGFyZ2V0O1xyXG4gIGV2dEhkbC5zb21lKGZ1bmN0aW9uKGVsKSB7XHJcbiAgICBpZiAoZWwudGVzdChzZWxmKSkge1xyXG4gICAgICBlbC5hY3Qoc2VsZik7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZWNvcmF0ZUJ1dHRvbihwYXJlbnREaXYsIGxhYmVsKSB7XHJcbiAgdmFyIGlubmVyU3BhbiA9IGNyZWF0ZVNwYW4oXHJcbiAgICB7Y2xhc3NOYW1lOiAnc2VuZExpbmsnLCB0ZXh0Q29udGVudDogbGFiZWx9KTtcclxuICBwYXJlbnREaXYudGV4dENvbnRlbnQgPSAnWyc7XHJcbiAgcGFyZW50RGl2LmFwcGVuZENoaWxkKGlubmVyU3Bhbik7XHJcbiAgcGFyZW50RGl2Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgJ10nKTtcclxuICByZXR1cm4gaW5uZXJTcGFuO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9maWxlQ29tcG9uZW50cygpIHtcclxuICB2YXIgaW52VGFibGVzID0gZ2V0SW52VGFibGVzKGRvY3VtZW50KTtcclxuICBpZiAoaW52VGFibGVzLmxlbmd0aCAhPT0gMikge3JldHVybjt9XHJcbiAgdGhpc0ludlRhYmxlID0gaW52VGFibGVzWzFdO1xyXG4gIHZhciBjb21wRGl2ID0gdGhpc0ludlRhYmxlLnBhcmVudE5vZGU7XHJcbiAgaWYgKGNvbXBEaXYuc3R5bGUuZGlzcGxheSAhPT0gJ2Jsb2NrJykge3JldHVybjt9XHJcbiAgdmFyIGNtRGl2ID0gY3JlYXRlRGl2KHtjbGFzc05hbWU6ICdmc2hDZW50ZXInfSk7XHJcbiAgcXVpY2tEZWxEaXYgPSBjcmVhdGVEaXYoKTtcclxuICBzdW1Db21wID0gY3JlYXRlRGl2KCk7XHJcbiAgZGVsQWxsRGl2ID0gY3JlYXRlRGl2KHtjbGFzc05hbWU6ICdmc2hIaWRlJ30pO1xyXG4gIHZhciBxZURpdiA9IGNyZWF0ZURpdigpO1xyXG4gIGNvbXBEZWwgPSBkZWNvcmF0ZUJ1dHRvbihxdWlja0RlbERpdiwgJ0VuYWJsZSBRdWljayBEZWwnKTtcclxuICBjb21wU3VtID0gZGVjb3JhdGVCdXR0b24oc3VtQ29tcCwgJ0NvdW50IENvbXBvbmVudHMnKTtcclxuICBjb21wRGVsQWxsID0gZGVjb3JhdGVCdXR0b24oZGVsQWxsRGl2LCAnRGVsZXRlIEFsbCBWaXNpYmxlJyk7XHJcbiAgcWUgPSBkZWNvcmF0ZUJ1dHRvbihxZURpdiwgJ1F1aWNrIEV4dHJhY3QgQ29tcG9uZW50cycpO1xyXG4gIGNtRGl2LmFwcGVuZENoaWxkKHF1aWNrRGVsRGl2KTtcclxuICBjbURpdi5hcHBlbmRDaGlsZChzdW1Db21wKTtcclxuICBjbURpdi5hcHBlbmRDaGlsZChxZURpdik7XHJcbiAgY21EaXYuYXBwZW5kQ2hpbGQoZGVsQWxsRGl2KTtcclxuICBjb21wRGl2LmFwcGVuZENoaWxkKGNtRGl2KTtcclxuICBjb21wRGl2LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY29tcEV2dCk7XHJcbn1cclxuIiwiaW1wb3J0IHtnZXRWYWx1ZX0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5cclxuZnVuY3Rpb24gdG90YWxBbGx5RW5lbXkodGFyZ2V0LCBudW1iZXJPZkNvbnRhY3RzLCBjb250YWN0c1RvdGFsKSB7XHJcbiAgdmFyIF9jID0gJyc7XHJcbiAgaWYgKGNvbnRhY3RzVG90YWwgJiYgY29udGFjdHNUb3RhbCA+PSBudW1iZXJPZkNvbnRhY3RzKSB7XHJcbiAgICBfYyA9ICcvJyArIGNvbnRhY3RzVG90YWw7XHJcbiAgfVxyXG4gIHRhcmdldC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsICc8c3BhbiBjbGFzcz1cImZzaEJsdWVcIj4mbmJzcDsnICtcclxuICAgIG51bWJlck9mQ29udGFjdHMgKyBfYyArICc8L3NwYW4+Jyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRBbGx5RW5lbXkoZWwpIHtcclxuICB2YXIgaXNBbGxpZXMgPSBlbC50ZXh0Q29udGVudCA9PT0gJ0FsbGllcyc7XHJcbiAgdmFyIGlzRW5lbWllcyA9IGVsLnRleHRDb250ZW50ID09PSAnRW5lbWllcyc7XHJcbiAgaWYgKCFpc0FsbGllcyAmJiAhaXNFbmVtaWVzKSB7cmV0dXJuO31cclxuICB2YXIgdGFyZ2V0ID0gZWwucGFyZW50Tm9kZTtcclxuICB2YXIgbnVtYmVyT2ZDb250YWN0cyA9IHRhcmdldC5uZXh0U2libGluZy5uZXh0U2libGluZ1xyXG4gICAgLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0YWJsZScpLmxlbmd0aCAtIDE7XHJcbiAgaWYgKGlzQWxsaWVzKSB7XHJcbiAgICB0b3RhbEFsbHlFbmVteSh0YXJnZXQsIG51bWJlck9mQ29udGFjdHMsXHJcbiAgICAgIGdldFZhbHVlKCdhbGxpZXN0b3RhbCcpKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdG90YWxBbGx5RW5lbXkodGFyZ2V0LCBudW1iZXJPZkNvbnRhY3RzLFxyXG4gICAgICBnZXRWYWx1ZSgnZW5lbWllc3RvdGFsJykpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvZmlsZVBhcnNlQWxseUVuZW15KCkge1xyXG4gIC8vIEFsbGllcy9FbmVtaWVzIGNvdW50L3RvdGFsIGZ1bmN0aW9uXHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNwcm9maWxlTGVmdENvbHVtbiBzdHJvbmcnKSwgZmluZEFsbHlFbmVteSk7XHJcbn1cclxuIiwiaW1wb3J0IGJpb0V2dEhkbCBmcm9tICcuL2Jpb0V2dEhkbCc7XHJcbmltcG9ydCB7Z2V0VmFsdWV9IGZyb20gJy4uLy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHJlbmRlckJpbyBmcm9tICcuL3JlbmRlcic7XHJcblxyXG5mdW5jdGlvbiBleHBhbmRCaW8oKSB7XHJcbiAgdmFyIGJpb0V4cGFuZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZzaEJpb0V4cGFuZGVyJyk7XHJcbiAgaWYgKGJpb0V4cGFuZGVyLnRleHRDb250ZW50ID09PSAnTW9yZSAuLi4nKSB7XHJcbiAgICBiaW9FeHBhbmRlci50ZXh0Q29udGVudCA9ICdMZXNzIC4uLic7XHJcbiAgfSBlbHNlIHtcclxuICAgIGJpb0V4cGFuZGVyLnRleHRDb250ZW50ID0gJ01vcmUgLi4uJztcclxuICB9XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZzaEJpb0hpZGRlbicpLmNsYXNzTGlzdC50b2dnbGUoJ2ZzaEhpZGUnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZG9Db21wcmVzc2lvbihiaW9DZWxsLCBiaW9Db250ZW50cywgbWF4Q2hhcmFjdGVyc1RvU2hvdykge1xyXG4gIC8vIGZpbmQgdGhlIGVuZCBvZiBuZXh0IEhUTUwgdGFnIGFmdGVyIHRoZSBtYXggY2hhcmFjdGVycyB0byBzaG93LlxyXG4gIHZhciBicmVha1BvaW50ID0gYmlvQ29udGVudHMuaW5kZXhPZignPGJyPicsIG1heENoYXJhY3RlcnNUb1Nob3cpICsgNDtcclxuICB2YXIgbGluZUJyZWFrID0gJyc7XHJcbiAgaWYgKGJyZWFrUG9pbnQgPT09IDMpIHtcclxuICAgIGJyZWFrUG9pbnQgPSBiaW9Db250ZW50cy5pbmRleE9mKCcgJywgbWF4Q2hhcmFjdGVyc1RvU2hvdykgKyAxO1xyXG4gICAgaWYgKGJyZWFrUG9pbnQgPT09IDApIHtyZXR1cm47fVxyXG4gICAgbGluZUJyZWFrID0gJzxicj4nO1xyXG4gIH1cclxuICB2YXIgYmlvU3RhcnQgPSBiaW9Db250ZW50cy5zdWJzdHJpbmcoMCwgYnJlYWtQb2ludCk7XHJcbiAgdmFyIGJpb0VuZCA9IGJpb0NvbnRlbnRzLnN1YnN0cmluZyhicmVha1BvaW50LCBiaW9Db250ZW50cy5sZW5ndGgpO1xyXG4gIHZhciBleHRyYU9wZW5IVE1MID0gJyc7XHJcbiAgdmFyIGV4dHJhQ2xvc2VIVE1MID0gJyc7XHJcbiAgdmFyIHRhZ0xpc3QgPSBbJ2InLCAnaScsICd1JywgJ3NwYW4nXTtcclxuICB0YWdMaXN0LmZvckVhY2goZnVuY3Rpb24odGFnKSB7XHJcbiAgICB2YXIgY2xvc2VUYWdJbmRleCA9IGJpb0VuZC5pbmRleE9mKCc8LycgKyB0YWcgKyAnPicpO1xyXG4gICAgdmFyIG9wZW5UYWdJbmRleCA9IGJpb0VuZC5pbmRleE9mKCc8JyArIHRhZyArICc+Jyk7XHJcbiAgICBpZiAoY2xvc2VUYWdJbmRleCAhPT0gLTEgJiYgKG9wZW5UYWdJbmRleCA+IGNsb3NlVGFnSW5kZXggfHxcclxuICAgICAgICBvcGVuVGFnSW5kZXggPT09IC0xKSkge1xyXG4gICAgICBleHRyYU9wZW5IVE1MICs9ICc8JyArIHRhZyArICc+JztcclxuICAgICAgZXh0cmFDbG9zZUhUTUwgKz0gJzwvJyArIHRhZyArICc+JztcclxuICAgIH1cclxuICB9KTtcclxuICBiaW9DZWxsLmlubmVySFRNTCA9IGJpb1N0YXJ0ICsgZXh0cmFDbG9zZUhUTUwgKyBsaW5lQnJlYWsgK1xyXG4gICAgJzxzcGFuIGlkPVwiZnNoQmlvRXhwYW5kZXJcIiBjbGFzcz1cInNlbmRMaW5rXCI+TW9yZSAuLi48L3NwYW4+PGJyPicgK1xyXG4gICAgJzxzcGFuIGNsYXNzPVwiZnNoSGlkZVwiIGlkPVwiZnNoQmlvSGlkZGVuXCI+JyArIGV4dHJhT3BlbkhUTUwgKyBiaW9FbmQgK1xyXG4gICAgJzwvc3Bhbj4nO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmc2hCaW9FeHBhbmRlcicpXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBleHBhbmRCaW8pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kU3RhcnRQb3NpdGlvbihiaW9Db250ZW50cywgX21heFJvd3NUb1Nob3cpIHtcclxuICB2YXIgbWF4Um93c1RvU2hvdyA9IF9tYXhSb3dzVG9TaG93O1xyXG4gIHZhciBzdGFydEluZGV4ID0gMDtcclxuICB3aGlsZSAobWF4Um93c1RvU2hvdyA+IDApIHtcclxuICAgIG1heFJvd3NUb1Nob3cgLT0gMTtcclxuICAgIHN0YXJ0SW5kZXggPSBiaW9Db250ZW50cy5pbmRleE9mKCc8YnI+XFxuJywgc3RhcnRJbmRleCArIDEpO1xyXG4gIH1cclxuICByZXR1cm4gc3RhcnRJbmRleDtcclxufVxyXG5cclxuZnVuY3Rpb24gY29tcHJlc3NCaW8oYmlvQ2VsbCkge1xyXG4gIHZhciBiaW9Db250ZW50cyA9IGJpb0NlbGwuaW5uZXJIVE1MO1xyXG4gIHZhciBtYXhDaGFyYWN0ZXJzVG9TaG93ID0gZ2V0VmFsdWUoJ21heENvbXByZXNzZWRDaGFyYWN0ZXJzJyk7XHJcbiAgdmFyIG1heFJvd3NUb1Nob3cgPSBnZXRWYWx1ZSgnbWF4Q29tcHJlc3NlZExpbmVzJyk7XHJcbiAgdmFyIG51bWJlck9mTGluZXMgPSBiaW9Db250ZW50cy5zdWJzdHIoMCwgbWF4Q2hhcmFjdGVyc1RvU2hvdylcclxuICAgIC5zcGxpdCgvPGJyPlxcbi8pLmxlbmd0aCAtIDE7XHJcbiAgaWYgKGJpb0NvbnRlbnRzLmxlbmd0aCA8PSBtYXhDaGFyYWN0ZXJzVG9TaG93ICYmXHJcbiAgICAgIG51bWJlck9mTGluZXMgPCBtYXhSb3dzVG9TaG93KSB7cmV0dXJuO31cclxuICBpZiAobnVtYmVyT2ZMaW5lcyA+PSBtYXhSb3dzVG9TaG93KSB7XHJcbiAgICBtYXhDaGFyYWN0ZXJzVG9TaG93ID0gZmluZFN0YXJ0UG9zaXRpb24oYmlvQ29udGVudHMsIG1heFJvd3NUb1Nob3cpO1xyXG4gIH1cclxuICBkb0NvbXByZXNzaW9uKGJpb0NlbGwsIGJpb0NvbnRlbnRzLCBtYXhDaGFyYWN0ZXJzVG9TaG93KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZG9SZW5kZXIoYmlvQ2VsbCkge1xyXG4gIHZhciBiaW9Db250ZW50cyA9IGJpb0NlbGwuaW5uZXJIVE1MO1xyXG4gIGJpb0NvbnRlbnRzID0gcmVuZGVyQmlvKGJpb0NvbnRlbnRzKTtcclxuICBpZiAoYmlvQ29udGVudHMpIHtcclxuICAgIGJpb0NlbGwuaW5uZXJIVE1MID0gYmlvQ29udGVudHM7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiB0ZXN0Rm9yUmVuZGVyKHNlbGYsIGJpb0NlbGwpIHtcclxuICBpZiAoc2VsZiAmJiBnZXRWYWx1ZSgncmVuZGVyU2VsZkJpbycpIHx8XHJcbiAgICAgICFzZWxmICYmIGdldFZhbHVlKCdyZW5kZXJPdGhlckJpb3MnKSkge1xyXG4gICAgZG9SZW5kZXIoYmlvQ2VsbCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9maWxlUmVuZGVyQmlvKHNlbGYpIHtcclxuICB2YXIgYmlvQ2VsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9maWxlLWJpbycpO1xyXG4gIGlmICghYmlvQ2VsbCkge3JldHVybjt9XHJcbiAgdGVzdEZvclJlbmRlcihzZWxmLCBiaW9DZWxsKTtcclxuICBpZiAoZ2V0VmFsdWUoJ2VuYWJsZUJpb0NvbXByZXNzb3InKSkge2NvbXByZXNzQmlvKGJpb0NlbGwpO31cclxuICBiaW9DZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYmlvRXZ0SGRsKTtcclxufVxyXG4iLCJpbXBvcnQgYWRkIGZyb20gJy4uL3N1cHBvcnQvdGFzayc7XHJcbmltcG9ydCBhZGRTdGF0VG90YWxUb01vdXNlb3ZlciBmcm9tICcuLi9jb21tb24vYWRkU3RhdFRvdGFsVG9Nb3VzZW92ZXInO1xyXG5pbXBvcnQge2NyZWF0ZVNwYW59IGZyb20gJy4uL2NvbW1vbi9jRWxlbWVudCc7XHJcbmltcG9ydCBmYXN0RGVidWZmIGZyb20gJy4vZGVidWZmJztcclxuaW1wb3J0IGluamVjdEZhc3RXZWFyIGZyb20gJy4vZmFzdFdlYXInO1xyXG5pbXBvcnQgaW5zZXJ0UXVpY2tXZWFyIGZyb20gJy4uL3F1aWNrV2Vhci9xdWlja1dlYXInO1xyXG5pbXBvcnQgalF1ZXJ5RGlhbG9nIGZyb20gJy4uL2Nocm9tZS9qUXVlcnlEaWFsb2cnO1xyXG5pbXBvcnQgbmVraWRCdG4gZnJvbSAnLi9uZWtpZEJ0bic7XHJcbmltcG9ydCBwcm9maWxlQ29tcG9uZW50cyBmcm9tICcuL2NvbXBvbmVudHMnO1xyXG5pbXBvcnQgcHJvZmlsZVBhcnNlQWxseUVuZW15IGZyb20gJy4vcHJvZmlsZUFsbHlFbmVteSc7XHJcbmltcG9ydCBwcm9maWxlUmVuZGVyQmlvIGZyb20gJy4vYmlvL2Jpbyc7XHJcbmltcG9ydCB1cGRhdGVIQ1NRdWlja0J1ZmZMaW5rcyBmcm9tICcuLi9jb21tb24vdXBkYXRlSENTUXVpY2tCdWZmTGlua3MnO1xyXG5pbXBvcnQge1xyXG4gIGNvbG91cmVkRG90cyxcclxuICBwQ0MsXHJcbiAgcGxheWVySWQsXHJcbiAgcGxheWVyTmFtZSxcclxuICBxdWlja0J1ZmZIcmVmXHJcbn0gZnJvbSAnLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5pbXBvcnQge1xyXG4gIGZhbGxiYWNrLFxyXG4gIGdldFVybFBhcmFtZXRlcixcclxuICBnZXRWYWx1ZSxcclxuICBpbWFnZVNlcnZlcixcclxuICBpbnRWYWx1ZSxcclxuICBzZXRWYWx1ZVxyXG59IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbnZhciBndWlsZElkO1xyXG52YXIgY3VycmVudEd1aWxkUmVsYXRpb25zaGlwO1xyXG52YXIgZ3VpbGRNZXNzYWdlcyA9IHtcclxuICBzZWxmOiB7XHJcbiAgICBjb2xvcjogJ2ZzaEdyZWVuJyxcclxuICAgIG1lc3NhZ2U6IGdldFZhbHVlKCdndWlsZFNlbGZNZXNzYWdlJylcclxuICB9LFxyXG4gIGZyaWVuZGx5OiB7XHJcbiAgICBjb2xvcjogJ2ZzaE9saXZlRHJhYicsXHJcbiAgICBtZXNzYWdlOiBnZXRWYWx1ZSgnZ3VpbGRGcm5kTWVzc2FnZScpXHJcbiAgfSxcclxuICBvbGQ6IHtcclxuICAgIGNvbG9yOiAnZnNoRGFya0N5YW4nLFxyXG4gICAgbWVzc2FnZTogZ2V0VmFsdWUoJ2d1aWxkUGFzdE1lc3NhZ2UnKVxyXG4gIH0sXHJcbiAgZW5lbXk6IHtcclxuICAgIGNvbG9yOiAnZnNoUmVkJyxcclxuICAgIG1lc3NhZ2U6IGdldFZhbHVlKCdndWlsZEVubXlNZXNzYWdlJylcclxuICB9XHJcbn07XHJcblxyXG5mdW5jdGlvbiBxdWlja1dlYXJMaW5rKCkge1xyXG4gIC8vIHF1aWNrIHdlYXIgbWFuYWdlciBsaW5rXHJcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvZmlsZVJpZ2h0Q29sdW1uICcgK1xyXG4gICAgJ2FbaHJlZj1cImluZGV4LnBocD9jbWQ9cHJvZmlsZSZzdWJjbWQ9dG9nZ2xlc2VjdGlvbiZzZWN0aW9uX2lkPTJcIl0nKTtcclxuICBpZiAoIW5vZGUpIHtyZXR1cm47fVxyXG4gIHZhciB3cmFwID0gY3JlYXRlU3Bhbih7aW5uZXJIVE1MOiAnJm5ic3A7Wyd9KTtcclxuICB2YXIgcXcgPSBjcmVhdGVTcGFuKHtjbGFzc05hbWU6ICdzZW5kTGluaycsIGlubmVySFRNTDogJ1F1aWNrJm5ic3A7V2Vhcid9KTtcclxuICB3cmFwLmFwcGVuZENoaWxkKHF3KTtcclxuICB3cmFwLmluc2VydEFkamFjZW50VGV4dCgnYmVmb3JlZW5kJywgJ10nKTtcclxuICBub2RlLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQod3JhcCk7XHJcbiAgcXcuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgIGpRdWVyeURpYWxvZyhpbnNlcnRRdWlja1dlYXIpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9maWxlU2VsZWN0QWxsKCkge1xyXG4gIHZhciBicFRhYnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFja3BhY2tfdGFicycpO1xyXG4gIHZhciB0eXBlID0gYnBUYWJzLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3RhYi1zZWxlY3RlZCcpWzBdXHJcbiAgICAuZ2V0QXR0cmlidXRlKCdkYXRhLXR5cGUnKTtcclxuICB2YXIgaXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjYmFja3BhY2tUYWJfJyArIHR5cGUgK1xyXG4gICAgJyBsaTpub3QoLmhjc1BhZ2luYXRlX2hpZGRlbikgLmJhY2twYWNrSXRlbScpO1xyXG4gIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtyZXR1cm47fVxyXG4gIHZhciBjaGVja2JveGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI2JhY2twYWNrVGFiXycgKyB0eXBlICtcclxuICAgICcgbGk6bm90KC5oY3NQYWdpbmF0ZV9oaWRkZW4pIC5iYWNrcGFja0NoZWNrYm94Om5vdCg6ZGlzYWJsZWQpJyk7XHJcbiAgaWYgKGNoZWNrYm94ZXMubGVuZ3RoID4gMCkge2l0ZW1zID0gY2hlY2tib3hlczt9XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChpdGVtcywgZnVuY3Rpb24oZWwpIHtcclxuICAgIGVsLmNsaWNrKCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNlbGVjdEFsbExpbmsoKSB7XHJcbiAgLy8gc2VsZWN0IGFsbCBsaW5rXHJcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvZmlsZVJpZ2h0Q29sdW1uJyArXHJcbiAgICAnIGFbaHJlZj1cImluZGV4LnBocD9jbWQ9cHJvZmlsZSZzdWJjbWQ9ZHJvcGl0ZW1zXCJdJyk7XHJcbiAgaWYgKCFub2RlKSB7cmV0dXJuO31cclxuICB2YXIgYWxsU3BhbiA9IGNyZWF0ZVNwYW4oe2NsYXNzTmFtZTogJ3NtYWxsTGluaycsIHRleHRDb250ZW50OiAnQWxsJ30pO1xyXG4gIGFsbFNwYW4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwcm9maWxlU2VsZWN0QWxsKTtcclxuICB2YXIgd3JhcHBlciA9IGNyZWF0ZVNwYW4oe2lubmVySFRNTDogJ1smbmJzcDsnfSk7XHJcbiAgd3JhcHBlci5hcHBlbmRDaGlsZChhbGxTcGFuKTtcclxuICB3cmFwcGVyLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgJyZuYnNwO10mbmJzcDsnKTtcclxuICBub2RlLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQod3JhcHBlcik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0b3JlVkwoKSB7XHJcbiAgLy8gc3RvcmUgdGhlIFZMIG9mIHRoZSBwbGF5ZXJcclxuICB2YXIgdmlydHVhbExldmVsID0gcGFyc2VJbnQoXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdC12bCcpLnRleHRDb250ZW50LCAxMCk7XHJcbiAgaWYgKGludFZhbHVlKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3N0YXQtbGV2ZWwnKVswXVxyXG4gICAgLm5leHRFbGVtZW50U2libGluZy50ZXh0Q29udGVudCkgPT09IHZpcnR1YWxMZXZlbCkge1xyXG4gICAgc2V0VmFsdWUoJ2NoYXJhY3RlclZpcnR1YWxMZXZlbCcsICcnKTsgLy8gP1xyXG4gIH0gZWxzZSB7XHJcbiAgICBzZXRWYWx1ZSgnY2hhcmFjdGVyVmlydHVhbExldmVsJywgdmlydHVhbExldmVsKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGd1aWxkQXJ5KHZhbCkge1xyXG4gIGlmICh2YWwpIHtcclxuICAgIHJldHVybiB2YWwudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHNcXHMqL2csICcgJykuc3BsaXQoL1xccyosXFxzKi8pO1xyXG4gIH1cclxuICByZXR1cm4gW107XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGd1aWxkUmVsYXRpb25zaGlwKF90eHQpIHtcclxuICB2YXIgc2NlbmFyaW8gPSBbXHJcbiAgICB7dGVzdDogZ3VpbGRBcnkoZ2V0VmFsdWUoJ2d1aWxkU2VsZicpKSwgdHlwZTogJ3NlbGYnfSxcclxuICAgIHt0ZXN0OiBndWlsZEFyeShnZXRWYWx1ZSgnZ3VpbGRGcm5kJykpLCB0eXBlOiAnZnJpZW5kbHknfSxcclxuICAgIHt0ZXN0OiBndWlsZEFyeShnZXRWYWx1ZSgnZ3VpbGRQYXN0JykpLCB0eXBlOiAnb2xkJ30sXHJcbiAgICB7dGVzdDogZ3VpbGRBcnkoZ2V0VmFsdWUoJ2d1aWxkRW5teScpKSwgdHlwZTogJ2VuZW15J31cclxuICBdO1xyXG4gIHZhciB0eHQgPSBfdHh0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzXFxzKi9nLCAnICcpO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2NlbmFyaW8ubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgIGlmIChzY2VuYXJpb1tpXS50ZXN0LmluZGV4T2YodHh0KSAhPT0gLTEpIHtyZXR1cm4gc2NlbmFyaW9baV0udHlwZTt9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBmb3VuZEd1aWxkTGluayhhTGluaykge1xyXG4gIHZhciBndWlsZElkUmVzdWx0ID0gL2d1aWxkX2lkPShbMC05XSspL2kuZXhlYyhhTGluay5ocmVmKTtcclxuICBpZiAoZ3VpbGRJZFJlc3VsdCkge2d1aWxkSWQgPSBwYXJzZUludChndWlsZElkUmVzdWx0WzFdLCAxMCk7fVxyXG4gIGN1cnJlbnRHdWlsZFJlbGF0aW9uc2hpcCA9IGd1aWxkUmVsYXRpb25zaGlwKGFMaW5rLnRleHQpO1xyXG4gIGlmIChjdXJyZW50R3VpbGRSZWxhdGlvbnNoaXApIHtcclxuICAgIGFMaW5rLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZChcclxuICAgICAgZ3VpbGRNZXNzYWdlc1tjdXJyZW50R3VpbGRSZWxhdGlvbnNoaXBdLmNvbG9yKTtcclxuICAgIGFMaW5rLnBhcmVudE5vZGUuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCAnPGJyPicgK1xyXG4gICAgICBndWlsZE1lc3NhZ2VzW2N1cnJlbnRHdWlsZFJlbGF0aW9uc2hpcF0ubWVzc2FnZSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9maWxlSW5qZWN0R3VpbGRSZWwoKSB7XHJcbiAgdmFyIGFMaW5rID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICcjcENDIGFbaHJlZl49XCJpbmRleC5waHA/Y21kPWd1aWxkJnN1YmNtZD12aWV3Jmd1aWxkX2lkPVwiXScpO1xyXG4gIGlmIChhTGluaykge2ZvdW5kR3VpbGRMaW5rKGFMaW5rKTt9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb2ZpbGVJbmplY3RRdWlja0J1dHRvbihhdnlJbWcsIHBsYXllcmlkLCBwbGF5ZXJuYW1lKSB7XHJcbiAgdmFyIG5ld2h0bWwgPSAnPGRpdiBhbGlnbj1cImNlbnRlclwiPic7XHJcbiAgbmV3aHRtbCArPSAnPGEgY2xhc3M9XCJxdWlja0J1dHRvbiBidXR0b25RdWlja0J1ZmYgdGlwLXN0YXRpY1wiICcgK1xyXG4gICAgcXVpY2tCdWZmSHJlZihwbGF5ZXJpZCkgKyAnZGF0YS10aXBwZWQ9XCJCdWZmICcgKyBwbGF5ZXJuYW1lICtcclxuICAgICdcIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybChcXCcnICsgaW1hZ2VTZXJ2ZXIgK1xyXG4gICAgJy9za2luL3JlYWxtL2ljb25fYWN0aW9uX3F1aWNrYnVmZi5naWZcXCcpO1wiPjwvYT4mbmJzcDsmbmJzcDsnO1xyXG4gIGlmICghZ2V0VmFsdWUoJ2VuYWJsZU1heEdyb3VwU2l6ZVRvSm9pbicpKSB7XHJcbiAgICBuZXdodG1sICs9ICc8YSBjbGFzcz1cInF1aWNrQnV0dG9uIGJ1dHRvbkpvaW5BbGwgdGlwLXN0YXRpY1wiICcgK1xyXG4gICAgICAnaHJlZj1cImluZGV4LnBocD9jbWQ9Z3VpbGQmc3ViY21kPWdyb3VwcyZzdWJjbWQyPWpvaW5hbGxcIiAnICtcclxuICAgICAgJ2RhdGEtdGlwcGVkPVwiSm9pbiBBbGwgR3JvdXBzXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFwnJyArXHJcbiAgICAgIGltYWdlU2VydmVyICtcclxuICAgICAgJy9za2luL2ljb25fYWN0aW9uX2pvaW4uZ2lmXFwnKTtcIj48L2E+Jm5ic3A7Jm5ic3A7JztcclxuICB9IGVsc2Uge1xyXG4gICAgdmFyIG1heEdyb3VwU2l6ZVRvSm9pbiA9IGdldFZhbHVlKCdtYXhHcm91cFNpemVUb0pvaW4nKTtcclxuICAgIG5ld2h0bWwgKz0gJzxhIGNsYXNzPVwicXVpY2tCdXR0b24gYnV0dG9uSm9pblVuZGVyIHRpcC1zdGF0aWNcIiAnICtcclxuICAgICAgJ2hyZWY9XCJpbmRleC5waHA/Y21kPWd1aWxkJnN1YmNtZD1ncm91cHMmc3ViY21kMj0nICtcclxuICAgICAgJ2pvaW5hbGxncm91cHN1bmRlcnNpemVcIiBkYXRhLXRpcHBlZD1cIkpvaW4gQWxsIEdyb3VwcyA8ICcgK1xyXG4gICAgICBtYXhHcm91cFNpemVUb0pvaW4gKyAnIE1lbWJlcnNcIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybChcXCcnICtcclxuICAgICAgaW1hZ2VTZXJ2ZXIgK1xyXG4gICAgICAnL3NraW4vaWNvbl9hY3Rpb25fam9pbi5naWZcXCcpO1wiPjwvYT4mbmJzcDsmbmJzcDsnO1xyXG4gIH1cclxuICBuZXdodG1sICs9ICc8YSBjbGFzcz1cInF1aWNrQnV0dG9uIHRpcC1zdGF0aWNcIiAnICtcclxuICAgICdocmVmPVwiaW5kZXgucGhwP2NtZD1hdWN0aW9uaG91c2UmdHlwZT0tMyZ0aWQ9JyArIHBsYXllcmlkICtcclxuICAgICdcIiBkYXRhLXRpcHBlZD1cIkdvIHRvICcgKyBwbGF5ZXJuYW1lICtcclxuICAgICdcXCdzIGF1Y3Rpb25zXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFwnJyArXHJcbiAgICBpbWFnZVNlcnZlciArICcvc2tpbi9nb2xkX2J1dHRvbi5naWZcXCcpO1wiPjwvYT4mbmJzcDsmbmJzcDsnO1xyXG4gIG5ld2h0bWwgKz0gJzxhIGNsYXNzPVwicXVpY2tCdXR0b24gdGlwLXN0YXRpY1wiICcgK1xyXG4gICAgJ2hyZWY9XCJpbmRleC5waHA/Y21kPXRyYWRlJnN1YmNtZD1jcmVhdGVzZWN1cmUmdGFyZ2V0X3VzZXJuYW1lPScgK1xyXG4gICAgcGxheWVybmFtZSArICdcIiBkYXRhLXRpcHBlZD1cIkNyZWF0ZSBTZWN1cmUgVHJhZGUgdG8gJyArIHBsYXllcm5hbWUgK1xyXG4gICAgJ1wiIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcJycgKyBpbWFnZVNlcnZlciArXHJcbiAgICAnL3RlbXBsZS8yLmdpZlxcJyk7XCI+PC9hPiZuYnNwOyZuYnNwOyc7XHJcbiAgbmV3aHRtbCArPSAnPGEgY2xhc3M9XCJxdWlja0J1dHRvbiB0aXAtc3RhdGljXCIgJyArXHJcbiAgICAnaHJlZj1cImluZGV4LnBocD9jbWQ9Z3VpbGQmc3ViY21kPWludmVudG9yeSZzdWJjbWQyPXJlcG9ydCZ1c2VyPScgK1xyXG4gICAgcGxheWVybmFtZSArICdcIiBkYXRhLXRpcHBlZD1cIlJlY2FsbCBpdGVtcyBmcm9tICcgKyBwbGF5ZXJuYW1lICtcclxuICAgICdcIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybChcXCcnICsgaW1hZ2VTZXJ2ZXIgK1xyXG4gICAgJy90ZW1wbGUvMy5naWZcXCcpO1wiPjwvYT4mbmJzcDsmbmJzcDsnO1xyXG4gIGlmIChjdXJyZW50R3VpbGRSZWxhdGlvbnNoaXAgPT09ICdzZWxmJyAmJlxyXG4gICAgICBnZXRWYWx1ZSgnc2hvd0FkbWluJykpIHtcclxuICAgIG5ld2h0bWwgKz0gJzxhIGNsYXNzPVwicXVpY2tCdXR0b24gYnV0dG9uR3VpbGRSYW5rIHRpcC1zdGF0aWNcIiBocmVmPVwiJyArXHJcbiAgICAgICdpbmRleC5waHA/Y21kPWd1aWxkJnN1YmNtZD1tZW1iZXJzJnN1YmNtZDI9Y2hhbmdlcmFuayZtZW1iZXJfaWQ9JyArXHJcbiAgICAgIHBsYXllcmlkICsgJ1wiIGRhdGEtdGlwcGVkPVwiUmFuayAnICsgcGxheWVybmFtZSArXHJcbiAgICAgICdcIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybChcXCcnICsgaW1hZ2VTZXJ2ZXIgK1xyXG4gICAgICAnL2d1aWxkcy8nICsgZ3VpbGRJZCArICdfbWluaS5qcGdcXCcpO1wiPjwvYT4mbmJzcDsmbmJzcDsnO1xyXG4gIH1cclxuICBuZXdodG1sICs9ICc8L2Rpdj4nO1xyXG4gIGF2eUltZy5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyZW5kJywgbmV3aHRtbCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZVN0YXRUYWJsZShlbCkge1xyXG4gIHZhciB0ZGUgPSBlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGQnKTtcclxuICBlbC5wYXJlbnROb2RlLmlubmVySFRNTCA9IHRkZVswXS5pbm5lckhUTUwucmVwbGFjZSgvJm5ic3A7L2csICcgJykgK1xyXG4gICAgJzxkaXYgY2xhc3M9XCJwcm9maWxlLXN0YXQtYm9udXNcIj4nICtcclxuICAgIHRkZVsxXS50ZXh0Q29udGVudCArICc8L2Rpdj4nO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVTdGF0aXN0aWNzKCkge1xyXG4gIHZhciBjaGFyU3RhdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZmlsZUxlZnRDb2x1bW4nKVxyXG4gICAgLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0YWJsZScpWzBdO1xyXG4gIHZhciBkb2RneVRhYmxlcyA9IGNoYXJTdGF0cy5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGFibGUnKTtcclxuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGRvZGd5VGFibGVzLCByZW1vdmVTdGF0VGFibGUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpZlNlbGYoc2VsZikgeyAvLyBMZWdhY3lcclxuICBpZiAoc2VsZikge1xyXG4gICAgLy8gc2VsZiBpbnZlbnRvcnlcclxuICAgIGZhc3REZWJ1ZmYoKTtcclxuICAgIHByb2ZpbGVQYXJzZUFsbHlFbmVteSgpO1xyXG4gICAgaW5qZWN0RmFzdFdlYXIoKTtcclxuICAgIHByb2ZpbGVDb21wb25lbnRzKCk7XHJcbiAgICBxdWlja1dlYXJMaW5rKCk7XHJcbiAgICBzZWxlY3RBbGxMaW5rKCk7XHJcbiAgICBzdG9yZVZMKCk7XHJcbiAgICBuZWtpZEJ0bigpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24geXV1emhhbihwbGF5ZXJuYW1lLCBhdnlJbWcpIHsgLy8gTGVnYWN5XHJcbiAgaWYgKHBsYXllcm5hbWUgPT09ICd5dXV6aGFuJykge1xyXG4gICAgYXZ5SW1nLnNldEF0dHJpYnV0ZSgnc3JjJyxcclxuICAgICAgJ2h0dHA6Ly9ldm9sdXRpb25zLnl2b25nLmNvbS9pbWFnZXMvdHVtYmxlci5naWYnKTtcclxuICAgIGF2eUltZy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAkKCcjZGlhbG9nX21zZycpLnRleHQoJ1dpbm5lciEnKS5kaWFsb2coJ29wZW4nKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlTm12KCkge1xyXG4gIHZhciBubXZJbWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgJyNwcm9maWxlUmlnaHRDb2x1bW4gaW1nW3NyYyQ9XCIvNjBfc20uZ2lmXCJdJyk7XHJcbiAgaWYgKCFubXZJbWcpIHtyZXR1cm47fVxyXG4gIHZhciBhdGtTdGF0ID0gTnVtYmVyKFxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXQtYXR0YWNrJykuZmlyc3RDaGlsZC50ZXh0Q29udGVudC50cmltKCkpO1xyXG4gIGlmIChpc05hTihhdGtTdGF0KSkge3JldHVybjt9XHJcbiAgdmFyIGRlZlN0YXQgPSBOdW1iZXIoXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdC1kZWZlbnNlJykuZmlyc3RDaGlsZC50ZXh0Q29udGVudC50cmltKCkpO1xyXG4gIHZhciBvbGRUaXBwZWQgPSBubXZJbWcuZGF0YXNldC50aXBwZWQ7XHJcbiAgdmFyIGx2bEFyeSA9IC9cXChMZXZlbDogKFxcZCspXFwpLy5leGVjKG9sZFRpcHBlZCk7XHJcbiAgdmFyIG5tdkx2bCA9IE51bWJlcihsdmxBcnlbMV0pO1xyXG4gIHZhciBubXZFZmZlY3QgPSBNYXRoLmZsb29yKGF0a1N0YXQgKiBubXZMdmwgKiAwLjAwMjUpO1xyXG4gIG5tdkltZy5kYXRhc2V0LnRpcHBlZCA9IG9sZFRpcHBlZC5zbGljZSgwLCAtMTUpICtcclxuICAgICc8YnI+QXR0YWNrOiAnICsgKGF0a1N0YXQgLSBubXZFZmZlY3QpLnRvU3RyaW5nKCkgK1xyXG4gICAgJyZuYnNwOyZuYnNwO0RlZmVuc2U6ICcgKyAoZGVmU3RhdCArIG5tdkVmZmVjdCkudG9TdHJpbmcoKSArXHJcbiAgICAnPC9jZW50ZXI+PC9kaXY+JztcclxufVxyXG5cclxuZnVuY3Rpb24gaGlnaGxpZ2h0UHZwUHJvdGVjdGlvbigpIHtcclxuICB2YXIgcHZwcCA9IGRvY3VtZW50XHJcbiAgICAucXVlcnlTZWxlY3RvcignI3Byb2ZpbGVMZWZ0Q29sdW1uIGFbaHJlZj1cImluZGV4LnBocD9jbWQ9cG9pbnRzXCJdJyk7XHJcbiAgaWYgKHB2cHAucGFyZW50Tm9kZS5uZXh0U2libGluZy50ZXh0Q29udGVudC50cmltKCkgIT09ICdOL0EnKSB7XHJcbiAgICBwdnBwLnBhcmVudE5vZGUucGFyZW50Tm9kZS5zdHlsZS5jc3NUZXh0ID1cclxuICAgICAgJ2JvcmRlcjogM3B4IHNvbGlkIHJlZCc7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmplY3RQcm9maWxlKCkgeyAvLyBMZWdhY3lcclxuICB2YXIgYXZ5SW1nID0gZG9jdW1lbnRcclxuICAgIC5xdWVyeVNlbGVjdG9yKCcjcHJvZmlsZUxlZnRDb2x1bW4gaW1nW29sZHRpdGxlKj1cIlxcJ3MgQXZhdGFyXCJdJyk7XHJcbiAgaWYgKCFhdnlJbWcpIHtyZXR1cm47fVxyXG4gIHZhciBwbGF5ZXJuYW1lID0gcENDXHJcbiAgICAuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2gxJylbMF0udGV4dENvbnRlbnQ7XHJcbiAgdmFyIHNlbGYgPSBwbGF5ZXJuYW1lID09PSBwbGF5ZXJOYW1lKCk7XHJcbiAgaWZTZWxmKHNlbGYpO1xyXG4gIC8vIE11c3QgYmUgYmVmb3JlIHByb2ZpbGVJbmplY3RRdWlja0J1dHRvblxyXG4gIHByb2ZpbGVJbmplY3RHdWlsZFJlbCgpO1xyXG4gIC8vIEl0IHNldHMgdXAgZ3VpbGRJZCBhbmQgY3VycmVudEd1aWxkUmVsYXRpb25zaGlwXHJcbiAgdmFyIHBsYXllcmlkID0gZmFsbGJhY2soZ2V0VXJsUGFyYW1ldGVyKCdwbGF5ZXJfaWQnKSxcclxuICAgIHBsYXllcklkKCkpO1xyXG4gIHByb2ZpbGVJbmplY3RRdWlja0J1dHRvbihhdnlJbWcsIHBsYXllcmlkLCBwbGF5ZXJuYW1lKTtcclxuXHJcbiAgLy8qICoqKioqKioqKioqKiogeXV1emhhbiBoYXZpbmcgZnVuXHJcbiAgeXV1emhhbihwbGF5ZXJuYW1lLCBhdnlJbWcpO1xyXG4gIC8vKiAqKioqKioqKioqKioqXHJcblxyXG4gIHVwZGF0ZUhDU1F1aWNrQnVmZkxpbmtzKCcjcHJvZmlsZVJpZ2h0Q29sdW1uIGFbaHJlZio9XCJxdWlja2J1ZmZcIl0nKTtcclxuICB1cGRhdGVObXYoKTtcclxuICB1cGRhdGVTdGF0aXN0aWNzKCk7XHJcbiAgLy8jaWYgX0RFViAgLy8gIGhpZ2hsaWdodFB2cFByb3RlY3Rpb25cclxuICBoaWdobGlnaHRQdnBQcm90ZWN0aW9uKCk7XHJcbiAgLy8jZW5kaWZcclxuICBwcm9maWxlUmVuZGVyQmlvKHNlbGYpO1xyXG4gIGFkZFN0YXRUb3RhbFRvTW91c2VvdmVyKCk7XHJcbiAgYWRkKDMsIGNvbG91cmVkRG90cyk7XHJcbn1cclxuIiwiaW1wb3J0IHtjcmVhdGVTcGFufSBmcm9tICcuL2NvbW1vbi9jRWxlbWVudCc7XHJcbmltcG9ydCBnZXRQcm9maWxlIGZyb20gJy4vYWpheC9nZXRQcm9maWxlJztcclxuaW1wb3J0IHJldHJ5QWpheCBmcm9tICcuL2FqYXgvcmV0cnlBamF4JztcclxuaW1wb3J0IHtjcmVhdGVEb2N1bWVudCwgZmFsbGJhY2ssIGZvcm1hdExhc3RBY3Rpdml0eX0gZnJvbSAnLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG52YXIgcmV0cmllcyA9IDA7XHJcbnZhciBxdWlja0J1ZmZIZWFkZXIgPVxyXG4gICc8ZGl2IGlkPVwiaGVscGVyUUJoZWFkZXJcIj48dGFibGUgY2xhc3M9XCJxdWlja2J1ZmZUYWJsZVwiPjx0aGVhZD48dHI+JyArXHJcbiAgJzx0aCBjbGFzcz1cInF1aWNrYnVmZlRhYmxlSGVhZGVyXCI+U3VzdGFpbjwvdGg+JyArXHJcbiAgJzx0aCBjbGFzcz1cInF1aWNrYnVmZlRhYmxlSGVhZGVyXCI+RnVyeSBDYXN0ZXI8L3RoPicgK1xyXG4gICc8dGggY2xhc3M9XCJxdWlja2J1ZmZUYWJsZUhlYWRlclwiPkd1aWxkIEJ1ZmZlcjwvdGg+JyArXHJcbiAgJzx0aCBjbGFzcz1cInF1aWNrYnVmZlRhYmxlSGVhZGVyXCI+QnVmZiBNYXN0ZXI8L3RoPicgK1xyXG4gICc8dGggY2xhc3M9XCJxdWlja2J1ZmZUYWJsZUhlYWRlclwiPkV4dGVuZDwvdGg+JyArXHJcbiAgJzx0aCBjbGFzcz1cInF1aWNrYnVmZlRhYmxlSGVhZGVyXCI+UmVpbmZvcmNlPC90aD4nICtcclxuICAnPC90cj48L3RoZWFkPjx0Ym9keT48dHI+JyArXHJcbiAgJzx0ZCBpZD1cImZzaFN1c1wiIGNsYXNzPVwicXVpY2tidWZmVGFibGVEZXRhaWxcIj4mbmJzcDs8L3RkPicgK1xyXG4gICc8dGQgaWQ9XCJmc2hGdXJcIiBjbGFzcz1cInF1aWNrYnVmZlRhYmxlRGV0YWlsXCI+Jm5ic3A7PC90ZD4nICtcclxuICAnPHRkIGlkPVwiZnNoR0JcIiAgY2xhc3M9XCJxdWlja2J1ZmZUYWJsZURldGFpbFwiPiZuYnNwOzwvdGQ+JyArXHJcbiAgJzx0ZCBpZD1cImZzaEJNXCIgIGNsYXNzPVwicXVpY2tidWZmVGFibGVEZXRhaWxcIj4mbmJzcDs8L3RkPicgK1xyXG4gICc8dGQgaWQ9XCJmc2hFeHRcIiBjbGFzcz1cInF1aWNrYnVmZlRhYmxlRGV0YWlsXCI+Jm5ic3A7PC90ZD4nICtcclxuICAnPHRkIGlkPVwiZnNoUklcIiAgY2xhc3M9XCJxdWlja2J1ZmZUYWJsZURldGFpbFwiPiZuYnNwOzwvdGQ+JyArXHJcbiAgJzwvdHI+PC90Ym9keT48L3RhYmxlPjwvZGl2Pic7XHJcbnZhciBleGNsdWRlQnVmZiA9IHtcclxuICAnc2tpbGwtNTAnOiAnRGVhdGggRGVhbGVyJyxcclxuICAnc2tpbGwtNTQnOiAnQ291bnRlciBBdHRhY2snLFxyXG4gICdza2lsbC01NSc6ICdTdW1tb24gU2hpZWxkIEltcCcsXHJcbiAgJ3NraWxsLTU2JzogJ1Zpc2lvbicsXHJcbiAgJ3NraWxsLTYwJzogJ05pZ2h0bWFyZSBWaXNhZ2UnLFxyXG4gICdza2lsbC02MSc6ICdRdWVzdCBGaW5kZXInLFxyXG4gICdza2lsbC05OCc6ICdCYXJyaWNhZGUnLFxyXG4gICdza2lsbC0xMDEnOiAnU2V2ZXJlIENvbmRpdGlvbidcclxufTtcclxuXHJcbmZ1bmN0aW9uIGdldEVuaGFuY2VtZW50KGRvYywgZW5oLCBpbmplY3QpIHtcclxuICB2YXIgZW5oTGV2ZWwgPSBkb2NbZW5oXSB8fCAwO1xyXG4gIHZhciBlbmhDbGFzcyA9ICdmc2hMaW1lJztcclxuICBpZiAoZW5oTGV2ZWwgPCAxMDApIHtlbmhDbGFzcyA9ICdmc2hSZWQnO31cclxuICBpbmplY3QuaW5uZXJIVE1MID0gJzxzcGFuIGNsYXNzPVwiJyArIGVuaENsYXNzICsgJ1wiPicgKyBlbmhMZXZlbCArICclPC9zcGFuPic7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRpbWVVbml0KHZhbHVlLCB1bml0KSB7XHJcbiAgaWYgKHZhbHVlID4gMCkge3JldHVybiB2YWx1ZS50b1N0cmluZygpICsgdW5pdDt9XHJcbiAgcmV0dXJuICcnO1xyXG59XHJcblxyXG5mdW5jdGlvbiBidWZmVGltZUxlZnQoX3MpIHtcclxuICB2YXIgbSA9IE1hdGguZmxvb3IoX3MgLyA2MCk7XHJcbiAgdmFyIHMgPSBfcyAlIDYwO1xyXG4gIHZhciBidWZmVGltZVRvRXhwaXJlID0gdGltZVVuaXQobSwgJ20nKTtcclxuICBpZiAobSA+IDAgJiYgcyA+IDApIHtidWZmVGltZVRvRXhwaXJlICs9ICcgJzt9XHJcbiAgYnVmZlRpbWVUb0V4cGlyZSArPSB0aW1lVW5pdChzLCAncycpO1xyXG4gIHJldHVybiBidWZmVGltZVRvRXhwaXJlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRCdWZmKGRvYywgYnVmZiwgaW5qZWN0KSB7XHJcbiAgdmFyIHMgPSBmYWxsYmFjayhkb2NbYnVmZl0sIDApO1xyXG4gIGlmIChzKSB7XHJcbiAgICB2YXIgYnVmZlRpbWVUb0V4cGlyZSA9IGJ1ZmZUaW1lTGVmdChzKTtcclxuICAgIGluamVjdC5pbm5lckhUTUwgPSAnPHNwYW4gY2xhc3M9XCJmc2hMaW1lXCI+T248L3NwYW4+Jm5ic3A7PHNwYW4gJyArXHJcbiAgICAgICdjbGFzcz1cImZzaEJ1ZmZPblwiPignICsgYnVmZlRpbWVUb0V4cGlyZSArICcpPC9zcGFuPic7XHJcbiAgfSBlbHNlIHtcclxuICAgIHZhciBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1ZmYtb3V0ZXInKVxyXG4gICAgICAucXVlcnlTZWxlY3RvcignaW5wdXRbZGF0YS1uYW1lPVwiJyArIGJ1ZmYgKyAnXCJdJyk7XHJcbiAgICBpZiAoZWxlbSkge1xyXG4gICAgICBpbmplY3QuaW5uZXJIVE1MID0gJzxzcGFuIGNsYXNzPVwicXVpY2tidWZmQWN0aXZhdGVcIiAnICtcclxuICAgICAgICAnYnVmZklEPVwiJyArIGVsZW0uZ2V0QXR0cmlidXRlKCd2YWx1ZScpICsgJ1wiPkFjdGl2YXRlPC9zcGFuPic7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpbmplY3QuaW5uZXJIVE1MID0gJzxzcGFuIGNsYXNzPVwiZnNoUmVkO1wiPk9mZjwvc3Bhbj4nO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcXVpY2tBY3RpdmF0ZShldnQpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIHRyaWdnZXIgPSBldnQudGFyZ2V0O1xyXG4gIGlmICh0cmlnZ2VyLmNsYXNzTmFtZSAhPT0gJ3F1aWNrYnVmZkFjdGl2YXRlJykge3JldHVybjt9XHJcbiAgdmFyIGJ1ZmZIcmVmID0gJz9jbWQ9cXVpY2tidWZmJnN1YmNtZD1hY3RpdmF0ZSZ0YXJnZXRQbGF5ZXJzPScgK1xyXG4gICAgd2luZG93LnNlbGYgKyAnJnNraWxsc1tdPScgKyB0cmlnZ2VyLmdldEF0dHJpYnV0ZSgnYnVmZklEJyk7XHJcbiAgcmV0cnlBamF4KGJ1ZmZIcmVmKS5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgIHZhciBkb2MgPSBjcmVhdGVEb2N1bWVudChkYXRhKTtcclxuICAgIHZhciByZXN1bHQgPSBkb2MucXVlcnlTZWxlY3RvcignI3F1aWNrYnVmZi1yZXBvcnQgZm9udCcpO1xyXG4gICAgaWYgKHJlc3VsdCAmJlxyXG4gICAgICAgIChyZXN1bHQudGV4dENvbnRlbnQuaW5kZXhPZihcclxuICAgICAgICAgICdjdXJyZW50IG9yIGhpZ2hlciBsZXZlbCBpcyBjdXJyZW50bHkgYWN0aXZlIG9uJykgIT09IC0xIHx8XHJcbiAgICAgICAgcmVzdWx0LnRleHRDb250ZW50LmluZGV4T2YoJ3dhcyBhY3RpdmF0ZWQgb24nKSAhPT0gLTEpKSB7XHJcbiAgICAgIHRyaWdnZXIuY2xhc3NOYW1lID0gJ2ZzaExpbWUnO1xyXG4gICAgICB0cmlnZ2VyLmlubmVySFRNTCA9ICdPbic7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0YXRzUXVpY2tCdWZmKGRhdGEpIHtcclxuICB2YXIgbXlQbGF5ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkaXYucGxheWVyW2RhdGEtdXNlcm5hbWU9XCInICtcclxuICAgIGRhdGEudXNlcm5hbWUgKyAnXCJdJyk7XHJcbiAgdmFyIGFjdGl2aXR5ID0gbXlQbGF5ZXIucXVlcnlTZWxlY3Rvcignc3Bhbi5mc2hMYXN0QWN0aXZpdHknKTtcclxuICBpZiAoIWFjdGl2aXR5KSB7XHJcbiAgICBhY3Rpdml0eSA9IGNyZWF0ZVNwYW4oe2NsYXNzTmFtZTogJ2ZzaExhc3RBY3Rpdml0eSd9KTtcclxuICAgIHZhciBwbGF5ZXIgPSBteVBsYXllci5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaDEnKVswXTtcclxuICAgIHBsYXllci5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgYWN0aXZpdHkpO1xyXG4gIH1cclxuICBhY3Rpdml0eS5pbm5lckhUTUwgPSAnTGFzdCBBY3Rpdml0eTogJyArXHJcbiAgICBmb3JtYXRMYXN0QWN0aXZpdHkoZGF0YS5sYXN0X2xvZ2luKSArXHJcbiAgICAnPGJyPlN0YW1pbmE6ICcgKyBkYXRhLmN1cnJlbnRfc3RhbWluYSArICcgLyAnICtcclxuICAgIGRhdGEuc3RhbWluYSArICcgKCAnICsgTWF0aC5mbG9vcihkYXRhLmN1cnJlbnRfc3RhbWluYSAvXHJcbiAgICBkYXRhLnN0YW1pbmEgKiAxMDApICsgJyUgKSc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5ld1BsYXllclNwYW4oZWwsIHBsYXllclNwYW4pIHtcclxuICBpZiAoIXBsYXllclNwYW4pIHtcclxuICAgIHZhciByZXQgPSBjcmVhdGVTcGFuKHtjbGFzc05hbWU6ICdmc2hQbGF5ZXInfSk7XHJcbiAgICBlbC5uZXh0RWxlbWVudFNpYmxpbmcuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmVuZCcsIHJldCk7XHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH1cclxuICByZXR1cm4gcGxheWVyU3BhbjtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QnVmZkNvbG9yKG15THZsLCBwbGF5ZXJCdWZmTGV2ZWwpIHtcclxuICBpZiAobXlMdmwgPiBwbGF5ZXJCdWZmTGV2ZWwpIHtyZXR1cm4gJ2ZzaFJlZCc7fVxyXG4gIHJldHVybiAnZnNoR3JlZW4nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYXpCdWZmKHBsYXllckRhdGEsIGVsKSB7XHJcbiAgdmFyIG15QnVmZk5hbWUgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScpO1xyXG4gIHZhciBwbGF5ZXJCdWZmTGV2ZWwgPSBwbGF5ZXJEYXRhW215QnVmZk5hbWVdO1xyXG4gIHZhciBwbGF5ZXJTcGFuID0gZWwubmV4dEVsZW1lbnRTaWJsaW5nLm5leHRFbGVtZW50U2libGluZztcclxuICBpZiAoIXBsYXllckJ1ZmZMZXZlbCAmJiAhcGxheWVyU3Bhbikge3JldHVybjt9XHJcbiAgaWYgKCFwbGF5ZXJCdWZmTGV2ZWwpIHtcclxuICAgIHBsYXllclNwYW4uaW5uZXJIVE1MID0gJyc7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHZhciBsdmxTcGFuID0gZWwubmV4dEVsZW1lbnRTaWJsaW5nLmZpcnN0RWxlbWVudENoaWxkLmZpcnN0RWxlbWVudENoaWxkO1xyXG4gIHZhciBteUx2bCA9IHBhcnNlSW50KGx2bFNwYW4udGV4dENvbnRlbnQucmVwbGFjZSgvXFxbfFxcXS9nLCAnJyksIDEwKTtcclxuICBwbGF5ZXJTcGFuID0gbmV3UGxheWVyU3BhbihlbCwgcGxheWVyU3Bhbik7XHJcbiAgdmFyIGJ1ZmZDb2xvciA9IGdldEJ1ZmZDb2xvcihteUx2bCwgcGxheWVyQnVmZkxldmVsKTtcclxuICBwbGF5ZXJTcGFuLmlubmVySFRNTCA9ICcgPHNwYW4gY2xhc3M9XCInICsgYnVmZkNvbG9yICtcclxuICAgICdcIj5bJyArIHBsYXllckJ1ZmZMZXZlbCArICddPC9zcGFuPic7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZEJ1ZmZMZXZlbHMoZXZ0KSB7XHJcbiAgdmFyIHBsYXllciA9IGV2dC50YXJnZXQ7XHJcbiAgaWYgKHBsYXllci50YWdOYW1lICE9PSAnSDEnKSB7cmV0dXJuO31cclxuICBnZXRQcm9maWxlKHBsYXllci50ZXh0Q29udGVudCkuZG9uZShhZGRTdGF0c1F1aWNrQnVmZik7XHJcblxyXG4gIHZhciBwbGF5ZXJEYXRhID0gcGxheWVyLnBhcmVudE5vZGUubGFzdEVsZW1lbnRDaGlsZC50ZXh0Q29udGVudC5zcGxpdCgnLCcpO1xyXG4gIHBsYXllckRhdGEgPSBwbGF5ZXJEYXRhLnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXJyKSB7XHJcbiAgICBpZiAoY3Vyci5pbmRleE9mKCcgWycpICE9PSAtMSkge1xyXG4gICAgICB2YXIgYm9iID0gY3Vyci5zcGxpdCgnIFsnKTtcclxuICAgICAgcHJldltib2JbMF0udHJpbSgpXSA9IHBhcnNlSW50KGJvYlsxXS5yZXBsYWNlKCddJywgJycpLCAxMCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJldjtcclxuICB9LCB7fSk7XHJcblxyXG4gIHZhciBidWZmT3V0ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnVmZi1vdXRlcicpO1xyXG4gIHZhciBub2RlTGlzdCA9IGJ1ZmZPdXRlci5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtuYW1lXScpO1xyXG5cclxuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKG5vZGVMaXN0LCBoYXpCdWZmLmJpbmQobnVsbCwgcGxheWVyRGF0YSkpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZG9MYWJlbHMoZWwpIHtcclxuICB2YXIgbmFtZVNwYW4gPSBlbC5maXJzdEVsZW1lbnRDaGlsZDtcclxuICB2YXIgZGF0YVRpcHBlZCA9IG5hbWVTcGFuLmdldEF0dHJpYnV0ZSgnZGF0YS10aXBwZWQnKTtcclxuICB2YXIgY29zdCA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuZ2V0QXR0cmlidXRlKCdkYXRhLWNvc3QnKTtcclxuICBuYW1lU3Bhbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwcGVkJywgZGF0YVRpcHBlZFxyXG4gICAgLnJlcGxhY2UoJzwvY2VudGVyPicsICc8YnI+U3RhbWluYSBDb3N0OiAnICsgY29zdCArICckJicpKTtcclxuICB2YXIgbHZsU3BhbiA9IG5hbWVTcGFuLmZpcnN0RWxlbWVudENoaWxkO1xyXG4gIHZhciBteUx2bCA9IHBhcnNlSW50KGx2bFNwYW4udGV4dENvbnRlbnQucmVwbGFjZSgvXFxbfFxcXS9nLCAnJyksIDEwKTtcclxuICBpZiAoIWV4Y2x1ZGVCdWZmW2VsLmdldEF0dHJpYnV0ZSgnZm9yJyldICYmIG15THZsIDwgMTI1KSB7XHJcbiAgICBlbC5jbGFzc0xpc3QuYWRkKCdmc2hEaW0nKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhdmVUYXJnZXRzKCkge1xyXG4gIHZhciBmaXJzdFBsYXllciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXJzJylcclxuICAgIC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaDEnKVswXTtcclxuICBpZiAoIWZpcnN0UGxheWVyICYmIHJldHJpZXMgPCA5KSB7XHJcbiAgICByZXRyaWVzICs9IDE7XHJcbiAgICBzZXRUaW1lb3V0KGhhdmVUYXJnZXRzLCAxMDApO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBpZiAoIWZpcnN0UGxheWVyKSB7cmV0dXJuO31cclxuICBmaXJzdFBsYXllci5jbGljaygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaXJzdFBsYXllclN0YXRzKCkge1xyXG4gIHZhciB0YXJnZXRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhcmdldFBsYXllcnMnKVxyXG4gICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKTtcclxuICBpZiAodGFyZ2V0cyAmJiB0YXJnZXRzICE9PSAnJykge2hhdmVUYXJnZXRzKCk7fVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRTdXN0YWluKHJlc3BvbnNlVGV4dCkge1xyXG4gIHZhciBlbmggPSByZXNwb25zZVRleHQuX2VuaGFuY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3Vycikge1xyXG4gICAgcHJldltjdXJyLm5hbWVdID0gY3Vyci52YWx1ZTtcclxuICAgIHJldHVybiBwcmV2O1xyXG4gIH0sIHt9KTtcclxuICB2YXIgc2tsID0gcmVzcG9uc2VUZXh0Ll9za2lsbHMucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cnIpIHtcclxuICAgIHByZXZbY3Vyci5uYW1lXSA9IGN1cnIuZHVyYXRpb247XHJcbiAgICByZXR1cm4gcHJldjtcclxuICB9LCB7fSk7XHJcbiAgZ2V0RW5oYW5jZW1lbnQoZW5oLCAnU3VzdGFpbicsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmc2hTdXMnKSk7XHJcbiAgZ2V0RW5oYW5jZW1lbnQoZW5oLCAnRnVyeSBDYXN0ZXInLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnNoRnVyJykpO1xyXG4gIGdldEJ1ZmYoc2tsLCAnR3VpbGQgQnVmZmVyJywgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZzaEdCJykpO1xyXG4gIGdldEJ1ZmYoc2tsLCAnQnVmZiBNYXN0ZXInLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnNoQk0nKSk7XHJcbiAgZ2V0QnVmZihza2wsICdFeHRlbmQnLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnNoRXh0JykpO1xyXG4gIGdldEJ1ZmYoc2tsLCAnUmVpbmZvcmNlJywgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZzaFJJJykpO1xyXG5cclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGVscGVyUUJoZWFkZXInKVxyXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcXVpY2tBY3RpdmF0ZSk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllcnMnKVxyXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYWRkQnVmZkxldmVscyk7XHJcblxyXG4gIHZhciBsYWJlbHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnVmZi1vdXRlcicpXHJcbiAgICAucXVlcnlTZWxlY3RvckFsbCgnbGFiZWxbZm9yXj1cInNraWxsLVwiXScpO1xyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobGFiZWxzLCBkb0xhYmVscyk7XHJcblxyXG4gIGZpcnN0UGxheWVyU3RhdHMoKTtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluamVjdFF1aWNrQnVmZigpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIHF1aWNrYnVmZkRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWlja2J1ZmYnKTtcclxuICBpZiAoIXF1aWNrYnVmZkRpdikge3JldHVybjt9XHJcbiAgcXVpY2tidWZmRGl2LmZpcnN0RWxlbWVudENoaWxkLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJlbmQnLFxyXG4gICAgcXVpY2tCdWZmSGVhZGVyKTtcclxuICBnZXRQcm9maWxlKHdpbmRvdy5zZWxmKS5kb25lKGdldFN1c3RhaW4pO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlZHVjZUJ1ZmZBcnJheShidWZmQXJ5KSB7XHJcbiAgcmV0dXJuIGJ1ZmZBcnkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cnIpIHtcclxuICAgIHByZXZbY3Vyci5uYW1lXSA9IE51bWJlcihjdXJyLmxldmVsKTtcclxuICAgIHJldHVybiBwcmV2O1xyXG4gIH0sIHt9KTtcclxufVxyXG4iLCJpbXBvcnQgbXlTdGF0cyBmcm9tICcuLi9hamF4L215U3RhdHMnO1xyXG5pbXBvcnQge3BDQ30gZnJvbSAnLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5pbXBvcnQgcmVkdWNlQnVmZkFycmF5IGZyb20gJy4uL2NvbW1vbi9yZWR1Y2VCdWZmQXJyYXknO1xyXG5cclxudmFyIHBhY2tSRSA9IC8+KFsgYS16QS1aXSspIExldmVsIChcXGQrKS9nO1xyXG5cclxuZnVuY3Rpb24gcG9zdFdhcm5pbmdzKG15QnVmZnMpIHtcclxuICB2YXIgbm9kZUxpc3QgPSBwQ0MuZmlyc3RFbGVtZW50Q2hpbGQucm93c1s5XVxyXG4gICAgLmNlbGxzWzBdLmZpcnN0RWxlbWVudENoaWxkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdBJyk7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChub2RlTGlzdCwgZnVuY3Rpb24oZWwpIHtcclxuICAgIHZhciB0aXBwZWQgPSBlbC5kYXRhc2V0LnRpcHBlZDtcclxuICAgIHZhciBwYWNrQnVmZnM7XHJcbiAgICB3aGlsZSAoKHBhY2tCdWZmcyA9IHBhY2tSRS5leGVjKHRpcHBlZCkpICE9PSBudWxsKSB7XHJcbiAgICAgIGlmIChteUJ1ZmZzW3BhY2tCdWZmc1sxXV0gPT09IE51bWJlcihwYWNrQnVmZnNbMl0pKSB7XHJcbiAgICAgICAgZWwucGFyZW50Tm9kZS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsXHJcbiAgICAgICAgICAnPGJyPjxzcGFuIGNsYXNzPVwiZnNoUmVkIGZzaE5vV3JhcFwiPicgKyBwYWNrQnVmZnNbMV0gKyAnICcgK1xyXG4gICAgICAgICAgcGFja0J1ZmZzWzJdICsgJyBhY3RpdmU8L3NwYW4+Jyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VQcm9maWxlKGRhdGEpIHtcclxuICBpZiAoZGF0YS5fc2tpbGxzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgdmFyIG15QnVmZnMgPSByZWR1Y2VCdWZmQXJyYXkoZGF0YS5fc2tpbGxzKTtcclxuICAgIHBvc3RXYXJuaW5ncyhteUJ1ZmZzKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluamVjdFJQVXBncmFkZXMoKSB7IC8vIGpRdWVyeS5taW5cclxuICBteVN0YXRzKCkuZG9uZShwYXJzZVByb2ZpbGUpO1xyXG59XHJcbiIsImltcG9ydCB7aW1hZ2VTZXJ2ZXJ9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtlcXVpcEl0ZW0sIHF1ZXVlUmVjYWxsSXRlbX0gZnJvbSAnLi4vc3VwcG9ydC9hamF4JztcclxuXHJcbnZhciBzcGlubmVyID0gJzxzcGFuIGNsYXNzPVwiZ3VpbGRSZXBvcnRTcGlubmVyXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiAnICtcclxuICAndXJsKFxcJycgKyBpbWFnZVNlcnZlciArICcvc2tpbi9sb2FkaW5nLmdpZlxcJyk7XCI+PC9zcGFuPic7XHJcblxyXG5mdW5jdGlvbiByZWNhbGxJdGVtKGV2dCkgeyAvLyBqUXVlcnlcclxuICAkKGV2dC50YXJnZXQpLnF0aXAoJ2hpZGUnKTtcclxuICB2YXIgbW9kZSA9IGV2dC50YXJnZXQuZ2V0QXR0cmlidXRlKCdtb2RlJyk7XHJcbiAgdmFyIHRoZVRkID0gZXZ0LnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XHJcbiAgaWYgKG1vZGUgPT09ICcwJykge3RoZVRkID0gdGhlVGQucGFyZW50Tm9kZTt9XHJcbiAgdmFyIGhyZWYgPSB0aGVUZC5maXJzdEVsZW1lbnRDaGlsZC5ocmVmO1xyXG4gIHF1ZXVlUmVjYWxsSXRlbSh7XHJcbiAgICBpbnZJZDogaHJlZi5tYXRjaCgvJmlkPShcXGQrKS8pWzFdLFxyXG4gICAgcGxheWVySWQ6IGhyZWYubWF0Y2goLyZwbGF5ZXJfaWQ9KFxcZCspLylbMV0sXHJcbiAgICBtb2RlOiBtb2RlLFxyXG4gICAgYWN0aW9uOiBldnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnYWN0aW9uJylcclxuICB9KVxyXG4gICAgLmRvbmUoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICBpZiAoZGF0YS5yID09PSAxKSB7cmV0dXJuO31cclxuICAgICAgdGhlVGQuaW5uZXJIVE1MID0gJzxzcGFuIGNsYXNzPVwiZmFzdFdvcm5cIj4nICtcclxuICAgICAgICAnWW91IHN1Y2Nlc3NmdWxseSByZWNhbGxlZCB0aGUgaXRlbTwvc3Bhbj4nO1xyXG4gICAgfSk7XHJcbiAgdGhlVGQuaW5uZXJIVE1MID0gc3Bpbm5lcjtcclxufVxyXG5cclxuZnVuY3Rpb24gd2Vhckl0ZW0oZXZ0KSB7IC8vIGpRdWVyeVxyXG4gICQoZXZ0LnRhcmdldCkucXRpcCgnaGlkZScpO1xyXG4gIHZhciB0aGVUZCA9IGV2dC50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGU7XHJcbiAgdmFyIGhyZWYgPSB0aGVUZC5maXJzdEVsZW1lbnRDaGlsZC5ocmVmO1xyXG4gIGVxdWlwSXRlbShocmVmLm1hdGNoKC8maWQ9KFxcZCspLylbMV0pLmRvbmUoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgaWYgKGRhdGEuciA9PT0gMSkge3JldHVybjt9XHJcbiAgICB0aGVUZC5pbm5lckhUTUwgPSAnPHNwYW4gY2xhc3M9XCJmYXN0V29yblwiPldvcm48L3NwYW4+JztcclxuICB9KTtcclxuICB0aGVUZC5pbm5lckhUTUwgPSBzcGlubmVyO1xyXG59XHJcblxyXG52YXIgZXZlbnRzID0gW1xyXG4gIHt0ZXN0OiAncmVjYWxsJywgZm46IHJlY2FsbEl0ZW19LFxyXG4gIHt0ZXN0OiAnZXF1aXAnLCBmbjogd2Vhckl0ZW19LFxyXG4gIHtcclxuICAgIHRlc3Q6ICdhLXJlcGx5JyxcclxuICAgIGZuOiBmdW5jdGlvbihldnQpIHtcclxuICAgICAgd2luZG93Lm9wZW5RdWlja01zZ0RpYWxvZyhldnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgndGFyZ2V0X3BsYXllcicpKTtcclxuICAgIH1cclxuICB9XHJcbl07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBldmVudEhhbmRsZXJzKGV2dCkge1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICBpZiAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoZXZlbnRzW2ldLnRlc3QpKSB7XHJcbiAgICAgIGV2ZW50c1tpXS5mbihldnQpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBhbHBoYSBmcm9tICcuLi9jb21tb24vYWxwaGEnO1xyXG5pbXBvcnQgZ2V0Rm9yYWdlIGZyb20gJy4uL2FqYXgvZ2V0Rm9yYWdlJztcclxuaW1wb3J0IHtwQ0N9IGZyb20gJy4uL3N1cHBvcnQvbGF5b3V0JztcclxuaW1wb3J0IHNldEZvcmFnZSBmcm9tICcuLi9hamF4L3NldEZvcmFnZSc7XHJcbmltcG9ydCB7Y3JlYXRlRGl2LCBtaXhpbn0gZnJvbSAnLi4vY29tbW9uL2NFbGVtZW50JztcclxuaW1wb3J0IHtpc0NoZWNrZWQsIGlzU2VsZWN0ZWQsIHRlc3RSYW5nZX0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5cclxudmFyIHN0b3JlTWFwID0gJ2ZzaF9wb3RNYXAnO1xyXG52YXIgZGVmYXVsdE9wdHMgPSB7XHJcbiAgcG90dGFiMTogZmFsc2UsXHJcbiAgcG90dGFiMjogZmFsc2UsXHJcbiAgcG90dGFiMzogZmFsc2UsXHJcbiAgbXlNYXA6IHt9LFxyXG4gIG1pbnBvaW50OiAxMixcclxuICBtYXhwb2ludDogMjBcclxufTtcclxudmFyIHBvdE9iajtcclxudmFyIHBvdE9wdHM7XHJcbnZhciBpbnZlbnRvcnk7XHJcbnZhciBtYXBwaW5nO1xyXG52YXIgdGhyZXNob2xkcztcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lcigpIHtcclxuICByZXR1cm4gY3JlYXRlRGl2KHtcclxuICAgIGlkOiAncG90UmVwb3J0JyxcclxuICAgIGlubmVySFRNTDogJzxpbnB1dCBpZD1cInBvdHRhYjFcIiB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwicG90dGFic1wiJyArXHJcbiAgICAgIGlzQ2hlY2tlZChwb3RPcHRzLnBvdHRhYjEpICsgJz4nICtcclxuICAgICAgJzxsYWJlbCBmb3I9XCJwb3R0YWIxXCI+Q29tcG9zZWQgUG90aW9uIEludmVudG9yeTwvbGFiZWw+JyArXHJcbiAgICAgICc8aW5wdXQgaWQ9XCJwb3R0YWIyXCIgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cInBvdHRhYnNcIicgK1xyXG4gICAgICBpc0NoZWNrZWQocG90T3B0cy5wb3R0YWIyKSArICc+JyArXHJcbiAgICAgICc8bGFiZWwgZm9yPVwicG90dGFiMlwiPk1hcHBpbmc8L2xhYmVsPicgK1xyXG4gICAgICAnPGlucHV0IGlkPVwicG90dGFiM1wiIHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJwb3R0YWJzXCInICtcclxuICAgICAgaXNDaGVja2VkKHBvdE9wdHMucG90dGFiMykgKyAnPicgK1xyXG4gICAgICAnPGxhYmVsIGZvcj1cInBvdHRhYjNcIj5UaHJlc2hvbGRzPC9sYWJlbD4nXHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVRocmVzaG9sZHMoKSB7XHJcbiAgcmV0dXJuIGNyZWF0ZURpdih7XHJcbiAgICBpZDogJ3RocmVzaG9sZHMnLFxyXG4gICAgaW5uZXJIVE1MOiAnTWluOicgK1xyXG4gICAgICAnPGlucHV0IGlkPVwibWlucG9pbnRcIiB0eXBlPVwibnVtYmVyXCIgdmFsdWU9XCInICtcclxuICAgICAgcG90T3B0cy5taW5wb2ludCArICdcIiBtaW49XCIwXCIgbWF4PVwiOTk5XCI+JyArXHJcbiAgICAgICdNYXg6JyArXHJcbiAgICAgICc8aW5wdXQgaWQ9XCJtYXhwb2ludFwiIHR5cGU9XCJudW1iZXJcIiB2YWx1ZT1cIicgK1xyXG4gICAgICBwb3RPcHRzLm1heHBvaW50ICsgJ1wiIG1pbj1cIjBcIiBtYXg9XCI5OTlcIj4nLFxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzb3J0S2V5cyhvYmopIHtcclxuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5zb3J0KGFscGhhKS5yZWR1Y2UoZnVuY3Rpb24ocmVzdWx0LCBrZXkpIHtcclxuICAgIHJlc3VsdFtrZXldID0gb2JqW2tleV07XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH0sIHt9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVzZXRNYXAoKSB7XHJcbiAgcG90T3B0cy5teU1hcCA9IE9iamVjdC5rZXlzKHBvdE9iaikucmVkdWNlKGZ1bmN0aW9uKHByZXYsIHBvdCkge1xyXG4gICAgcHJldltwb3RdID0gcG90O1xyXG4gICAgcmV0dXJuIHByZXY7XHJcbiAgfSwge30pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBidWlsZE1hcCgpIHtcclxuICBPYmplY3Qua2V5cyhwb3RPYmopLmZvckVhY2goZnVuY3Rpb24ocG90KSB7XHJcbiAgICBpZiAoIXBvdE9wdHMubXlNYXBbcG90XSkge3BvdE9wdHMubXlNYXBbcG90XSA9IHBvdDt9XHJcbiAgfSk7XHJcbiAgcG90T3B0cy5teU1hcCA9IHNvcnRLZXlzKHBvdE9wdHMubXlNYXApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBidWlsZE9wdGlvbnMoc2VsZWN0KSB7XHJcbiAgcmV0dXJuICc8c2VsZWN0IG5hbWU9XCInICsgc2VsZWN0ICtcclxuICAgICdcIj48b3B0aW9uIHZhbHVlPVwiSWdub3JlXCI+SWdub3JlPC9vcHRpb24+JyArXHJcbiAgICBPYmplY3Qua2V5cyhwb3RPcHRzLm15TWFwKS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgcG90KSB7XHJcbiAgICAgIHJldHVybiBwcmV2ICsgJzxvcHRpb24gdmFsdWU9XCInICsgcG90ICsgJ1wiJyArXHJcbiAgICAgICAgaXNTZWxlY3RlZChwb3QsIHBvdE9wdHMubXlNYXBbc2VsZWN0XSkgKyAnPicgKyBwb3QgKyAnPC9vcHRpb24+JztcclxuICAgIH0sICcnKSArICc8L3NlbGVjdD4nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3TWFwcGluZygpIHtcclxuICBtYXBwaW5nLmlubmVySFRNTCA9ICc8dGFibGU+PHRib2R5PicgK1xyXG4gICAgT2JqZWN0LmtleXMocG90T3B0cy5teU1hcCkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIHBvdCkge1xyXG4gICAgICB2YXIgb3B0aW9ucyA9IGJ1aWxkT3B0aW9ucyhwb3QpO1xyXG4gICAgICByZXR1cm4gcHJldiArICc8dHIgaGVpZ2h0PVwiMTlweFwiPjx0ZD4nICsgcG90ICsgJzwvdGQ+PHRkPicgKyBvcHRpb25zICtcclxuICAgICAgICAnPC90ZD48L3RyPic7XHJcbiAgICB9LCAnJykgKyAnPHRyPjx0ZD48L3RkPjx0ZCBjbGFzcz1cImZzaENlbnRlclwiPicgK1xyXG4gICAgJzxpbnB1dCBpZD1cImZzaFJlc2V0XCIgdmFsdWU9XCJSZXNldFwiIHR5cGU9XCJidXR0b25cIj4nICtcclxuICAgICc8L3RkPjwvdHI+PC90Ym9keT48L3RhYmxlPic7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBlcmMyY29sb3IocGVyY2VudCkge1xyXG4gIHZhciBwZXJjID0gTWF0aC5tYXgoTWF0aC5taW4ocGVyY2VudCwgMTAwKSwgMCk7XHJcbiAgdmFyIHI7XHJcbiAgdmFyIGc7XHJcbiAgdmFyIGIgPSAwO1xyXG4gIGlmIChwZXJjIDwgNTApIHtcclxuICAgIHIgPSAyNTU7XHJcbiAgICBnID0gTWF0aC5yb3VuZCg1LjEgKiBwZXJjKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZyA9IDI1NTtcclxuICAgIHIgPSBNYXRoLnJvdW5kKDUxMCAtIDUuMTAgKiBwZXJjKTtcclxuICB9XHJcbiAgdmFyIGggPSByICogMHgxMDAwMCArIGcgKiAweDEwMCArIGI7XHJcbiAgcmV0dXJuICcjJyArICgnMDAwMDAwJyArIGgudG9TdHJpbmcoMTYpKS5zbGljZSgtNik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBpdm90UG90T2JqKHByZXYsIHBvdCkge1xyXG4gIGlmIChwb3RPcHRzLm15TWFwW3BvdF0gIT09ICdJZ25vcmUnKSB7XHJcbiAgICBpZiAocHJldltwb3RPcHRzLm15TWFwW3BvdF1dKSB7XHJcbiAgICAgIHByZXZbcG90T3B0cy5teU1hcFtwb3RdXSArPSBwb3RPYmpbcG90XTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHByZXZbcG90T3B0cy5teU1hcFtwb3RdXSA9IHBvdE9ialtwb3RdO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcHJldjtcclxufVxyXG5cclxuZnVuY3Rpb24gbWFrZVJvd3NGcm9tUGl2b3QocGl2b3QsIHByZXYsIHBvdCkge1xyXG4gIHJldHVybiBwcmV2ICsgJzx0ciBoZWlnaHQ9XCIxOXB4XCI+PHRkPicgKyBwb3QgK1xyXG4gICAgJzwvdGQ+PHRkIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogJyArXHJcbiAgICBwZXJjMmNvbG9yKChwaXZvdFtwb3RdIC0gcG90T3B0cy5taW5wb2ludCkgL1xyXG4gICAgKHBvdE9wdHMubWF4cG9pbnQgLSBwb3RPcHRzLm1pbnBvaW50KSAqIDEwMCkgKyAnO1wiPicgK1xyXG4gICAgcGl2b3RbcG90XS50b1N0cmluZygpICsgJzwvdGQ+PC90cj4nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3SW52ZW50b3J5KCkge1xyXG4gIHZhciBwaXZvdCA9IE9iamVjdC5rZXlzKHBvdE9iaikucmVkdWNlKHBpdm90UG90T2JqLCB7fSk7XHJcbiAgaW52ZW50b3J5LmlubmVySFRNTCA9ICc8dGFibGU+PHRib2R5PicgK1xyXG4gICAgT2JqZWN0LmtleXMocGl2b3QpLnJlZHVjZShtYWtlUm93c0Zyb21QaXZvdC5iaW5kKG51bGwsIHBpdm90KSwgJycpICtcclxuICAgICc8L3Rib2R5PjwvdGFibGU+JztcclxufVxyXG5cclxuZnVuY3Rpb24gb25DaGFuZ2UoZSkge1xyXG4gIGlmIChlLnRhcmdldC50YWdOYW1lID09PSAnU0VMRUNUJykge1xyXG4gICAgcG90T3B0cy5teU1hcFtlLnRhcmdldC5uYW1lXSA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgc2V0Rm9yYWdlKHN0b3JlTWFwLCBwb3RPcHRzKTtcclxuICAgIGRyYXdJbnZlbnRvcnkoKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvUmVzZXQoKSB7XHJcbiAgcmVzZXRNYXAoKTtcclxuICBzZXRGb3JhZ2Uoc3RvcmVNYXAsIHBvdE9wdHMpO1xyXG4gIGRyYXdNYXBwaW5nKCk7XHJcbiAgZHJhd0ludmVudG9yeSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzYXZlU3RhdGUoc2VsZikge1xyXG4gIHZhciBvcHRpb24gPSBzZWxmLmlkO1xyXG4gIHBvdE9wdHNbb3B0aW9uXSA9IHNlbGYuY2hlY2tlZDtcclxuICBzZXRGb3JhZ2Uoc3RvcmVNYXAsIHBvdE9wdHMpO1xyXG59XHJcblxyXG52YXIgZXZ0SGRsID0gW1xyXG4gIHtcclxuICAgIHRlc3Q6IGZ1bmN0aW9uKHNlbGYpIHtyZXR1cm4gc2VsZi5pZCA9PT0gJ2ZzaFJlc2V0Jzt9LFxyXG4gICAgYWN0OiBkb1Jlc2V0XHJcbiAgfSxcclxuICB7XHJcbiAgICB0ZXN0OiBmdW5jdGlvbihzZWxmKSB7XHJcbiAgICAgIHJldHVybiAvXnBvdHRhYlxcZCQvLnRlc3Qoc2VsZi5pZCk7XHJcbiAgICB9LFxyXG4gICAgYWN0OiBzYXZlU3RhdGVcclxuICB9XHJcbl07XHJcblxyXG5mdW5jdGlvbiBvbkNsaWNrKGUpIHtcclxuICB2YXIgc2VsZiA9IGUudGFyZ2V0O1xyXG4gIGV2dEhkbC5zb21lKGZ1bmN0aW9uKGVsKSB7XHJcbiAgICBpZiAoZWwudGVzdChzZWxmKSkge1xyXG4gICAgICBlbC5hY3Qoc2VsZik7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvbklucHV0KGUpIHtcclxuICB2YXIgc2VsZiA9IGUudGFyZ2V0LmlkO1xyXG4gIHZhciBtYXliZVZhbHVlID0gdGVzdFJhbmdlKGUudGFyZ2V0LnZhbHVlLCAwLCA5OTkpO1xyXG4gIGlmIChtYXliZVZhbHVlKSB7XHJcbiAgICBwb3RPcHRzW3NlbGZdID0gbWF5YmVWYWx1ZTtcclxuICAgIHNldEZvcmFnZShzdG9yZU1hcCwgcG90T3B0cyk7XHJcbiAgICBkcmF3SW52ZW50b3J5KCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnb3RNYXAoZGF0YSkge1xyXG4gIHBvdE9wdHMgPSBkZWZhdWx0T3B0cztcclxuICBpZiAoZGF0YSkge1xyXG4gICAgbWl4aW4ocG90T3B0cywgZGF0YSk7XHJcbiAgfVxyXG4gIGJ1aWxkTWFwKHBvdE9iaik7XHJcbiAgc2V0Rm9yYWdlKHN0b3JlTWFwLCBwb3RPcHRzKTtcclxuICB2YXIgY29udGFpbmVyID0gY3JlYXRlQ29udGFpbmVyKCk7XHJcbiAgdmFyIHBhbmVscyA9IGNyZWF0ZURpdih7aWQ6ICdwYW5lbHMnfSk7XHJcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKHBhbmVscyk7XHJcbiAgaW52ZW50b3J5ID0gY3JlYXRlRGl2KHtpZDogJ2ludmVudG9yeSd9KTtcclxuICBkcmF3SW52ZW50b3J5KCk7XHJcbiAgcGFuZWxzLmFwcGVuZENoaWxkKGludmVudG9yeSk7XHJcbiAgbWFwcGluZyA9IGNyZWF0ZURpdih7aWQ6ICdtYXBwaW5nJ30pO1xyXG4gIGRyYXdNYXBwaW5nKCk7XHJcbiAgcGFuZWxzLmFwcGVuZENoaWxkKG1hcHBpbmcpO1xyXG4gIHRocmVzaG9sZHMgPSBjcmVhdGVUaHJlc2hvbGRzKCk7XHJcbiAgcGFuZWxzLmFwcGVuZENoaWxkKHRocmVzaG9sZHMpO1xyXG5cclxuICB2YXIgbXlDZWxsID0gcENDLmxhc3RFbGVtZW50Q2hpbGQuaW5zZXJ0Um93KDIpLmluc2VydENlbGwoLTEpO1xyXG4gIG15Q2VsbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNoYW5nZSk7XHJcbiAgbXlDZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGljayk7XHJcbiAgbXlDZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0Jywgb25JbnB1dCk7XHJcbiAgbXlDZWxsLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBvdFJlcG9ydChwb3RPYmpfKSB7XHJcbiAgcG90T2JqID0gc29ydEtleXMocG90T2JqXyk7XHJcbiAgZ2V0Rm9yYWdlKHN0b3JlTWFwKS5kb25lKGdvdE1hcCk7XHJcbn1cclxuIiwiaW1wb3J0IGFkZCBmcm9tICcuLi9zdXBwb3J0L3Rhc2snO1xyXG5pbXBvcnQge2NyZWF0ZVNwYW59IGZyb20gJy4uL2NvbW1vbi9jRWxlbWVudCc7XHJcbmltcG9ydCBwb3RSZXBvcnQgZnJvbSAnLi9wb3RSZXBvcnQnO1xyXG5cclxudmFyIHdlYXJSRSA9IG5ldyBSZWdFeHAoJzxiPnxCb3R0bGV8QnJld3xEcmFmdHxFbGl4aXJ8UG90aW9ufEphZ3VhIEVnZ3wnICtcclxuICAnR3V0IFJvdCBIZWFkIFNwbGl0dGVyfFNlcnVtJyk7XHJcbnZhciBjb3VudGVyO1xyXG52YXIgbm9kZUFycmF5O1xyXG52YXIgbm9kZUxpc3Q7XHJcbnZhciBwb3RPYmo7XHJcblxyXG5mdW5jdGlvbiBwYWludENoaWxkKCkge1xyXG4gIHZhciBsaW1pdCA9IHBlcmZvcm1hbmNlLm5vdygpICsgMTtcclxuICB3aGlsZSAocGVyZm9ybWFuY2Uubm93KCkgPCBsaW1pdCAmJiBjb3VudGVyIDwgbm9kZUFycmF5Lmxlbmd0aCkge1xyXG4gICAgdmFyIGVsID0gbm9kZUxpc3RbY291bnRlcl07XHJcbiAgICB2YXIgaW5qZWN0ID0gbm9kZUFycmF5W2NvdW50ZXJdO1xyXG4gICAgZWwuYXBwZW5kQ2hpbGQoaW5qZWN0KTtcclxuICAgIGNvdW50ZXIgKz0gMTtcclxuICB9XHJcbiAgaWYgKGNvdW50ZXIgPCBub2RlQXJyYXkubGVuZ3RoKSB7XHJcbiAgICBhZGQoMywgcGFpbnRDaGlsZCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlRWxlbWVudCh0ZXN0KSB7XHJcbiAgaWYgKHRlc3QpIHtyZXR1cm4gJyBjbGFzcz1cImZzaEhpZGVcIic7fVxyXG4gIHJldHVybiAnJztcclxufVxyXG5cclxuZnVuY3Rpb24gaXNFcXVpcGFibGUodGVzdCkge1xyXG4gIGlmICh0ZXN0KSB7cmV0dXJuICdyZWNhbGwnO31cclxuICByZXR1cm4gJ2VxdWlwJztcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkUG90T2JqKGl0ZW0pIHtcclxuICBpZiAoaXRlbS5pbmRleE9mKCcgKFBvdGlvbiknKSAhPT0gLTEpIHtcclxuICAgIHZhciBpdGVtTmFtZSA9IGl0ZW0ucmVwbGFjZSgnIChQb3Rpb24pJywgJycpO1xyXG4gICAgaWYgKHBvdE9ialtpdGVtTmFtZV0pIHtcclxuICAgICAgcG90T2JqW2l0ZW1OYW1lXSArPSAxO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcG90T2JqW2l0ZW1OYW1lXSA9IDE7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBteVNwYW4oZWwpIHtcclxuICB2YXIgc2Vjb25kSHJlZiA9IGVsLmNoaWxkcmVuLmxlbmd0aCA9PT0gMjtcclxuICB2YXIgZmlyc3RIcmVmID0gaGlkZUVsZW1lbnQoIXNlY29uZEhyZWYpO1xyXG4gIHZhciBpdGVtTmFtZSA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuaW5uZXJIVE1MO1xyXG4gIGFkZFBvdE9iaihpdGVtTmFtZSk7XHJcbiAgdmFyIHdlYXJhYmxlID0gaGlkZUVsZW1lbnQod2VhclJFLnRlc3QoaXRlbU5hbWUpKTtcclxuICB2YXIgZXF1aXBhYmxlID0gaXNFcXVpcGFibGUoc2Vjb25kSHJlZik7XHJcbiAgcmV0dXJuIGNyZWF0ZVNwYW4oe1xyXG4gICAgaW5uZXJIVE1MOiAnPHNwYW4nICsgZmlyc3RIcmVmICtcclxuICAgICc+IHwgPHNwYW4gY2xhc3M9XCJzZW5kTGluayByZWNhbGwgdGlwLXN0YXRpY1wiIGRhdGEtdGlwcGVkPVwiJyArXHJcbiAgICAnQ2xpY2sgdG8gcmVjYWxsIHRvIGJhY2twYWNrXCIgbW9kZT1cIjBcIiBhY3Rpb249XCJyZWNhbGxcIj5GYXN0IEJQJyArXHJcbiAgICAnPC9zcGFuPjwvc3Bhbj4nICtcclxuICAgICcgfCA8c3BhbiBjbGFzcz1cInNlbmRMaW5rIHJlY2FsbCB0aXAtc3RhdGljXCIgJyArXHJcbiAgICAnZGF0YS10aXBwZWQ9XCJDbGljayB0byByZWNhbGwgdG8gZ3VpbGQgc3RvcmVcIiBtb2RlPVwiMVwiICcgK1xyXG4gICAgJ2FjdGlvbj1cInJlY2FsbFwiPkZhc3QgR1M8L3NwYW4+JyArXHJcbiAgICAnPHNwYW4nICsgd2VhcmFibGUgK1xyXG4gICAgJz4gfCA8c3BhbiBjbGFzcz1cInNlbmRMaW5rICcgK1xyXG4gICAgZXF1aXBhYmxlICtcclxuICAgICdcIiBtb2RlPVwiMFwiIGFjdGlvbj1cIndlYXJcIj5GYXN0IFdlYXI8L3NwYW4+PC9zcGFuPidcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZG9TcGFuKGVsKSB7XHJcbiAgaWYgKGNvdW50ZXIgPT09IDApIHtcclxuICAgIGVsLnByZXZpb3VzU2libGluZy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgJzIwMHB4Jyk7XHJcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgJzM3MHB4Jyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGVsLnByZXZpb3VzU2libGluZy5yZW1vdmVBdHRyaWJ1dGUoJ3dpZHRoJyk7XHJcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3dpZHRoJyk7XHJcbiAgfVxyXG4gIG5vZGVBcnJheS5wdXNoKG15U3BhbihlbCkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYWtlU3BhbigpIHtcclxuICB2YXIgbGltaXQgPSBwZXJmb3JtYW5jZS5ub3coKSArIDEwO1xyXG4gIHdoaWxlIChwZXJmb3JtYW5jZS5ub3coKSA8IGxpbWl0ICYmIGNvdW50ZXIgPCBub2RlTGlzdC5sZW5ndGgpIHtcclxuICAgIHZhciBlbCA9IG5vZGVMaXN0W2NvdW50ZXJdO1xyXG5cclxuICAgIGRvU3BhbihlbCk7XHJcblxyXG4gICAgY291bnRlciArPSAxO1xyXG4gIH1cclxuICBpZiAoY291bnRlciA8IG5vZGVMaXN0Lmxlbmd0aCkge1xyXG4gICAgYWRkKDMsIG1ha2VTcGFuKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY291bnRlciA9IDA7XHJcbiAgICBhZGQoMywgcGFpbnRDaGlsZCk7XHJcbiAgICBwb3RSZXBvcnQocG90T2JqKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXBhcmVDaGlsZFJvd3MoKSB7XHJcbiAgbm9kZUxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjcENDIHRhYmxlIHRhYmxlICcgK1xyXG4gICAgJ3RyOm5vdCguZnNoSGlkZSkgdGQ6bnRoLW9mLXR5cGUoM24rMCknKTtcclxuICBwb3RPYmogPSB7fTtcclxuICBub2RlQXJyYXkgPSBbXTtcclxuICBjb3VudGVyID0gMDtcclxuICBhZGQoMywgbWFrZVNwYW4pO1xyXG59XHJcbiIsImltcG9ydCBhZGQgZnJvbSAnLi4vc3VwcG9ydC90YXNrJztcclxuaW1wb3J0IGNhbGYgZnJvbSAnLi4vc3VwcG9ydC9jYWxmJztcclxuaW1wb3J0IHtvbmxpbmVEb3R9IGZyb20gJy4uL3N1cHBvcnQvbGF5b3V0JztcclxuXHJcbnZhciBoZWFkZXJDb3VudDtcclxudmFyIGhlYWRlcnM7XHJcblxyXG5mdW5jdGlvbiBtZW1iZXJIZWFkZXIob2xkaHRtbCkge1xyXG4gIGlmICghY2FsZi5tZW1ickxpc3Rbb2xkaHRtbF0pIHtyZXR1cm4gb2xkaHRtbDt9XHJcbiAgcmV0dXJuIG9ubGluZURvdCh7bGFzdF9sb2dpbjogY2FsZi5tZW1ickxpc3Rbb2xkaHRtbF0ubGFzdF9sb2dpbn0pICtcclxuICAgICc8YSBocmVmPVwiaW5kZXgucGhwP2NtZD1wcm9maWxlJnBsYXllcl9pZD0nICsgY2FsZi5tZW1ickxpc3Rbb2xkaHRtbF0uaWQgK1xyXG4gICAgJ1wiPicgKyBvbGRodG1sICsgJzwvYT4gWyA8c3BhbiBjbGFzcz1cImEtcmVwbHkgZnNoTGlua1wiIHRhcmdldF9wbGF5ZXI9JyArXHJcbiAgICBvbGRodG1sICsgJz5tPC9zcGFuPiBdJztcclxufVxyXG5cclxuZnVuY3Rpb24gcGFpbnRIZWFkZXIoKSB7XHJcbiAgdmFyIGxpbWl0ID0gcGVyZm9ybWFuY2Uubm93KCkgKyAxMDtcclxuICB3aGlsZSAocGVyZm9ybWFuY2Uubm93KCkgPCBsaW1pdCAmJiBoZWFkZXJDb3VudCA8IGhlYWRlcnMubGVuZ3RoKSB7XHJcbiAgICB2YXIgZWwgPSBoZWFkZXJzW2hlYWRlckNvdW50XTtcclxuICAgIHZhciBvbGRodG1sID0gZWwudGV4dENvbnRlbnQ7XHJcbiAgICBlbC5pbm5lckhUTUwgPSBtZW1iZXJIZWFkZXIob2xkaHRtbCk7XHJcbiAgICBoZWFkZXJDb3VudCArPSAxO1xyXG4gIH1cclxuICBpZiAoaGVhZGVyQ291bnQgPCBoZWFkZXJzLmxlbmd0aCkge1xyXG4gICAgYWRkKDMsIHBhaW50SGVhZGVyKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcG9ydEhlYWRlcigpIHtcclxuICBoZWFkZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3BDQyB0YWJsZSB0YWJsZSAnICtcclxuICAgICd0cjpub3QoLmZzaEhpZGUpIHRkW2JnY29sb3I9XCIjREFBNTM0XCJdW2NvbHNwYW49XCIyXCJdIGInKTtcclxuICBoZWFkZXJDb3VudCA9IDA7XHJcbiAgYWRkKDMsIHBhaW50SGVhZGVyKTtcclxufVxyXG4iLCJpbXBvcnQgYWRkIGZyb20gJy4uL3N1cHBvcnQvdGFzayc7XHJcbmltcG9ydCB7Z2V0VXJsUGFyYW1ldGVyfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG52YXIgY291bnRlcjtcclxudmFyIG5vZGVMaXN0O1xyXG52YXIgZmluZFVzZXI7XHJcbnZhciBmb3VuZFVzZXI7XHJcblxyXG5mdW5jdGlvbiBoaWRlT3RoZXIoZWwpIHtcclxuICBpZiAoZWwuZmlyc3RDaGlsZC5oYXNBdHRyaWJ1dGUoJ2JnY29sb3InKSkge1xyXG4gICAgZm91bmRVc2VyID0gZWwuZmlyc3RDaGlsZC5maXJzdEVsZW1lbnRDaGlsZC50ZXh0Q29udGVudCA9PT0gZmluZFVzZXI7XHJcbiAgfVxyXG4gIGlmICghZm91bmRVc2VyKSB7XHJcbiAgICBlbC5jbGFzc05hbWUgPSAnZnNoSGlkZSc7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlT3RoZXJzKCkge1xyXG4gIHZhciBsaW1pdCA9IHBlcmZvcm1hbmNlLm5vdygpICsgNTtcclxuICB3aGlsZSAocGVyZm9ybWFuY2Uubm93KCkgPCBsaW1pdCAmJiBjb3VudGVyIDwgbm9kZUxpc3QubGVuZ3RoKSB7XHJcbiAgICB2YXIgZWwgPSBub2RlTGlzdFtjb3VudGVyXTtcclxuXHJcbiAgICBoaWRlT3RoZXIoZWwpO1xyXG5cclxuICAgIGNvdW50ZXIgKz0gMTtcclxuICB9XHJcbiAgaWYgKGNvdW50ZXIgPCBub2RlTGlzdC5sZW5ndGgpIHtcclxuICAgIGFkZCgyLCBoaWRlT3RoZXJzKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNlYXJjaFVzZXIoKSB7XHJcbiAgZmluZFVzZXIgPSBnZXRVcmxQYXJhbWV0ZXIoJ3VzZXInKTtcclxuICBpZiAoIWZpbmRVc2VyKSB7cmV0dXJuO31cclxuICB2YXIgdXNlck5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcclxuICAgICcjcENDIHRhYmxlIHRhYmxlIHRkW2JnY29sb3I9XCIjREFBNTM0XCJdIGInKTtcclxuICB2YXIgdXNlck5vZGUgPSBBcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKHVzZXJOb2RlcywgZnVuY3Rpb24oZWwpIHtcclxuICAgIHJldHVybiBlbC50ZXh0Q29udGVudCA9PT0gZmluZFVzZXI7XHJcbiAgfSk7XHJcbiAgaWYgKCF1c2VyTm9kZSkge3JldHVybjt9XHJcbiAgbm9kZUxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjcENDIHRhYmxlIHRhYmxlIHRyJyk7XHJcbiAgY291bnRlciA9IDA7XHJcbiAgYWRkKDIsIGhpZGVPdGhlcnMpO1xyXG59XHJcbiIsImltcG9ydCBhZGQgZnJvbSAnLi4vc3VwcG9ydC90YXNrJztcclxuaW1wb3J0IGV2ZW50SGFuZGxlcnMgZnJvbSAnLi9ldmVudEhhbmRsZXJzJztcclxuaW1wb3J0IGdldE1lbWJyTGlzdCBmcm9tICcuLi9hamF4L2dldE1lbWJyTGlzdCc7XHJcbmltcG9ydCB7cENDfSBmcm9tICcuLi9zdXBwb3J0L2xheW91dCc7XHJcbmltcG9ydCBwcmVwYXJlQ2hpbGRSb3dzIGZyb20gJy4vcHJlcGFyZUNoaWxkUm93cyc7XHJcbmltcG9ydCByZXBvcnRIZWFkZXIgZnJvbSAnLi9yZXBvcnRIZWFkZXInO1xyXG5pbXBvcnQgc2VhcmNoVXNlciBmcm9tICcuL3NlYXJjaFVzZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0UmVwb3J0UGFpbnQoKSB7IC8vIGpRdWVyeVxyXG4gIGdldE1lbWJyTGlzdChmYWxzZSkuZG9uZShmdW5jdGlvbigpIHtcclxuICAgIGFkZCgzLCByZXBvcnRIZWFkZXIpO1xyXG4gIH0pO1xyXG4gIGFkZCgyLCBzZWFyY2hVc2VyKTtcclxuICBhZGQoMywgcHJlcGFyZUNoaWxkUm93cyk7XHJcbiAgcENDLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdUQUJMRScpWzFdXHJcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudEhhbmRsZXJzKTtcclxufVxyXG4iLCJpbXBvcnQge3BDQ30gZnJvbSAnLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5pbXBvcnQge2dldFZhbHVlLCBzZXRWYWx1ZX0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0U2F2ZVNldHRpbmdzKCkgeyAvLyBIeWJyaWRcclxuICB2YXIgY29udGVudCA9IHBDQztcclxuICB2YXIgZnNoU2V0dGluZ3MgPSB7fTtcclxuICB2YXIgbGlzdCA9IEdNX2xpc3RWYWx1ZXMoKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgIGZzaFNldHRpbmdzW2xpc3RbaV1dID0gZ2V0VmFsdWUobGlzdFtpXSk7XHJcbiAgfVxyXG4gIGNvbnRlbnQuaW5uZXJIVE1MID0gJzxoMT5GU0ggU2V0dGluZ3M8L2gxPjxicj48Y2VudGVyPlRoZSBib3ggYmVsb3cgJyArXHJcbiAgICAnaXMgeW91ciBjdXJyZW50IHNldHRpbmdzLiBDb3B5IGl0IHRvIHNhdmUgeW91ciBjdXJyZW50IHNldHRpbmdzPGJyPicgK1xyXG4gICAgJ1RvIGxvYWQgc2F2ZWQgc2V0dGluZ3MsIHNpbXBseSByZXBsYWNlIHRoZSBjb250ZW50cyBvZiB0aGUgYm94IHdpdGggJyArXHJcbiAgICAneW91ciBzYXZlZCBjb3B5IGFuZCBwcmVzcyB0aGUgYnV0dG9uIGJlbG93LicgK1xyXG4gICAgJzx0ZXh0YXJlYSBhbGlnbj1cImNlbnRlclwiIGNvbHM9XCI4MFwiIHJvd3M9XCIyNVwiIHN0eWxlPVwiJyArXHJcbiAgICAnYmFja2dyb3VuZC1jb2xvcjp3aGl0ZTsnICtcclxuICAgICdmb250LWZhbWlseTpDb25zb2xhcyxcXCdMdWNpZGEgQ29uc29sZVxcJyxcXCdDb3VyaWVyIE5ld1xcJyxtb25vc3BhY2U7XCIgJyArXHJcbiAgICAnaWQ9XCJIZWxwZXJmc2hTZXR0aW5nc1wiIG5hbWU9XCJmc2hTZXR0aW5nc1wiPicgK1xyXG4gICAgSlNPTi5zdHJpbmdpZnkoZnNoU2V0dGluZ3MpICsgJzwvdGV4dGFyZWE+JyArXHJcbiAgICAnPGJyPjxpbnB1dCBpZD1cIkhlbHBlckxvYWRTZXR0aW5nc1wiIGNsYXNzPVwiY3VzdG9tYnV0dG9uXCIgJyArXHJcbiAgICAndHlwZT1cInN1Ym1pdFwiIHZhbHVlPVwiTG9hZCBTZXR0aW5ncyFcIiAvPjwvY2VudGVyPic7XHJcbiAgJCgnI0hlbHBlckxvYWRTZXR0aW5ncycpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHNldHRpbmdzID0gSlNPTi5wYXJzZSgkKCcjSGVscGVyZnNoU2V0dGluZ3MnKS52YWwoKSk7XHJcbiAgICBPYmplY3Qua2V5cyhzZXR0aW5ncykuZm9yRWFjaChmdW5jdGlvbihpZCkge1xyXG4gICAgICBzZXRWYWx1ZShpZCwgc2V0dGluZ3NbaWRdKTtcclxuICAgIH0pO1xyXG4gICAgJCgnI2RpYWxvZ19tc2cnKS50ZXh0KCdTZXR0aW5ncyBsb2FkZWQgc3VjY2Vzc2Z1bGx5IScpLmRpYWxvZygnb3BlbicpO1xyXG4gIH0pO1xyXG59XHJcbiIsIi8vIHZhciBzeXN0ZW0gPSByZXF1aXJlKCcuL3N1cHBvcnQvc3lzdGVtJyk7XHJcblxyXG4vLyBMZWdhY3kgLSBCYWQsIGNvdWxkIGJlIHJlcHVycG9zZWRcclxuLyogZnVuY3Rpb24gZ2V0QnBDb3VudEZyb21Xb3JsZChyZXNwb25zZVRleHQpIHtcclxuICAvLyBiYWNrcGFjayBjb3VudGVyXHJcbiAgdmFyIGRvYz1zeXN0ZW0uY3JlYXRlRG9jdW1lbnQocmVzcG9uc2VUZXh0KTtcclxuICB2YXIgYnA9c3lzdGVtLmZpbmROb2RlKFxyXG4gICAgJy8vdGRbYS9pbWdbY29udGFpbnMoQHNyYyxcIl9tYW5hZ2VpdGVtcy5naWZcIildXScsZG9jKTtcclxuICB2YXIgaW5qZWN0SGVyZT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVwb3J0RGl2Jyk7XHJcbiAgaWYgKCFpbmplY3RIZXJlKSB7XHJcbiAgICBpbmplY3RIZXJlPXN5c3RlbS5maW5kTm9kZShcclxuICAgICAgJy8vYltjb250YWlucyguLFwiTXVsdGlwbGUgU2NhdmVuZ2luZyBSZXN1bHRzXCIpXS8uLicpO1xyXG4gIH1cclxuICBpbmplY3RIZXJlLmFwcGVuZENoaWxkKGJwKTtcclxufVxyXG4qL1xyXG5cclxuLyogZnVuY3Rpb24gbXVsdGlTdW1tYXJ5KCkgeyAvLyBMZWdhY3kgLSBCYWQsIGNvdWxkIGJlIHJlcHVycG9zZWRcclxuICB2YXIgaW5qZWN0SGVyZT1zeXN0ZW0uZmluZE5vZGUoXHJcbiAgICAnLy9iW2NvbnRhaW5zKC4sXCJNdWx0aXBsZSBTY2F2ZW5naW5nIFJlc3VsdHNcIildLy4uJyk7XHJcbiAgaWYgKGluamVjdEhlcmUpIHsgLy8gbXVsdGkgc2NhdmVuZ2luZ1xyXG4gICAgdmFyIHZpY3Rvcmllcz1zeXN0ZW0uZmluZE5vZGVzKCcvL3RkW2NvbnRhaW5zKC4sXCJ2aWN0b3Jpb3VzXCIpXScpO1xyXG4gICAgaWYgKHZpY3Rvcmllcykge1xyXG4gICAgICBpbmplY3RIZXJlLmlubmVySFRNTCs9Jzxici8+VmljdG9yaWVzOiAnK3ZpY3Rvcmllcy5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICB2YXIgZGVmZWF0cz1zeXN0ZW0uZmluZE5vZGVzKCcvL3RkW2NvbnRhaW5zKC4sXCJkZWZlYXRlZFwiKV0nKTtcclxuICAgIGlmIChkZWZlYXRzKSB7XHJcbiAgICAgIGluamVjdEhlcmUuaW5uZXJIVE1MKz0nLCBEZWZlYXRlZDogJytkZWZlYXRzLmxlbmd0aDtcclxuICAgIH1cclxuICAgIHZhciBnYWlucz1zeXN0ZW0uZmluZE5vZGVzKCcvL3RkW2NvbnRhaW5zKC4sXCJJdGVtIEdhaW5lZFwiKV0vYicpO1xyXG4gICAgaWYgKGdhaW5zKSB7XHJcbiAgICAgIGluamVjdEhlcmUuaW5uZXJIVE1MKz0nPGJyLz4nK2dhaW5zLmxlbmd0aCsnIGl0ZW0ocyk6ICc7XHJcbiAgICAgIHZhciBnYWluSGFzaD17fTtcclxuICAgICAgZm9yICh2YXIgaT0wO2k8Z2FpbnMubGVuZ3RoO2kgKz0gMSkge1xyXG4gICAgICAgIGlmIChnYWluSGFzaFtnYWluc1tpXS50ZXh0Q29udGVudF0pIHtcclxuICAgICAgICAgIGdhaW5IYXNoW2dhaW5zW2ldLnRleHRDb250ZW50XSs9IDE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGdhaW5IYXNoW2dhaW5zW2ldLnRleHRDb250ZW50XT0xO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBmb3IgKHZhciBpdGVtIGluIGdhaW5IYXNoKSB7XHJcbiAgICAgICAgaWYgKCFnYWluSGFzaC5oYXNPd25Qcm9wZXJ0eShpdGVtKSkgeyBjb250aW51ZTsgfVxyXG4gICAgICAgIGluamVjdEhlcmUuaW5uZXJIVE1MKz1nYWluSGFzaFtpdGVtXSsnICcraXRlbSsnKHMpLCAnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHN5c3RlbS54bWxodHRwKCdpbmRleC5waHA/Y21kPXdvcmxkJywgZ2V0QnBDb3VudEZyb21Xb3JsZCk7XHJcbn1cclxuKi9cclxuXHJcbmZ1bmN0aW9uIGRvbnRQb3N0KGUpIHsgLy8galF1ZXJ5XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIHdpbmRvdy5sb2NhdGlvbiA9ICdpbmRleC5waHA/Y21kPXNjYXZlbmdpbmcmc3ViY21kPXByb2Nlc3MnICtcclxuICAgICcmY2F2ZV9pZD0nICsgJCgnI3BDQyBpbnB1dFtuYW1lPVwiY2F2ZV9pZFwiXTpjaGVja2VkJykudmFsKCkgK1xyXG4gICAgJyZnb2xkPScgKyAkKCcjZ29sZCcpLnZhbCgpICsgJyZzdWJtaXQ9U2NhdmVuZ2UnO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmplY3RTY2F2ZW5naW5nKCkgeyAvLyBqUXVlcnlcclxuICAkKCcjcENDIGlucHV0W3ZhbHVlPVwiU2NhdmVuZ2VcIl0nKS5jbGljayhkb250UG9zdCk7XHJcbn1cclxuIiwiaW1wb3J0IHtvcGVuUXVpY2tCdWZmQnlOYW1lfSBmcm9tICcuLi9zdXBwb3J0L2xheW91dCc7XHJcblxyXG5mdW5jdGlvbiBidWZmQWxsKHNlbGYpIHtcclxuICB2YXIgdGl0YW5UYWJsZSA9IHNlbGYucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZTtcclxuICB2YXIgc2hvcnRMaXN0ID0gW107XHJcbiAgZm9yICh2YXIgaiA9IDE7IGogPCB0aXRhblRhYmxlLnJvd3MubGVuZ3RoOyBqICs9IDIpIHtcclxuICAgIHZhciBmaXJzdENlbGwgPSB0aXRhblRhYmxlLnJvd3Nbal0uY2VsbHNbMF0uZmlyc3RDaGlsZC5maXJzdENoaWxkO1xyXG4gICAgc2hvcnRMaXN0LnB1c2goZmlyc3RDZWxsLnRleHRDb250ZW50KTtcclxuICB9XHJcbiAgb3BlblF1aWNrQnVmZkJ5TmFtZShzaG9ydExpc3Quam9pbigpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYnVmZkV2ZW50KGUpIHtcclxuICB2YXIgc2VsZiA9IGUudGFyZ2V0O1xyXG4gIGlmIChzZWxmLnRleHRDb250ZW50ID09PSAnW2JdJykge1xyXG4gICAgb3BlblF1aWNrQnVmZkJ5TmFtZShzZWxmLnByZXZpb3VzRWxlbWVudFNpYmxpbmcudGV4dENvbnRlbnQpO1xyXG4gIH1cclxuICBpZiAoc2VsZi50ZXh0Q29udGVudCA9PT0gJ2FsbCcpIHtcclxuICAgIGJ1ZmZBbGwoc2VsZik7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBldnRIZGwoZSkge1xyXG4gIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZzaEJsJykpIHtidWZmRXZlbnQoZSk7fVxyXG59XHJcblxyXG5mdW5jdGlvbiBkb0J1ZmZMaW5rcyh0aXRhblRhYmxlKSB7XHJcbiAgZm9yICh2YXIgaiA9IDE7IGogPCB0aXRhblRhYmxlLnJvd3MubGVuZ3RoOyBqICs9IDIpIHtcclxuICAgIHZhciBmaXJzdENlbGwgPSB0aXRhblRhYmxlLnJvd3Nbal0uY2VsbHNbMF07XHJcbiAgICBmaXJzdENlbGwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLFxyXG4gICAgICAnIDxidXR0b24gY2xhc3M9XCJmc2hCbCBmc2hYU21hbGxcIj5bYl08L2J1dHRvbj4nKTtcclxuICB9XHJcbiAgdGl0YW5UYWJsZS5yb3dzWzBdLmNlbGxzWzBdLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJyxcclxuICAgICcgPGJ1dHRvbiBjbGFzcz1cImZzaEJsIGZzaFhTbWFsbFwiPmFsbDwvYnV0dG9uPicpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnb3RUYWJsZXModGl0YW5UYWJsZXMpIHtcclxuICBmb3IgKHZhciBpID0gMjsgaSA8IHRpdGFuVGFibGVzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICB2YXIgdGl0YW5UYWJsZSA9IHRpdGFuVGFibGVzW2ldO1xyXG4gICAgaWYgKHRpdGFuVGFibGUucm93cy5sZW5ndGggPCAyKSB7Y29udGludWU7fVxyXG4gICAgZG9CdWZmTGlua3ModGl0YW5UYWJsZSk7XHJcbiAgfVxyXG4gIHRpdGFuVGFibGVzWzFdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZ0SGRsKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0U2NvdXR0b3dlckJ1ZmZMaW5rcyh0aXRhblRhYmxlcykge1xyXG4gIGlmICh0aXRhblRhYmxlcy5sZW5ndGggPiAyKSB7Z290VGFibGVzKHRpdGFuVGFibGVzKTt9XHJcbn1cclxuIiwiaW1wb3J0IGdldEZvcmFnZSBmcm9tICcuLi9hamF4L2dldEZvcmFnZSc7XHJcbmltcG9ydCBpbmplY3RTY291dHRvd2VyQnVmZkxpbmtzIGZyb20gJy4vaW5qZWN0U2NvdXR0b3dlckJ1ZmZMaW5rcyc7XHJcbmltcG9ydCB7bm93fSBmcm9tICcuLi9zdXBwb3J0L2RhdGFPYmonO1xyXG5pbXBvcnQge3BDQ30gZnJvbSAnLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5pbXBvcnQge3BhcnNlRGF0ZUFzVGltZXN0YW1wfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCBzZXRGb3JhZ2UgZnJvbSAnLi4vYWpheC9zZXRGb3JhZ2UnO1xyXG5pbXBvcnQge2NyZWF0ZVRCb2R5LCBjcmVhdGVUYWJsZX0gZnJvbSAnLi4vY29tbW9uL2NFbGVtZW50JztcclxuXHJcbmZ1bmN0aW9uIGNvb2xkb3duVHJhY2tlcihhUm93LCB0aGVUaXRhbnMpIHtcclxuICB2YXIgbXlOYW1lID0gYVJvdy5jZWxsc1swXS5maXJzdEVsZW1lbnRDaGlsZC5nZXRBdHRyaWJ1dGUoJ29sZHRpdGxlJylcclxuICAgIC5yZXBsYWNlKCcgKFRpdGFuKScsICcnKTtcclxuICBpZiAoIXRoZVRpdGFuc1tteU5hbWVdKSB7XHJcbiAgICB2YXIgY29vbGRvd24gPSBhUm93Lm5leHRFbGVtZW50U2libGluZy5jZWxsc1swXS50ZXh0Q29udGVudDtcclxuICAgIHZhciBjb29sVGltZSA9IDA7XHJcbiAgICBpZiAoY29vbGRvd24uaW5kZXhPZigndW50aWwnKSAhPT0gLTEpIHtcclxuICAgICAgY29vbFRpbWUgPSBwYXJzZURhdGVBc1RpbWVzdGFtcChcclxuICAgICAgICBjb29sZG93bi5yZXBsYWNlKCdDb29sZG93biB1bnRpbDogJywgJycpKTtcclxuICAgIH1cclxuICAgIHRoZVRpdGFuc1tteU5hbWVdID0ge1xyXG4gICAgICBjb29sZG93blRleHQ6IGNvb2xkb3duLFxyXG4gICAgICBjb29sVGltZTogY29vbFRpbWUsXHJcbiAgICAgIHNlZW46ICd5ZXMnXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYWRkUm93KHRoZVRpdGFucywgdHJhY2tlclRhYmxlLCB0aXRhbikge1xyXG4gIGlmICh0aGVUaXRhbnNbdGl0YW5dLmNvb2xUaW1lIDwgbm93KSB7cmV0dXJuO31cclxuICB0cmFja2VyVGFibGUuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLFxyXG4gICAgJzx0cj48dGQgY2xhc3M9XCJmc2hDZW50ZXJcIj4nICsgdGl0YW4gKyAnPC90ZD4nICtcclxuICAgICc8dGQgY2xhc3M9XCJmc2hCb2xkIGZzaENlbnRlciBmc2hDb29sZG93blwiPicgK1xyXG4gICAgdGhlVGl0YW5zW3RpdGFuXS5jb29sZG93blRleHQgKyAnPC90ZD48dGQgY2xhc3M9XCJmc2hDZW50ZXJcIj4nICtcclxuICAgIHRoZVRpdGFuc1t0aXRhbl0uc2VlbiArICc8L3RkPjwvdHI+Jyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRpc3BsYXlUcmFja2VyKHBhcmVudFRhYmxlLCB0aGVUaXRhbnMpIHtcclxuICB2YXIgdHJhY2tlclRhYmxlID0gY3JlYXRlVGFibGUoe2NsYXNzTmFtZTogJ2ZzaFRUcmFja2VyJ30pO1xyXG4gIHZhciB0Qm9keSA9IGNyZWF0ZVRCb2R5KHtcclxuICAgIGlubmVySFRNTDogJzx0cj48dGQgY2xhc3M9XCJoZWFkZXIgZnNoQ2VudGVyXCI+VGl0YW48L3RkPicgK1xyXG4gICAgICAnPHRkIGNsYXNzPVwiaGVhZGVyIGZzaENlbnRlclwiPkNvb2xkb3duPC90ZD4nICtcclxuICAgICAgJzx0ZCBjbGFzcz1cImhlYWRlciBmc2hDZW50ZXJcIj5WaXNpYmxlPC90ZD48L3RyPidcclxuICB9KTtcclxuICB0cmFja2VyVGFibGUuYXBwZW5kQ2hpbGQodEJvZHkpO1xyXG4gIE9iamVjdC5rZXlzKHRoZVRpdGFucykuZm9yRWFjaChhZGRSb3cuYmluZChudWxsLCB0aGVUaXRhbnMsIHRCb2R5KSk7XHJcblxyXG4gIHZhciBuZXdSb3cgPSBwYXJlbnRUYWJsZS5pbnNlcnRSb3coNSk7XHJcbiAgdmFyIG5ld0NlbGwgPSBuZXdSb3cuaW5zZXJ0Q2VsbCgtMSk7XHJcbiAgbmV3Q2VsbC5jb2xTcGFuID0gMztcclxuICBuZXdDZWxsLmFwcGVuZENoaWxkKHRyYWNrZXJUYWJsZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZE1pc3NpbmdUaXRhbnNGcm9tT2xkKG9sZFRpdGFucywgbmV3VGl0YW5zKSB7XHJcbiAgaWYgKCFvbGRUaXRhbnMpIHtyZXR1cm47fVxyXG4gIE9iamVjdC5rZXlzKG9sZFRpdGFucykuZm9yRWFjaChmdW5jdGlvbihvbGRUaXRhbikge1xyXG4gICAgaWYgKG5ld1RpdGFuc1tvbGRUaXRhbl0pIHtyZXR1cm47fVxyXG4gICAgaWYgKG9sZFRpdGFuc1tvbGRUaXRhbl0uY29vbFRpbWUgPD0gbm93KSB7cmV0dXJuO31cclxuICAgIG5ld1RpdGFuc1tvbGRUaXRhbl0gPSB7XHJcbiAgICAgIGNvb2xkb3duVGV4dDogb2xkVGl0YW5zW29sZFRpdGFuXS5jb29sZG93blRleHQsXHJcbiAgICAgIGNvb2xUaW1lOiBvbGRUaXRhbnNbb2xkVGl0YW5dLmNvb2xUaW1lLFxyXG4gICAgICBzZWVuOiAnbm8nXHJcbiAgICB9O1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUaXRhblN0cmluZyhndWlsZEtpbGxzLCB0b3RhbEhQLCBjdXJyZW50SFApIHtcclxuICB2YXIgbnVtYmVyT2ZLaWxsc1RvU2VjdXJlID0gTWF0aC5jZWlsKHRvdGFsSFAgLyAyICsgMSk7XHJcbiAgaWYgKGd1aWxkS2lsbHMgPj0gbnVtYmVyT2ZLaWxsc1RvU2VjdXJlKSB7XHJcbiAgICByZXR1cm4gJ1NlY3VyZWQnO1xyXG4gIH1cclxuICBpZiAobnVtYmVyT2ZLaWxsc1RvU2VjdXJlIC0gZ3VpbGRLaWxscyA+IGN1cnJlbnRIUCkge1xyXG4gICAgcmV0dXJuICc8c3BhbiBjbGFzcz1cImZzaFJlZFwiPkNhbm5vdCBTZWN1cmU8L3NwYW4+JztcclxuICB9XHJcbiAgcmV0dXJuICc8c3BhbiBjbGFzcz1cImZzaFJlZFwiPicgK1xyXG4gICAgKG51bWJlck9mS2lsbHNUb1NlY3VyZSAtIGd1aWxkS2lsbHMpICsgJzwvc3Bhbj4gdG8gc2VjdXJlJztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0S2lsbHNQY3QoY3VycmVudE51bWJlck9mS2lsbHMsIGd1aWxkS2lsbHMpIHtcclxuICBpZiAoY3VycmVudE51bWJlck9mS2lsbHMgPT09IDApIHtyZXR1cm4gMDt9XHJcbiAgcmV0dXJuIGd1aWxkS2lsbHMgKiAxMDAgLyBjdXJyZW50TnVtYmVyT2ZLaWxscztcclxufVxyXG5cclxuZnVuY3Rpb24ga2lsbHNTdW1tYXJ5KGFSb3cpIHtcclxuICB2YXIgdGl0YW5IUCA9IGFSb3cuY2VsbHNbMl0udGV4dENvbnRlbnQ7XHJcbiAgaWYgKHRpdGFuSFAuaW5kZXhPZignLScpICE9PSAtMSkge3JldHVybjt9XHJcbiAgdmFyIGd1aWxkS2lsbHMgPSBOdW1iZXIoYVJvdy5jZWxsc1szXS50ZXh0Q29udGVudCk7XHJcbiAgdmFyIHRpdGFuSFBBcnJheSA9IHRpdGFuSFAuc3BsaXQoJy8nKTtcclxuICB2YXIgY3VycmVudEhQID0gTnVtYmVyKHRpdGFuSFBBcnJheVswXSk7XHJcbiAgdmFyIHRvdGFsSFAgPSBOdW1iZXIodGl0YW5IUEFycmF5WzFdKTtcclxuICB2YXIgY3VycmVudE51bWJlck9mS2lsbHMgPSB0b3RhbEhQIC0gY3VycmVudEhQO1xyXG4gIHZhciB0aXRhblN0cmluZyA9IGdldFRpdGFuU3RyaW5nKGd1aWxkS2lsbHMsIHRvdGFsSFAsIGN1cnJlbnRIUCk7XHJcbiAgdmFyIGtpbGxzVG90UGN0ID0gKGd1aWxkS2lsbHMgKiAxMDAgLyB0b3RhbEhQKS50b0ZpeGVkKDIpO1xyXG4gIGFSb3cuY2VsbHNbM10uaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLFxyXG4gICAgJzxicj48c3BhbiBjbGFzcz1cImZzaEJsdWVcIj4gKCcgK1xyXG4gICAgZ2V0S2lsbHNQY3QoY3VycmVudE51bWJlck9mS2lsbHMsIGd1aWxkS2lsbHMpLnRvRml4ZWQoMikgK1xyXG4gICAgJyUgQ3VycmVudCA8YnI+JyArIGtpbGxzVG90UGN0ICsgJyUgVG90YWw8YnI+JyArIHRpdGFuU3RyaW5nICsgJyknKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ290T2xkVGl0YW5zKG9sZFRpdGFucykge1xyXG4gIHZhciB0aXRhblRhYmxlcyA9IHBDQy5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGFibGUnKTtcclxuICBpbmplY3RTY291dHRvd2VyQnVmZkxpbmtzKHRpdGFuVGFibGVzKTtcclxuICB2YXIgdGl0YW5UYWJsZSA9IHRpdGFuVGFibGVzWzFdO1xyXG4gIHZhciBuZXdUaXRhbnMgPSB7fTtcclxuICBmb3IgKHZhciBpID0gMTsgaSA8IHRpdGFuVGFibGUucm93cy5sZW5ndGggLSAxOyBpICs9IDYpIHtcclxuICAgIHZhciBhUm93ID0gdGl0YW5UYWJsZS5yb3dzW2ldO1xyXG4gICAga2lsbHNTdW1tYXJ5KGFSb3cpO1xyXG4gICAgY29vbGRvd25UcmFja2VyKGFSb3csIG5ld1RpdGFucyk7XHJcbiAgfVxyXG4gIGFkZE1pc3NpbmdUaXRhbnNGcm9tT2xkKG9sZFRpdGFucywgbmV3VGl0YW5zKTtcclxuICBkaXNwbGF5VHJhY2tlcih0aXRhblRhYmxlc1swXSwgbmV3VGl0YW5zKTtcclxuICBzZXRGb3JhZ2UoJ2ZzaF90aXRhbnMnLCBuZXdUaXRhbnMpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmplY3RTY291dHRvd2VyKCkge1xyXG4gIGdldEZvcmFnZSgnZnNoX3RpdGFucycpLmRvbmUoZ290T2xkVGl0YW5zKTtcclxufVxyXG4iLCJpbXBvcnQgaW5qZWN0U2NvdXR0b3dlckJ1ZmZMaW5rcyBmcm9tICcuL2luamVjdFNjb3V0dG93ZXJCdWZmTGlua3MnO1xyXG5pbXBvcnQgcmV0cnlBamF4IGZyb20gJy4uL2FqYXgvcmV0cnlBamF4JztcclxuaW1wb3J0IHtjcmVhdGVEb2N1bWVudCwgZmluZE5vZGV9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbmZ1bmN0aW9uIGdldFNjb3V0VG93ZXJEZXRhaWxzKHJlc3BvbnNlVGV4dCkgeyAvLyBMZWdhY3lcclxuICB2YXIgZG9jID0gY3JlYXRlRG9jdW1lbnQocmVzcG9uc2VUZXh0KTtcclxuICBpbmplY3RTY291dHRvd2VyQnVmZkxpbmtzKGRvYy5nZXRFbGVtZW50QnlJZCgncENDJylcclxuICAgIC5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGFibGUnKSk7XHJcbiAgdmFyIHNjb3V0VG93ZXJUYWJsZSA9IGZpbmROb2RlKFxyXG4gICAgJy8vdGFibGVbdGJvZHkvdHIvdGQvaW1nW2NvbnRhaW5zKEBzcmMsXCIvYmFubmVycy9zY291dHRvd2VyLnBuZ1wiKV1dJyxcclxuICAgIGRvYyk7XHJcbiAgaWYgKHNjb3V0VG93ZXJUYWJsZSkge1xyXG4gICAgdmFyIHRpdGFuVGFibGUgPSBmaW5kTm9kZShcclxuICAgICAgJy8vdGFibGVbdGJvZHkvdHIvdGQvaW1nW2NvbnRhaW5zKEBzcmMsXCIvYmFubmVycy90aXRhbmtpbGxsb2cucG5nXCIpXV0nKTtcclxuICAgIHZhciBuZXdSb3cgPSB0aXRhblRhYmxlLmluc2VydFJvdygwKTtcclxuICAgIG5ld1Jvdy5hcHBlbmRDaGlsZChzY291dFRvd2VyVGFibGUucm93c1sxXS5jZWxsc1swXSlcclxuICAgICAgLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgJzxicj48YnI+Jyk7XHJcbiAgICBuZXdSb3cgPSB0aXRhblRhYmxlLmluc2VydFJvdygxKTtcclxuICAgIG5ld1Jvdy5hcHBlbmRDaGlsZChzY291dFRvd2VyVGFibGUucm93c1s4XS5jZWxsc1swXSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmplY3RUaXRhbigpIHsgLy8galF1ZXJ5XHJcbiAgcmV0cnlBamF4KCdpbmRleC5waHA/Y21kPWd1aWxkJnN1YmNtZD1zY291dHRvd2VyJykuZG9uZShnZXRTY291dFRvd2VyRGV0YWlscyk7XHJcbn1cclxuIiwiaW1wb3J0IGNhbGxBcHAgZnJvbSAnLi4vY2FsbEFwcCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBndWlsZFZpZXcoZ3VpbGRJZCkge1xyXG4gIHJldHVybiBjYWxsQXBwKHtjbWQ6ICdndWlsZCcsIHN1YmNtZDogJ3ZpZXcnLCBndWlsZF9pZDogZ3VpbGRJZH0pO1xyXG59XHJcbiIsImltcG9ydCByZWR1Y2VCdWZmQXJyYXkgZnJvbSAnLi9yZWR1Y2VCdWZmQXJyYXknO1xyXG5pbXBvcnQge2NyZWF0ZURvY3VtZW50LCBmYWxsYmFjaywgaW50VmFsdWV9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbmZ1bmN0aW9uIGdldFN0YXQoc3RhdCwgZG9jKSB7IC8vIGpRdWVyeVxyXG4gIC8vICdIaWRkZW4nIHJldHVybnMgTmFOXHJcbiAgcmV0dXJuIGludFZhbHVlKFxyXG4gICAgJChzdGF0LCBkb2MpXHJcbiAgICAgIC5jb250ZW50cygpXHJcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24oaSwgZSkge1xyXG4gICAgICAgIHJldHVybiBlLm5vZGVUeXBlID09PSAzO1xyXG4gICAgICB9KVswXS5ub2RlVmFsdWVcclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRCdWZmTGV2ZWwoZG9jLCBidWZmKSB7IC8vIGpRdWVyeVxyXG4gIHZhciBoYXNCdWZmID0gJCgnaW1nLnRpcC1zdGF0aWNbZGF0YS10aXBwZWQqPVwiYj4nICsgYnVmZiArICc8L2JcIl0nLCBkb2MpXHJcbiAgICAuZGF0YSgndGlwcGVkJyk7XHJcbiAgLy8gdmFyIHJlID0gbmV3IFJlZ0V4cCgnPC9iPiBcXFxcKExldmVsOiAoXFxcXGQrKVxcXFwpJyk7XHJcbiAgdmFyIHRlc3QgPSAvPFxcL2I+IFxcKExldmVsOiAoXFxkKylcXCkvLmV4ZWMoaGFzQnVmZik7XHJcbiAgaWYgKHRlc3QpIHtyZXR1cm4gaW50VmFsdWUodGVzdFsxXSk7fVxyXG4gIHJldHVybiAwO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRCb251cyhzdGF0LCBkb2MpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIHRhcmdldCA9ICQoc3RhdCwgZG9jKTtcclxuICB2YXIgY2hpbGRyZW4gPSB0YXJnZXQuY2hpbGRyZW4oKTtcclxuICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XHJcbiAgICBjaGlsZHJlbiA9IHRhcmdldC5uZXh0KCk7XHJcbiAgfVxyXG4gIHJldHVybiBpbnRWYWx1ZShjaGlsZHJlbi50ZXh0KCkuc2xpY2UoMiwgLTEpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2xvYWtHdWVzcyhib251cywgbGV2ZWwpIHtcclxuICBpZiAoYm9udXMgPiBsZXZlbCAqIDEwIHx8XHJcbiAgICAgIGJvbnVzIDwgbGV2ZWwpIHtcclxuICAgIHJldHVybiBib251cztcclxuICB9XHJcbiAgcmV0dXJuIGxldmVsICogMTA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUZvckNsb2FrKG9iaikge1xyXG4gIG9iai5hdHRhY2tWYWx1ZSA9IGNsb2FrR3Vlc3Mob2JqLmF0dGFja0JvbnVzLCBvYmoubGV2ZWxWYWx1ZSk7XHJcbiAgb2JqLmRlZmVuc2VWYWx1ZSA9IGNsb2FrR3Vlc3Mob2JqLmRlZmVuc2VCb251cywgb2JqLmxldmVsVmFsdWUpO1xyXG4gIG9iai5hcm1vclZhbHVlID0gY2xvYWtHdWVzcyhvYmouYXJtb3JCb251cywgb2JqLmxldmVsVmFsdWUpO1xyXG4gIG9iai5kYW1hZ2VWYWx1ZSA9IGNsb2FrR3Vlc3Mob2JqLmRhbWFnZUJvbnVzLCBvYmoubGV2ZWxWYWx1ZSk7XHJcbiAgb2JqLmhwVmFsdWUgPSBvYmouaHBCb251cztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBsYXllckRhdGFTdHJpbmcocmVzcG9uc2VUZXh0KSB7XHJcbiAgdmFyIGRvYyA9IGNyZWF0ZURvY3VtZW50KHJlc3BvbnNlVGV4dCk7XHJcbiAgdmFyIG9iaiA9IHtcclxuICAgIGxldmVsVmFsdWU6IGdldFN0YXQoJyNzdGF0LXZsJywgZG9jKSxcclxuICAgIGF0dGFja1ZhbHVlOiBnZXRTdGF0KCcjc3RhdC1hdHRhY2snLCBkb2MpLFxyXG4gICAgYXR0YWNrQm9udXM6IGdldEJvbnVzKCcjc3RhdC1hdHRhY2snLCBkb2MpLFxyXG4gICAgZGVmZW5zZVZhbHVlOiBnZXRTdGF0KCcjc3RhdC1kZWZlbnNlJywgZG9jKSxcclxuICAgIGRlZmVuc2VCb251czogZ2V0Qm9udXMoJyNzdGF0LWRlZmVuc2UnLCBkb2MpLFxyXG4gICAgYXJtb3JWYWx1ZTogZ2V0U3RhdCgnI3N0YXQtYXJtb3InLCBkb2MpLFxyXG4gICAgYXJtb3JCb251czogZ2V0Qm9udXMoJyNzdGF0LWFybW9yJywgZG9jKSxcclxuICAgIGRhbWFnZVZhbHVlOiBnZXRTdGF0KCcjc3RhdC1kYW1hZ2UnLCBkb2MpLFxyXG4gICAgZGFtYWdlQm9udXM6IGdldEJvbnVzKCcjc3RhdC1kYW1hZ2UnLCBkb2MpLFxyXG4gICAgaHBWYWx1ZTogZ2V0U3RhdCgnI3N0YXQtaHAnLCBkb2MpLFxyXG4gICAgaHBCb251czogZ2V0Qm9udXMoJyNzdGF0LWhwJywgZG9jKSxcclxuICAgIGtpbGxTdHJlYWtWYWx1ZTogZ2V0U3RhdCgnI3N0YXQta2lsbC1zdHJlYWsnLCBkb2MpLFxyXG4gICAgLy8gZ2V0IGJ1ZmZzIGhlcmUgbGF0ZXIgLi4uIERELCBDQSwgREMsIENvbnN0aXR1dGlvbiwgZXRjXHJcbiAgICBjb3VudGVyQXR0YWNrTGV2ZWw6IGdldEJ1ZmZMZXZlbChkb2MsICdDb3VudGVyIEF0dGFjaycpLFxyXG4gICAgZG91YmxlckxldmVsOiBnZXRCdWZmTGV2ZWwoZG9jLCAnRG91YmxlcicpLFxyXG4gICAgZGVhdGhEZWFsZXJMZXZlbDogZ2V0QnVmZkxldmVsKGRvYywgJ0RlYXRoIERlYWxlcicpLFxyXG4gICAgZGFya0N1cnNlTGV2ZWw6IGdldEJ1ZmZMZXZlbChkb2MsICdEYXJrIEN1cnNlJyksXHJcbiAgICBob2x5RmxhbWVMZXZlbDogZ2V0QnVmZkxldmVsKGRvYywgJ0hvbHkgRmxhbWUnKSxcclxuICAgIGNvbnN0aXR1dGlvbkxldmVsOiBnZXRCdWZmTGV2ZWwoZG9jLCAnQ29uc3RpdHV0aW9uJyksXHJcbiAgICBzYW5jdHVhcnlMZXZlbDogZ2V0QnVmZkxldmVsKGRvYywgJ1NhbmN0dWFyeScpLFxyXG4gICAgZmxpbmNoTGV2ZWw6IGdldEJ1ZmZMZXZlbChkb2MsICdGbGluY2gnKSxcclxuICAgIG5pZ2h0bWFyZVZpc2FnZUxldmVsOiBnZXRCdWZmTGV2ZWwoZG9jLCAnTmlnaHRtYXJlIFZpc2FnZScpLFxyXG4gICAgc3VwZXJFbGl0ZVNsYXllckxldmVsOiBnZXRCdWZmTGV2ZWwoZG9jLCAnU3VwZXIgRWxpdGUgU2xheWVyJyksXHJcbiAgICBmb3J0aXR1ZGVMZXZlbDogZ2V0QnVmZkxldmVsKGRvYywgJ0ZvcnRpdHVkZScpLFxyXG4gICAgY2hpU3RyaWtlTGV2ZWw6IGdldEJ1ZmZMZXZlbChkb2MsICdDaGkgU3RyaWtlJyksXHJcbiAgICB0ZXJyb3JpemVMZXZlbDogZ2V0QnVmZkxldmVsKGRvYywgJ1RlcnJvcml6ZScpLFxyXG4gICAgYmFycmljYWRlTGV2ZWw6IGdldEJ1ZmZMZXZlbChkb2MsICdCYXJyaWNhZGUnKSxcclxuICAgIHJlaWduT2ZUZXJyb3JMZXZlbDogZ2V0QnVmZkxldmVsKGRvYywgJ1JlaWduIE9mIFRlcnJvcicpLFxyXG4gICAgYW5jaG9yZWRMZXZlbDogZ2V0QnVmZkxldmVsKGRvYywgJ0FuY2hvcmVkJyksXHJcbiAgICBzZXZlcmVDb25kaXRpb25MZXZlbDogZ2V0QnVmZkxldmVsKGRvYywgJ1NldmVyZSBDb25kaXRpb24nKSxcclxuICAgIGVudHJlbmNoTGV2ZWw6IGdldEJ1ZmZMZXZlbChkb2MsICdFbnRyZW5jaCcpLFxyXG4gICAgY2xvYWtMZXZlbDogZ2V0QnVmZkxldmVsKGRvYywgJ0Nsb2FrJylcclxuICB9O1xyXG4gIG9iai5zdXBlckVsaXRlU2xheWVyTXVsdGlwbGllciA9IE1hdGgucm91bmQoMC4wMDIgKlxyXG4gICAgb2JqLnN1cGVyRWxpdGVTbGF5ZXJMZXZlbCAqIDEwMCkgLyAxMDA7XHJcblxyXG4gIGlmIChvYmouY2xvYWtMZXZlbCA9PT0gMCB8fFxyXG4gICAgICB0eXBlb2Ygb2JqLmF0dGFja1ZhbHVlID09PSAnbnVtYmVyJyAmJlxyXG4gICAgICAhaXNOYU4ob2JqLmF0dGFja1ZhbHVlKSkge1xyXG4gICAgcmV0dXJuIG9iajtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUZvckNsb2FrKG9iaik7XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QnVmZkx2bChidWZmcywgYnVmZikge1xyXG4gIHJldHVybiBmYWxsYmFjayhidWZmc1tidWZmXSwgMCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwbGF5ZXJEYXRhT2JqZWN0KGpzb24pIHtcclxuICB2YXIgYnVmZnMgPSByZWR1Y2VCdWZmQXJyYXkoanNvbi5fc2tpbGxzKTtcclxuICB2YXIgb2JqID0ge1xyXG4gICAgbGV2ZWxWYWx1ZToganNvbi5sZXZlbCxcclxuICAgIGF0dGFja1ZhbHVlOiBqc29uLmF0dGFjayxcclxuICAgIGF0dGFja0JvbnVzOiBqc29uLmJvbnVzX2F0dGFjayxcclxuICAgIGRlZmVuc2VWYWx1ZToganNvbi5kZWZlbnNlLFxyXG4gICAgZGVmZW5zZUJvbnVzOiBqc29uLmJvbnVzX2RlZmVuc2UsXHJcbiAgICBhcm1vclZhbHVlOiBqc29uLmFybW9yLFxyXG4gICAgYXJtb3JCb251czoganNvbi5ib251c19hcm1vcixcclxuICAgIGRhbWFnZVZhbHVlOiBqc29uLmRhbWFnZSxcclxuICAgIGRhbWFnZUJvbnVzOiBqc29uLmJvbnVzX2RhbWFnZSxcclxuICAgIGhwVmFsdWU6IGpzb24uaHAsXHJcbiAgICBocEJvbnVzOiBqc29uLmJvbnVzX2hwLFxyXG4gICAga2lsbFN0cmVha1ZhbHVlOiBpbnRWYWx1ZShqc29uLmtpbGxzdHJlYWspLFxyXG4gICAgLy8gZ2V0IGJ1ZmZzIGhlcmUgbGF0ZXIgLi4uIERELCBDQSwgREMsIENvbnN0aXR1dGlvbiwgZXRjXHJcbiAgICBjb3VudGVyQXR0YWNrTGV2ZWw6IGdldEJ1ZmZMdmwoYnVmZnMsICdDb3VudGVyIEF0dGFjaycpLFxyXG4gICAgZG91YmxlckxldmVsOiBnZXRCdWZmTHZsKGJ1ZmZzLCAnRG91YmxlcicpLFxyXG4gICAgZGVhdGhEZWFsZXJMZXZlbDogZ2V0QnVmZkx2bChidWZmcywgJ0RlYXRoIERlYWxlcicpLFxyXG4gICAgZGFya0N1cnNlTGV2ZWw6IGdldEJ1ZmZMdmwoYnVmZnMsICdEYXJrIEN1cnNlJyksXHJcbiAgICBob2x5RmxhbWVMZXZlbDogZ2V0QnVmZkx2bChidWZmcywgJ0hvbHkgRmxhbWUnKSxcclxuICAgIGNvbnN0aXR1dGlvbkxldmVsOiBnZXRCdWZmTHZsKGJ1ZmZzLCAnQ29uc3RpdHV0aW9uJyksXHJcbiAgICBzYW5jdHVhcnlMZXZlbDogZ2V0QnVmZkx2bChidWZmcywgJ1NhbmN0dWFyeScpLFxyXG4gICAgZmxpbmNoTGV2ZWw6IGdldEJ1ZmZMdmwoYnVmZnMsICdGbGluY2gnKSxcclxuICAgIG5pZ2h0bWFyZVZpc2FnZUxldmVsOiBnZXRCdWZmTHZsKGJ1ZmZzLCAnTmlnaHRtYXJlIFZpc2FnZScpLFxyXG4gICAgc3VwZXJFbGl0ZVNsYXllckxldmVsOiBnZXRCdWZmTHZsKGJ1ZmZzLCAnU3VwZXIgRWxpdGUgU2xheWVyJyksXHJcbiAgICBmb3J0aXR1ZGVMZXZlbDogZ2V0QnVmZkx2bChidWZmcywgJ0ZvcnRpdHVkZScpLFxyXG4gICAgY2hpU3RyaWtlTGV2ZWw6IGdldEJ1ZmZMdmwoYnVmZnMsICdDaGkgU3RyaWtlJyksXHJcbiAgICB0ZXJyb3JpemVMZXZlbDogZ2V0QnVmZkx2bChidWZmcywgJ1RlcnJvcml6ZScpLFxyXG4gICAgYmFycmljYWRlTGV2ZWw6IGdldEJ1ZmZMdmwoYnVmZnMsICdCYXJyaWNhZGUnKSxcclxuICAgIHJlaWduT2ZUZXJyb3JMZXZlbDogZ2V0QnVmZkx2bChidWZmcywgJ1JlaWduIE9mIFRlcnJvcicpLFxyXG4gICAgYW5jaG9yZWRMZXZlbDogZ2V0QnVmZkx2bChidWZmcywgJ0FuY2hvcmVkJyksXHJcbiAgICBzZXZlcmVDb25kaXRpb25MZXZlbDogZ2V0QnVmZkx2bChidWZmcywgJ1NldmVyZSBDb25kaXRpb24nKSxcclxuICAgIGVudHJlbmNoTGV2ZWw6IGdldEJ1ZmZMdmwoYnVmZnMsICdFbnRyZW5jaCcpLFxyXG4gICAgY2xvYWtMZXZlbDogZ2V0QnVmZkx2bChidWZmcywgJ0Nsb2FrJylcclxuICB9O1xyXG4gIGlmIChvYmouY2xvYWtMZXZlbCAhPT0gMCkge3VwZGF0ZUZvckNsb2FrKG9iaik7fVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuIiwiaW1wb3J0IGdldFByb2ZpbGUgZnJvbSAnLi4vYWpheC9nZXRQcm9maWxlJztcclxuaW1wb3J0IGd1aWxkVmlldyBmcm9tICcuLi9hcHAvZ3VpbGQvdmlldyc7XHJcbmltcG9ydCBteVN0YXRzIGZyb20gJy4uL2FqYXgvbXlTdGF0cyc7XHJcbmltcG9ydCB7bm93U2Vjc30gZnJvbSAnLi4vc3VwcG9ydC9kYXRhT2JqJztcclxuaW1wb3J0IHtwbGF5ZXJEYXRhT2JqZWN0fSBmcm9tICcuLi9jb21tb24vY29tbW9uJztcclxuaW1wb3J0IHtjcmVhdGVJbnB1dCwgY3JlYXRlU3Bhbn0gZnJvbSAnLi4vY29tbW9uL2NFbGVtZW50JztcclxuaW1wb3J0IHtnZXRWYWx1ZSwgaW1hZ2VTZXJ2ZXJ9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtvbmxpbmVEb3QsIHBDQ30gZnJvbSAnLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5cclxudmFyIGhpZ2hsaWdodFBsYXllcnNOZWFyTXlMdmw7XHJcbnZhciBsdmxEaWZmVG9IaWdobGlnaHQ7XHJcbnZhciBteVZMO1xyXG52YXIgc3Bpbm5lcjtcclxudmFyIHZhbGlkUHZQID0gbm93U2VjcyAtIDYwNDgwMDtcclxudmFyIGd1aWxkcztcclxuXHJcbmZ1bmN0aW9uIGRvT25saW5lRG90KGFUYWJsZSwgZGF0YSkge1xyXG4gIGFUYWJsZS5yb3dzWzBdLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJyxcclxuICAgICc8dGQ+JyArIG9ubGluZURvdCh7bGFzdF9sb2dpbjogZGF0YS5sYXN0X2xvZ2lufSkgKyAnPC90ZD4nKTtcclxuICBpZiAobXlWTCAmJlxyXG4gICAgICBkYXRhLmxhc3RfbG9naW4gPj0gdmFsaWRQdlAgJiZcclxuICAgICAgZGF0YS52aXJ0dWFsX2xldmVsID4gbXlWTCAtIGx2bERpZmZUb0hpZ2hsaWdodCAmJlxyXG4gICAgICBkYXRhLnZpcnR1YWxfbGV2ZWwgPCBteVZMICsgbHZsRGlmZlRvSGlnaGxpZ2h0KSB7XHJcbiAgICBhVGFibGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2x2bEhpZ2hsaWdodCcpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VQbGF5ZXIoYVRhYmxlLCBkYXRhLCBqcVhocikge1xyXG4gIGlmIChkYXRhKSB7XHJcbiAgICBkb09ubGluZURvdChhVGFibGUsIGRhdGEpO1xyXG4gICAgLy8jaWYgX0RFViAgLy8gIGdldCBjbG9ha2VkIHBsYXllcnNcclxuICAgIHZhciBkZWZlbmRlciA9IHBsYXllckRhdGFPYmplY3QoZGF0YSk7XHJcbiAgICBpZiAoZGVmZW5kZXIuY2xvYWtMZXZlbCAhPT0gMCkge2NvbnNvbGUubG9nKCdDbG9ha2VkIFBsYXllcicsIGRhdGEpO30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXHJcbiAgICAvLyNlbmRpZlxyXG4gIH0gZWxzZSB7XHJcbiAgICBhVGFibGUucm93c1swXS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsXHJcbiAgICAgICc8dGQgY2xhc3M9XCJmc2hCa1JlZFwiPicgKyBqcVhoci5zdGF0dXMgKyAnPC90ZD4nKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZhaWxGaWx0ZXIoanFYaHIpIHtcclxuICByZXR1cm4gJC5EZWZlcnJlZCgpLnJlc29sdmUobnVsbCwganFYaHIpLnByb21pc2UoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkUGxheWVyT2JqZWN0VG9HdWlsZChndWlsZElkLCBvYmopIHtcclxuICBpZiAoZ3VpbGRzW2d1aWxkSWRdKSB7XHJcbiAgICBndWlsZHNbZ3VpbGRJZF0ucHVzaChvYmopO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBndWlsZHNbZ3VpbGRJZF0gPSBbb2JqXTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFBsYXllclRvR3VpbGQodGJsLCBwbGF5ZXJOYW1lKSB7XHJcbiAgdmFyIGd1aWxkSFJlZiA9IHRibC5yb3dzWzBdLmNlbGxzWzBdLmZpcnN0RWxlbWVudENoaWxkLmhyZWY7XHJcbiAgdmFyIGd1aWxkSWQgPSAvZ3VpbGRfaWQ9KFxcZCspLy5leGVjKGd1aWxkSFJlZilbMV07XHJcbiAgYWRkUGxheWVyT2JqZWN0VG9HdWlsZChndWlsZElkLCB7ZG9tOiB0YmwsIHBsYXllcjogcGxheWVyTmFtZX0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdGFja0FqYXgocHJtLCBwbGF5ZXJOYW1lLCB0YmwpIHtcclxuICBwcm0ucHVzaChnZXRQcm9maWxlKHBsYXllck5hbWUpXHJcbiAgICAucGlwZShudWxsLCBmYWlsRmlsdGVyKVxyXG4gICAgLmRvbmUocGFyc2VQbGF5ZXIuYmluZChudWxsLCB0YmwpKVxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlR3VpbGQoZGF0YSkge1xyXG4gIHZhciBndWlsZElkID0gZGF0YS5yLmlkO1xyXG4gIGRhdGEuci5tZW1iZXJzLmZvckVhY2goZnVuY3Rpb24obWVtYmVyKSB7XHJcbiAgICBndWlsZHNbZ3VpbGRJZF0uZm9yRWFjaChmdW5jdGlvbihwbGF5ZXIpIHtcclxuICAgICAgaWYgKG1lbWJlci5uYW1lID09PSBwbGF5ZXIucGxheWVyKSB7XHJcbiAgICAgICAgZG9PbmxpbmVEb3QocGxheWVyLmRvbSwge1xyXG4gICAgICAgICAgbGFzdF9sb2dpbjogKG5vd1NlY3MgLSBtZW1iZXIubGFzdF9hY3Rpdml0eSkudG9TdHJpbmcoKSxcclxuICAgICAgICAgIHZpcnR1YWxfbGV2ZWw6IG1lbWJlci52bFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZE9ubGluZVBsYXllcnMoKSB7IC8vIGpRdWVyeVxyXG4gIHZhciBzb21lVGFibGVzID0gcENDLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0YWJsZScpO1xyXG4gIHZhciBwcm0gPSBbXTtcclxuICBndWlsZHMgPSB7fTtcclxuICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzb21lVGFibGVzLCA0KS5mb3JFYWNoKGZ1bmN0aW9uKHRibCkge1xyXG4gICAgdmFyIHBsYXllck5hbWUgPSB0YmwudGV4dENvbnRlbnQudHJpbSgpO1xyXG4gICAgaWYgKHRibC5yb3dzWzBdLmNlbGxzWzBdLmZpcnN0RWxlbWVudENoaWxkKSB7XHJcbiAgICAgIGFkZFBsYXllclRvR3VpbGQodGJsLCBwbGF5ZXJOYW1lKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN0YWNrQWpheChwcm0sIHBsYXllck5hbWUsIHRibCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgT2JqZWN0LmtleXMoZ3VpbGRzKS5mb3JFYWNoKGZ1bmN0aW9uKGd1aWxkSWQpIHtcclxuICAgIGlmIChndWlsZHNbZ3VpbGRJZF0ubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIHN0YWNrQWpheChwcm0sIGd1aWxkc1tndWlsZElkXVswXS5wbGF5ZXIsIGd1aWxkc1tndWlsZElkXVswXS5kb20pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZ3VpbGRWaWV3KGd1aWxkSWQpLmRvbmUocGFyc2VHdWlsZCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgJC53aGVuLmFwcGx5KCQsIHBybSkuZG9uZShmdW5jdGlvbigpIHtcclxuICAgIHNwaW5uZXIuY2xhc3NMaXN0LmFkZCgnZnNoSGlkZScpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnb3RNeVZsKGRhdGEpIHtcclxuICBteVZMID0gZGF0YS52aXJ0dWFsX2xldmVsO1xyXG4gIGx2bERpZmZUb0hpZ2hsaWdodCA9IDExO1xyXG4gIGlmIChteVZMIDw9IDIwNSkge2x2bERpZmZUb0hpZ2hsaWdodCA9IDY7fVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRNeVZMKGUpIHsgLy8galF1ZXJ5XHJcbiAgJChlLnRhcmdldCkucXRpcCgnaGlkZScpO1xyXG4gIHNwaW5uZXIgPSBjcmVhdGVTcGFuKHtcclxuICAgIGNsYXNzTmFtZTogJ2ZzaEN1cnZlQnRuIGZzaFRvcExpc3RTcGlubmVyJyxcclxuICAgIHN0eWxlOiB7XHJcbiAgICAgIGJhY2tncm91bmRJbWFnZTogJ3VybChcXCcnICsgaW1hZ2VTZXJ2ZXIgK1xyXG4gICAgICAgICcvd29ybGQvYWN0aW9uTG9hZGluZ1NwaW5uZXIuZ2lmXFwnKSdcclxuICAgIH1cclxuICB9KTtcclxuICBlLnRhcmdldC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChzcGlubmVyLCBlLnRhcmdldCk7XHJcbiAgaWYgKGhpZ2hsaWdodFBsYXllcnNOZWFyTXlMdmwpIHtcclxuICAgIG15U3RhdHMoZmFsc2UpLmRvbmUoZ290TXlWbCkuZG9uZShmaW5kT25saW5lUGxheWVycyk7XHJcbiAgfSBlbHNlIHtmaW5kT25saW5lUGxheWVycygpO31cclxufVxyXG5cclxuZnVuY3Rpb24gbG9va3NMaWtlVG9wUmF0ZWQoKSB7XHJcbiAgaGlnaGxpZ2h0UGxheWVyc05lYXJNeUx2bCA9XHJcbiAgICBnZXRWYWx1ZSgnaGlnaGxpZ2h0UGxheWVyc05lYXJNeUx2bCcpO1xyXG4gIHZhciB0aGVDZWxsID0gcENDLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdURCcpWzBdO1xyXG4gIHRoZUNlbGwuZmlyc3RFbGVtZW50Q2hpbGQuY2xhc3NOYW1lID0gJ2ZzaFRvcExpc3RXcmFwJztcclxuICB2YXIgZmluZEJ0biA9IGNyZWF0ZUlucHV0KHtcclxuICAgIGlkOiAnZnNoRmluZE9ubGluZVBsYXllcnMnLFxyXG4gICAgY2xhc3NOYW1lOiAnY3VzdG9tYnV0dG9uIHRpcC1zdGF0aWMnLFxyXG4gICAgdHlwZTogJ2J1dHRvbicsXHJcbiAgICB2YWx1ZTogJ0ZpbmQgT25saW5lIFBsYXllcnMnLFxyXG4gICAgZGF0YXNldDoge1xyXG4gICAgICB0aXBwZWQ6ICdGZXRjaCB0aGUgb25saW5lIHN0YXR1cyBvZiB0aGUgJyArXHJcbiAgICAgICAgJ3RvcCAyNTAgcGxheWVycyAod2FybmluZyAuLi4gdGFrZXMgYSBmZXcgc2Vjb25kcykuJ1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHRoZUNlbGwuaW5zZXJ0QmVmb3JlKGZpbmRCdG4sIHRoZUNlbGwuZmlyc3RFbGVtZW50Q2hpbGQpO1xyXG4gIGZpbmRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBnZXRNeVZMKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0VG9wUmF0ZWQoKSB7XHJcbiAgaWYgKHBDQyAmJlxyXG4gICAgICBwQ0MuZmlyc3RFbGVtZW50Q2hpbGQgJiZcclxuICAgICAgcENDLmZpcnN0RWxlbWVudENoaWxkLnJvd3MgJiZcclxuICAgICAgcENDLmZpcnN0RWxlbWVudENoaWxkLnJvd3MubGVuZ3RoID4gMiAmJlxyXG4gICAgICBwQ0MuZmlyc3RFbGVtZW50Q2hpbGQucm93c1sxXS50ZXh0Q29udGVudFxyXG4gICAgICAgIC5pbmRleE9mKCdMYXN0IFVwZGF0ZWQnKSA9PT0gMCkge2xvb2tzTGlrZVRvcFJhdGVkKCk7fVxyXG59XHJcbiIsImltcG9ydCBhZGQgZnJvbSAnLi9zdXBwb3J0L3Rhc2snO1xyXG5pbXBvcnQgY2FsZiBmcm9tICcuL3N1cHBvcnQvY2FsZic7XHJcbmltcG9ydCBnZXRJbnZlbnRvcnlCeUlkIGZyb20gJy4vYWpheC9nZXRJbnZlbnRvcnlCeUlkJztcclxuaW1wb3J0IHtjcmVhdGVEaXYsIGNyZWF0ZVRyfSBmcm9tICcuL2NvbW1vbi9jRWxlbWVudCc7XHJcbmltcG9ydCB7ZmFsbGJhY2ssIGdldFZhbHVlfSBmcm9tICcuL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHt0aW1lLCB0aW1lRW5kfSBmcm9tICcuL3N1cHBvcnQvZGVidWcnO1xyXG5cclxuZnVuY3Rpb24gZ2V0SXRlbURpdigpIHtcclxuICB2YXIgaXRlbURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpdGVtLWRpdicpO1xyXG4gIGlmICghaXRlbURpdikge1xyXG4gICAgaXRlbURpdiA9IGNyZWF0ZURpdih7aWQ6ICdpdGVtLWRpdicsIGNsYXNzTmFtZTogJ2l0ZW1EaXYnfSk7XHJcbiAgICB2YXIgaXRlbUxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaXRlbS1saXN0Jyk7XHJcbiAgICB2YXIgb2xkSXRlbXMgPSBpdGVtTGlzdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGFibGUnKTtcclxuICAgIHdoaWxlIChvbGRJdGVtcy5sZW5ndGgpIHtcclxuICAgICAgb2xkSXRlbXNbMF0uY2xhc3NMaXN0LmFkZCgnZnNoQmxvY2snKTtcclxuICAgICAgaXRlbURpdi5hcHBlbmRDaGlsZChvbGRJdGVtc1swXSk7XHJcbiAgICB9XHJcbiAgICBpdGVtTGlzdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShpdGVtRGl2LCBpdGVtTGlzdCk7XHJcbiAgfVxyXG4gIHJldHVybiBpdGVtRGl2O1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb0hpZGVGb2xkZXIoZXZ0KSB7XHJcbiAgdmFyIGZvbGRlcmlkID0gZXZ0LnRhcmdldC5pZDtcclxuICB2YXIgaXRlbURpdiA9IGdldEl0ZW1EaXYoKTtcclxuICB2YXIgaXRlbXMgPSBpdGVtRGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0YWJsZScpO1xyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoaXRlbXMsIGZ1bmN0aW9uKGVsKSB7XHJcbiAgICBlbC5maXJzdEVsZW1lbnRDaGlsZC5sYXN0RWxlbWVudENoaWxkLmZpcnN0RWxlbWVudENoaWxkXHJcbiAgICAgIC5maXJzdEVsZW1lbnRDaGlsZC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICB2YXIgaGlkZGVuID0gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdmc2hIaWRlJyk7XHJcbiAgICB2YXIgYWxsID0gZm9sZGVyaWQgPT09ICdmb2xkZXJpZDAnO1xyXG4gICAgdmFyIGhhc0ZvbGRlciA9IGVsLmNsYXNzTGlzdC5jb250YWlucyhmb2xkZXJpZCk7XHJcbiAgICBpZiAoaGlkZGVuICYmIGZhbGxiYWNrKGFsbCwgaGFzRm9sZGVyKSkge1xyXG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdmc2hIaWRlJyk7XHJcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2ZzaEJsb2NrJyk7IC8vIHNob3coKVxyXG4gICAgfVxyXG4gICAgaWYgKCFoaWRkZW4gJiYgIWFsbCAmJiAhaGFzRm9sZGVyKSB7XHJcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZzaEJsb2NrJyk7XHJcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2ZzaEhpZGUnKTsgLy8gaGlkZSgpXHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhpZGVGb2xkZXIoZXZ0KSB7XHJcbiAgaWYgKGV2dC50YXJnZXQubm9kZU5hbWUgPT09ICdTUEFOJyAmJlxyXG4gICAgICBldnQudGFyZ2V0LmlkLmluZGV4T2YoJ2ZvbGRlcmlkJykgIT09IC0xKSB7ZG9IaWRlRm9sZGVyKGV2dCk7fVxyXG59XHJcblxyXG5mdW5jdGlvbiBkb0ZvbGRlckhlYWRlcnMoZm9sZGVycykge1xyXG4gIHZhciBmb2xkZXJDZWxsID0gJzx0ZCBjb2xzcGFuPTY+JztcclxuICAvLyBhcHBlbmQgbWFpbiBmb2xkZXJcclxuICBmb2xkZXJDZWxsICs9ICc8c3BhbiBpZD1cImZvbGRlcmlkMFwiIGNsYXNzPVwiZnNoTGlua1wiIGZpZD0wPkFsbDwvc3Bhbj4nICtcclxuICAgICcgJmVuc3A7PHNwYW4gaWQ9XCJmb2xkZXJpZC0xXCIgY2xhc3M9XCJmc2hMaW5rXCIgZmlkPVwiLTFcIj5NYWluPC9zcGFuPic7XHJcbiAgT2JqZWN0LmtleXMoZm9sZGVycykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcclxuICAgIGZvbGRlckNlbGwgKz0gJyAmZW5zcDs8c3BhbiBpZD1cImZvbGRlcmlkJyArIGtleSArXHJcbiAgICAgICdcIiBjbGFzcz1cImZzaExpbmsgZnNoTm9XcmFwXCIgZmlkPScgKyBrZXkgKyAnPicgK1xyXG4gICAgICBmb2xkZXJzW2tleV0gKyAnPC9zcGFuPiAnO1xyXG4gIH0pO1xyXG4gIHZhciBmb2xkZXJzUm93ID0gY3JlYXRlVHIoe1xyXG4gICAgaWQ6ICdmc2hGb2xkZXJTZWxlY3QnLFxyXG4gICAgaW5uZXJIVE1MOiBmb2xkZXJDZWxsXHJcbiAgfSk7XHJcbiAgZm9sZGVyc1Jvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhpZGVGb2xkZXIpO1xyXG4gIHZhciBtdWx0aXBsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmc2hTZWxlY3RNdWx0aXBsZScpO1xyXG4gIG11bHRpcGxlLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJlbmQnLCAnPHRyIGlkPVwiZnNoU2hvd1NUc1wiPicgK1xyXG4gICAgJzx0ZCBhbGlnbj1cImNlbnRlclwiIGNvbHNwYW49Nj4nICtcclxuICAgICc8bGFiZWw+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwiaXRlbXNJblN0XCIgY2hlY2tlZD4gJyArXHJcbiAgICAnU2VsZWN0IGl0ZW1zIGluIFNUPC9sYWJlbD48L3RkPjwvdHI+Jyk7XHJcbiAgbXVsdGlwbGUuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmVuZCcsIGZvbGRlcnNSb3cpO1xyXG59XHJcblxyXG52YXIgaW52SXRlbXM7XHJcblxyXG5mdW5jdGlvbiBzdENvbG9yKGVsLCBpdGVtKSB7XHJcbiAgaWYgKGl0ZW0uaXNfaW5fc3QpIHtcclxuICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2lzSW5TVCcpO1xyXG4gIH0gZWxzZSB7ZWwuY2xhc3NMaXN0LmFkZCgndHJhZGVJdGVtTWFyZ2luJyk7fVxyXG59XHJcblxyXG5mdW5jdGlvbiBmb3JFYWNoSW52SXRlbShlbCkge1xyXG4gIHZhciBjaGVja2JveCA9IGVsLmZpcnN0RWxlbWVudENoaWxkLmxhc3RFbGVtZW50Q2hpbGQuZmlyc3RFbGVtZW50Q2hpbGRcclxuICAgIC5maXJzdEVsZW1lbnRDaGlsZDtcclxuICB2YXIgaXRlbSA9IGludkl0ZW1zW2NoZWNrYm94LmdldEF0dHJpYnV0ZSgndmFsdWUnKV07XHJcbiAgZWwuY2xhc3NMaXN0LmFkZCgnZm9sZGVyaWQnICsgaXRlbS5mb2xkZXJfaWQpO1xyXG4gIGlmIChpbnZJdGVtcy5mc2hIYXNTVCkge3N0Q29sb3IoZWwsIGl0ZW0pO31cclxuICBjaGVja2JveC5jbGFzc0xpc3QuYWRkKCdpdGVtaWQnICsgaXRlbS5pdGVtX2lkKTtcclxuICBjaGVja2JveC5jbGFzc0xpc3QuYWRkKCdpdGVtdHlwZScgKyBpdGVtLnR5cGUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzVHJhZGUoZGF0YSkge1xyXG5cclxuICB0aW1lKCd0cmFkZS5wcm9jZXNzVHJhZGUnKTtcclxuXHJcbiAgaW52SXRlbXMgPSBkYXRhLml0ZW1zO1xyXG4gIC8qIEhpZ2hsaWdodCBpdGVtcyBpbiBTVCAqL1xyXG4gIHZhciBub2RlTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpdGVtLWxpc3QnKVxyXG4gICAgLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0YWJsZScpO1xyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobm9kZUxpc3QsIGZvckVhY2hJbnZJdGVtKTtcclxuICBkb0ZvbGRlckhlYWRlcnMoZGF0YS5mb2xkZXJzKTtcclxuXHJcbiAgdGltZUVuZCgndHJhZGUucHJvY2Vzc1RyYWRlJyk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBpbnYoKSB7IC8vIGpRdWVyeVxyXG4gIGdldEludmVudG9yeUJ5SWQoKS5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgIGFkZCgzLCBwcm9jZXNzVHJhZGUsIFtkYXRhXSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEhvd01hbnkoaXRlbVRhYmxlcykge1xyXG4gIHZhciBob3dNYW55ID0gcGFyc2VJbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZzaFNlbmRIb3dNYW55JykudmFsdWUsIDEwKTtcclxuICBpZiAoaXNOYU4oaG93TWFueSkpIHtyZXR1cm4gaXRlbVRhYmxlcy5sZW5ndGg7fVxyXG4gIC8vIG1heGltdW0gb2YgMTAwIGl0ZW1zIGluIGFuIFNUXHJcbiAgaWYgKGNhbGYuc3ViY21kICE9PSAnLScpIHtyZXR1cm4gTWF0aC5taW4oMTAwLCBob3dNYW55KTt9XHJcbiAgcmV0dXJuIGhvd01hbnk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3VsZEJlQ2hlY2tlZChpdGVtaWQsIGNoZWNrYm94KSB7XHJcbiAgcmV0dXJuIGl0ZW1pZCA9PT0gJ2l0ZW1pZC0xJyB8fFxyXG4gICAgaXRlbWlkID09PSAnaXRlbWlkLTInICYmIGNoZWNrYm94LmNsYXNzTGlzdC5jb250YWlucygnaXRlbXR5cGUxMicpIHx8XHJcbiAgICBjaGVja2JveC5jbGFzc0xpc3QuY29udGFpbnMoaXRlbWlkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZG9DaGVja0FsbChldnQpIHtcclxuICB2YXIgaXRlbWlkID0gZXZ0LnRhcmdldC5pZDtcclxuICB2YXIgaXRlbUxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaXRlbS1kaXYnKSB8fFxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2l0ZW0tbGlzdCcpO1xyXG4gIHZhciBpdGVtVGFibGVzID0gaXRlbUxpc3QucXVlcnlTZWxlY3RvckFsbCgndGFibGU6bm90KC5mc2hIaWRlKScpO1xyXG4gIHZhciBob3dNYW55ID0gZ2V0SG93TWFueShpdGVtVGFibGVzKTtcclxuICB2YXIgaXRlbXNJblN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2l0ZW1zSW5TdCcpLmNoZWNrZWQ7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChpdGVtVGFibGVzLCBmdW5jdGlvbihlbCkge1xyXG4gICAgdmFyIGNoZWNrYm94ID0gZWwuZmlyc3RFbGVtZW50Q2hpbGQubGFzdEVsZW1lbnRDaGlsZC5maXJzdEVsZW1lbnRDaGlsZFxyXG4gICAgICAuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICBpZiAoaG93TWFueSAmJlxyXG4gICAgICAgIGZhbGxiYWNrKGl0ZW1zSW5TdCwgIWVsLmNsYXNzTGlzdC5jb250YWlucygnaXNJblNUJykpICYmXHJcbiAgICAgICAgc2hvdWxkQmVDaGVja2VkKGl0ZW1pZCwgY2hlY2tib3gpKSB7XHJcbiAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICBob3dNYW55IC09IDE7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlQWxsUGxhbnRzKGV2dCkge1xyXG4gIGlmIChldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZnNoQ2hlY2tBbGwnKSkge2RvQ2hlY2tBbGwoZXZ0KTt9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluamVjdFRyYWRlT2xkKCkge1xyXG4gIHZhciBteVRkID0gJzx0ZCBjb2xzcGFuPTY+U2VsZWN0OiZlbnNwOzxzcGFuIGlkPVwiaXRlbWlkLTFcIiAnICtcclxuICAgICdjbGFzcz1cImZzaENoZWNrQWxsIGZzaExpbmsgZnNoTm9XcmFwXCI+QWxsIEl0ZW1zPC9zcGFuPiAmZW5zcDsnICtcclxuICAgICc8c3BhbiBpZD1cIml0ZW1pZC0yXCIgJyArXHJcbiAgICAnY2xhc3M9XCJmc2hDaGVja0FsbCBmc2hMaW5rIGZzaE5vV3JhcFwiPkFsbCBSZXNvdXJjZXM8L3NwYW4+JztcclxuICB2YXIgc2VuZENsYXNzZXMgPSBnZXRWYWx1ZSgnc2VuZENsYXNzZXMnKTtcclxuICB2YXIgaXRlbUxpc3QgPSBKU09OLnBhcnNlKCdbJyArIHNlbmRDbGFzc2VzICsgJ10nKTtcclxuICBpdGVtTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XHJcbiAgICBteVRkICs9ICcgJmVuc3A7PHNwYW4gaWQ9XCJpdGVtaWQnICsgZWxbMV0gK1xyXG4gICAgICAnXCIgY2xhc3M9XCJmc2hDaGVja0FsbCBmc2hMaW5rIGZzaE5vV3JhcFwiPicgKyBlbFswXSArICc8L3NwYW4+JztcclxuICB9KTtcclxuICBteVRkICs9ICcgJmVuc3A7SG93Jm5ic3A7bWFueTo8aW5wdXQgaWQ9XCJmc2hTZW5kSG93TWFueVwiIHR5cGU9XCJ0ZXh0XCIgJyArXHJcbiAgICAnY2xhc3M9XCJjdXN0b21pbnB1dFwiIHZhbHVlPVwiYWxsXCIgc2l6ZT0zPjwvdGQ+JztcclxuICB2YXIgbXVsdGlwbGUgPSBjcmVhdGVUcih7XHJcbiAgICBpZDogJ2ZzaFNlbGVjdE11bHRpcGxlJyxcclxuICAgIGlubmVySFRNTDogbXlUZFxyXG4gIH0pO1xyXG4gIG11bHRpcGxlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlQWxsUGxhbnRzKTtcclxuICB2YXIgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaXRlbS1saXN0JykucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xyXG4gIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG11bHRpcGxlLCBlbCk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluamVjdFRyYWRlKCkge1xyXG4gIGFkZCgzLCBpbnYpO1xyXG4gIGFkZCgzLCBpbmplY3RUcmFkZU9sZCk7XHJcbn1cclxuIiwiaW1wb3J0IGFkZCBmcm9tICcuLi9zdXBwb3J0L3Rhc2snO1xyXG5pbXBvcnQge2NvbG91cmVkRG90c30gZnJvbSAnLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5pbXBvcnQge2xhc3RBY3Rpdml0eVJFfSBmcm9tICcuLi9zdXBwb3J0L2RhdGFPYmonO1xyXG5pbXBvcnQge2dldFZhbHVlLCBpbnRWYWx1ZX0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5pbXBvcnQge2d1aWxkWFBMb2NrLCByZW1vdmVHdWlsZEF2eUltZ0JvcmRlcn0gZnJvbSAnLi9ndWlsZFV0aWxzJztcclxuXHJcbmZ1bmN0aW9uIGNhbGNMdmxUb1Rlc3QoKSB7XHJcbiAgdmFyIGxldmVsVG9UZXN0ID0gaW50VmFsdWUoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcclxuICAgICdzdGF0LWxldmVsJylbMF0ubmV4dEVsZW1lbnRTaWJsaW5nLnRleHRDb250ZW50KTtcclxuICB2YXIgY2hhcmFjdGVyVmlydHVhbExldmVsID0gZ2V0VmFsdWUoJ2NoYXJhY3RlclZpcnR1YWxMZXZlbCcpO1xyXG4gIGlmIChjaGFyYWN0ZXJWaXJ0dWFsTGV2ZWwpIHtsZXZlbFRvVGVzdCA9IGNoYXJhY3RlclZpcnR1YWxMZXZlbDt9XHJcbiAgcmV0dXJuIGxldmVsVG9UZXN0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxjUHZwUmFuZ2UobGV2ZWxUb1Rlc3QpIHtcclxuICBpZiAobGV2ZWxUb1Rlc3QgPD0gMjA1KSB7cmV0dXJuIDU7fVxyXG4gIHJldHVybiAxMDtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY0d2Z1JhbmdlKGxldmVsVG9UZXN0KSB7XHJcbiAgaWYgKGxldmVsVG9UZXN0IDw9IDMwMCkge1xyXG4gICAgcmV0dXJuIDI1O1xyXG4gIH1cclxuICBpZiAobGV2ZWxUb1Rlc3QgPD0gNzAwKSB7XHJcbiAgICByZXR1cm4gNTA7XHJcbiAgfVxyXG4gIHJldHVybiAxMDA7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluamVjdFZpZXdHdWlsZCgpIHtcclxuICBhZGQoMywgY29sb3VyZWREb3RzKTtcclxuICByZW1vdmVHdWlsZEF2eUltZ0JvcmRlcigpO1xyXG4gIGd1aWxkWFBMb2NrKCk7XHJcbiAgdmFyIGhpZ2hsaWdodFBsYXllcnNOZWFyTXlMdmwgPVxyXG4gICAgZ2V0VmFsdWUoJ2hpZ2hsaWdodFBsYXllcnNOZWFyTXlMdmwnKTtcclxuICB2YXIgaGlnaGxpZ2h0R3ZHUGxheWVyc05lYXJNeUx2bCA9XHJcbiAgICBnZXRWYWx1ZSgnaGlnaGxpZ2h0R3ZHUGxheWVyc05lYXJNeUx2bCcpO1xyXG4gIGlmICghaGlnaGxpZ2h0UGxheWVyc05lYXJNeUx2bCAmJiAhaGlnaGxpZ2h0R3ZHUGxheWVyc05lYXJNeUx2bCkge3JldHVybjt9XHJcbiAgdmFyIGxldmVsVG9UZXN0ID0gY2FsY0x2bFRvVGVzdCgpO1xyXG4gIHZhciBwdnBSYW5nZSA9IGNhbGNQdnBSYW5nZShsZXZlbFRvVGVzdCk7XHJcbiAgdmFyIGd2Z1JhbmdlID0gY2FsY0d2Z1JhbmdlKGxldmVsVG9UZXN0KTtcclxuICB2YXIgbWVtTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAnI3BDQyBhW2RhdGEtdGlwcGVkKj1cIjx0ZD5WTDo8L3RkPlwiXScpO1xyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobWVtTGlzdCwgZnVuY3Rpb24oZWwpIHtcclxuICAgIHZhciB0aXBwZWQgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwcGVkJyk7XHJcbiAgICB2YXIgbGFzdEFjdERheXMgPSBsYXN0QWN0aXZpdHlSRS5leGVjKHRpcHBlZClbMV07XHJcbiAgICB2YXIgdmxldmVsID0gTnVtYmVyKC9WTDouKz8oXFxkKykvLmV4ZWModGlwcGVkKVsxXSk7XHJcbiAgICB2YXIgYVJvdyA9IGVsLnBhcmVudE5vZGUucGFyZW50Tm9kZTtcclxuICAgIGlmIChsYXN0QWN0RGF5cyA8IDcgJiZcclxuICAgICAgICBoaWdobGlnaHRQbGF5ZXJzTmVhck15THZsICYmXHJcbiAgICAgICAgTWF0aC5hYnModmxldmVsIC0gbGV2ZWxUb1Rlc3QpIDw9IHB2cFJhbmdlKSB7XHJcbiAgICAgIGFSb3cuY2xhc3NMaXN0LmFkZCgnbHZsSGlnaGxpZ2h0Jyk7XHJcbiAgICB9IGVsc2UgaWYgKGxhc3RBY3REYXlzIDwgNyAmJlxyXG4gICAgICAgIGhpZ2hsaWdodEd2R1BsYXllcnNOZWFyTXlMdmwgJiZcclxuICAgICAgICBNYXRoLmFicyh2bGV2ZWwgLSBsZXZlbFRvVGVzdCkgPD0gZ3ZnUmFuZ2UpIHtcclxuICAgICAgYVJvdy5jbGFzc0xpc3QuYWRkKCdsdmxHdkdIaWdobGlnaHQnKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG4iLCJpbXBvcnQge2ltYWdlU2VydmVyfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgY29sb3JIYXNoOiB7XHJcbiAgICAnMCc6ICdyZWQnLCAvLyBTaG91bGQgbmV2ZXIgc2VlIHRoaXMuXHJcbiAgICAnMSc6ICdvcmFuZ2UnLFxyXG4gICAgJzInOiAneWVsbG93J1xyXG4gIH0sXHJcbiAgd29ybGRGb3JtZ3JvdXA6XHJcbiAgICAnPGEgaHJlZj1cIiNcIiBjbGFzcz1cImZzaEN1cnZlQnRuIHRpcC1zdGF0aWNcIiAnICtcclxuICAgICAgJ2RhdGEtdGlwcGVkPVwiUXVpY2sgQ3JlYXRlIEF0dGFjayBHcm91cFwiICcgK1xyXG4gICAgICAnc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFwnJyArIGltYWdlU2VydmVyICtcclxuICAgICAgJy9za2luL3JlYWxtL2ljb25fYWN0aW9uX2Zvcm1ncm91cC5naWZcXCcpO1wiPicgK1xyXG4gICAgJzwvYT4nLFxyXG4gIHdvcmxkUXVpY2tCdWZmOlxyXG4gICAgJzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJmc2hDdXJ2ZUJ0biB0aXAtc3RhdGljXCIgJyArXHJcbiAgICAgICdkYXRhLXRpcHBlZD1cIk9wZW4gUXVpY2sgQnVmZiBQb3B1cFwiICcgK1xyXG4gICAgICAnc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFwnJyArIGltYWdlU2VydmVyICtcclxuICAgICAgJy9za2luL3JlYWxtL2ljb25fYWN0aW9uX3F1aWNrYnVmZi5naWZcXCcpO1wiPicgK1xyXG4gICAgJzwvYT4nLFxyXG4gIHdvcmxkTWFwOlxyXG4gICAgJzxhIGhyZWY9XCJpbmRleC5waHA/Y21kPXdvcmxkJnN1YmNtZD1tYXBcIiB0YXJnZXQ9XCJmc1dvcmxkTWFwXCIgJyArXHJcbiAgICAgICdjbGFzcz1cImZzaEN1cnZlQnRuIHRpcC1zdGF0aWNcIiBkYXRhLXRpcHBlZD1cIk9wZW4gUmVhbG0gTWFwXCIgJyArXHJcbiAgICAgICdzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybChcXCcnICsgaW1hZ2VTZXJ2ZXIgK1xyXG4gICAgICAnL3NraW4vcmVhbG0vaWNvbl9hY3Rpb25fbWFwLmdpZlxcJyk7XCI+JyArXHJcbiAgICAnPC9hPicsXHJcbiAgc2VhcmNoTWFwVUZTRzpcclxuICAgICc8YSBocmVmPVwiaHR0cHM6Ly9ndWlkZS5mYWxsZW5zd29yZC5jb20vaW5kZXgucGhwP2NtZD1yZWFsbXMnICtcclxuICAgICAgJyZzdWJjbWQ9dmlldyZyZWFsbV9pZD1AQHJlYWxtSWRAQFwiIHRhcmdldD1cIm1hcFVGU0dcIiAnICtcclxuICAgICAgJ2NsYXNzPVwiZnNoQ3VydmVCdG4gdGlwLXN0YXRpY1wiIGRhdGEtdGlwcGVkPVwiU2VhcmNoIG1hcCBpbiAnICtcclxuICAgICAgJ1VsdGltYXRlIEZTR1wiIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcJycgK1xyXG4gICAgICBpbWFnZVNlcnZlciArICcvdGVtcGxlLzEuZ2lmXFwnKTtcIj4nICtcclxuICAgICc8L2E+JyxcclxuICBiaWFzOiB7XHJcbiAgICAnMCc6IHtnZW5lcmFsVmFyaWFibGU6IDEuMTA1MywgaHBWYXJpYWJsZTogMS4xfSxcclxuICAgICcxJzoge2dlbmVyYWxWYXJpYWJsZTogMS4xLCBocFZhcmlhYmxlOiAxLjA1M30sXHJcbiAgICAnMic6IHtnZW5lcmFsVmFyaWFibGU6IDEuMDUzLCBocFZhcmlhYmxlOiAxfSxcclxuICAgICczJzoge2dlbmVyYWxWYXJpYWJsZTogMS4xMDUzLCBocFZhcmlhYmxlOiAxfVxyXG4gIH0sXHJcbiAgaHVudGluZ09uSW1hZ2U6ICc8YSBocmVmPVwiI1wiIGlkPVwiSGVscGVyVG9nZ2xlSHVudGluZ01vZGVcIiAnICtcclxuICAgICdjbGFzcz1cImh1bnRPbiBmc2hDdXJ2ZUJ0biB0aXAtc3RhdGljXCIgJyArXHJcbiAgICAnZGF0YS10aXBwZWQ9XCJIdW50aW5nIG1vZGUgaXMgT05cIj48L2E+JyxcclxuICBodW50aW5nT2ZmSW1hZ2U6ICc8YSBocmVmPVwiI1wiIGlkPVwiSGVscGVyVG9nZ2xlSHVudGluZ01vZGVcIiAnICtcclxuICAgICdjbGFzcz1cImh1bnRPZmYgZnNoQ3VydmVCdG4gdGlwLXN0YXRpY1wiICcgK1xyXG4gICAgJ2RhdGEtdGlwcGVkPVwiSHVudGluZyBtb2RlIGlzIE9GRlwiPjwvYT4nLFxyXG4gIHNvdW5kTXV0ZUltYWdlOiAnPGEgaHJlZj1cIiNcIiBpZD1cInRvZ2dsZVNvdW5kTGlua1wiICcgK1xyXG4gICAgJ2NsYXNzPVwic291bmRPbiBmc2hDdXJ2ZUJ0biB0aXAtc3RhdGljXCIgJyArXHJcbiAgICAnZGF0YS10aXBwZWQ9XCJUdXJuIE9mZiBTb3VuZCB3aGVuIHlvdSBoYXZlIGEgbmV3IGxvZyBtZXNzYWdlXCI+PC9hPicsXHJcbiAgc291bmRJbWFnZTogJzxhIGhyZWY9XCIjXCIgaWQ9XCJ0b2dnbGVTb3VuZExpbmtcIiAnICtcclxuICAgICdjbGFzcz1cInNvdW5kT2ZmIGZzaEN1cnZlQnRuIHRpcC1zdGF0aWNcIiAnICtcclxuICAgICdkYXRhLXRpcHBlZD1cIlR1cm4gT24gU291bmQgd2hlbiB5b3UgaGF2ZSBhIG5ldyBsb2cgbWVzc2FnZVwiPjwvYT4nXHJcbn07XHJcbiIsImltcG9ydCBnZXRGb3JhZ2UgZnJvbSAnLi4vYWpheC9nZXRGb3JhZ2UnO1xyXG5pbXBvcnQge2dldFZhbHVlfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCBzZXRGb3JhZ2UgZnJvbSAnLi4vYWpheC9zZXRGb3JhZ2UnO1xyXG5cclxuLy8gVGFraW5nIHRoZSBOb3QgU2F2ZSBpbiBjYXNlIHRoZXkgYWRkIG5ldyBlbmhhbmNlbWVudHMuXHJcbnZhciBub3RTYXZlID0gWydCcmVha2VyJywgJ1Byb3RlY3Rpb24nLCAnTWFzdGVyIFRoaWVmJywgJ1Byb3RlY3QgR29sZCcsXHJcbiAgJ0Rpc2FybScsICdEdWVsaXN0JywgJ1RoaWV2ZXJ5JywgJ01hc3RlciBCbGFja3NtaXRoJywgJ01hc3RlciBDcmFmdGVyJyxcclxuICAnRnVyeSBDYXN0ZXInLCAnTWFzdGVyIEludmVudG9yJywgJ1N1c3RhaW4nXTtcclxudmFyIGNvbWJhdExvZyA9IFtdO1xyXG52YXIgY29tYmF0RGF0YTtcclxuXHJcbmZ1bmN0aW9uIHN0b3JlQnVmZnMoYnVmZikge1xyXG4gIGlmIChidWZmLmlkID09PSA1NCB8fCBidWZmLmlkID09PSAyNikge1xyXG4gICAgY29tYmF0RGF0YS5wbGF5ZXIuYnVmZnNbYnVmZi5pZF0gPSBwYXJzZUludChidWZmLmxldmVsLCAxMCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzdG9yZUVuaGFuY2VtZW50cyhlbmgpIHtcclxuICBpZiAobm90U2F2ZS5pbmRleE9mKGVuaC5uYW1lKSA9PT0gLTEpIHtcclxuICAgIGNvbWJhdERhdGEucGxheWVyLmVuaGFuY2VtZW50c1tlbmgubmFtZV0gPSBlbmgudmFsdWU7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYXpCdWZmcyhkYXRhKSB7XHJcbiAgaWYgKGRhdGEucGxheWVyLmJ1ZmZzKSB7XHJcbiAgICBkYXRhLnBsYXllci5idWZmcy5mb3JFYWNoKHN0b3JlQnVmZnMpOyAvLyBsb29wIHRocm91Z2ggYnVmZnMsIG9ubHkgbmVlZCB0byBrZWVwIENBIGFuZCBEb3VibGVyIDU0ID0gY2EsIDI2ID0gZG91YmxlclxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGF6RW5oYW5jZW1lbnRzKGRhdGEpIHtcclxuICBpZiAoZGF0YS5wbGF5ZXIuZW5oYW5jZW1lbnRzKSB7XHJcbiAgICBkYXRhLnBsYXllci5lbmhhbmNlbWVudHMuZm9yRWFjaChzdG9yZUVuaGFuY2VtZW50cyk7IC8vIGxvb3AgdGhyb3VnaCBlbmhhbmNlbWVudHNcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb2Nlc3NDb21iYXRSZXNwb25zZShlLCBkYXRhKSB7XHJcbiAgY29tYmF0RGF0YSA9IHt9O1xyXG4gIGNvbWJhdERhdGEuY29tYmF0ID0gZGF0YS5yZXNwb25zZS5kYXRhO1xyXG4gIGlmIChjb21iYXREYXRhLmNvbWJhdC5pbnZlbnRvcnlfaWQpIHtcclxuICAgIGNvbWJhdERhdGEuY29tYmF0LmRyb3AgPSBjb21iYXREYXRhLmNvbWJhdC5pdGVtLmlkO1xyXG4gIH1cclxuXHJcbiAgY29tYmF0RGF0YS5wbGF5ZXIgPSB7fTtcclxuICBjb21iYXREYXRhLnBsYXllci5idWZmcyA9IHt9O1xyXG4gIGNvbWJhdERhdGEucGxheWVyLmVuaGFuY2VtZW50cyA9IHt9O1xyXG4gIGhhekJ1ZmZzKGRhdGEpO1xyXG4gIGhhekVuaGFuY2VtZW50cyhkYXRhKTtcclxuICBjb21iYXREYXRhLnRpbWUgPSBkYXRhLnRpbWU7XHJcbiAgY29tYmF0TG9nLnB1c2goY29tYmF0RGF0YSk7XHJcbiAgc2V0Rm9yYWdlKCdmc2hfY29tYmF0TG9nJywgY29tYmF0TG9nKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY29tYmF0UmVzcG9uc2UoZSwgZGF0YSkge1xyXG4gIC8vIElmIGJhZCByZXNwb25zZSBkbyBub3RoaW5nLlxyXG4gIGlmIChkYXRhLnJlc3BvbnNlLnJlc3BvbnNlID09PSAwKSB7cHJvY2Vzc0NvbWJhdFJlc3BvbnNlKGUsIGRhdGEpO31cclxufVxyXG5cclxuZnVuY3Rpb24gZ290Q29tYmF0TG9nKGRhdGEpIHsgLy8galF1ZXJ5Lm1pblxyXG4gIGlmIChkYXRhKSB7Y29tYmF0TG9nID0gZGF0YTt9XHJcbiAgJC5zdWJzY3JpYmUoJzItc3VjY2Vzcy5hY3Rpb24tcmVzcG9uc2UnLCBjb21iYXRSZXNwb25zZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbWJhdExvZ2dlcigpIHsgLy8galF1ZXJ5Lm1pblxyXG4gIGlmIChnZXRWYWx1ZSgna2VlcExvZ3MnKSkge1xyXG4gICAgZ2V0Rm9yYWdlKCdmc2hfY29tYmF0TG9nJykuZG9uZShnb3RDb21iYXRMb2cpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgYXNzZXRzIGZyb20gJy4vYXNzZXRzJztcclxuaW1wb3J0IGNhbGYgZnJvbSAnLi4vc3VwcG9ydC9jYWxmJztcclxuaW1wb3J0IHtnZXRWYWx1ZSwgc2V0VmFsdWV9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtvcGVuUXVpY2tCdWZmQnlOYW1lLCBwbGF5ZXJOYW1lfSBmcm9tICcuLi9zdXBwb3J0L2xheW91dCc7XHJcblxyXG5mdW5jdGlvbiBkb0Zvcm1Hcm91cChlKSB7IC8vIGpRdWVyeVxyXG4gIGUucHJldmVudERlZmF1bHQoKTtcclxuICAkKGUudGFyZ2V0KS5xdGlwKCdoaWRlJyk7XHJcbiAgR2FtZURhdGEuZG9BY3Rpb24oMTIsIDQwMSwge30sIDApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvcGVuUXVpY2tCdWZmKGUpIHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgb3BlblF1aWNrQnVmZkJ5TmFtZShwbGF5ZXJOYW1lKCkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93UXVpY2tMaW5rcyh3b3JsZE5hbWUsIGRhdGEpIHsgLy8galF1ZXJ5XHJcbiAgd29ybGROYW1lLmFwcGVuZCgnPGRpdiBjbGFzcz1cImZzaEZzdHlcIj48ZGl2Pk1pbiBMdmw6ICcgKyBkYXRhLnJlYWxtLm1pbmxldmVsICtcclxuICAgICc8L2Rpdj48ZGl2PllvdXIgTHZsOiAnICsgZGF0YS5wbGF5ZXIubGV2ZWwgKyAnPC9kaXY+PC9kaXY+Jyk7XHJcbiAgdmFyIGZvcm1ncm91cCA9ICQoYXNzZXRzLndvcmxkRm9ybWdyb3VwKTtcclxuICB3b3JsZE5hbWUuYXBwZW5kKCcmbmJzcDsmbmJzcDsnKS5hcHBlbmQoZm9ybWdyb3VwKTtcclxuICBmb3JtZ3JvdXAuY2xpY2soZG9Gb3JtR3JvdXApO1xyXG4gIHZhciBxdWlja2J1ZmYgPSAkKGFzc2V0cy53b3JsZFF1aWNrQnVmZik7XHJcbiAgd29ybGROYW1lLmFwcGVuZCgnJm5ic3A7JykuYXBwZW5kKHF1aWNrYnVmZik7XHJcbiAgcXVpY2tidWZmLmNsaWNrKG9wZW5RdWlja0J1ZmYpO1xyXG4gIHdvcmxkTmFtZS5hcHBlbmQoJyZuYnNwOycpLmFwcGVuZChhc3NldHMud29ybGRNYXApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93U2VhcmNoQnV0dG9ucyh3b3JsZE5hbWUsIGRhdGEpIHsgLy8galF1ZXJ5XHJcbiAgd29ybGROYW1lLmFwcGVuZCgnJm5ic3A7JylcclxuICAgIC5hcHBlbmQoYXNzZXRzLnNlYXJjaE1hcFVGU0cucmVwbGFjZSgnQEByZWFsbUlkQEAnLCBkYXRhLnJlYWxtLmlkKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZVNvdW5kKGUpIHsgLy8galF1ZXJ5XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIGlmIChnZXRWYWx1ZSgncGxheU5ld01lc3NhZ2VTb3VuZCcpID09PSBmYWxzZSkge1xyXG4gICAgJCgnI3RvZ2dsZVNvdW5kTGluaycpLnF0aXAoJ2hpZGUnKVxyXG4gICAgICAucmVwbGFjZVdpdGgoYXNzZXRzLnNvdW5kTXV0ZUltYWdlKTtcclxuICB9IGVsc2Uge1xyXG4gICAgJCgnI3RvZ2dsZVNvdW5kTGluaycpLnF0aXAoJ2hpZGUnKVxyXG4gICAgICAucmVwbGFjZVdpdGgoYXNzZXRzLnNvdW5kSW1hZ2UpO1xyXG4gIH1cclxuICBzZXRWYWx1ZSgncGxheU5ld01lc3NhZ2VTb3VuZCcsXHJcbiAgICAhZ2V0VmFsdWUoJ3BsYXlOZXdNZXNzYWdlU291bmQnKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dTcGVha2VyT25Xb3JsZCh3b3JsZE5hbWUpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIGltZyA9IGFzc2V0cy5zb3VuZEltYWdlO1xyXG4gIGlmIChnZXRWYWx1ZSgncGxheU5ld01lc3NhZ2VTb3VuZCcpKSB7aW1nID0gYXNzZXRzLnNvdW5kTXV0ZUltYWdlO31cclxuICB3b3JsZE5hbWUuYXBwZW5kKCcmbmJzcDsnKS5hcHBlbmQoaW1nKTtcclxuICB3b3JsZE5hbWUub24oJ2NsaWNrJywgJyN0b2dnbGVTb3VuZExpbmsnLCB0b2dnbGVTb3VuZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZUh1bnRNb2RlKGUpIHsgLy8galF1ZXJ5XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIGlmICghY2FsZi5odW50aW5nTW9kZSkge1xyXG4gICAgJCgnI0hlbHBlclRvZ2dsZUh1bnRpbmdNb2RlJykucXRpcCgnaGlkZScpXHJcbiAgICAgIC5yZXBsYWNlV2l0aChhc3NldHMuaHVudGluZ09uSW1hZ2UpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAkKCcjSGVscGVyVG9nZ2xlSHVudGluZ01vZGUnKS5xdGlwKCdoaWRlJylcclxuICAgICAgLnJlcGxhY2VXaXRoKGFzc2V0cy5odW50aW5nT2ZmSW1hZ2UpO1xyXG4gIH1cclxuICBjYWxmLmh1bnRpbmdNb2RlID0gIWNhbGYuaHVudGluZ01vZGU7XHJcbiAgc2V0VmFsdWUoJ2h1bnRpbmdNb2RlJywgY2FsZi5odW50aW5nTW9kZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dIdW50TW9kZSh3b3JsZE5hbWUpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIGltZyA9IGFzc2V0cy5odW50aW5nT2ZmSW1hZ2U7XHJcbiAgaWYgKGNhbGYuaHVudGluZ01vZGUpIHtpbWcgPSBhc3NldHMuaHVudGluZ09uSW1hZ2U7fVxyXG4gIHdvcmxkTmFtZS5hcHBlbmQoJyZuYnNwOycpLmFwcGVuZChpbWcpO1xyXG4gIHdvcmxkTmFtZS5vbignY2xpY2snLCAnI0hlbHBlclRvZ2dsZUh1bnRpbmdNb2RlJyxcclxuICAgIHRvZ2dsZUh1bnRNb2RlKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0QnV0dG9ucyhkYXRhKSB7IC8vIGpRdWVyeVxyXG4gIHZhciB3b3JsZE5hbWUgPSAkKCcjd29ybGROYW1lJyk7XHJcbiAgLy8gd29ybGROYW1lLmh0bWwoZGF0YS5yZWFsbS5uYW1lKTsgLy8gQlVHRklYIC0gaW5jYXNlIG9mIHN3aXRjaGlnbiBiZXR3ZWVuIG1hc3RlciByZWFsbSBhbmQgcmVhbG0gdGhleSBkb250IHJlcGxhY2UgdGVoIHJlYWxtIG5hbWVcclxuICBHYW1lQ29udHJvbGxlci5SZWFsbS5mb290cHJpbnRUaWxlTGlzdCA9IFtdOyAvLyBCVUdGSVggLSBpbiBjYXNlIG9mIHRlbGVwb3J0aW5nIGluIG5ldyByZWFsbSB3aXRoIGZvb3RwcmludHMgdHVybmVkIG9uXHJcbiAgdmFyIG9sZEJ1dHRvbkNvbnRhaW5lciA9ICQoJyNmc2hXb3JsZEJ1dHRvbkNvbnRhaW5lcicpO1xyXG4gIGlmIChvbGRCdXR0b25Db250YWluZXIubGVuZ3RoICE9PSAwKSB7b2xkQnV0dG9uQ29udGFpbmVyLnJlbW92ZSgpO31cclxuICB2YXIgYnV0dG9uQ29udGFpbmVyID0gJCgnPGRpdi8+Jywge2lkOiAnZnNoV29ybGRCdXR0b25Db250YWluZXInfSk7XHJcbiAgc2hvd1F1aWNrTGlua3MoYnV0dG9uQ29udGFpbmVyLCBkYXRhKTtcclxuICBzaG93U2VhcmNoQnV0dG9ucyhidXR0b25Db250YWluZXIsIGRhdGEpO1xyXG4gIGlmIChnZXRWYWx1ZSgnc2hvd1NwZWFrZXJPbldvcmxkJykpIHtcclxuICAgIHNob3dTcGVha2VyT25Xb3JsZChidXR0b25Db250YWluZXIpO1xyXG4gIH1cclxuICBzaG93SHVudE1vZGUoYnV0dG9uQ29udGFpbmVyKTtcclxuICB3b3JsZE5hbWUuYWZ0ZXIoYnV0dG9uQ29udGFpbmVyKTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCB7XHJcbiAgZGVmU3RhdHM6ICc8dGFibGUgY2xhc3M9XCJyZWxpY1QgcmVsaWNTXCI+PHRoZWFkPicgK1xyXG4gICAgJzx0cj48dGggY29sc3Bhbj1cIjJcIj5EZWZlbmRpbmcgR3VpbGQgU3RhdHM8L3RoPjwvdHI+PC90aGVhZD48dGJvZHk+JyArXHJcbiAgICAnPHRyPjx0ZD5SZWxpYyBDb3VudDo8L3RkPjx0ZCBpZD1cInJlbGljQ291bnRcIj4wPC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQ+TGVhZCBEZWZlbmRlciBCb251czo8L3RkPjx0ZCBpZD1cIkxEUGVyY2VudGFnZVwiPjA8L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZD5MZWFkIERlZmVuZGVyIENsb2FrZWQ6PC90ZD48dGQgaWQ9XCJMRENsb2FrZWRcIj5ObzwvdGQ+PC90cj4nICtcclxuICAgICc8L3Rib2R5Pjx0aGVhZD48dHI+PHRoIGNvbHNwYW49XCIyXCI+T3RoZXIgRGVmZW5kZXIgU3RhdHM8L3RoPjwvdHI+JyArXHJcbiAgICAnPC90aGVhZD48dGJvZHk+JyArXHJcbiAgICAnPHRyPjx0ZD5SYXcgQXR0YWNrOjwvdGQ+PHRkIGNsYXNzPVwiZnNoR3JleVwiIGlkPVwiYXR0YWNrVmFsdWVcIj4wPC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQ+QXR0YWNrIHcvIGJ1ZmZzOjwvdGQ+PHRkIGlkPVwiYXR0YWNrVmFsdWVCdWZmZWRcIj4wPC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQ+UmF3IERlZmVuc2U6PC90ZD4nICtcclxuICAgICAgJzx0ZCBjbGFzcz1cImZzaEdyZXlcIiBpZD1cImRlZmVuc2VWYWx1ZVwiPjA8L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZD5EZWZlbnNlIHcvYnVmZnM6PC90ZD48dGQgaWQ9XCJkZWZlbnNlVmFsdWVCdWZmZWRcIj4wPC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQ+UmF3IEFybW9yOjwvdGQ+PHRkIGNsYXNzPVwiZnNoR3JleVwiIGlkPVwiYXJtb3JWYWx1ZVwiPjA8L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZD5Bcm1vciB3LyBidWZmczo8L3RkPjx0ZCBpZD1cImFybW9yVmFsdWVCdWZmZWRcIj4wPC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQ+UmF3IERhbWFnZTo8L3RkPjx0ZCBjbGFzcz1cImZzaEdyZXlcIiBpZD1cImRhbWFnZVZhbHVlXCI+MDwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+PHRkPkRhbWFnZSB3LyBidWZmczo8L3RkPjx0ZCBpZD1cImRhbWFnZVZhbHVlQnVmZmVkXCI+MDwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+PHRkPlJhdyBIUDo8L3RkPjx0ZCBjbGFzcz1cImZzaEdyZXlcIiBpZD1cImhwVmFsdWVcIj4wPC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQ+SFAgdy8gYnVmZnM6PC90ZD48dGQgaWQ9XCJocFZhbHVlQnVmZmVkXCI+MDwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+PHRkPkNsb2FrZWQ6PC90ZD48dGQgaWQ9XCJkZWZlbmRlcnNDbG9ha2VkXCI+MDwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+PHRkPlByb2Nlc3NlZDo8L3RkPjx0ZCBpZD1cImRlZmVuZGVyc1Byb2Nlc3NlZFwiPjA8L3RkPjwvdHI+JyArXHJcbiAgICAnPC90Ym9keT48L3RhYmxlPicsXHJcbiAgYXRrU3RhdHM6ICc8dGFibGUgY2xhc3M9XCJyZWxpY1QgcmVsaWNTXCI+PHRoZWFkPicgK1xyXG4gICAgJzx0cj48dGggY29sc3Bhbj1cIjJcIj5BZGp1c3RlZCBkZWZlbnNlIHZhbHVlczwvdGg+PC90cj48L3RoZWFkPjx0Ym9keT4nICtcclxuICAgICc8dHI+PHRkPkRDMjI1OjwvdGQ+PHRkIGlkPVwiREMyMjVcIj4wPC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQ+REMxNzU6PC90ZD48dGQgaWQ9XCJEQzE3NVwiPjA8L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZCBjb2xzcGFuPVwiMlwiPiZuYnNwOzwvdGQ+PC90cj48L3Rib2R5Pjx0aGVhZD4nICtcclxuICAgICc8dHI+PHRoIGNvbHNwYW49XCIyXCI+QXR0YWNraW5nIEdyb3VwIFN0YXRzPC90aD48L3RyPjwvdGhlYWQ+PHRib2R5PicgK1xyXG4gICAgJzx0cj48dGQ+UmF3IEdyb3VwIEF0dGFjazo8L3RkPicgK1xyXG4gICAgICAnPHRkIGNsYXNzPVwiZnNoR3JleVwiIGlkPVwiR3JvdXBBdHRhY2tcIj48L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZD5Hcm91cCBBdHRhY2sgdy8gYnVmZnM6PC90ZD48dGQgaWQ9XCJHcm91cEF0dGFja0J1ZmZlZFwiPjwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+PHRkPlJhdyBHcm91cCBEZWZlbnNlOjwvdGQ+JyArXHJcbiAgICAgICc8dGQgY2xhc3M9XCJmc2hHcmV5XCIgaWQ9XCJHcm91cERlZmVuc2VcIj48L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZD5Hcm91cCBEZWZlbnNlIHcvIGJ1ZmZzOjwvdGQ+JyArXHJcbiAgICAgICc8dGQgaWQ9XCJHcm91cERlZmVuc2VCdWZmZWRcIj48L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZD5SYXcgR3JvdXAgQXJtb3I6PC90ZD4nICtcclxuICAgICAgJzx0ZCBjbGFzcz1cImZzaEdyZXlcIiBpZD1cIkdyb3VwQXJtb3JcIj48L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZD5Hcm91cCBBcm1vciB3LyBidWZmczo8L3RkPjx0ZCBpZD1cIkdyb3VwQXJtb3JCdWZmZWRcIj48L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZD5SYXcgR3JvdXAgRGFtYWdlOjwvdGQ+JyArXHJcbiAgICAgICc8dGQgY2xhc3M9XCJmc2hHcmV5XCIgaWQ9XCJHcm91cERhbWFnZVwiPjwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+PHRkPkdyb3VwIERhbWFnZSB3LyBidWZmczo8L3RkPjx0ZCBpZD1cIkdyb3VwRGFtYWdlQnVmZmVkXCI+PC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQ+UmF3IEdyb3VwIEhQOjwvdGQ+PHRkIGNsYXNzPVwiZnNoR3JleVwiIGlkPVwiR3JvdXBIUFwiPjwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+PHRkPkdyb3VwIEhQIHcvIGJ1ZmZzOjwvdGQ+PHRkIGlkPVwiR3JvdXBIUEJ1ZmZlZFwiPjwvdGQ+PC90cj4nICtcclxuICAgICc8L3Rib2R5PjwvdGFibGU+JyxcclxuICBwcm9jOiAnPHRhYmxlIGNsYXNzPVwicmVsaWNUXCI+JyArXHJcbiAgICAnPHRoZWFkPjx0cj48dGggY29sc3Bhbj1cIjJcIj5Qcm9jZXNzaW5nPC90aD48L3RyPjwvdGhlYWQ+PHRib2R5PicgK1xyXG4gICAgJzx0cj48dGQgY2xhc3M9XCJmc2hHcmVlblwiIGNvbHNwYW49XCIyXCIgaWQ9XCJQcm9jZXNzaW5nU3RhdHVzXCI+JyArXHJcbiAgICAgICdQYXJzaW5nIGRlZmVuZGluZyBndWlsZCBzdGF0cyAuLi48L3RkPjwvdHI+JyArXHJcbiAgICAnPC90Ym9keT48dGhlYWQ+PHRyPjx0aCBjb2xzcGFuPVwiMlwiPkFzc3VtcHRpb25zPC90aD48L3RyPjwvdGhlYWQ+PHRib2R5PicgK1xyXG4gICAgJzx0cj48dGQgY29sc3Bhbj1cIjJcIiBjbGFzcz1cImZzaEdyZXlcIj5BYm92ZSBjYWxjdWxhdGlvbnMgaW5jbHVkZSAnICtcclxuICAgICAgJ0NvbnN0aXR1dGlvbiwgRm9ydGl0dWRlLCBOaWdodG1hcmUgVmlzYWdlLCBDaGkgU3RyaWtlLCBTYW5jdHVhcnksICcgK1xyXG4gICAgICAnVGVycm9yaXplIGFuZCBGbGluY2ggYm9udXMgY2FsY3VsYXRpb25zIChpbiB0aGF0IG9yZGVyKSBvbiBib3RoIHRoZSAnICtcclxuICAgICAgJ2RlZmVuZGluZyBncm91cCBhbmQgYXR0YWNraW5nIGdyb3VwLjwvdGQ+PC90cj4nICtcclxuICAgICc8L3Rib2R5PjwvdGFibGU+J1xyXG59O1xyXG4iLCJpbXBvcnQge2ludFZhbHVlfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBncm91cFZpZXdTdGF0cyhkb2MpIHtcclxuICB2YXIgYXR0YWNrRWxlbWVudCA9IGRvYy5nZXRFbGVtZW50QnlJZCgnc3RhdC1hdHRhY2snKTtcclxuICB2YXIgZGVmZW5zZUVsZW1lbnQgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoJ3N0YXQtZGVmZW5zZScpO1xyXG4gIHZhciBhcm1vckVsZW1lbnQgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoJ3N0YXQtYXJtb3InKTtcclxuICB2YXIgZGFtYWdlRWxlbWVudCA9IGRvYy5nZXRFbGVtZW50QnlJZCgnc3RhdC1kYW1hZ2UnKTtcclxuICB2YXIgaHBFbGVtZW50ID0gZG9jLmdldEVsZW1lbnRCeUlkKCdzdGF0LWhwJyk7XHJcbiAgcmV0dXJuIHtcclxuICAgIGF0dGFjazogaW50VmFsdWUoYXR0YWNrRWxlbWVudC50ZXh0Q29udGVudCksXHJcbiAgICBhdHRhY2tFbGVtZW50OiBhdHRhY2tFbGVtZW50LFxyXG4gICAgZGVmZW5zZTogaW50VmFsdWUoZGVmZW5zZUVsZW1lbnQudGV4dENvbnRlbnQpLFxyXG4gICAgZGVmZW5zZUVsZW1lbnQ6IGRlZmVuc2VFbGVtZW50LFxyXG4gICAgYXJtb3I6IGludFZhbHVlKGFybW9yRWxlbWVudC50ZXh0Q29udGVudCksXHJcbiAgICBhcm1vckVsZW1lbnQ6IGFybW9yRWxlbWVudCxcclxuICAgIGRhbWFnZTogaW50VmFsdWUoZGFtYWdlRWxlbWVudC50ZXh0Q29udGVudCksXHJcbiAgICBkYW1hZ2VFbGVtZW50OiBkYW1hZ2VFbGVtZW50LFxyXG4gICAgaHA6IGludFZhbHVlKGhwRWxlbWVudC50ZXh0Q29udGVudCksXHJcbiAgICBocEVsZW1lbnQ6IGhwRWxlbWVudFxyXG4gIH07XHJcbn1cclxuIiwiaW1wb3J0IHtjcmVhdGVEb2N1bWVudH0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5pbXBvcnQgZ3JvdXBWaWV3U3RhdHMgZnJvbSAnLi9ncm91cFZpZXdTdGF0cyc7XHJcbmltcG9ydCByZXRyeUFqYXggZnJvbSAnLi9yZXRyeUFqYXgnO1xyXG5cclxuZnVuY3Rpb24gcGFyc2VHcm91cFN0YXRzKGh0bWwpIHtcclxuICB2YXIgZG9jID0gY3JlYXRlRG9jdW1lbnQoaHRtbCk7XHJcbiAgcmV0dXJuIGdyb3VwVmlld1N0YXRzKGRvYyk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEdyb3VwU3RhdHModmlld1N0YXRzKSB7XHJcbiAgcmV0dXJuIHJldHJ5QWpheCh2aWV3U3RhdHMpLnBpcGUocGFyc2VHcm91cFN0YXRzKTtcclxufVxyXG4iLCJpbXBvcnQge2NyZWF0ZURvY3VtZW50fSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCByZXRyeUFqYXggZnJvbSAnLi9yZXRyeUFqYXgnO1xyXG5pbXBvcnQge2RlZmVuZGVyTXVsdGlwbGllciwgbWVyY1JFfSBmcm9tICcuLi9zdXBwb3J0L2RhdGFPYmonO1xyXG5cclxuZnVuY3Rpb24gYWRkTWVyY1N0YXQobW91c2VvdmVyLCBzdGF0LCBpKSB7XHJcbiAgcmV0dXJuIHN0YXQgK1xyXG4gICAgTWF0aC5yb3VuZChOdW1iZXIobWVyY1JFW2ldLmV4ZWMobW91c2VvdmVyKVsxXSkgKiBkZWZlbmRlck11bHRpcGxpZXIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRNZXJjU3RhdHMocHJldiwgbWVyYykge1xyXG4gIHJldHVybiBwcmV2Lm1hcChhZGRNZXJjU3RhdC5iaW5kKG51bGwsIG1lcmMuZGF0YXNldC50aXBwZWQpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkQWxsTWVyY1N0YXRzKG1lcmNFbGVtZW50cykge1xyXG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUucmVkdWNlLmNhbGwobWVyY0VsZW1lbnRzLCBhZGRNZXJjU3RhdHMsXHJcbiAgICBbMCwgMCwgMCwgMCwgMF0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0cmFuc2Zvcm0obWVyY1RvdGFsKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGF0dGFjazogbWVyY1RvdGFsWzBdLFxyXG4gICAgZGVmZW5zZTogbWVyY1RvdGFsWzFdLFxyXG4gICAgYXJtb3I6IG1lcmNUb3RhbFsyXSxcclxuICAgIGRhbWFnZTogbWVyY1RvdGFsWzNdLFxyXG4gICAgaHA6IG1lcmNUb3RhbFs0XVxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlTWVyY1N0YXRzKGh0bWwpIHtcclxuICB2YXIgZG9jID0gY3JlYXRlRG9jdW1lbnQoaHRtbCk7XHJcbiAgdmFyIG1lcmNFbGVtZW50cyA9IGRvYy5xdWVyeVNlbGVjdG9yQWxsKCcjcENDIGltZ1tzcmMqPVwiL21lcmMvXCJdJyk7XHJcbiAgdmFyIG1lcmNUb3RhbCA9IGFkZEFsbE1lcmNTdGF0cyhtZXJjRWxlbWVudHMpO1xyXG4gIHJldHVybiB0cmFuc2Zvcm0obWVyY1RvdGFsKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TWVyY1N0YXRzKCkge1xyXG4gIHJldHVybiByZXRyeUFqYXgoJ2luZGV4LnBocD9jbWQ9Z3VpbGQmc3ViY21kPW1lcmNzJykucGlwZShwYXJzZU1lcmNTdGF0cyk7XHJcbn1cclxuIiwiaW1wb3J0IGFzc2V0cyBmcm9tICcuL2Fzc2V0cyc7XHJcbmltcG9ydCB7ZG9CdWZmTGlua3N9IGZyb20gJy4uLy4uL3N1cHBvcnQvbGF5b3V0JztcclxuaW1wb3J0IGdldEdyb3VwU3RhdHMgZnJvbSAnLi4vLi4vYWpheC9nZXRHcm91cFN0YXRzJztcclxuaW1wb3J0IGdldE1lbWJyTGlzdCBmcm9tICcuLi8uLi9hamF4L2dldE1lbWJyTGlzdCc7XHJcbmltcG9ydCBnZXRNZXJjU3RhdHMgZnJvbSAnLi4vLi4vYWpheC9nZXRNZXJjU3RhdHMnO1xyXG5pbXBvcnQgZ2V0UHJvZmlsZSBmcm9tICcuLi8uLi9hamF4L2dldFByb2ZpbGUnO1xyXG5pbXBvcnQge3BsYXllckRhdGFPYmplY3R9IGZyb20gJy4uLy4uL2NvbW1vbi9jb21tb24nO1xyXG5pbXBvcnQgcmVkdWNlQnVmZkFycmF5IGZyb20gJy4uLy4uL2NvbW1vbi9yZWR1Y2VCdWZmQXJyYXknO1xyXG5pbXBvcnQgcmV0cnlBamF4IGZyb20gJy4uLy4uL2FqYXgvcmV0cnlBamF4JztcclxuaW1wb3J0IHtcclxuICBhZGRDb21tYXMsXHJcbiAgY3JlYXRlRG9jdW1lbnQsXHJcbiAgZmFsbGJhY2ssXHJcbiAgZ2V0VmFsdWVcclxufSBmcm9tICcuLi8uLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCB7Y3JlYXRlQnV0dG9uLCBjcmVhdGVEaXZ9IGZyb20gJy4uLy4uL2NvbW1vbi9jRWxlbWVudCc7XHJcbmltcG9ydCB7ZGVmZW5kZXJNdWx0aXBsaWVyLCBub3dTZWNzfSBmcm9tICcuLi8uLi9zdXBwb3J0L2RhdGFPYmonO1xyXG5cclxudmFyIHJlbGljRGF0YTtcclxudmFyIGNvbnRhaW5lckRpdjtcclxudmFyIGxlZnREaXY7XHJcbnZhciBmZXRjaFN0YXRzQnRuO1xyXG52YXIgbWlkRGl2O1xyXG52YXIgcmlnaHREaXY7XHJcbnZhciBoaWRlUmVsaWNPZmZsaW5lO1xyXG52YXIgcGxheWVyO1xyXG52YXIgZ3VpbGRNZW1iZXJMaXN0O1xyXG52YXIgbXlEZWZlbmRlcnM7XHJcbnZhciB0d29NaW51dGVzO1xyXG52YXIgc2V2ZW5EYXlzO1xyXG52YXIgbWVtYmVyRXhjbHVzaW9ucyA9IFtcclxuICBmdW5jdGlvbihrZXkpIHtyZXR1cm4ga2V5ID09PSAnbGFzdFVwZGF0ZSc7fSxcclxuICBmdW5jdGlvbihrZXkpIHtyZXR1cm4gbXlEZWZlbmRlcnMuaW5kZXhPZihrZXkpICE9PSAtMTt9LFxyXG4gIGZ1bmN0aW9uKGtleSkge3JldHVybiAhZ3VpbGRNZW1iZXJMaXN0W2tleV0ubGFzdF9sb2dpbjt9LFxyXG4gIGZ1bmN0aW9uKGtleSkge3JldHVybiBOdW1iZXIoZ3VpbGRNZW1iZXJMaXN0W2tleV0ubGFzdF9sb2dpbikgPj0gdHdvTWludXRlczt9LFxyXG4gIGZ1bmN0aW9uKGtleSkge3JldHVybiBOdW1iZXIoZ3VpbGRNZW1iZXJMaXN0W2tleV0ubGFzdF9sb2dpbikgPD0gc2V2ZW5EYXlzO30sXHJcbiAgZnVuY3Rpb24oa2V5KSB7XHJcbiAgICByZXR1cm4gZ3VpbGRNZW1iZXJMaXN0W2tleV0ubGV2ZWwgPj0gNDAwICYmXHJcbiAgICAgIGd1aWxkTWVtYmVyTGlzdFtrZXldLmxldmVsIDw9IDQyMTtcclxuICB9LFxyXG4gIGZ1bmN0aW9uKGtleSkge1xyXG4gICAgcmV0dXJuIGd1aWxkTWVtYmVyTGlzdFtrZXldLmxldmVsID49IDQ0MSAmJlxyXG4gICAgICBndWlsZE1lbWJlckxpc3Rba2V5XS5sZXZlbCA8PSA0NTA7XHJcbiAgfVxyXG5dO1xyXG52YXIgcmVsaWNDb3VudDtcclxudmFyIHJlbGljTXVsdGlwbGllcjtcclxudmFyIHByb2Nlc3NpbmdTdGF0dXM7XHJcbnZhciBhdHRhY2tFbGVtZW50O1xyXG52YXIgZGVmUmF3QXR0YWNrO1xyXG52YXIgYXR0YWNrQnVmZmVkRWxlbWVudDtcclxudmFyIGRlZkJ1ZmZlZEF0dGFjaztcclxudmFyIGRlZmVuc2VFbGVtZW50O1xyXG52YXIgZGVmUmF3RGVmZW5zZTtcclxudmFyIGRlZmVuc2VCdWZmZWRFbGVtZW50O1xyXG52YXIgYXJtb3JFbGVtZW50O1xyXG52YXIgZGVmUmF3QXJtb3I7XHJcbnZhciBhcm1vckJ1ZmZlZEVsZW1lbnQ7XHJcbnZhciBkYW1hZ2VFbGVtZW50O1xyXG52YXIgZGVmUmF3RGFtYWdlO1xyXG52YXIgZGFtYWdlQnVmZmVkRWxlbWVudDtcclxudmFyIGRlZkJ1ZmZlZERhbWFnZTtcclxudmFyIGhwRWxlbWVudDtcclxudmFyIGRlZlJhd0hwO1xyXG52YXIgaHBCdWZmZWRFbGVtZW50O1xyXG52YXIgZGVmQ2xvYWtlZDtcclxudmFyIGRlZkNsb2FrZWRFbGVtZW50O1xyXG52YXIgZGVmUHJvY2Vzc2VkRWxlbWVudDtcclxudmFyIGRlZlByb2Nlc3NlZDtcclxudmFyIGRjMjI1RWxlbWVudDtcclxudmFyIGRjMTc1RWxlbWVudDtcclxudmFyIGdyb3VwQXR0YWNrRWxlbWVudDtcclxudmFyIGdyb3VwQXR0YWNrQnVmZmVkRWxlbWVudDtcclxudmFyIGdyb3VwRGVmZW5zZUVsZW1lbnQ7XHJcbnZhciBncm91cERlZmVuc2VCdWZmZWRFbGVtZW50O1xyXG52YXIgZ3JvdXBBcm1vckVsZW1lbnQ7XHJcbnZhciBncm91cEFybW9yQnVmZmVkRWxlbWVudDtcclxudmFyIGdyb3VwRGFtYWdlRWxlbWVudDtcclxudmFyIGdyb3VwRGFtYWdlQnVmZmVkRWxlbWVudDtcclxudmFyIGdyb3VwSFBFbGVtZW50O1xyXG52YXIgZ3JvdXBIUEJ1ZmZlZEVsZW1lbnQ7XHJcbnZhciBsZWFkRGVmZW5kZXI7XHJcbnZhciBncm91cFN0YXRzO1xyXG52YXIgbWVyY1N0YXRzO1xyXG5cclxuZnVuY3Rpb24gYWpheEZhaWx1cmUoanFYSFIpIHtcclxuICBwcm9jZXNzaW5nU3RhdHVzLnRleHRDb250ZW50ID0ganFYSFIuc3RhdHVzLnRvU3RyaW5nKCkgKyAnICcgK1xyXG4gICAganFYSFIuc3RhdHVzVGV4dDtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlRGVmVmFsdWVzKCkge1xyXG4gIGF0dGFja0VsZW1lbnQudGV4dENvbnRlbnQgPSBhZGRDb21tYXMoZGVmUmF3QXR0YWNrKTtcclxuICBkZWZlbnNlRWxlbWVudC50ZXh0Q29udGVudCA9IGFkZENvbW1hcyhkZWZSYXdEZWZlbnNlKTtcclxuICBhcm1vckVsZW1lbnQudGV4dENvbnRlbnQgPSBhZGRDb21tYXMoZGVmUmF3QXJtb3IpO1xyXG4gIGRhbWFnZUVsZW1lbnQudGV4dENvbnRlbnQgPSBhZGRDb21tYXMoZGVmUmF3RGFtYWdlKTtcclxuICBocEVsZW1lbnQudGV4dENvbnRlbnQgPSBhZGRDb21tYXMoZGVmUmF3SHApO1xyXG4gIGRlZkNsb2FrZWRFbGVtZW50LnRleHRDb250ZW50ID0gZGVmQ2xvYWtlZC50b1N0cmluZygpO1xyXG4gIGRlZlByb2Nlc3NlZCArPSAxO1xyXG4gIGRlZlByb2Nlc3NlZEVsZW1lbnQudGV4dENvbnRlbnQgPSBkZWZQcm9jZXNzZWQudG9TdHJpbmcoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVkdWN0TWVyY1N0YXRzKCkge1xyXG4gIGdyb3VwU3RhdHMuYXR0YWNrIC09IG1lcmNTdGF0cy5hdHRhY2s7XHJcbiAgZ3JvdXBTdGF0cy5kZWZlbnNlIC09IG1lcmNTdGF0cy5kZWZlbnNlO1xyXG4gIGdyb3VwU3RhdHMuYXJtb3IgLT0gbWVyY1N0YXRzLmFybW9yO1xyXG4gIGdyb3VwU3RhdHMuZGFtYWdlIC09IG1lcmNTdGF0cy5kYW1hZ2U7XHJcbiAgZ3JvdXBTdGF0cy5ocCAtPSBtZXJjU3RhdHMuaHA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZUdyb3VwKCkge1xyXG4gIHByb2Nlc3NpbmdTdGF0dXMudGV4dENvbnRlbnQgPSAnUHJvY2Vzc2luZyBhdHRhY2tpbmcgZ3JvdXAgc3RhdHMgLi4uICc7XHJcbiAgaWYgKG1lcmNTdGF0cykge2RlZHVjdE1lcmNTdGF0cygpO31cclxuICBncm91cEF0dGFja0VsZW1lbnQudGV4dENvbnRlbnQgPSBhZGRDb21tYXMoZ3JvdXBTdGF0cy5hdHRhY2spO1xyXG4gIGdyb3VwRGVmZW5zZUVsZW1lbnQudGV4dENvbnRlbnQgPSBhZGRDb21tYXMoZ3JvdXBTdGF0cy5kZWZlbnNlKTtcclxuICBncm91cEFybW9yRWxlbWVudC50ZXh0Q29udGVudCA9IGFkZENvbW1hcyhncm91cFN0YXRzLmFybW9yKTtcclxuICBncm91cERhbWFnZUVsZW1lbnQudGV4dENvbnRlbnQgPSBhZGRDb21tYXMoZ3JvdXBTdGF0cy5kYW1hZ2UpO1xyXG4gIGdyb3VwSFBFbGVtZW50LnRleHRDb250ZW50ID0gYWRkQ29tbWFzKGdyb3VwU3RhdHMuaHApO1xyXG5cclxuICB2YXIgYnVmZnMgPSByZWR1Y2VCdWZmQXJyYXkocGxheWVyLmJ1ZmZzKTtcclxuXHJcbiAgdmFyIG5pZ2h0bWFyZVZpc2FnZUVmZmVjdCA9IE1hdGguY2VpbChncm91cFN0YXRzLmF0dGFjayAqXHJcbiAgICAoZmFsbGJhY2soYnVmZnNbJ05pZ2h0bWFyZSBWaXNhZ2UnXSwgMCkgKiAwLjAwMjUpKTtcclxuICBncm91cFN0YXRzLmF0dGFjayAtPSBuaWdodG1hcmVWaXNhZ2VFZmZlY3Q7XHJcblxyXG4gIHZhciBzdG9yZWRGbGluY2hFZmZlY3RWYWx1ZSA9IE1hdGguY2VpbChncm91cFN0YXRzLmF0dGFjayAqXHJcbiAgICBsZWFkRGVmZW5kZXIuZmxpbmNoTGV2ZWwgKiAwLjAwMSk7XHJcbiAgZ3JvdXBBdHRhY2tCdWZmZWRFbGVtZW50LnRleHRDb250ZW50ID0gYWRkQ29tbWFzKGdyb3VwU3RhdHMuYXR0YWNrIC1cclxuICAgIHN0b3JlZEZsaW5jaEVmZmVjdFZhbHVlKTtcclxuXHJcbiAgdmFyIGRlZmVuc2VXaXRoQ29uc3RpdHV0aW9uID0gTWF0aC5jZWlsKGdyb3VwU3RhdHMuZGVmZW5zZSAqXHJcbiAgICAoMSArIGZhbGxiYWNrKGJ1ZmZzLkNvbnN0aXR1dGlvbiwgMCkgKiAwLjAwMSkpO1xyXG4gIHZhciB0b3RhbERlZmVuc2UgPSBkZWZlbnNlV2l0aENvbnN0aXR1dGlvbiArIG5pZ2h0bWFyZVZpc2FnZUVmZmVjdDtcclxuICBncm91cERlZmVuc2VCdWZmZWRFbGVtZW50LnRleHRDb250ZW50ID0gYWRkQ29tbWFzKHRvdGFsRGVmZW5zZSk7XHJcblxyXG4gIGdyb3VwQXJtb3JCdWZmZWRFbGVtZW50LnRleHRDb250ZW50ID0gYWRkQ29tbWFzKGdyb3VwU3RhdHMuYXJtb3IgK1xyXG4gICAgTWF0aC5mbG9vcihncm91cFN0YXRzLmFybW9yICogZmFsbGJhY2soYnVmZnMuU2FuY3R1YXJ5LCAwKSAqIDAuMDAxKSk7XHJcblxyXG4gIHZhciBmb3J0aXR1ZGVCb251c0hQID0gTWF0aC5jZWlsKGRlZmVuc2VXaXRoQ29uc3RpdHV0aW9uICpcclxuICAgIGZhbGxiYWNrKGJ1ZmZzLkZvcnRpdHVkZSwgMCkgKiAwLjAwMSk7XHJcbiAgdmFyIGNoaVN0cmlrZUJvbnVzRGFtYWdlID0gTWF0aC5jZWlsKChncm91cFN0YXRzLmhwICsgZm9ydGl0dWRlQm9udXNIUCkgKlxyXG4gICAgZmFsbGJhY2soYnVmZnNbJ0NoaSBTdHJpa2UnXSwgMCkgKiAwLjAwMSk7XHJcbiAgdmFyIHN0b3JlZFRlcnJvcml6ZUVmZmVjdFZhbHVlID0gTWF0aC5jZWlsKFxyXG4gICAgZ3JvdXBTdGF0cy5kYW1hZ2UgKiBsZWFkRGVmZW5kZXIudGVycm9yaXplTGV2ZWwgKiAwLjAwMSk7XHJcbiAgZ3JvdXBEYW1hZ2VCdWZmZWRFbGVtZW50LnRleHRDb250ZW50ID0gYWRkQ29tbWFzKGdyb3VwU3RhdHMuZGFtYWdlICtcclxuICAgIGNoaVN0cmlrZUJvbnVzRGFtYWdlIC0gc3RvcmVkVGVycm9yaXplRWZmZWN0VmFsdWUpO1xyXG4gIGdyb3VwSFBCdWZmZWRFbGVtZW50LnRleHRDb250ZW50ID0gYWRkQ29tbWFzKGdyb3VwU3RhdHMuaHAgK1xyXG4gICAgZm9ydGl0dWRlQm9udXNIUCk7XHJcblxyXG4gIC8vIEVmZmVjdCBvbiBkZWZlbmRpbmcgZ3JvdXAgZnJvbSBGbGluY2ggb24gYXR0YWNraW5nIGdyb3VwLlxyXG4gIHZhciBmbGluY2hFZmZlY3RWYWx1ZSA9IE1hdGguY2VpbChkZWZCdWZmZWRBdHRhY2sgKlxyXG4gICAgZmFsbGJhY2soYnVmZnMuRmxpbmNoLCAwKSAqIDAuMDAxKTtcclxuICBkZWZlbnNlQnVmZmVkRWxlbWVudC50ZXh0Q29udGVudCA9IGFkZENvbW1hcyhkZWZCdWZmZWRBdHRhY2sgLVxyXG4gICAgZmxpbmNoRWZmZWN0VmFsdWUpO1xyXG4gIHZhciB0ZXJyb3JpemVFZmZlY3RWYWx1ZSA9IE1hdGguY2VpbChkZWZCdWZmZWREYW1hZ2UgKlxyXG4gICAgZmFsbGJhY2soYnVmZnMuVGVycm9yaXplLCAwKSAqIDAuMDAxKTtcclxuICBkYW1hZ2VCdWZmZWRFbGVtZW50LnRleHRDb250ZW50ID0gYWRkQ29tbWFzKGRlZkJ1ZmZlZERhbWFnZSAtXHJcbiAgICB0ZXJyb3JpemVFZmZlY3RWYWx1ZSk7XHJcblxyXG4gIHByb2Nlc3NpbmdTdGF0dXMudGV4dENvbnRlbnQgPSAnRG9uZS4nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb0NhbGN1bGF0aW9ucygpIHtcclxuICBwcm9jZXNzaW5nU3RhdHVzLnRleHRDb250ZW50ID0gJ1Byb2Nlc3NpbmcgZGVmZW5kaW5nIGd1aWxkIHN0YXRzIC4uLiAnO1xyXG5cclxuICBkZWZSYXdBdHRhY2sgKz0gTWF0aC5yb3VuZChsZWFkRGVmZW5kZXIuYXR0YWNrVmFsdWUgKiByZWxpY011bHRpcGxpZXIpO1xyXG4gIHZhciBuaWdodG1hcmVWaXNhZ2VFZmZlY3QgPSBNYXRoLmNlaWwoZGVmUmF3QXR0YWNrICpcclxuICAgIChsZWFkRGVmZW5kZXIubmlnaHRtYXJlVmlzYWdlTGV2ZWwgKiAwLjAwMjUpKTtcclxuXHJcbiAgZGVmUmF3RGVmZW5zZSArPSBNYXRoLnJvdW5kKGxlYWREZWZlbmRlci5kZWZlbnNlVmFsdWUgKiByZWxpY011bHRpcGxpZXIpO1xyXG4gIHZhciBkZWZlbnNlV2l0aENvbnN0aXR1dGlvbiA9IE1hdGguY2VpbChkZWZSYXdEZWZlbnNlICpcclxuICAgICgxICsgbGVhZERlZmVuZGVyLmNvbnN0aXR1dGlvbkxldmVsICogMC4wMDEpKTtcclxuICB2YXIgZGVmQnVmZmVkRGVmZW5zZSA9IGRlZmVuc2VXaXRoQ29uc3RpdHV0aW9uICsgbmlnaHRtYXJlVmlzYWdlRWZmZWN0O1xyXG5cclxuICBkZWZSYXdBcm1vciArPSBNYXRoLnJvdW5kKGxlYWREZWZlbmRlci5hcm1vclZhbHVlICogcmVsaWNNdWx0aXBsaWVyKTtcclxuXHJcbiAgZGVmUmF3RGFtYWdlICs9IE1hdGgucm91bmQobGVhZERlZmVuZGVyLmRhbWFnZVZhbHVlICogcmVsaWNNdWx0aXBsaWVyKTtcclxuICBkZWZSYXdIcCArPSBNYXRoLnJvdW5kKGxlYWREZWZlbmRlci5ocFZhbHVlICogcmVsaWNNdWx0aXBsaWVyKTtcclxuICB2YXIgZm9ydGl0dWRlQm9udXNIUCA9IE1hdGguY2VpbChkZWZlbnNlV2l0aENvbnN0aXR1dGlvbiAqXHJcbiAgICBsZWFkRGVmZW5kZXIuZm9ydGl0dWRlTGV2ZWwgKiAwLjAwMSk7XHJcbiAgdmFyIGRlZkJ1ZmZlZEhwID0gZGVmUmF3SHAgKyBmb3J0aXR1ZGVCb251c0hQO1xyXG4gIHZhciBjaGlTdHJpa2VCb251c0RhbWFnZSA9IE1hdGguY2VpbChkZWZCdWZmZWRIcCAqXHJcbiAgICBsZWFkRGVmZW5kZXIuY2hpU3RyaWtlTGV2ZWwgKiAwLjAwMSk7XHJcblxyXG4gIHVwZGF0ZURlZlZhbHVlcygpO1xyXG5cclxuICBkZWZCdWZmZWRBdHRhY2sgPSBkZWZSYXdBdHRhY2sgLSBuaWdodG1hcmVWaXNhZ2VFZmZlY3Q7XHJcbiAgYXR0YWNrQnVmZmVkRWxlbWVudC50ZXh0Q29udGVudCA9IGFkZENvbW1hcyhkZWZCdWZmZWRBdHRhY2spO1xyXG4gIGRlZmVuc2VCdWZmZWRFbGVtZW50LnRleHRDb250ZW50ID0gYWRkQ29tbWFzKGRlZkJ1ZmZlZERlZmVuc2UpO1xyXG4gIGRjMjI1RWxlbWVudC50ZXh0Q29udGVudCA9IGFkZENvbW1hcyhNYXRoLmNlaWwoXHJcbiAgICBkZWZCdWZmZWREZWZlbnNlICogMC41NSkpO1xyXG4gIGRjMTc1RWxlbWVudC50ZXh0Q29udGVudCA9IGFkZENvbW1hcyhNYXRoLmNlaWwoXHJcbiAgICBkZWZCdWZmZWREZWZlbnNlICogMC42NSkpO1xyXG4gIGFybW9yQnVmZmVkRWxlbWVudC50ZXh0Q29udGVudCA9IGFkZENvbW1hcyhkZWZSYXdBcm1vciArXHJcbiAgICBNYXRoLmZsb29yKGRlZlJhd0FybW9yICogbGVhZERlZmVuZGVyLnNhbmN0dWFyeUxldmVsICogMC4wMDEpKTtcclxuICBkZWZCdWZmZWREYW1hZ2UgPSBkZWZSYXdEYW1hZ2UgKyBjaGlTdHJpa2VCb251c0RhbWFnZTtcclxuICBkYW1hZ2VCdWZmZWRFbGVtZW50LnRleHRDb250ZW50ID0gYWRkQ29tbWFzKGRlZkJ1ZmZlZERhbWFnZSk7XHJcbiAgaHBCdWZmZWRFbGVtZW50LnRleHRDb250ZW50ID0gYWRkQ29tbWFzKGRlZkJ1ZmZlZEhwKTtcclxuXHJcbiAgaWYgKGxlYWREZWZlbmRlci5jbG9ha0xldmVsICE9PSAwKSB7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnTERDbG9ha2VkJykudGV4dENvbnRlbnQgPSAnWWVzJztcclxuICB9XHJcblxyXG4gIGlmIChwbGF5ZXIuaGFzR3JvdXApIHtcclxuICAgIGNhbGN1bGF0ZUdyb3VwKCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHByb2Nlc3NpbmdTdGF0dXMudGV4dENvbnRlbnQgPSAnRG9uZS4nO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1pc3NpbmdNZW1iZXJzKG1lbWJyTGlzdCkge1xyXG4gIGd1aWxkTWVtYmVyTGlzdCA9IG1lbWJyTGlzdDtcclxuICB2YXIgbXlNZW1iZXJzID0gT2JqZWN0LmtleXMoZ3VpbGRNZW1iZXJMaXN0KTtcclxuICB0d29NaW51dGVzID0gbm93U2VjcyAtIDEyMDtcclxuICBzZXZlbkRheXMgPSBub3dTZWNzIC0gNjA0ODAwO1xyXG4gIHZhciBmaWx0ZXJlZCA9IG15TWVtYmVycy5yZWR1Y2UoZnVuY3Rpb24ocHJldiwga2V5KSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lbWJlckV4Y2x1c2lvbnMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgaWYgKG1lbWJlckV4Y2x1c2lvbnNbaV0oa2V5KSkge3JldHVybiBwcmV2O31cclxuICAgIH1cclxuICAgIHByZXYucHVzaCgnPGEgaHJlZj1cImluZGV4LnBocD9jbWQ9cHJvZmlsZSZwbGF5ZXJfaWQ9JyArXHJcbiAgICAgIGd1aWxkTWVtYmVyTGlzdFtrZXldLmlkICsgJ1wiPicgKyBrZXkgKyAnPC9hPicpO1xyXG4gICAgcmV0dXJuIHByZXY7XHJcbiAgfSwgW10pO1xyXG4gIGNvbnRhaW5lckRpdi5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsXHJcbiAgICAnPGRpdiBjbGFzcz1cImZzaEZsb2F0TGVmdCBmc2hSZWxpY0xvd0RpdlwiPjx0YWJsZSBjbGFzcz1cInJlbGljVFwiPicgK1xyXG4gICAgJzx0aGVhZD48dHI+PHRoPk9mZmxpbmUgZ3VpbGQgbWVtYmVycyBub3QgYXQgcmVsaWM6PC90aD48L3RyPjwvdGhlYWQ+JyArXHJcbiAgICAnPHRib2R5Pjx0cj48dGQ+JyArIGZpbHRlcmVkLmpvaW4oJyAnKSArICc8L3RkPjwvdHI+PC90Ym9keT4nICtcclxuICAgICc8L3RhYmxlPjwvZGl2PicpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXREZWZWYXJzKCkge1xyXG4gIGF0dGFja0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXR0YWNrVmFsdWUnKTtcclxuICBhdHRhY2tCdWZmZWRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2F0dGFja1ZhbHVlQnVmZmVkJyk7XHJcbiAgZGVmZW5zZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVmZW5zZVZhbHVlJyk7XHJcbiAgZGVmZW5zZUJ1ZmZlZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVmZW5zZVZhbHVlQnVmZmVkJyk7XHJcbiAgYXJtb3JFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FybW9yVmFsdWUnKTtcclxuICBhcm1vckJ1ZmZlZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXJtb3JWYWx1ZUJ1ZmZlZCcpO1xyXG4gIGRhbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGFtYWdlVmFsdWUnKTtcclxuICBkYW1hZ2VCdWZmZWRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RhbWFnZVZhbHVlQnVmZmVkJyk7XHJcbiAgaHBFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hwVmFsdWUnKTtcclxuICBocEJ1ZmZlZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaHBWYWx1ZUJ1ZmZlZCcpO1xyXG4gIGRlZkNsb2FrZWRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RlZmVuZGVyc0Nsb2FrZWQnKTtcclxuICBkZWZQcm9jZXNzZWRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RlZmVuZGVyc1Byb2Nlc3NlZCcpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRBdGtWYXJzKCkge1xyXG4gIGRjMjI1RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdEQzIyNScpO1xyXG4gIGRjMTc1RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdEQzE3NScpO1xyXG4gIGdyb3VwQXR0YWNrRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdHcm91cEF0dGFjaycpO1xyXG4gIGdyb3VwQXR0YWNrQnVmZmVkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdHcm91cEF0dGFja0J1ZmZlZCcpO1xyXG4gIGdyb3VwRGVmZW5zZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnR3JvdXBEZWZlbnNlJyk7XHJcbiAgZ3JvdXBEZWZlbnNlQnVmZmVkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdHcm91cERlZmVuc2VCdWZmZWQnKTtcclxuICBncm91cEFybW9yRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdHcm91cEFybW9yJyk7XHJcbiAgZ3JvdXBBcm1vckJ1ZmZlZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnR3JvdXBBcm1vckJ1ZmZlZCcpO1xyXG4gIGdyb3VwRGFtYWdlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdHcm91cERhbWFnZScpO1xyXG4gIGdyb3VwRGFtYWdlQnVmZmVkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdHcm91cERhbWFnZUJ1ZmZlZCcpO1xyXG4gIGdyb3VwSFBFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0dyb3VwSFAnKTtcclxuICBncm91cEhQQnVmZmVkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdHcm91cEhQQnVmZmVkJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByZXBhcmVEaXZzKCkge1xyXG4gIGZldGNoU3RhdHNCdG4uY2xhc3NMaXN0LmFkZCgnZnNoSGlkZScpO1xyXG4gIGhpZGVSZWxpY09mZmxpbmUgPSBnZXRWYWx1ZSgnaGlkZVJlbGljT2ZmbGluZScpO1xyXG4gIGlmIChyZWxpY0RhdGEuaXNfb3duZXIgJiYgIWhpZGVSZWxpY09mZmxpbmUpIHtcclxuICAgIGdldE1lbWJyTGlzdChmYWxzZSkuZG9uZShtaXNzaW5nTWVtYmVycyk7XHJcbiAgfVxyXG4gIGxlZnREaXYuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBhc3NldHMucHJvYyk7XHJcbiAgcHJvY2Vzc2luZ1N0YXR1cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdQcm9jZXNzaW5nU3RhdHVzJyk7XHJcbiAgbWlkRGl2ID0gY3JlYXRlRGl2KHtcclxuICAgIGNsYXNzTmFtZTogJ2ZzaEZsb2F0TGVmdCBmc2hSZWxpY01pZERpdicsXHJcbiAgICBpbm5lckhUTUw6IGFzc2V0cy5kZWZTdGF0c1xyXG4gIH0pO1xyXG4gIGNvbnRhaW5lckRpdi5hcHBlbmRDaGlsZChtaWREaXYpO1xyXG4gIHNldERlZlZhcnMoKTtcclxuICByaWdodERpdiA9IGNyZWF0ZURpdih7XHJcbiAgICBjbGFzc05hbWU6ICdmc2hGbG9hdExlZnQgZnNoUmVsaWNSaWdodERpdicsXHJcbiAgICBpbm5lckhUTUw6IGFzc2V0cy5hdGtTdGF0c1xyXG4gIH0pO1xyXG4gIGNvbnRhaW5lckRpdi5hcHBlbmRDaGlsZChyaWdodERpdik7XHJcbiAgc2V0QXRrVmFycygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRHdWlsZCgpIHtcclxuICByZXR1cm4gcmV0cnlBamF4KHtcclxuICAgIHVybDogJ2luZGV4LnBocCcsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIGNtZDogJ2d1aWxkJyxcclxuICAgICAgc3ViY21kOiAndmlldycsXHJcbiAgICAgIGd1aWxkX2lkOiByZWxpY0RhdGEuY29udHJvbGxlZF9ieS5ndWlsZF9pZFxyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxjUmVsaWNNdWx0aXBsaWVyKHJlbHMpIHtcclxuICBpZiAocmVscyA9PT0gMSkge3JldHVybiAxLjU7fVxyXG4gIHJldHVybiBNYXRoLnJvdW5kKCgxIC0gcmVscyAvIDEwKSAqIDEwMCkgLyAxMDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlR3VpbGQoaHRtbCkge1xyXG4gIHZhciBkb2MgPSBjcmVhdGVEb2N1bWVudChodG1sKTtcclxuICB2YXIgbm9kZUxpc3QgPSBkb2MucXVlcnlTZWxlY3RvckFsbCgnI3BDQyBpbWdbc3JjKj1cIi9yZWxpY3MvXCJdJyk7XHJcbiAgcmVsaWNDb3VudCA9IG5vZGVMaXN0Lmxlbmd0aDtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVsaWNDb3VudCcpLnRleHRDb250ZW50ID0gcmVsaWNDb3VudC50b1N0cmluZygpO1xyXG4gIHJlbGljTXVsdGlwbGllciA9IGNhbGNSZWxpY011bHRpcGxpZXIocmVsaWNDb3VudCk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0xEUGVyY2VudGFnZScpLnRleHRDb250ZW50ID1cclxuICAgIChyZWxpY011bHRpcGxpZXIgKiAxMDApLnRvU3RyaW5nKCkgKyAnJSc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlRGVmZW5kZXIoanNvbikge1xyXG4gIHZhciBkZWZlbmRlciA9IHBsYXllckRhdGFPYmplY3QoanNvbik7XHJcbiAgZGVmUmF3QXR0YWNrICs9IE1hdGgucm91bmQoZGVmZW5kZXIuYXR0YWNrVmFsdWUgKiBkZWZlbmRlck11bHRpcGxpZXIpO1xyXG4gIGRlZlJhd0RlZmVuc2UgKz0gTWF0aC5yb3VuZChkZWZlbmRlci5kZWZlbnNlVmFsdWUgKlxyXG4gICAgZGVmZW5kZXJNdWx0aXBsaWVyKTtcclxuICBkZWZSYXdBcm1vciArPSBNYXRoLnJvdW5kKGRlZmVuZGVyLmFybW9yVmFsdWUgKiBkZWZlbmRlck11bHRpcGxpZXIpO1xyXG4gIGRlZlJhd0RhbWFnZSArPSBNYXRoLnJvdW5kKGRlZmVuZGVyLmRhbWFnZVZhbHVlICogZGVmZW5kZXJNdWx0aXBsaWVyKTtcclxuICBkZWZSYXdIcCArPSBNYXRoLnJvdW5kKGRlZmVuZGVyLmhwVmFsdWUgKiBkZWZlbmRlck11bHRpcGxpZXIpO1xyXG4gIGlmIChkZWZlbmRlci5jbG9ha0xldmVsICE9PSAwKSB7ZGVmQ2xvYWtlZCArPSAxO31cclxuICB1cGRhdGVEZWZWYWx1ZXMoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3RvcmVMZWFkRGVmZW5kZXIoanNvbikge1xyXG4gIGxlYWREZWZlbmRlciA9IHBsYXllckRhdGFPYmplY3QoanNvbik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEdyb3VwcygpIHtcclxuICByZXR1cm4gcmV0cnlBamF4KHtcclxuICAgIHVybDogJ2luZGV4LnBocCcsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgIGNtZDogJ2d1aWxkJyxcclxuICAgICAgc3ViY21kOiAnZ3JvdXBzJ1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdG9yZUdyb3VwU3RhdHMob2JqKSB7XHJcbiAgZ3JvdXBTdGF0cyA9IG9iajtcclxufVxyXG5cclxuZnVuY3Rpb24gc3RvcmVNZXJjU3RhdHMob2JqKSB7XHJcbiAgbWVyY1N0YXRzID0gb2JqO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUdyb3VwcyhodG1sKSB7XHJcbiAgdmFyIGRvYyA9IGNyZWF0ZURvY3VtZW50KGh0bWwpO1xyXG4gIHZhciBkaXNiYW5kID0gZG9jLnF1ZXJ5U2VsZWN0b3IoJyNwQ0MgYVtocmVmKj1cImNvbmZpcm1EaXNiYW5kXCJdJyk7XHJcbiAgdmFyIHZpZXdTdGF0cyA9IGRpc2JhbmQucHJldmlvdXNFbGVtZW50U2libGluZy5ocmVmO1xyXG4gIHZhciBwcm0gPSBbZ2V0R3JvdXBTdGF0cyh2aWV3U3RhdHMpLmRvbmUoc3RvcmVHcm91cFN0YXRzKV07XHJcbiAgdmFyIGhhc01lcmMgPSBkaXNiYW5kLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXHJcbiAgICAucHJldmlvdXNFbGVtZW50U2libGluZy5pbm5lckhUTUwuaW5kZXhPZignXCIjMDAwMDk5XCInKSAhPT0gLTE7XHJcbiAgaWYgKGhhc01lcmMpIHtcclxuICAgIHBybS5wdXNoKGdldE1lcmNTdGF0cygpLmRvbmUoc3RvcmVNZXJjU3RhdHMpKTtcclxuICB9XHJcbiAgcmV0dXJuICQud2hlbi5hcHBseSgkLCBwcm0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldENvdW50ZXJzKCkge1xyXG4gIGRlZlJhd0F0dGFjayA9IDA7XHJcbiAgZGVmUmF3RGVmZW5zZSA9IDA7XHJcbiAgZGVmUmF3QXJtb3IgPSAwO1xyXG4gIGRlZlJhd0RhbWFnZSA9IDA7XHJcbiAgZGVmUmF3SHAgPSAwO1xyXG4gIGRlZkNsb2FrZWQgPSAwO1xyXG4gIGRlZlByb2Nlc3NlZCA9IDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFN0YXRzKCkge1xyXG4gIHByZXBhcmVEaXZzKCk7XHJcbiAgcmVzZXRDb3VudGVycygpO1xyXG4gIHBsYXllciA9IEdhbWVEYXRhLnBsYXllcigpO1xyXG4gIHZhciBwcm0gPSBbXTtcclxuICBwcm0ucHVzaChnZXRHdWlsZCgpLmRvbmUocGFyc2VHdWlsZCkpO1xyXG4gIGlmIChwbGF5ZXIuaGFzR3JvdXApIHtcclxuICAgIHBybS5wdXNoKGdldEdyb3VwcygpLnBpcGUocGFyc2VHcm91cHMpKTtcclxuICB9XHJcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBteURlZmVuZGVycy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgcHJtLnB1c2goZ2V0UHJvZmlsZShteURlZmVuZGVyc1tpXSkuZG9uZShwYXJzZURlZmVuZGVyKVxyXG4gICAgICAuZmFpbChhamF4RmFpbHVyZSkpO1xyXG4gIH1cclxuICBwcm0ucHVzaChnZXRQcm9maWxlKG15RGVmZW5kZXJzWzBdKS5kb25lKHN0b3JlTGVhZERlZmVuZGVyKSk7XHJcbiAgJC53aGVuLmFwcGx5KCQsIHBybSkuZG9uZShkb0NhbGN1bGF0aW9ucyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldHVwKCkge1xyXG4gIG15RGVmZW5kZXJzID0gcmVsaWNEYXRhLmRlZmVuZGVycy5tYXAoZnVuY3Rpb24oeCkge1xyXG4gICAgcmV0dXJuIHgucGxheWVyX25hbWU7XHJcbiAgfSk7XHJcbiAgaWYgKGNvbnRhaW5lckRpdikge1xyXG4gICAgY29udGFpbmVyRGl2LmlubmVySFRNTCA9ICcnO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb250YWluZXJEaXYgPSBjcmVhdGVEaXYoe2NsYXNzTmFtZTogJ2JvZHknfSk7XHJcbiAgfVxyXG4gIGxlZnREaXYgPSBjcmVhdGVEaXYoe2NsYXNzTmFtZTogJ2ZzaEZsb2F0TGVmdCBmc2hSZWxpY0xlZnREaXYnfSk7XHJcbiAgY29udGFpbmVyRGl2LmFwcGVuZENoaWxkKGxlZnREaXYpO1xyXG4gIGlmIChyZWxpY0RhdGEuaXNfb3duZXIpIHtcclxuICAgIGxlZnREaXYuYXBwZW5kQ2hpbGQoZG9CdWZmTGlua3MobXlEZWZlbmRlcnMpKTtcclxuICB9XHJcbiAgZmV0Y2hTdGF0c0J0biA9IGNyZWF0ZUJ1dHRvbih7XHJcbiAgICBjbGFzc05hbWU6ICdjdXN0b21idXR0b24nLFxyXG4gICAgdGV4dENvbnRlbnQ6ICdGZXRjaCBTdGF0cydcclxuICB9KTtcclxuICBmZXRjaFN0YXRzQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZ2V0U3RhdHMpO1xyXG4gIGxlZnREaXYuYXBwZW5kQ2hpbGQoZmV0Y2hTdGF0c0J0bik7XHJcbiAgdmFyIGRpYWxvZ1JlbGljID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RpYWxvZy1yZWxpYycpO1xyXG4gIGRpYWxvZ1JlbGljLmFwcGVuZENoaWxkKGNvbnRhaW5lckRpdik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHZpZXdSZWxpYyhlLCBkYXRhKSB7XHJcbiAgcmVsaWNEYXRhID0gZGF0YS5yZXNwb25zZS5kYXRhO1xyXG4gIGlmIChyZWxpY0RhdGEuZGVmZW5kZXJzLmxlbmd0aCA+IDApIHtzZXR1cCgpO31cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0UmVsaWMoKSB7XHJcbiAgJC5zdWJzY3JpYmUoJzktc3VjY2Vzcy5hY3Rpb24tcmVzcG9uc2UnLCB2aWV3UmVsaWMpO1xyXG59XHJcbiIsImltcG9ydCByZXRyeUFqYXggZnJvbSAnLi4vYWpheC9yZXRyeUFqYXgnO1xyXG5pbXBvcnQge2FkZENvbW1hcywgZmFsbGJhY2ssIHJuZCwgdGVzdFF1YW50fSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCB7Y3JlYXRlQnV0dG9uLCBjcmVhdGVEaXYsIGNyZWF0ZUlucHV0fSBmcm9tICcuLi9jb21tb24vY0VsZW1lbnQnO1xyXG5cclxudmFyIHNob3BwaW5nRGF0YTtcclxudmFyIGRpYWxvZztcclxudmFyIGpEaWFsb2c7XHJcbnZhciBmc2hEaXY7XHJcbnZhciBudW1JbnB1dDtcclxudmFyIHFiQnRuO1xyXG52YXIgcmVzdWx0RGl2O1xyXG5cclxuZnVuY3Rpb24gcXVpY2tCdXkoKSB7XHJcbiAgcmV0dXJuIHJldHJ5QWpheCh7XHJcbiAgICBjYWNoZTogZmFsc2UsXHJcbiAgICB1cmw6ICdmZXRjaGRhdGEucGhwJyxcclxuICAgIGRhdGE6IHtcclxuICAgICAgYTogMTQsXHJcbiAgICAgIGQ6IDAsXHJcbiAgICAgIGlkOiBzaG9wcGluZ0RhdGEuaWQsXHJcbiAgICAgIGl0ZW1faWQ6IHNob3BwaW5nRGF0YS5pdGVtSWQsXHJcbiAgICAgIF9ybmQ6IHJuZCgpXHJcbiAgICB9LFxyXG4gICAgZGF0YVR5cGU6ICdqc29uJ1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBxdWlja0RvbmUoZGF0YSkge1xyXG4gIHZhciByZXNwID0gZGF0YS5yZXNwb25zZS5yZXNwb25zZTtcclxuICB2YXIgcm1zZyA9IGRhdGEucmVzcG9uc2UubXNnO1xyXG4gIHZhciBtc2c7XHJcbiAgaWYgKHJlc3AgIT09IDApIHtcclxuICAgIHZhciBmaXJzdFRhZyA9IHJtc2cuaW5kZXhPZignPCcpO1xyXG4gICAgaWYgKGZpcnN0VGFnICE9PSAtMSkge1xyXG4gICAgICBtc2cgPSBybXNnLnN1YnN0cmluZygwLCBmaXJzdFRhZyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtc2cgPSBybXNnO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBtc2cgPSAnWW91IHB1cmNoYXNlZCAnICsgZGF0YS5yZXNwb25zZS5kYXRhLm5hbWUgK1xyXG4gICAgICAnIGZvciAnICsgYWRkQ29tbWFzKGRhdGEucmVzcG9uc2UuZGF0YS5jb3N0KSArICcgZ29sZC4nO1xyXG4gIH1cclxuICByZXN1bHREaXYuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBtc2cgKyAnPGJyPicpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBub3JtYWxCdXkoKSB7XHJcbiAgR2FtZURhdGEuZG9BY3Rpb24oMTQsIDMsIHtcclxuICAgIGlkOiBzaG9wcGluZ0RhdGEuaWQsXHJcbiAgICBpdGVtX2lkOiBzaG9wcGluZ0RhdGEuaXRlbUlkXHJcbiAgfSwgMCk7XHJcbiAgakRpYWxvZy5jbG9zZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBxQnV5KCkge1xyXG4gIHZhciB0aGVWYWx1ZSA9IHRlc3RRdWFudChudW1JbnB1dC52YWx1ZSk7XHJcbiAgaWYgKCF0aGVWYWx1ZSkge3JldHVybjt9XHJcbiAgdmFyIHBybSA9IFtdO1xyXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgdGhlVmFsdWU7IGkgKz0gMSkge1xyXG4gICAgcHJtLnB1c2gocXVpY2tCdXkoKS5kb25lKHF1aWNrRG9uZSkpO1xyXG4gIH1cclxuICAkLndoZW4uYXBwbHkoJCwgcHJtKS5kb25lKG5vcm1hbEJ1eSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluamVjdFF1aWNrQnV5KCkge1xyXG4gIGZzaERpdiA9IGNyZWF0ZURpdih7XHJcbiAgICBjbGFzc05hbWU6ICdmc2hDbGVhcicsXHJcbiAgICB0ZXh0Q29udGVudDogJ1NlbGVjdCBob3cgbWFueSB0byBxdWljay1idXk6J1xyXG4gIH0pO1xyXG4gIG51bUlucHV0ID0gY3JlYXRlSW5wdXQoe1xyXG4gICAgaWQ6ICdidXlBbW91bnQnLFxyXG4gICAgY2xhc3NOYW1lOiAnZnNoTnVtYmVySW5wdXQnLFxyXG4gICAgbWluOiAxLFxyXG4gICAgbWF4OiA5OSxcclxuICAgIHZhbHVlOiAxLFxyXG4gICAgdHlwZTogJ251bWJlcidcclxuICB9KTtcclxuICBmc2hEaXYuYXBwZW5kQ2hpbGQobnVtSW5wdXQpO1xyXG4gIHFiQnRuID0gY3JlYXRlQnV0dG9uKHt0ZXh0Q29udGVudDogJ1F1aWNrLWJ1eSd9KTtcclxuICBxYkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHFCdXkpO1xyXG4gIGZzaERpdi5hcHBlbmRDaGlsZChxYkJ0bik7XHJcbiAgcmVzdWx0RGl2ID0gY3JlYXRlRGl2KCk7XHJcbiAgZnNoRGl2LmFwcGVuZENoaWxkKHJlc3VsdERpdik7XHJcbiAgZGlhbG9nLmFwcGVuZENoaWxkKGZzaERpdik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdvcmxkRGlhbG9nU2hvcChlLCBkYXRhKSB7XHJcbiAgc2hvcHBpbmdEYXRhID0gZGF0YTtcclxuICBkaWFsb2cgPSBmYWxsYmFjayhkaWFsb2csXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hvcERpYWxvZ0NvbmZpcm0nKSk7XHJcbiAgaWYgKCFkaWFsb2cpIHtyZXR1cm47fVxyXG4gIGpEaWFsb2cgPSBmYWxsYmFjayhqRGlhbG9nLCAkKGRpYWxvZykuZGF0YSgnd29ybGREaWFsb2dTaG9wQ29uZmlybScpKTtcclxuICBpZiAoIWZzaERpdikge2luamVjdFF1aWNrQnV5KCk7fSBlbHNlIHtyZXN1bHREaXYudGV4dENvbnRlbnQgPSAnJzt9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXBhcmVTaG9wKCkge1xyXG4gICQuc3Vic2NyaWJlKCdwcm9tcHQud29ybGREaWFsb2dTaG9wJywgd29ybGREaWFsb2dTaG9wKTtcclxufVxyXG4iLCJcclxuZnVuY3Rpb24gZXZhbE1pc3MoY29tYmF0KSB7XHJcbiAgaWYgKGNvbWJhdC5udW1iZXJPZkNyZWF0dXJlSGl0c1RpbGxEZWFkIC0gY29tYmF0Lm51bWJlck9mSGl0c1JlcXVpcmVkIDw9IDEpIHtcclxuICAgIHJldHVybiAnLCBkaWVzIG9uIG1pc3MnO1xyXG4gIH1cclxuICByZXR1cm4gJywgc3Vydml2ZXMgYSBtaXNzJztcclxufVxyXG5cclxuZnVuY3Rpb24gY2FuSUhpdChjb21iYXQpIHtcclxuICByZXR1cm4gY29tYmF0Lm51bWJlck9mSGl0c1JlcXVpcmVkID09PSAnLScgfHxcclxuICAgIGNvbWJhdC5udW1iZXJPZkhpdHNSZXF1aXJlZCA+IGNvbWJhdC5udW1iZXJPZkNyZWF0dXJlSGl0c1RpbGxEZWFkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBldmFsUGxheWVySGl0cyhjb21iYXQpIHtcclxuICBpZiAoY29tYmF0Lm51bWJlck9mQ3JlYXR1cmVIaXRzVGlsbERlYWQgPT09ICctJykge1xyXG4gICAgcmV0dXJuIGNvbWJhdC5udW1iZXJPZkhpdHNSZXF1aXJlZDtcclxuICB9IGVsc2UgaWYgKGNhbklIaXQoY29tYmF0KSkge1xyXG4gICAgcmV0dXJuICctJztcclxuICB9XHJcbiAgcmV0dXJuIGNvbWJhdC5udW1iZXJPZkhpdHNSZXF1aXJlZDtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FuQ3JlYXR1cmVIaXQoY29tYmF0KSB7XHJcbiAgcmV0dXJuIGNvbWJhdC5udW1iZXJPZkNyZWF0dXJlSGl0c1RpbGxEZWFkID09PSAnLScgfHxcclxuICAgIGNvbWJhdC5udW1iZXJPZkNyZWF0dXJlSGl0c1RpbGxEZWFkID4gY29tYmF0Lm51bWJlck9mSGl0c1JlcXVpcmVkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBldmFsQ3JlYXR1cmVIaXRzKGNvbWJhdCkge1xyXG4gIGlmIChjb21iYXQubnVtYmVyT2ZIaXRzUmVxdWlyZWQgPT09ICctJykge1xyXG4gICAgcmV0dXJuIGNvbWJhdC5udW1iZXJPZkNyZWF0dXJlSGl0c1RpbGxEZWFkO1xyXG4gIH0gZWxzZSBpZiAoY2FuQ3JlYXR1cmVIaXQoY29tYmF0KSkge1xyXG4gICAgcmV0dXJuICctJztcclxuICB9XHJcbiAgcmV0dXJuIGNvbWJhdC5udW1iZXJPZkNyZWF0dXJlSGl0c1RpbGxEZWFkO1xyXG59XHJcblxyXG52YXIgZXZhbEZpZ2h0U3RhdHVzID0gW1xyXG4gIHtcclxuICAgIHRlc3Q6IGZ1bmN0aW9uKGNvbWJhdCkge1xyXG4gICAgICByZXR1cm4gY29tYmF0LnBsYXllckhpdHMgPT09ICctJyAmJiBjb21iYXQuY3JlYXR1cmVIaXRzID09PSAnLSc7XHJcbiAgICB9LFxyXG4gICAgZlN0YXR1czogZnVuY3Rpb24oKSB7cmV0dXJuICdVbnJlc29sdmVkJzt9XHJcbiAgfSxcclxuICB7XHJcbiAgICB0ZXN0OiBmdW5jdGlvbihjb21iYXQpIHtyZXR1cm4gY29tYmF0LnBsYXllckhpdHMgPT09ICctJzt9LFxyXG4gICAgZlN0YXR1czogZnVuY3Rpb24oKSB7cmV0dXJuICdQbGF5ZXIgZGllcyc7fVxyXG4gIH0sXHJcbiAge1xyXG4gICAgdGVzdDogZnVuY3Rpb24oY29tYmF0KSB7cmV0dXJuIGNvbWJhdC5wbGF5ZXJIaXRzID09PSAxO30sXHJcbiAgICBmU3RhdHVzOiBmdW5jdGlvbihjb21iYXQpIHtyZXR1cm4gJ1BsYXllciAxIGhpdHMnICsgZXZhbE1pc3MoY29tYmF0KTt9XHJcbiAgfSxcclxuICB7XHJcbiAgICB0ZXN0OiBmdW5jdGlvbihjb21iYXQpIHtyZXR1cm4gY29tYmF0LnBsYXllckhpdHMgPiAxO30sXHJcbiAgICBmU3RhdHVzOiBmdW5jdGlvbihjb21iYXQpIHtyZXR1cm4gJ1BsYXllciA+IDEgaGl0cycgKyBldmFsTWlzcyhjb21iYXQpO31cclxuICB9XHJcbl07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBldmFsQW5hbHlzaXMoY29tYmF0KSB7XHJcbiAgLy8gQW5hbHlzaXM6XHJcbiAgY29tYmF0LnBsYXllckhpdHMgPSBldmFsUGxheWVySGl0cyhjb21iYXQpO1xyXG4gIGNvbWJhdC5jcmVhdHVyZUhpdHMgPSBldmFsQ3JlYXR1cmVIaXRzKGNvbWJhdCk7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmFsRmlnaHRTdGF0dXMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgIGlmIChldmFsRmlnaHRTdGF0dXNbaV0udGVzdChjb21iYXQpKSB7XHJcbiAgICAgIGNvbWJhdC5maWdodFN0YXR1cyA9IGV2YWxGaWdodFN0YXR1c1tpXS5mU3RhdHVzKGNvbWJhdCk7XHJcbiAgICAgIHJldHVybiBjb21iYXQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbWJhdC5maWdodFN0YXR1cyA9ICdVbmtub3duJztcclxuICByZXR1cm4gY29tYmF0O1xyXG59XHJcbiIsIlxyXG5mdW5jdGlvbiBjYWxjQXJtKGNvbWJhdCkge1xyXG4gIGlmIChjb21iYXQuY2FsbGJhY2suZ3JvdXBFeGlzdHMpIHtcclxuICAgIHJldHVybiBjb21iYXQuY2FsbGJhY2suZ3JvdXBBcm1vclZhbHVlO1xyXG4gIH1cclxuICByZXR1cm4gY29tYmF0LnBsYXllci5hcm1vclZhbHVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBldmFsU2FuY3R1YXJ5KGNvbWJhdCkge1xyXG4gIGlmIChjb21iYXQucGxheWVyLnNhbmN0dWFyeUxldmVsID4gMCkge1xyXG4gICAgY29tYmF0LmV4dHJhTm90ZXMgKz0gJ1NhbmMgQm9udXMgQXJtb3IgPSAnICtcclxuICAgICAgTWF0aC5mbG9vcihjb21iYXQucGxheWVyLmFybW9yVmFsdWUgKlxyXG4gICAgICBjb21iYXQucGxheWVyLnNhbmN0dWFyeUxldmVsICogMC4wMDEpICsgJzxicj4nO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZXZhbFRlcnJvcml6ZShjb21iYXQpIHtcclxuICBpZiAoY29tYmF0LnBsYXllci50ZXJyb3JpemVMZXZlbCA+IDApIHtcclxuICAgIGNvbWJhdC5leHRyYU5vdGVzICs9ICdUZXJyb3JpemUgQ3JlYXR1cmUgRGFtYWdlIEVmZmVjdCA9ICcgK1xyXG4gICAgICBjb21iYXQudGVycm9yaXplRWZmZWN0ICogLTEgKyAnPGJyPic7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBldmFsQXJtb3VyKGNvbWJhdCkge1xyXG4gIHZhciBhcm1vclZhbCA9IGNhbGNBcm0oY29tYmF0KTtcclxuICBjb21iYXQub3ZlcmFsbEFybW9yVmFsdWUgPSBhcm1vclZhbCArXHJcbiAgICBNYXRoLmZsb29yKGNvbWJhdC5wbGF5ZXIuYXJtb3JWYWx1ZSAqXHJcbiAgICBjb21iYXQucGxheWVyLnNhbmN0dWFyeUxldmVsICogMC4wMDEpO1xyXG5cclxuICBldmFsU2FuY3R1YXJ5KGNvbWJhdCk7XHJcblxyXG4gIGNvbWJhdC50ZXJyb3JpemVFZmZlY3QgPSBNYXRoLmZsb29yKGNvbWJhdC5jcmVhdHVyZS5kYW1hZ2UgKlxyXG4gICAgY29tYmF0LnBsYXllci50ZXJyb3JpemVMZXZlbCAqIDAuMDAxKTtcclxuXHJcbiAgZXZhbFRlcnJvcml6ZShjb21iYXQpO1xyXG5cclxuICBjb21iYXQuY3JlYXR1cmUuZGFtYWdlIC09IGNvbWJhdC50ZXJyb3JpemVFZmZlY3Q7XHJcbiAgY29tYmF0LmNyZWF0dXJlRGFtYWdlRG9uZSA9IE1hdGguY2VpbChjb21iYXQuZ2VuZXJhbFZhcmlhYmxlICpcclxuICAgIGNvbWJhdC5jcmVhdHVyZS5kYW1hZ2UgLSBjb21iYXQub3ZlcmFsbEFybW9yVmFsdWUgK1xyXG4gICAgY29tYmF0Lm92ZXJhbGxIUFZhbHVlKTtcclxuXHJcbiAgaWYgKGNvbWJhdC5jcmVhdHVyZUhpdEJ5SG93TXVjaCA+PSAwKSB7XHJcbiAgICB2YXIgYXBwcm94RG1nID0gY29tYmF0LmdlbmVyYWxWYXJpYWJsZSAqIGNvbWJhdC5jcmVhdHVyZS5kYW1hZ2U7XHJcbiAgICBpZiAoYXBwcm94RG1nIDwgY29tYmF0Lm92ZXJhbGxBcm1vclZhbHVlKSB7XHJcbiAgICAgIGNvbWJhdC5udW1iZXJPZkNyZWF0dXJlSGl0c1RpbGxEZWFkID0gY29tYmF0Lm92ZXJhbGxIUFZhbHVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29tYmF0Lm51bWJlck9mQ3JlYXR1cmVIaXRzVGlsbERlYWQgPSBNYXRoLmNlaWwoXHJcbiAgICAgICAgY29tYmF0Lm92ZXJhbGxIUFZhbHVlIC8gKGFwcHJveERtZyAtIGNvbWJhdC5vdmVyYWxsQXJtb3JWYWx1ZSkpO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBjb21iYXQubnVtYmVyT2ZDcmVhdHVyZUhpdHNUaWxsRGVhZCA9ICctJztcclxuICB9XHJcblxyXG4gIHJldHVybiBjb21iYXQ7XHJcbn1cclxuIiwiXHJcbmZ1bmN0aW9uIGNhbGNBdHRhY2soY29tYmF0KSB7XHJcbiAgaWYgKGNvbWJhdC5jYWxsYmFjay5ncm91cEV4aXN0cykge1xyXG4gICAgcmV0dXJuIGNvbWJhdC5jYWxsYmFjay5ncm91cEF0dGFja1ZhbHVlO1xyXG4gIH1cclxuICByZXR1cm4gY29tYmF0LnBsYXllci5hdHRhY2tWYWx1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY0hpdEJ5SG93TXVjaChjb21iYXQpIHtcclxuICB2YXIgcmVtYWluaW5nRGVmID0gY29tYmF0LmNyZWF0dXJlLmRlZmVuc2UgLSBjb21iYXQuY3JlYXR1cmUuZGVmZW5zZSAqXHJcbiAgICBjb21iYXQucGxheWVyLmRhcmtDdXJzZUxldmVsICogMC4wMDI7XHJcbiAgaWYgKGNvbWJhdC5jb21iYXRFdmFsdWF0b3JCaWFzID09PSAzKSB7XHJcbiAgICByZXR1cm4gY29tYmF0Lm92ZXJhbGxBdHRhY2tWYWx1ZSAtIE1hdGguY2VpbChyZW1haW5pbmdEZWYpIC0gNTA7XHJcbiAgfVxyXG4gIHJldHVybiBjb21iYXQub3ZlcmFsbEF0dGFja1ZhbHVlIC1cclxuICAgIE1hdGguY2VpbChjb21iYXQuYXR0YWNrVmFyaWFibGUgKiByZW1haW5pbmdEZWYpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBldmFsQXR0YWNrKGNvbWJhdCkge1xyXG4gIHZhciBhdGtWYWx1ZSA9IGNhbGNBdHRhY2soY29tYmF0KTtcclxuICAvLyBBdHRhY2s6XHJcbiAgaWYgKGNvbWJhdC5wbGF5ZXIuZGFya0N1cnNlTGV2ZWwgPiAwKSB7XHJcbiAgICBjb21iYXQuZXh0cmFOb3RlcyArPSAnREMgQm9udXMgQXR0YWNrID0gJyArXHJcbiAgICAgIE1hdGguZmxvb3IoY29tYmF0LmNyZWF0dXJlLmRlZmVuc2UgKlxyXG4gICAgICBjb21iYXQucGxheWVyLmRhcmtDdXJzZUxldmVsICogMC4wMDIpICsgJzxicj4nO1xyXG4gIH1cclxuICBjb21iYXQubmlnaHRtYXJlVmlzYWdlQXR0YWNrTW92ZWRUb0RlZmVuc2UgPVxyXG4gICAgTWF0aC5mbG9vcigoYXRrVmFsdWUgK1xyXG4gICAgY29tYmF0LmNvdW50ZXJBdHRhY2tCb251c0F0dGFjaykgKlxyXG4gICAgY29tYmF0LnBsYXllci5uaWdodG1hcmVWaXNhZ2VMZXZlbCAqIDAuMDAyNSk7XHJcbiAgaWYgKGNvbWJhdC5wbGF5ZXIubmlnaHRtYXJlVmlzYWdlTGV2ZWwgPiAwKSB7XHJcbiAgICBjb21iYXQuZXh0cmFOb3RlcyArPSAnTk1WIEF0dGFjayBtb3ZlZCB0byBEZWZlbnNlID0gJyArXHJcbiAgICAgIGNvbWJhdC5uaWdodG1hcmVWaXNhZ2VBdHRhY2tNb3ZlZFRvRGVmZW5zZSArICc8YnI+JztcclxuICB9XHJcbiAgY29tYmF0Lm92ZXJhbGxBdHRhY2tWYWx1ZSA9IGF0a1ZhbHVlICtcclxuICAgIGNvbWJhdC5jb3VudGVyQXR0YWNrQm9udXNBdHRhY2sgLVxyXG4gICAgY29tYmF0Lm5pZ2h0bWFyZVZpc2FnZUF0dGFja01vdmVkVG9EZWZlbnNlO1xyXG4gIGNvbWJhdC5oaXRCeUhvd011Y2ggPSBjYWxjSGl0QnlIb3dNdWNoKGNvbWJhdCk7XHJcbiAgcmV0dXJuIGNvbWJhdDtcclxufVxyXG4iLCJmdW5jdGlvbiBjYWxjTG93ZXN0KGNvbWJhdCkge1xyXG4gIGNvbWJhdC5sb3dlc3RDQUxldmVsVG9TdGlsbEhpdCA9IE1hdGgubWF4KE1hdGguY2VpbCgoXHJcbiAgICBjb21iYXQuY291bnRlckF0dGFja0JvbnVzQXR0YWNrIC0gY29tYmF0LmhpdEJ5SG93TXVjaCArIDEpIC9cclxuICAgIGNvbWJhdC5wbGF5ZXIuYXR0YWNrVmFsdWUgLyAwLjAwMjUpLCAwKTtcclxuICBjb21iYXQubG93ZXN0Q0FMZXZlbFRvU3RpbGxLaWxsID0gTWF0aC5tYXgoTWF0aC5jZWlsKChcclxuICAgIGNvbWJhdC5jb3VudGVyQXR0YWNrQm9udXNEYW1hZ2UgLSBjb21iYXQuZGFtYWdlRG9uZSArIDEpIC9cclxuICAgIGNvbWJhdC5wbGF5ZXIuZGFtYWdlVmFsdWUgLyAwLjAwMjUpLCAwKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3RhbUF0TG93ZXN0Q2EoY29tYmF0KSB7XHJcbiAgaWYgKGNvbWJhdC5wbGF5ZXIuY291bnRlckF0dGFja0xldmVsID4gMCkge1xyXG4gICAgcmV0dXJuIE1hdGguY2VpbCgoMSArIGNvbWJhdC5wbGF5ZXIuZG91YmxlckxldmVsIC8gNTApICogMC4wMDI1ICpcclxuICAgICAgY29tYmF0Lmxvd2VzdEZlYXNpYmxlQ0FMZXZlbCk7XHJcbiAgfVxyXG4gIHJldHVybiAwO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYVJ1bm5pbmcoY29tYmF0KSB7XHJcbiAgY2FsY0xvd2VzdChjb21iYXQpO1xyXG4gIGNvbWJhdC5sb3dlc3RGZWFzaWJsZUNBTGV2ZWwgPVxyXG4gICAgTWF0aC5tYXgoY29tYmF0Lmxvd2VzdENBTGV2ZWxUb1N0aWxsSGl0LFxyXG4gICAgICBjb21iYXQubG93ZXN0Q0FMZXZlbFRvU3RpbGxLaWxsKTtcclxuICBjb21iYXQuZXh0cmFOb3RlcyArPSAnTG93ZXN0IENBIHRvIHN0aWxsIDEtaGl0IHRoaXMgY3JlYXR1cmUgPSAnICtcclxuICAgIGNvbWJhdC5sb3dlc3RGZWFzaWJsZUNBTGV2ZWwgKyAnPGJyPic7XHJcbiAgaWYgKGNvbWJhdC5sb3dlc3RGZWFzaWJsZUNBTGV2ZWwgIT09IDApIHtcclxuICAgIGNvbWJhdC5leHRyYUF0dGFja0F0TG93ZXN0RmVhc2libGVDQUxldmVsID1cclxuICAgICAgTWF0aC5mbG9vcihjb21iYXQucGxheWVyLmF0dGFja1ZhbHVlICogMC4wMDI1ICpcclxuICAgICAgY29tYmF0Lmxvd2VzdEZlYXNpYmxlQ0FMZXZlbCk7XHJcbiAgICBjb21iYXQuZXh0cmFEYW1hZ2VBdExvd2VzdEZlYXNpYmxlQ0FMZXZlbCA9XHJcbiAgICAgIE1hdGguZmxvb3IoY29tYmF0LnBsYXllci5kYW1hZ2VWYWx1ZSAqIDAuMDAyNSAqXHJcbiAgICAgIGNvbWJhdC5sb3dlc3RGZWFzaWJsZUNBTGV2ZWwpO1xyXG4gICAgY29tYmF0LmV4dHJhTm90ZXMgKz1cclxuICAgICAgJ0V4dHJhIENBIEF0dC9EYW0gYXQgdGhpcyBsb3dlcmVkIENBIGxldmVsID0gJyArXHJcbiAgICAgIGNvbWJhdC5leHRyYUF0dGFja0F0TG93ZXN0RmVhc2libGVDQUxldmVsICsgJyAvICcgK1xyXG4gICAgICBjb21iYXQuZXh0cmFEYW1hZ2VBdExvd2VzdEZlYXNpYmxlQ0FMZXZlbCArICc8YnI+JztcclxuICB9XHJcbiAgY29tYmF0LmV4dHJhU3RhbWluYVBlckhpdEF0TG93ZXN0RmVhc2libGVDQUxldmVsID0gc3RhbUF0TG93ZXN0Q2EoY29tYmF0KTtcclxuICBpZiAoY29tYmF0LmV4dHJhU3RhbWluYVBlckhpdEF0TG93ZXN0RmVhc2libGVDQUxldmVsIDxcclxuICAgIGNvbWJhdC5leHRyYVN0YW1pbmFQZXJIaXQpIHtcclxuICAgIGNvbWJhdC5leHRyYU5vdGVzICs9XHJcbiAgICAgICdFeHRyYSBTdGFtIFVzZWQgYXQgdGhpcyBsb3dlcmVkIENBIGxldmVsID0gJyArXHJcbiAgICAgIGNvbWJhdC5leHRyYVN0YW1pbmFQZXJIaXRBdExvd2VzdEZlYXNpYmxlQ0FMZXZlbCArICc8YnI+JztcclxuICB9IGVsc2Uge1xyXG4gICAgY29tYmF0LmV4dHJhTm90ZXMgKz1cclxuICAgICAgJ05vIHJlZHVjdGlvbiBvZiBzdGFtIHVzZWQgYXQgdGhlIGxvd2VyIENBIGxldmVsPGJyPic7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBuZWVkQ2EoY29tYmF0KSB7XHJcbiAgcmV0dXJuIGNvbWJhdC5udW1iZXJPZkhpdHNSZXF1aXJlZCA9PT0gJy0nIHx8XHJcbiAgICBjb21iYXQubnVtYmVyT2ZIaXRzUmVxdWlyZWQgIT09IDE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV2YWxDYUtpbGwoY29tYmF0KSB7XHJcbiAgaWYgKGNvbWJhdC5sb3dlc3RDQUxldmVsVG9TdGlsbEhpdCA+IDE3NSkge1xyXG4gICAgY29tYmF0LmV4dHJhTm90ZXMgKz1cclxuICAgICAgJ0V2ZW4gd2l0aCBDQTE3NSB5b3UgY2Fubm90IGhpdCB0aGlzIGNyZWF0dXJlPGJyPic7XHJcbiAgfSBlbHNlIGlmIChjb21iYXQubG93ZXN0Q0FMZXZlbFRvU3RpbGxIaXQgIT09IDApIHtcclxuICAgIGNvbWJhdC5leHRyYU5vdGVzICs9ICdZb3UgbmVlZCBhIG1pbmltdW0gb2YgQ0EnICtcclxuICAgICAgY29tYmF0Lmxvd2VzdENBTGV2ZWxUb1N0aWxsSGl0ICtcclxuICAgICAgJyB0byBoaXQgdGhpcyBjcmVhdHVyZTxicj4nO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZXZhbENhT25lSGl0KGNvbWJhdCkge1xyXG4gIGlmIChjb21iYXQubG93ZXN0Q0FMZXZlbFRvU3RpbGxLaWxsID4gMTc1KSB7XHJcbiAgICBjb21iYXQuZXh0cmFOb3RlcyArPVxyXG4gICAgICAnRXZlbiB3aXRoIENBMTc1IHlvdSBjYW5ub3QgMS1oaXQga2lsbCB0aGlzIGNyZWF0dXJlPGJyPic7XHJcbiAgfSBlbHNlIGlmIChjb21iYXQubG93ZXN0Q0FMZXZlbFRvU3RpbGxLaWxsICE9PSAwKSB7XHJcbiAgICBjb21iYXQuZXh0cmFOb3RlcyArPSAnWW91IG5lZWQgYSBtaW5pbXVtIG9mIENBJyArXHJcbiAgICAgIGNvbWJhdC5sb3dlc3RDQUxldmVsVG9TdGlsbEtpbGwgK1xyXG4gICAgICAnIHRvIDEtaGl0IGtpbGwgdGhpcyBjcmVhdHVyZTxicj4nO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2FSZXN1bHQoY29tYmF0KSB7XHJcbiAgY2FsY0xvd2VzdChjb21iYXQpO1xyXG4gIGV2YWxDYUtpbGwoY29tYmF0KTtcclxuICBldmFsQ2FPbmVIaXQoY29tYmF0KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXZhbENBKGNvbWJhdCkge1xyXG4gIGlmIChjb21iYXQucGxheWVyLmNvdW50ZXJBdHRhY2tMZXZlbCA+IDAgJiZcclxuICAgICAgY29tYmF0Lm51bWJlck9mSGl0c1JlcXVpcmVkID09PSAxKSB7XHJcbiAgICBjYVJ1bm5pbmcoY29tYmF0KTtcclxuICB9XHJcbiAgaWYgKG5lZWRDYShjb21iYXQpKSB7XHJcbiAgICBjYVJlc3VsdChjb21iYXQpO1xyXG4gIH1cclxuICByZXR1cm4gY29tYmF0O1xyXG59XHJcbiIsIlxyXG5mdW5jdGlvbiBjYWxjSHAoY29tYmF0KSB7XHJcbiAgaWYgKGNvbWJhdC5jYWxsYmFjay5ncm91cEV4aXN0cykge1xyXG4gICAgcmV0dXJuIGNvbWJhdC5jYWxsYmFjay5ncm91cEhQVmFsdWU7XHJcbiAgfVxyXG4gIHJldHVybiBjb21iYXQucGxheWVyLmhwVmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGNEbWcoY29tYmF0KSB7XHJcbiAgaWYgKGNvbWJhdC5jYWxsYmFjay5ncm91cEV4aXN0cykge1xyXG4gICAgcmV0dXJuIGNvbWJhdC5jYWxsYmFjay5ncm91cERhbWFnZVZhbHVlO1xyXG4gIH1cclxuICByZXR1cm4gY29tYmF0LnBsYXllci5kYW1hZ2VWYWx1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gZXZhbEZvcnRpdHVkZShjb21iYXQpIHtcclxuICB2YXIgaHBWYWx1ZSA9IGNhbGNIcChjb21iYXQpO1xyXG4gIHZhciBmb3J0aXR1ZGVMZXZlbCA9IGNvbWJhdC5wbGF5ZXIuZm9ydGl0dWRlTGV2ZWw7XHJcbiAgY29tYmF0LmZvcnRpdHVkZUV4dHJhSFBzID0gTWF0aC5mbG9vcihocFZhbHVlICogZm9ydGl0dWRlTGV2ZWwgKiAwLjAwMSk7XHJcbiAgaWYgKGZvcnRpdHVkZUxldmVsID4gMCkge1xyXG4gICAgY29tYmF0LmV4dHJhTm90ZXMgKz0gJ0ZvcnRpdHVkZSBCb251cyBIUCA9ICcgKyBjb21iYXQuZm9ydGl0dWRlRXh0cmFIUHMgK1xyXG4gICAgICAnPGJyPic7XHJcbiAgfVxyXG4gIGNvbWJhdC5vdmVyYWxsSFBWYWx1ZSA9IGhwVmFsdWUgKyBjb21iYXQuZm9ydGl0dWRlRXh0cmFIUHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV2YWxDaGlTdHJpa2UoY29tYmF0KSB7XHJcbiAgdmFyIGNoaVN0cmlrZUxldmVsID0gY29tYmF0LnBsYXllci5jaGlTdHJpa2VMZXZlbDtcclxuICBjb21iYXQuY2hpU3RyaWtlRXh0cmFEYW1hZ2UgPSBNYXRoLmZsb29yKGNvbWJhdC5vdmVyYWxsSFBWYWx1ZSAqXHJcbiAgICBjaGlTdHJpa2VMZXZlbCAqIDAuMDAxKTtcclxuICBpZiAoY2hpU3RyaWtlTGV2ZWwgPiAwKSB7XHJcbiAgICBjb21iYXQuZXh0cmFOb3RlcyArPSAnQ2hpIFN0cmlrZSBCb251cyBEYW1hZ2UgPSAnICtcclxuICAgICAgY29tYmF0LmNoaVN0cmlrZUV4dHJhRGFtYWdlICsgJzxicj4nO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXZhbERhbWFnZShjb21iYXQpIHtcclxuICAvLyBEYW1hZ2U6XHJcbiAgZXZhbEZvcnRpdHVkZShjb21iYXQpO1xyXG4gIGV2YWxDaGlTdHJpa2UoY29tYmF0KTtcclxuXHJcbiAgdmFyIGRhbWFnZVZhbHVlID0gY2FsY0RtZyhjb21iYXQpO1xyXG4gIGNvbWJhdC5vdmVyYWxsRGFtYWdlVmFsdWUgPSBkYW1hZ2VWYWx1ZSArXHJcbiAgICBjb21iYXQuZGVhdGhEZWFsZXJCb251c0RhbWFnZSArIGNvbWJhdC5jb3VudGVyQXR0YWNrQm9udXNEYW1hZ2UgK1xyXG4gICAgY29tYmF0LmhvbHlGbGFtZUJvbnVzRGFtYWdlICsgY29tYmF0LmNoaVN0cmlrZUV4dHJhRGFtYWdlO1xyXG4gIGNvbWJhdC5kYW1hZ2VEb25lID0gTWF0aC5mbG9vcihjb21iYXQub3ZlcmFsbERhbWFnZVZhbHVlIC0gKFxyXG4gICAgY29tYmF0LmdlbmVyYWxWYXJpYWJsZSAqIGNvbWJhdC5jcmVhdHVyZS5hcm1vciArXHJcbiAgICBjb21iYXQuaHBWYXJpYWJsZSAqIGNvbWJhdC5jcmVhdHVyZS5ocCkpO1xyXG5cclxuICBpZiAoY29tYmF0LmhpdEJ5SG93TXVjaCA+IDApIHtcclxuICAgIHZhciBkbWdMZXNzQXJtb3IgPSAxO1xyXG4gICAgaWYgKGNvbWJhdC5vdmVyYWxsRGFtYWdlVmFsdWUgPj1cclxuICAgICAgICBjb21iYXQuZ2VuZXJhbFZhcmlhYmxlICogY29tYmF0LmNyZWF0dXJlLmFybW9yKSB7XHJcbiAgICAgIGRtZ0xlc3NBcm1vciA9IGNvbWJhdC5vdmVyYWxsRGFtYWdlVmFsdWUgLSBjb21iYXQuZ2VuZXJhbFZhcmlhYmxlICpcclxuICAgICAgICBjb21iYXQuY3JlYXR1cmUuYXJtb3I7XHJcbiAgICB9XHJcbiAgICBjb21iYXQubnVtYmVyT2ZIaXRzUmVxdWlyZWQgPSBNYXRoLmNlaWwoY29tYmF0LmhwVmFyaWFibGUgKlxyXG4gICAgICBjb21iYXQuY3JlYXR1cmUuaHAgLyBkbWdMZXNzQXJtb3IpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb21iYXQubnVtYmVyT2ZIaXRzUmVxdWlyZWQgPSAnLSc7XHJcbiAgfVxyXG4gIHJldHVybiBjb21iYXQ7XHJcbn1cclxuIiwiZnVuY3Rpb24gY2FsY0RlZihjb21iYXQpIHtcclxuICBpZiAoY29tYmF0LmNhbGxiYWNrLmdyb3VwRXhpc3RzKSB7XHJcbiAgICByZXR1cm4gY29tYmF0LmNhbGxiYWNrLmdyb3VwRGVmZW5zZVZhbHVlO1xyXG4gIH1cclxuICByZXR1cm4gY29tYmF0LnBsYXllci5kZWZlbnNlVmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV2YWxDb25zdGl0dXRpb24oY29tYmF0KSB7XHJcbiAgaWYgKGNvbWJhdC5wbGF5ZXIuY29uc3RpdHV0aW9uTGV2ZWwgPiAwKSB7XHJcbiAgICBjb21iYXQuZXh0cmFOb3RlcyArPSAnQ29uc3RpdHV0aW9uIEJvbnVzIERlZmVuc2UgPSAnICtcclxuICAgIE1hdGguZmxvb3IoY2FsY0RlZihjb21iYXQpICpcclxuICAgIGNvbWJhdC5wbGF5ZXIuY29uc3RpdHV0aW9uTGV2ZWwgKiAwLjAwMSkgKyAnPGJyPic7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBldmFsRmxpbmNoKGNvbWJhdCkge1xyXG4gIGlmIChjb21iYXQucGxheWVyLmZsaW5jaExldmVsID4gMCkge1xyXG4gICAgY29tYmF0LmV4dHJhTm90ZXMgKz0gJ0ZsaW5jaCBCb251cyBBdHRhY2sgUmVkdWN0aW9uID0gJyArXHJcbiAgICBNYXRoLmZsb29yKGNvbWJhdC5jcmVhdHVyZS5hdHRhY2sgKiBjb21iYXQucGxheWVyLmZsaW5jaExldmVsICpcclxuICAgIDAuMDAxKSArICc8YnI+JztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV2YWxEZWZlbmNlKGNvbWJhdCkge1xyXG4gIGNvbWJhdC5vdmVyYWxsRGVmZW5zZVZhbHVlID0gY2FsY0RlZihjb21iYXQpICtcclxuICAgIE1hdGguZmxvb3IoY2FsY0RlZihjb21iYXQpICpcclxuICAgIGNvbWJhdC5wbGF5ZXIuY29uc3RpdHV0aW9uTGV2ZWwgKiAwLjAwMSkgK1xyXG4gICAgY29tYmF0Lm5pZ2h0bWFyZVZpc2FnZUF0dGFja01vdmVkVG9EZWZlbnNlO1xyXG5cclxuICBldmFsQ29uc3RpdHV0aW9uKGNvbWJhdCk7XHJcbiAgZXZhbEZsaW5jaChjb21iYXQpO1xyXG5cclxuICBjb21iYXQuY3JlYXR1cmVIaXRCeUhvd011Y2ggPSBNYXRoLmZsb29yKGNvbWJhdC5hdHRhY2tWYXJpYWJsZSAqXHJcbiAgICBjb21iYXQuY3JlYXR1cmUuYXR0YWNrIC0gY29tYmF0LmNyZWF0dXJlLmF0dGFjayAqXHJcbiAgICBjb21iYXQucGxheWVyLmZsaW5jaExldmVsICogMC4wMDEgLSBjb21iYXQub3ZlcmFsbERlZmVuc2VWYWx1ZSk7XHJcblxyXG4gIGlmIChjb21iYXQuY29tYmF0RXZhbHVhdG9yQmlhcyA9PT0gMykge1xyXG4gICAgY29tYmF0LmNyZWF0dXJlSGl0QnlIb3dNdWNoID0gTWF0aC5mbG9vcihjb21iYXQuY3JlYXR1cmUuYXR0YWNrIC1cclxuICAgICAgY29tYmF0LmNyZWF0dXJlLmF0dGFjayAqIGNvbWJhdC5wbGF5ZXIuZmxpbmNoTGV2ZWwgKiAwLjAwMSAtXHJcbiAgICAgIGNvbWJhdC5vdmVyYWxsRGVmZW5zZVZhbHVlIC0gNTApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGNvbWJhdDtcclxufVxyXG4iLCJcclxuZnVuY3Rpb24gZXZhbFNlcyhjb21iYXQpIHtcclxuICBpZiAoY29tYmF0LnBsYXllci5zdXBlckVsaXRlU2xheWVyTGV2ZWwgPiAwKSB7XHJcbiAgICBjb21iYXQuZXh0cmFOb3RlcyArPSAnU0VTIFN0YXQgUmVkdWN0aW9uIE11bHRpcGxpZXIgPSAnICtcclxuICAgIGNvbWJhdC5wbGF5ZXIuc3VwZXJFbGl0ZVNsYXllck11bHRpcGxpZXIgKyAnPGJyPic7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBldmFsSG9seUZsYW1lKGNvbWJhdCkge1xyXG4gIGNvbWJhdC5ob2x5RmxhbWVCb251c0RhbWFnZSA9IDA7XHJcbiAgaWYgKGNvbWJhdC5jcmVhdHVyZS5jbGFzcyAhPT0gJ1VuZGVhZCcpIHtyZXR1cm47fVxyXG4gIGNvbWJhdC5ob2x5RmxhbWVCb251c0RhbWFnZSA9IE1hdGgubWF4KE1hdGguZmxvb3IoXHJcbiAgICAoY29tYmF0LnBsYXllci5kYW1hZ2VWYWx1ZSAtIGNvbWJhdC5jcmVhdHVyZS5hcm1vcikgKlxyXG4gICAgY29tYmF0LnBsYXllci5ob2x5RmxhbWVMZXZlbCAqIDAuMDAyKSwgMCk7XHJcbiAgaWYgKGNvbWJhdC5wbGF5ZXIuaG9seUZsYW1lTGV2ZWwgPiAwKSB7XHJcbiAgICBjb21iYXQuZXh0cmFOb3RlcyArPSAnSEYgQm9udXMgRGFtYWdlID0gJyArIGNvbWJhdC5ob2x5RmxhbWVCb251c0RhbWFnZSArXHJcbiAgICAnPGJyPic7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBldmFsRXh0cmFTdGFtKGNvbWJhdCkge1xyXG4gIGNvbWJhdC5leHRyYVN0YW1pbmFQZXJIaXQgPSAwO1xyXG4gIGlmIChjb21iYXQucGxheWVyLmNvdW50ZXJBdHRhY2tMZXZlbCA+IDApIHtcclxuICAgIGNvbWJhdC5leHRyYVN0YW1pbmFQZXJIaXQgPSBNYXRoLmNlaWwoXHJcbiAgICAgICgxICsgY29tYmF0LnBsYXllci5kb3VibGVyTGV2ZWwgLyA1MCkgKlxyXG4gICAgICAwLjAwMjUgKiBjb21iYXQucGxheWVyLmNvdW50ZXJBdHRhY2tMZXZlbFxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV2YWxEZWF0aERlYWxlcihjb21iYXQpIHtcclxuICBpZiAoY29tYmF0LnBsYXllci5kZWF0aERlYWxlckxldmVsID4gMCkge1xyXG4gICAgY29tYmF0LmV4dHJhTm90ZXMgKz0gJ0REIEJvbnVzIERhbWFnZSA9ICcgK1xyXG4gICAgICBjb21iYXQuZGVhdGhEZWFsZXJCb251c0RhbWFnZSArICc8YnI+JztcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV2YWxDb3VudGVyQXR0YWNrKGNvbWJhdCkge1xyXG4gIGlmIChjb21iYXQucGxheWVyLmNvdW50ZXJBdHRhY2tMZXZlbCA+IDApIHtcclxuICAgIGNvbWJhdC5leHRyYU5vdGVzICs9ICdDQSBCb251cyBBdHRhY2svRGFtYWdlID0gJyArXHJcbiAgICAgIGNvbWJhdC5jb3VudGVyQXR0YWNrQm9udXNBdHRhY2sgKyAnIC8gJyArXHJcbiAgICAgIGNvbWJhdC5jb3VudGVyQXR0YWNrQm9udXNEYW1hZ2UgKyAnPGJyPicgK1xyXG4gICAgICAnQ0EgRXh0cmEgU3RhbSBVc2VkID0gJyArIGNvbWJhdC5leHRyYVN0YW1pbmFQZXJIaXQgKyAnPGJyPic7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBldmFsRXh0cmFCdWZmcyhjb21iYXQpIHtcclxuICBjb21iYXQuZXh0cmFOb3RlcyA9ICcnO1xyXG4gIGV2YWxTZXMoY29tYmF0KTtcclxuICAvLyBtYXRoIHNlY3Rpb24gLi4uIGFuYWx5c2lzXHJcbiAgLy8gSG9seSBGbGFtZSBhZGRzIGl0cyBib251cyBhZnRlciB0aGVcclxuICAvLyBhcm1vciBvZiB0aGUgY3JlYXR1cmUgaGFzIGJlZW4gdGFrZW4gb2ZmLlxyXG4gIGV2YWxIb2x5RmxhbWUoY29tYmF0KTtcclxuICAvLyBEZWF0aCBEZWFsZXIgYW5kIENvdW50ZXIgQXR0YWNrIGJvdGggYXBwbGllZCBhdCB0aGUgc2FtZSB0aW1lXHJcbiAgY29tYmF0LmRlYXRoRGVhbGVyQm9udXNEYW1hZ2UgPVxyXG4gICAgTWF0aC5mbG9vcihjb21iYXQucGxheWVyLmRhbWFnZVZhbHVlICogKE1hdGgubWluKE1hdGguZmxvb3IoXHJcbiAgICAgIGNvbWJhdC5wbGF5ZXIua2lsbFN0cmVha1ZhbHVlIC8gNSkgKiAwLjAxICpcclxuICAgICAgY29tYmF0LnBsYXllci5kZWF0aERlYWxlckxldmVsLCAyMCkgLyAxMDApKTtcclxuICBjb21iYXQuY291bnRlckF0dGFja0JvbnVzQXR0YWNrID1cclxuICAgIE1hdGguZmxvb3IoY29tYmF0LnBsYXllci5hdHRhY2tWYWx1ZSAqIDAuMDAyNSAqXHJcbiAgICBjb21iYXQucGxheWVyLmNvdW50ZXJBdHRhY2tMZXZlbCk7XHJcbiAgY29tYmF0LmNvdW50ZXJBdHRhY2tCb251c0RhbWFnZSA9XHJcbiAgICBNYXRoLmZsb29yKGNvbWJhdC5wbGF5ZXIuZGFtYWdlVmFsdWUgKiAwLjAwMjUgKlxyXG4gICAgY29tYmF0LnBsYXllci5jb3VudGVyQXR0YWNrTGV2ZWwpO1xyXG4gIGV2YWxFeHRyYVN0YW0oY29tYmF0KTtcclxuICBldmFsRGVhdGhEZWFsZXIoY29tYmF0KTtcclxuICBldmFsQ291bnRlckF0dGFjayhjb21iYXQpO1xyXG4gIHJldHVybiBjb21iYXQ7XHJcbn1cclxuIiwiZnVuY3Rpb24gZG9lc0dyb3VwRXhpc3QoY29tYmF0KSB7XHJcbiAgaWYgKGNvbWJhdC5jYWxsYmFjay5ncm91cEV4aXN0cykge3JldHVybiAnR3JvdXAgJzt9XHJcbiAgcmV0dXJuICcnO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYW5JSGl0SXQoY29tYmF0KSB7XHJcbiAgaWYgKGNvbWJhdC5oaXRCeUhvd011Y2ggPiAwKSB7cmV0dXJuICdZZXMnO31cclxuICByZXR1cm4gJ05vJztcclxufVxyXG5cclxuZnVuY3Rpb24gd2lsbElCZUhpdChjb21iYXQpIHtcclxuICBpZiAoY29tYmF0LmNyZWF0dXJlSGl0QnlIb3dNdWNoID49IDApIHtyZXR1cm4gJ1llcyc7fVxyXG4gIHJldHVybiAnTm8nO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBldmFsSFRNTChjb21iYXQpIHtcclxuICByZXR1cm4gJzx0YWJsZSB3aWR0aD1cIjEwMCVcIj48dGJvZHk+JyArXHJcbiAgICAnPHRyPjx0ZCBiZ2NvbG9yPVwiI0NEOUU0QlwiIGNvbHNwYW49XCI0XCIgYWxpZ249XCJjZW50ZXJcIj4nICtcclxuICAgIGRvZXNHcm91cEV4aXN0KGNvbWJhdCkgK1xyXG4gICAgJ0NvbWJhdCBFdmFsdWF0aW9uPC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQgYWxpZ249XCJyaWdodFwiPjxzcGFuIHN0eWxlPVwiY29sb3I6IzMzMzMzM1wiPicgK1xyXG4gICAgJ1dpbGwgSSBoaXQgaXQ/IDwvdGQ+PHRkIGFsaWduPVwibGVmdFwiPicgK1xyXG4gICAgY2FuSUhpdEl0KGNvbWJhdCkgK1xyXG4gICAgJzwvdGQ+PHRkIGFsaWduPVwicmlnaHRcIj48c3BhbiBzdHlsZT1cImNvbG9yOiMzMzMzMzNcIj4nICtcclxuICAgICdFeHRyYSBBdHRhY2s6IDwvdGQ+PHRkIGFsaWduPVwibGVmdFwiPiggJyArXHJcbiAgICBjb21iYXQuaGl0QnlIb3dNdWNoICsgJyApPC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQgYWxpZ249XCJyaWdodFwiPjxzcGFuIHN0eWxlPVwiY29sb3I6IzMzMzMzM1wiPicgK1xyXG4gICAgJyMgSGl0cyB0byBraWxsIGl0PyA8L3RkPjx0ZCBhbGlnbj1cImxlZnRcIj4nICtcclxuICAgIGNvbWJhdC5udW1iZXJPZkhpdHNSZXF1aXJlZCArXHJcbiAgICAnPC90ZD48dGQgYWxpZ249XCJyaWdodFwiPjxzcGFuIHN0eWxlPVwiY29sb3I6IzMzMzMzM1wiPicgK1xyXG4gICAgJ0V4dHJhIERhbWFnZTogPC90ZD48dGQgYWxpZ249XCJsZWZ0XCI+KCAnICsgY29tYmF0LmRhbWFnZURvbmUgK1xyXG4gICAgJyApPC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQgYWxpZ249XCJyaWdodFwiPjxzcGFuIHN0eWxlPVwiY29sb3I6IzMzMzMzM1wiPicgK1xyXG4gICAgJ1dpbGwgSSBiZSBoaXQ/IDwvdGQ+PHRkIGFsaWduPVwibGVmdFwiPicgK1xyXG4gICAgd2lsbElCZUhpdChjb21iYXQpICtcclxuICAgICc8L3RkPjx0ZCBhbGlnbj1cInJpZ2h0XCI+PHNwYW4gc3R5bGU9XCJjb2xvcjojMzMzMzMzXCI+JyArXHJcbiAgICAnRXh0cmEgRGVmZW5zZTogPC90ZD48dGQgYWxpZ249XCJsZWZ0XCI+KCAnICsgLTEgKlxyXG4gICAgY29tYmF0LmNyZWF0dXJlSGl0QnlIb3dNdWNoICsgJyApPC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQgYWxpZ249XCJyaWdodFwiPjxzcGFuIHN0eWxlPVwiY29sb3I6IzMzMzMzM1wiPicgK1xyXG4gICAgJyMgSGl0cyB0byBraWxsIG1lPyA8L3RkPjx0ZCBhbGlnbj1cImxlZnRcIj4nICtcclxuICAgIGNvbWJhdC5udW1iZXJPZkNyZWF0dXJlSGl0c1RpbGxEZWFkICtcclxuICAgICc8L3RkPjx0ZCBhbGlnbj1cInJpZ2h0XCI+PHNwYW4gc3R5bGU9XCJjb2xvcjojMzMzMzMzXCI+JyArXHJcbiAgICAnRXh0cmEgQXJtb3IgKyBIUDogPC90ZD48dGQgYWxpZ249XCJsZWZ0XCI+KCAnICsgLTEgKlxyXG4gICAgY29tYmF0LmNyZWF0dXJlRGFtYWdlRG9uZSArICcgKTwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+PHRkIGFsaWduPVwicmlnaHRcIj48c3BhbiBzdHlsZT1cImNvbG9yOiMzMzMzMzNcIj4nICtcclxuICAgICcjIFBsYXllciBIaXRzPyA8L3RkPjx0ZCBhbGlnbj1cImxlZnRcIj4nICsgY29tYmF0LnBsYXllckhpdHMgK1xyXG4gICAgJzwvdGQ+PHRkIGFsaWduPVwicmlnaHRcIj48c3BhbiBzdHlsZT1cImNvbG9yOiMzMzMzMzNcIj4nICtcclxuICAgICcjIENyZWF0dXJlIEhpdHM/IDwvdGQ+PHRkIGFsaWduPVwibGVmdFwiPicgKyBjb21iYXQuY3JlYXR1cmVIaXRzICtcclxuICAgICc8L3RkPjwvdHI+JyArXHJcbiAgICAnPHRyPjx0ZCBhbGlnbj1cInJpZ2h0XCI+PHNwYW4gc3R5bGU9XCJjb2xvcjojMzMzMzMzXCI+JyArXHJcbiAgICAnRmlnaHQgU3RhdHVzOiA8L3NwYW4+PC90ZD48dGQgYWxpZ249XCJsZWZ0XCIgY29sc3Bhbj1cIjNcIj48c3Bhbj4nICtcclxuICAgIGNvbWJhdC5maWdodFN0YXR1cyArICc8L3NwYW4+PC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQgYWxpZ249XCJyaWdodFwiPjxzcGFuIHN0eWxlPVwiY29sb3I6IzMzMzMzM1wiPicgK1xyXG4gICAgJ05vdGVzOiA8L3NwYW4+PC90ZD48dGQgYWxpZ249XCJsZWZ0XCIgY29sc3Bhbj1cIjNcIj4nICtcclxuICAgICc8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZTp4LXNtYWxsO1wiPicgKyBjb21iYXQuZXh0cmFOb3RlcyArXHJcbiAgICAnPC9zcGFuPjwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+PHRkIGNvbHNwYW49XCI0XCI+PHNwYW4gc3R5bGU9XCJmb250LXNpemU6eC1zbWFsbDsgJyArXHJcbiAgICAnY29sb3I6Z3JheVwiPipEb2VzIGluY2x1ZGUgQ0EsIERELCBIRiwgREMsIEZsaW5jaCwgU3VwZXIgRWxpdGUgJyArXHJcbiAgICAnU2xheWVyLCBOTVYsIFNhbmN0dWFyeSwgQ29uc3RpdHV0aW9uLCBGb3J0aXR1ZGUsIENoaSBTdHJpa2UgJyArXHJcbiAgICAnYW5kIFRlcnJvcml6ZSAoaWYgYWN0aXZlKSBhbmQgYWxsb3cgZm9yIHJhbmRvbW5lc3MgKDEuMTA1MykuICcgK1xyXG4gICAgJ0NvbnN0aXR1dGlvbiwgTk1WLCBGb3J0aXR1ZGUgYW5kIENoaSBTdHJpa2UgYXBwbHkgdG8gZ3JvdXAgJyArXHJcbiAgICAnc3RhdHMuPC9zcGFuPjwvdGQ+PC90cj4nICtcclxuICAgICc8L3Rib2R5PjwvdGFibGU+JztcclxufVxyXG4iLCJpbXBvcnQgYXNzZXRzIGZyb20gJy4uL2Fzc2V0cyc7XHJcbmltcG9ydCBjYWxmIGZyb20gJy4uLy4uL3N1cHBvcnQvY2FsZic7XHJcbmltcG9ydCBldmFsQW5hbHlzaXMgZnJvbSAnLi9ldmFsQW5hbHlzaXMnO1xyXG5pbXBvcnQgZXZhbEFybW91ciBmcm9tICcuL2V2YWxBcm1vdXInO1xyXG5pbXBvcnQgZXZhbEF0dGFjayBmcm9tICcuL2V2YWxBdHRhY2snO1xyXG5pbXBvcnQgZXZhbENhIGZyb20gJy4vZXZhbENhJztcclxuaW1wb3J0IGV2YWxEYW1hZ2UgZnJvbSAnLi9ldmFsRGFtYWdlJztcclxuaW1wb3J0IGV2YWxEZWZlbmNlIGZyb20gJy4vZXZhbERlZmVuY2UnO1xyXG5pbXBvcnQgZXZhbEV4dHJhQnVmZnMgZnJvbSAnLi9ldmFsRXh0cmFCdWZmcyc7XHJcbmltcG9ydCBldmFsSHRtbCBmcm9tICcuL2V2YWxIdG1sJztcclxuaW1wb3J0IHtwbGF5ZXJEYXRhU3RyaW5nfSBmcm9tICcuLi8uLi9jb21tb24vY29tbW9uJztcclxuaW1wb3J0IHtcclxuICBjcmVhdGVEb2N1bWVudCxcclxuICBmaW5kTm9kZSxcclxuICBnZXRWYWx1ZSxcclxuICBpbnRWYWx1ZSxcclxuICBzZXRWYWx1ZSxcclxuICB4bWxodHRwXHJcbn0gZnJvbSAnLi4vLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5cclxuZnVuY3Rpb24gZ2V0Qmlhc0dlbmVyYWwoY29tYmF0KSB7XHJcbiAgaWYgKGFzc2V0cy5iaWFzW2NvbWJhdC5jb21iYXRFdmFsdWF0b3JCaWFzXSkge1xyXG4gICAgcmV0dXJuIGFzc2V0cy5iaWFzW2NvbWJhdC5jb21iYXRFdmFsdWF0b3JCaWFzXS5nZW5lcmFsVmFyaWFibGU7XHJcbiAgfVxyXG4gIHJldHVybiAxLjEwNTM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEJpYXNIcChjb21iYXQpIHtcclxuICBpZiAoYXNzZXRzLmJpYXNbY29tYmF0LmNvbWJhdEV2YWx1YXRvckJpYXNdKSB7XHJcbiAgICByZXR1cm4gYXNzZXRzLmJpYXNbY29tYmF0LmNvbWJhdEV2YWx1YXRvckJpYXNdLmhwVmFyaWFibGU7XHJcbiAgfVxyXG4gIHJldHVybiAxLjE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0dXJlRGF0YShzZXMpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIG9iaiA9IHt9O1xyXG4gIG9iai5uYW1lID0gJCgnI2RpYWxvZy12aWV3Y3JlYXR1cmUnKS5maW5kKCdoMi5uYW1lJykudGV4dCgpO1xyXG4gIG9iai5jbGFzcyA9ICQoJyNkaWFsb2ctdmlld2NyZWF0dXJlJylcclxuICAgIC5maW5kKCdzcGFuLmNsYXNzaWZpY2F0aW9uJylcclxuICAgIC50ZXh0KCk7XHJcbiAgb2JqLmF0dGFjayA9IGludFZhbHVlKCQoJyNkaWFsb2ctdmlld2NyZWF0dXJlJylcclxuICAgIC5maW5kKCdkZC5hdHRyaWJ1dGUtYXRrJykudGV4dCgpKTtcclxuICBvYmouZGVmZW5zZSA9IGludFZhbHVlKCQoJyNkaWFsb2ctdmlld2NyZWF0dXJlJylcclxuICAgIC5maW5kKCdkZC5hdHRyaWJ1dGUtZGVmJykudGV4dCgpKTtcclxuICBvYmouYXJtb3IgPSBpbnRWYWx1ZSgkKCcjZGlhbG9nLXZpZXdjcmVhdHVyZScpXHJcbiAgICAuZmluZCgnZGQuYXR0cmlidXRlLWFybScpLnRleHQoKSk7XHJcbiAgb2JqLmRhbWFnZSA9IGludFZhbHVlKCQoJyNkaWFsb2ctdmlld2NyZWF0dXJlJylcclxuICAgIC5maW5kKCdkZC5hdHRyaWJ1dGUtZG1nJykudGV4dCgpKTtcclxuICBvYmouaHAgPSBpbnRWYWx1ZSgkKCcjZGlhbG9nLXZpZXdjcmVhdHVyZScpXHJcbiAgICAuZmluZCgncC5oZWFsdGgtbWF4JykudGV4dCgpKTtcclxuICAvLyByZWR1Y2Ugc3RhdHMgaWYgY3JpdHRlciBpcyBhIFNFIGFuZCBwbGF5ZXIgaGFzIFNFUyBjYXN0IG9uIHRoZW0uXHJcbiAgaWYgKG9iai5uYW1lLnNlYXJjaCgnU3VwZXIgRWxpdGUnKSAhPT0gLTEpIHtcclxuICAgIG9iai5hdHRhY2sgLT0gTWF0aC5jZWlsKG9iai5hdHRhY2sgKiBzZXMpO1xyXG4gICAgb2JqLmRlZmVuc2UgLT0gTWF0aC5jZWlsKG9iai5kZWZlbnNlICogc2VzKTtcclxuICAgIG9iai5hcm1vciAtPSBNYXRoLmNlaWwob2JqLmFybW9yICogc2VzKTtcclxuICAgIG9iai5kYW1hZ2UgLT0gTWF0aC5jZWlsKG9iai5kYW1hZ2UgKiBzZXMpO1xyXG4gICAgb2JqLmhwIC09IE1hdGguY2VpbChvYmouaHAgKiBzZXMpO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0ZvckNyZWF0dXJlRXZhbHVhdG9yR3JvdXAoKSB7IC8vIExlZ2FjeVxyXG4gIGlmICgkKCcjY3JlYXR1cmVFdmFsdWF0b3JHcm91cCcpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgJCgnI2RpYWxvZy12aWV3Y3JlYXR1cmUnKVxyXG4gICAgICAuYXBwZW5kKCc8ZGl2IGlkPVwiY3JlYXR1cmVFdmFsdWF0b3JHcm91cFwiICcgK1xyXG4gICAgICAgICdzdHlsZT1cImNsZWFyOmJvdGg7XCI+PC9kaXY+Jyk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0ZvckNyZWF0dXJlRXZhbHVhdG9yKCkgeyAvLyBMZWdhY3lcclxuICBpZiAoJCgnI2NyZWF0dXJlRXZhbHVhdG9yJykubGVuZ3RoID09PSAwKSB7XHJcbiAgICAkKCcjZGlhbG9nLXZpZXdjcmVhdHVyZScpXHJcbiAgICAgIC5hcHBlbmQoJzxkaXYgaWQ9XCJjcmVhdHVyZUV2YWx1YXRvclwiICcgK1xyXG4gICAgICAgICdzdHlsZT1cImNsZWFyOmJvdGg7XCI+PC9kaXY+Jyk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDcmVhdHVyZVBsYXllckRhdGEocmVzcG9uc2VUZXh0LCBjYWxsYmFjaykgeyAvLyBMZWdhY3lcclxuICB2YXIgY29tYmF0ID0ge307XHJcbiAgY29tYmF0LmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgLy8gcGxheWVyZGF0YVxyXG4gIGNvbWJhdC5wbGF5ZXIgPSBwbGF5ZXJEYXRhU3RyaW5nKHJlc3BvbnNlVGV4dCk7XHJcbiAgY29tYmF0LmNvbWJhdEV2YWx1YXRvckJpYXMgPSBnZXRWYWx1ZSgnY29tYmF0RXZhbHVhdG9yQmlhcycpO1xyXG4gIGNvbWJhdC5hdHRhY2tWYXJpYWJsZSA9IDEuMTA1MztcclxuICBjb21iYXQuZ2VuZXJhbFZhcmlhYmxlID0gZ2V0Qmlhc0dlbmVyYWwoY29tYmF0KTtcclxuICBjb21iYXQuaHBWYXJpYWJsZSA9IGdldEJpYXNIcChjb21iYXQpO1xyXG4gIGNvbWJhdC5jcmVhdHVyZSA9XHJcbiAgICBjcmVhdHVyZURhdGEoY29tYmF0LnBsYXllci5zdXBlckVsaXRlU2xheWVyTXVsdGlwbGllcik7XHJcbiAgY29tYmF0ID0gZXZhbEV4dHJhQnVmZnMoY29tYmF0KTtcclxuICBjb21iYXQgPSBldmFsQXR0YWNrKGNvbWJhdCk7XHJcbiAgY29tYmF0ID0gZXZhbERhbWFnZShjb21iYXQpO1xyXG4gIGNvbWJhdCA9IGV2YWxEZWZlbmNlKGNvbWJhdCk7XHJcbiAgY29tYmF0ID0gZXZhbEFybW91cihjb21iYXQpO1xyXG4gIGNvbWJhdCA9IGV2YWxBbmFseXNpcyhjb21iYXQpO1xyXG4gIGNvbWJhdCA9IGV2YWxDYShjb21iYXQpO1xyXG4gIGNvbWJhdC5ldmFsdWF0b3JIVE1MID0gZXZhbEh0bWwoY29tYmF0KTtcclxuICB2YXIgdGVtcGRhdGE7XHJcbiAgaWYgKGNhbGxiYWNrLmdyb3VwRXZhbHVhdGlvbikge1xyXG4gICAgY2hlY2tGb3JDcmVhdHVyZUV2YWx1YXRvckdyb3VwKCk7XHJcbiAgICB0ZW1wZGF0YSA9IGNvbWJhdC5ldmFsdWF0b3JIVE1MLnJlcGxhY2UoLycvZywgJ1xcXFxcXCcnKTtcclxuICAgICQoJyNjcmVhdHVyZUV2YWx1YXRvckdyb3VwJykuaHRtbCh0ZW1wZGF0YSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNoZWNrRm9yQ3JlYXR1cmVFdmFsdWF0b3IoKTtcclxuICAgIHRlbXBkYXRhID0gY29tYmF0LmV2YWx1YXRvckhUTUwucmVwbGFjZSgvJy9nLCAnXFxcXFxcJycpO1xyXG4gICAgJCgnI2NyZWF0dXJlRXZhbHVhdG9yJykuaHRtbCh0ZW1wZGF0YSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDcmVhdHVyZUdyb3VwRGF0YShyZXNwb25zZVRleHQpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIGRvYyA9IGNyZWF0ZURvY3VtZW50KHJlc3BvbnNlVGV4dCk7XHJcbiAgdmFyIGdyb3VwQXR0YWNrVmFsdWUgPSBOdW1iZXIoZmluZE5vZGUoJy8vdGFibGVbQHdpZHRoPVwiNDAwXCJdL3Rib2R5JyArXHJcbiAgICAnL3RyL3RkW2NvbnRhaW5zKC4sXCJBdHRhY2s6XCIpXScsIGRvYykubmV4dFNpYmxpbmcudGV4dENvbnRlbnRcclxuICAgIC5yZXBsYWNlKC8sLywgJycpKTtcclxuICB2YXIgZ3JvdXBEZWZlbnNlVmFsdWUgPSBOdW1iZXIoZmluZE5vZGUoJy8vdGFibGVbQHdpZHRoPVwiNDAwXCJdL3Rib2R5JyArXHJcbiAgICAnL3RyL3RkW2NvbnRhaW5zKC4sXCJEZWZlbnNlOlwiKV0nLCBkb2MpLm5leHRTaWJsaW5nLnRleHRDb250ZW50XHJcbiAgICAucmVwbGFjZSgvLC8sICcnKSk7XHJcbiAgdmFyIGdyb3VwQXJtb3JWYWx1ZSA9IE51bWJlcihmaW5kTm9kZSgnLy90YWJsZVtAd2lkdGg9XCI0MDBcIl0vdGJvZHknICtcclxuICAgICcvdHIvdGRbY29udGFpbnMoLixcIkFybW9yOlwiKV0nLCBkb2MpLm5leHRTaWJsaW5nLnRleHRDb250ZW50XHJcbiAgICAucmVwbGFjZSgvLC8sICcnKSk7XHJcbiAgdmFyIGdyb3VwRGFtYWdlVmFsdWUgPSBOdW1iZXIoZmluZE5vZGUoJy8vdGFibGVbQHdpZHRoPVwiNDAwXCJdL3Rib2R5JyArXHJcbiAgICAnL3RyL3RkW2NvbnRhaW5zKC4sXCJEYW1hZ2U6XCIpXScsIGRvYykubmV4dFNpYmxpbmcudGV4dENvbnRlbnRcclxuICAgIC5yZXBsYWNlKC8sLywgJycpKTtcclxuICB2YXIgZ3JvdXBIUFZhbHVlID0gTnVtYmVyKGZpbmROb2RlKCcvL3RhYmxlW0B3aWR0aD1cIjQwMFwiXS90Ym9keScgK1xyXG4gICAgJy90ci90ZFtjb250YWlucyguLFwiSFA6XCIpXScsIGRvYykubmV4dFNpYmxpbmcudGV4dENvbnRlbnRcclxuICAgIC5yZXBsYWNlKC8sLywgJycpKTtcclxuICB4bWxodHRwKCdpbmRleC5waHA/Y21kPXByb2ZpbGUnLCBnZXRDcmVhdHVyZVBsYXllckRhdGEsIHtcclxuICAgIGdyb3VwRXhpc3RzOiB0cnVlLFxyXG4gICAgZ3JvdXBBdHRhY2tWYWx1ZTogZ3JvdXBBdHRhY2tWYWx1ZSxcclxuICAgIGdyb3VwRGVmZW5zZVZhbHVlOiBncm91cERlZmVuc2VWYWx1ZSxcclxuICAgIGdyb3VwQXJtb3JWYWx1ZTogZ3JvdXBBcm1vclZhbHVlLFxyXG4gICAgZ3JvdXBEYW1hZ2VWYWx1ZTogZ3JvdXBEYW1hZ2VWYWx1ZSxcclxuICAgIGdyb3VwSFBWYWx1ZTogZ3JvdXBIUFZhbHVlLFxyXG4gICAgZ3JvdXBFdmFsdWF0aW9uOiB0cnVlXHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrSWZHcm91cEV4aXN0cyhyZXNwb25zZVRleHQpIHsgLy8gSHlicmlkXHJcbiAgdmFyIGRvYyA9IGNyZWF0ZURvY3VtZW50KHJlc3BvbnNlVGV4dCk7XHJcbiAgdmFyIGdyb3VwRXhpc3RzSU1HID0gJChkb2MpXHJcbiAgICAuZmluZCgnaW1nW3RpdGxlPVwiRGlzYmFuZCBHcm91cCAoQ2FuY2VsIEF0dGFjaylcIl0nKTtcclxuICBpZiAoZ3JvdXBFeGlzdHNJTUcubGVuZ3RoID4gMCkge1xyXG4gICAgdmFyIGdyb3VwSHJlZiA9IGdyb3VwRXhpc3RzSU1HLnBhcmVudHMoJ3RkOmZpcnN0JykuZmluZCgnYTpmaXJzdCcpXHJcbiAgICAgIC5hdHRyKCdocmVmJyk7XHJcbiAgICB4bWxodHRwKGdyb3VwSHJlZiwgZ2V0Q3JlYXR1cmVHcm91cERhdGEpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYWRkUmVtb3ZlQ3JlYXR1cmVUb0RvTm90S2lsbExpc3QoZXZ0KSB7XHJcbiAgdmFyIGNyZWF0dXJlTmFtZSA9IGV2dC50YXJnZXQuZ2V0QXR0cmlidXRlKCdjcmVhdHVyZU5hbWUnKTtcclxuICB2YXIgaW5kID0gY2FsZi5kb05vdEtpbGxMaXN0LmluZGV4T2YoY3JlYXR1cmVOYW1lKTtcclxuICBpZiAoaW5kICE9PSAtMSkge1xyXG4gICAgY2FsZi5kb05vdEtpbGxMaXN0LnNwbGljZShpbmQsIDEpO1xyXG4gICAgZXZ0LnRhcmdldC5pbm5lckhUTUwgPSAnQWRkIHRvIHRoZSBkbyBub3Qga2lsbCBsaXN0JztcclxuICB9IGVsc2Uge1xyXG4gICAgY2FsZi5kb05vdEtpbGxMaXN0LnB1c2goY3JlYXR1cmVOYW1lKTtcclxuICAgIGV2dC50YXJnZXQuaW5uZXJIVE1MID0gJ1JlbW92ZSBmcm9tIGRvIG5vdCBraWxsIGxpc3QnO1xyXG4gIH1cclxuICBzZXRWYWx1ZSgnZG9Ob3RLaWxsTGlzdCcsIGNhbGYuZG9Ob3RLaWxsTGlzdC5qb2luKCkpO1xyXG4gIC8vIHJlZnJlc2ggdGhlIGFjdGlvbiBsaXN0XHJcbiAgd2luZG93LkdhbWVEYXRhLmRvQWN0aW9uKC0xKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVhZHlWaWV3Q3JlYXR1cmUoKSB7IC8vIEh5YnJpZFxyXG4gICQoJyNjcmVhdHVyZUV2YWx1YXRvcicpLmh0bWwoJycpO1xyXG4gICQoJyNjcmVhdHVyZUV2YWx1YXRvckdyb3VwJykuaHRtbCgnJyk7XHJcblxyXG4gIHhtbGh0dHAoJ2luZGV4LnBocD9jbWQ9cHJvZmlsZScsIGdldENyZWF0dXJlUGxheWVyRGF0YSwge1xyXG4gICAgZ3JvdXBFeGlzdHM6IGZhbHNlLFxyXG4gICAgZ3JvdXBBdHRhY2tWYWx1ZTogMCxcclxuICAgIGdyb3VwRGVmZW5zZVZhbHVlOiAwLFxyXG4gICAgZ3JvdXBBcm1vclZhbHVlOiAwLFxyXG4gICAgZ3JvdXBEYW1hZ2VWYWx1ZTogMCxcclxuICAgIGdyb3VwSFBWYWx1ZTogMCxcclxuICAgIGdyb3VwRXZhbHVhdGlvbjogZmFsc2VcclxuICB9KTtcclxuICB4bWxodHRwKCdpbmRleC5waHA/Y21kPWd1aWxkJnN1YmNtZD1ncm91cHMnLFxyXG4gICAgY2hlY2tJZkdyb3VwRXhpc3RzKTtcclxuXHJcbiAgJCgnI2FkZFJlbW92ZUNyZWF0dXJlVG9Eb05vdEtpbGxMaXN0JykuaHRtbCgnJyk7XHJcbiAgaWYgKCQoJyNhZGRSZW1vdmVDcmVhdHVyZVRvRG9Ob3RLaWxsTGlzdCcpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgdmFyIGRvTm90S2lsbEVsZW1lbnQgPSAnPGRpdiBpZD1cImFkZFJlbW92ZUNyZWF0dXJlVG9EbycgK1xyXG4gICAgICAnTm90S2lsbExpc3RcIlwiIGNsYXNzPVwiZGVzY3JpcHRpb25cIiBzdHlsZT1cImN1cnNvcjonICtcclxuICAgICAgJ3BvaW50ZXI7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTtjb2xvcjpibHVlO1wiPjwvZGl2Pic7XHJcbiAgICAkKGRvTm90S2lsbEVsZW1lbnQpLmluc2VydEFmdGVyKCQoJyNkaWFsb2ctdmlld2NyZWF0dXJlJylcclxuICAgICAgLmZpbmQoJ3AuZGVzY3JpcHRpb24nKSk7XHJcbiAgfVxyXG4gIHZhciBjcmVhdHVyZU5hbWUgPSAkKCcjZGlhbG9nLXZpZXdjcmVhdHVyZScpLmZpbmQoJ2gyLm5hbWUnKVxyXG4gICAgLnRleHQoKTtcclxuICAkKCcjYWRkUmVtb3ZlQ3JlYXR1cmVUb0RvTm90S2lsbExpc3QnKVxyXG4gICAgLmF0dHIoJ2NyZWF0dXJlTmFtZScsIGNyZWF0dXJlTmFtZSk7XHJcbiAgdmFyIGV4dHJhVGV4dCA9ICdBZGQgdG8gdGhlIGRvIG5vdCBraWxsIGxpc3QnO1xyXG4gIGlmIChjYWxmLmRvTm90S2lsbExpc3QuaW5kZXhPZihjcmVhdHVyZU5hbWUpICE9PSAtMSkge1xyXG4gICAgZXh0cmFUZXh0ID0gJ1JlbW92ZSBmcm9tIGRvIG5vdCBraWxsIGxpc3QnO1xyXG4gIH1cclxuICAkKCcjYWRkUmVtb3ZlQ3JlYXR1cmVUb0RvTm90S2lsbExpc3QnKS5odG1sKGV4dHJhVGV4dCk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FkZFJlbW92ZUNyZWF0dXJlVG9Eb05vdEtpbGxMaXN0JylcclxuICAgIC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsXHJcbiAgICAgIGFkZFJlbW92ZUNyZWF0dXJlVG9Eb05vdEtpbGxMaXN0LCB0cnVlKTtcclxufVxyXG4iLCJpbXBvcnQgY2FsZiBmcm9tICcuLi9zdXBwb3J0L2NhbGYnO1xyXG5pbXBvcnQge2NyZWF0ZURpdn0gZnJvbSAnLi4vY29tbW9uL2NFbGVtZW50JztcclxuaW1wb3J0IHtodW50aW5nQnVmZnNIdG1sfSBmcm9tICcuLi9zZXR0aW5ncy93b3JsZFByZWZzJztcclxuaW1wb3J0IHtzaW1wbGVDaGVja2JveEh0bWx9IGZyb20gJy4uL3NldHRpbmdzL3NldHRpbmdzUGFnZSc7XHJcbmltcG9ydCB7Z2V0VmFsdWUsIHNldFZhbHVlLCBzaG91bGRCZUFycmF5fSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG52YXIgaHVudGluZ0J1ZmZzO1xyXG52YXIgaHVudGluZ0J1ZmZzTmFtZTtcclxudmFyIGhpZGVQbGF5ZXJBY3Rpb25zO1xyXG52YXIgbWlzc2luZ0J1ZmZzRGl2O1xyXG5cclxuZnVuY3Rpb24gZ2V0UHJlZnMoKSB7XHJcbiAgY2FsZi5oaWRlU3ViTHZsQ3JlYXR1cmUgPSBnZXRWYWx1ZSgnaGlkZVN1Ykx2bENyZWF0dXJlJyk7XHJcbiAgaGlkZVBsYXllckFjdGlvbnMgPSBnZXRWYWx1ZSgnaGlkZVBsYXllckFjdGlvbnMnKTtcclxuICBjYWxmLnNob3dCdWZmcyA9IGdldFZhbHVlKCdzaG93SHVudGluZ0J1ZmZzJyk7XHJcbiAgY2FsZi5lbmFibGVkSHVudGluZ01vZGUgPSBnZXRWYWx1ZSgnZW5hYmxlZEh1bnRpbmdNb2RlJyk7XHJcbiAgY2FsZi5idWZmcyA9IHNob3VsZEJlQXJyYXkoJ2h1bnRpbmdCdWZmcycpO1xyXG4gIGNhbGYuYnVmZnNOYW1lID0gZ2V0VmFsdWUoJ2h1bnRpbmdCdWZmc05hbWUnKTtcclxuICBjYWxmLmJ1ZmZzMiA9IHNob3VsZEJlQXJyYXkoJ2h1bnRpbmdCdWZmczInKTtcclxuICBjYWxmLmJ1ZmZzMk5hbWUgPSBnZXRWYWx1ZSgnaHVudGluZ0J1ZmZzMk5hbWUnKTtcclxuICBjYWxmLmJ1ZmZzMyA9IHNob3VsZEJlQXJyYXkoJ2h1bnRpbmdCdWZmczMnKTtcclxuICBjYWxmLmJ1ZmZzM05hbWUgPSBnZXRWYWx1ZSgnaHVudGluZ0J1ZmZzM05hbWUnKTtcclxuICBjYWxmLmRvTm90S2lsbExpc3QgPSBzaG91bGRCZUFycmF5KCdkb05vdEtpbGxMaXN0Jyk7XHJcbn1cclxuXHJcbnZhciBidWZmTG9va3VwID0ge1xyXG4gICcxJzogZnVuY3Rpb24oKSB7XHJcbiAgICBodW50aW5nQnVmZnMgPSBjYWxmLmJ1ZmZzO1xyXG4gICAgaHVudGluZ0J1ZmZzTmFtZSA9IGNhbGYuYnVmZnNOYW1lO1xyXG4gIH0sXHJcbiAgJzInOiBmdW5jdGlvbigpIHtcclxuICAgIGh1bnRpbmdCdWZmcyA9IGNhbGYuYnVmZnMyO1xyXG4gICAgaHVudGluZ0J1ZmZzTmFtZSA9IGNhbGYuYnVmZnMyTmFtZTtcclxuICB9LFxyXG4gICczJzogZnVuY3Rpb24oKSB7XHJcbiAgICBodW50aW5nQnVmZnMgPSBjYWxmLmJ1ZmZzMztcclxuICAgIGh1bnRpbmdCdWZmc05hbWUgPSBjYWxmLmJ1ZmZzM05hbWU7XHJcbiAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gc2V0Q3VycmVudEJ1ZmZMaXN0KCkge1xyXG4gIHZhciB0bXBGbiA9IGJ1ZmZMb29rdXBbY2FsZi5lbmFibGVkSHVudGluZ01vZGVdO1xyXG4gIGlmICh0eXBlb2YgdG1wRm4gPT09ICdmdW5jdGlvbicpIHtcclxuICAgIHRtcEZuKCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiB0b2dnbGVTdWJMdmxDcmVhdHVyZSgpIHtcclxuICBjYWxmLmhpZGVTdWJMdmxDcmVhdHVyZSA9ICFjYWxmLmhpZGVTdWJMdmxDcmVhdHVyZTtcclxuICBzZXRWYWx1ZSgnaGlkZVN1Ykx2bENyZWF0dXJlJywgY2FsZi5oaWRlU3ViTHZsQ3JlYXR1cmUpO1xyXG4gIEdhbWVEYXRhLmZldGNoKDI1Nik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZUhpZGVQbGF5ZXJBY3Rpb25zKCkge1xyXG4gIGhpZGVQbGF5ZXJBY3Rpb25zID0gIWhpZGVQbGF5ZXJBY3Rpb25zO1xyXG4gIHNldFZhbHVlKCdoaWRlUGxheWVyQWN0aW9ucycsIGhpZGVQbGF5ZXJBY3Rpb25zKTtcclxuICBHYW1lRGF0YS5mZXRjaCgyNTYpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0b2dnbGVTaG93SHVudGluZ0J1ZmZzKCkge1xyXG4gIGNhbGYuc2hvd0J1ZmZzID0gIWNhbGYuc2hvd0J1ZmZzO1xyXG4gIHNldFZhbHVlKCdzaG93SHVudGluZ0J1ZmZzJywgY2FsZi5zaG93QnVmZnMpO1xyXG4gIEdhbWVEYXRhLmZldGNoKDE2KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlRW5hYmxlZEh1bnRpbmdNb2RlKGUpIHtcclxuICBpZiAoZS50YXJnZXQubmFtZSAhPT0gJ2VuYWJsZWRIdW50aW5nTW9kZScpIHtyZXR1cm47fVxyXG4gIGNhbGYuZW5hYmxlZEh1bnRpbmdNb2RlID0gZS50YXJnZXQudmFsdWU7XHJcbiAgc2V0VmFsdWUoJ2VuYWJsZWRIdW50aW5nTW9kZScsIGNhbGYuZW5hYmxlZEh1bnRpbmdNb2RlKTtcclxuICBzZXRDdXJyZW50QnVmZkxpc3QoKTtcclxuICBHYW1lRGF0YS5mZXRjaCgxNik7XHJcbn1cclxuXHJcbnZhciBmc2hFdmVudHMgPSB7XHJcbiAgaGlkZVN1Ykx2bENyZWF0dXJlOiB0b2dnbGVTdWJMdmxDcmVhdHVyZSxcclxuICBoaWRlUGxheWVyQWN0aW9uczogdG9nZ2xlSGlkZVBsYXllckFjdGlvbnMsXHJcbiAgc2hvd0h1bnRpbmdCdWZmczogdG9nZ2xlU2hvd0h1bnRpbmdCdWZmc1xyXG59O1xyXG5cclxuZnVuY3Rpb24gcHJlZnNDbGlja0V2ZW50KGUpIHtcclxuICB2YXIgdG1wRm4gPSBmc2hFdmVudHNbZS50YXJnZXQubmFtZV07XHJcbiAgaWYgKHR5cGVvZiB0bXBGbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgZS50YXJnZXQuYmx1cigpO1xyXG4gICAgdG1wRm4oZSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBidWlsZEZzaERpdnMoKSB7XHJcbiAgdmFyIGZzaERpdiA9IGNyZWF0ZURpdih7Y2xhc3NOYW1lOiAnZnNoQ2VudGVyIGZzaEZ0ZW4nfSk7XHJcbiAgdmFyIHByZWZzRGl2ID0gY3JlYXRlRGl2KHtcclxuICAgIGlubmVySFRNTDogc2ltcGxlQ2hlY2tib3hIdG1sKCdoaWRlU3ViTHZsQ3JlYXR1cmUnKSArICcmbmJzcDsmbmJzcDsnICtcclxuICAgICAgc2ltcGxlQ2hlY2tib3hIdG1sKCdoaWRlUGxheWVyQWN0aW9ucycpICsgJyZuYnNwOyZuYnNwOycgK1xyXG4gICAgICBodW50aW5nQnVmZnNIdG1sKClcclxuICB9KTtcclxuICBwcmVmc0Rpdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHByZWZzQ2xpY2tFdmVudCk7XHJcbiAgcHJlZnNEaXYuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdG9nZ2xlRW5hYmxlZEh1bnRpbmdNb2RlKTtcclxuICBmc2hEaXYuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdiZWZvcmVlbmQnLCBwcmVmc0Rpdik7XHJcbiAgbWlzc2luZ0J1ZmZzRGl2ID0gY3JlYXRlRGl2KCk7XHJcbiAgZnNoRGl2Lmluc2VydEFkamFjZW50RWxlbWVudCgnYmVmb3JlZW5kJywgbWlzc2luZ0J1ZmZzRGl2KTtcclxuICB2YXIgd29ybGRDb250YWluZXJCZWxvdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3b3JsZENvbnRhaW5lckJlbG93Jyk7XHJcbiAgd29ybGRDb250YWluZXJCZWxvdy5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyYmVnaW4nLCBmc2hEaXYpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB4aHJEYXRhRmlsdGVyKGRhdGEpIHtcclxuICB2YXIgbXlEYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICBpZiAoIW15RGF0YS5hY3Rpb25zIHx8IG15RGF0YS5hY3Rpb25zLmxlbmd0aCA9PT0gMCkge3JldHVybiBkYXRhO31cclxuICB2YXIgcmVhbG0gPSBHYW1lRGF0YS5yZWFsbSgpO1xyXG4gIG15RGF0YS5hY3Rpb25zID0gbXlEYXRhLmFjdGlvbnMuZmlsdGVyKGZ1bmN0aW9uKGVsKSB7XHJcbiAgICBpZiAoZWwudHlwZSA9PT0gNikge1xyXG4gICAgICByZXR1cm4gZWwuZGF0YS5jcmVhdHVyZV90eXBlICE9PSAwIHx8IGVsLmRhdGEubGV2ZWwgPj0gcmVhbG0ubWlubGV2ZWw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9KTtcclxuICB2YXIgcmV0ID0gSlNPTi5zdHJpbmdpZnkobXlEYXRhKTtcclxuICByZXR1cm4gcmV0O1xyXG59XHJcblxyXG5mdW5jdGlvbiB4aHJQcmVGaWx0ZXIob3B0aW9ucywgb3JpZ2luYWxPcHRpb25zKSB7XHJcbiAgaWYgKCFvcmlnaW5hbE9wdGlvbnMuZGF0YSB8fCAhY2FsZi5oaWRlU3ViTHZsQ3JlYXR1cmUpIHtyZXR1cm47fVxyXG4gIG9wdGlvbnMuZGF0YUZpbHRlciA9IHhockRhdGFGaWx0ZXI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGludGVyY2VwdFhIUigpIHsgLy8galF1ZXJ5Lm1pblxyXG4gICQuYWpheFByZWZpbHRlcignSlNPTicsIHhoclByZUZpbHRlcik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvSGlkZVBsYXllckFjdGlvbnMoKSB7XHJcbiAgaWYgKCFoaWRlUGxheWVyQWN0aW9ucykge3JldHVybjt9XHJcbiAgdmFyIGFjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhY3Rpb25MaXN0Jyk7XHJcbiAgdmFyIHBsYXllcnMgPSBhY3QuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncGxheWVyJyk7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChwbGF5ZXJzLCBmdW5jdGlvbihlbCkge1xyXG4gICAgdmFyIHZlcmJzID0gZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndmVyYnMnKTtcclxuICAgIGlmICh2ZXJicyAmJiB2ZXJicy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgdmVyYnNbMF0uY2xhc3NMaXN0LmFkZCgnZnNoSGlkZScpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBodW50aW5nQnVmZnNFbmFibGVkKGV2dCwgZGF0YSkge1xyXG4gIGlmICghY2FsZi5zaG93QnVmZnMpIHtcclxuICAgIG1pc3NpbmdCdWZmc0Rpdi5pbm5lckhUTUwgPSAnJztcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIGJ1ZmZIYXNoID0gZGF0YS5iLnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXJyKSB7XHJcbiAgICBwcmV2W2N1cnIubmFtZV0gPSB0cnVlO1xyXG4gICAgcmV0dXJuIHByZXY7XHJcbiAgfSwge30pO1xyXG4gIHZhciBtaXNzaW5nQnVmZnMgPSBodW50aW5nQnVmZnMucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cnIpIHtcclxuICAgIGlmICghYnVmZkhhc2hbY3Vyci50cmltKCldKSB7cHJldi5wdXNoKGN1cnIpO31cclxuICAgIHJldHVybiBwcmV2O1xyXG4gIH0sIFtdKTtcclxuICBpZiAobWlzc2luZ0J1ZmZzLmxlbmd0aCA+IDApIHtcclxuICAgIG1pc3NpbmdCdWZmc0Rpdi5pbm5lckhUTUwgPSAnWW91IGFyZSBtaXNzaW5nIHNvbWUgJyArXHJcbiAgICAgIGh1bnRpbmdCdWZmc05hbWUgKyAnIGh1bnRpbmcgYnVmZnM8YnI+KCcgK1xyXG4gICAgICBtaXNzaW5nQnVmZnMuam9pbignLCAnKSArICcpJztcclxuICB9IGVsc2Uge21pc3NpbmdCdWZmc0Rpdi5pbm5lckhUTUwgPSAnJzt9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRhdGFFdmVudHNQbGF5ZXJCdWZmcyhldnQsIGRhdGEpIHtcclxuICBpZiAoaHVudGluZ0J1ZmZzKSB7aHVudGluZ0J1ZmZzRW5hYmxlZChldnQsIGRhdGEpO31cclxufVxyXG5cclxuZnVuY3Rpb24gZG9IdW50aW5nQnVmZnMoKSB7IC8vIGpRdWVyeS5taW5cclxuICBzZXRDdXJyZW50QnVmZkxpc3QoKTtcclxuICAkLnN1YnNjcmliZSh3aW5kb3cuREFUQV9FVkVOVFMuUExBWUVSX0JVRkZTLkFOWSxcclxuICAgIGRhdGFFdmVudHNQbGF5ZXJCdWZmcyk7XHJcbiAgaWYgKGNhbGYuc2hvd0J1ZmZzICYmIHdpbmRvdy5pbml0aWFsR2FtZURhdGEpIHsgLy8gSENTIGluaXRpYWwgZGF0YVxyXG4gICAgZGF0YUV2ZW50c1BsYXllckJ1ZmZzKG51bGwsXHJcbiAgICAgIHtiOiB3aW5kb3cuaW5pdGlhbEdhbWVEYXRhLnBsYXllci5idWZmc30pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0dXBQcmVmKCkge1xyXG4gIGdldFByZWZzKCk7XHJcbiAgYnVpbGRGc2hEaXZzKCk7XHJcbiAgaW50ZXJjZXB0WEhSKCk7XHJcbiAgZG9IdW50aW5nQnVmZnMoKTtcclxuICAkLnN1YnNjcmliZSgnYWZ0ZXItdXBkYXRlLmFjdGlvbmxpc3QnLCBkb0hpZGVQbGF5ZXJBY3Rpb25zKTtcclxuICBkb0hpZGVQbGF5ZXJBY3Rpb25zKCk7XHJcbn1cclxuIiwiaW1wb3J0IGdldEZvcmFnZSBmcm9tICcuLi9hamF4L2dldEZvcmFnZSc7XHJcbmltcG9ydCByZXRyeUFqYXggZnJvbSAnLi4vYWpheC9yZXRyeUFqYXgnO1xyXG5pbXBvcnQgc2V0Rm9yYWdlIGZyb20gJy4uL2FqYXgvc2V0Rm9yYWdlJztcclxuaW1wb3J0IHtmYWxsYmFjaywgZ2V0VmFsdWUsIGludFZhbHVlfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG52YXIgc2hvd0NyZWF0dXJlSW5mbztcclxudmFyIHNob3dNb25zdGVyTG9nO1xyXG52YXIgbW9uc3RlckxvZztcclxudmFyIGFjdGlvbkRhdGE7XHJcbnZhciBjcmVhdHVyZTtcclxudmFyIG1vbnN0ZXI7XHJcbnZhciBnZW5lcmFsVmFyaWFibGUgPSAxLjEwNTM7XHJcbnZhciBocFZhcmlhYmxlID0gMS4xO1xyXG52YXIgc3RhdExldmVsO1xyXG52YXIgc3RhdERlZmVuc2U7XHJcbnZhciBzdGF0QXR0YWNrO1xyXG52YXIgc3RhdERhbWFnZTtcclxudmFyIHN0YXRBcm1vcjtcclxudmFyIHN0YXRIcDtcclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZU1pbk1heChfbG9nU3RhdCwgY3JlYXR1cmVTdGF0KSB7XHJcbiAgdmFyIGxvZ1N0YXQgPSBmYWxsYmFjayhfbG9nU3RhdCwge30pO1xyXG4gIGlmIChsb2dTdGF0Lm1pbikge1xyXG4gICAgbG9nU3RhdC5taW4gPSBNYXRoLm1pbihsb2dTdGF0Lm1pbiwgY3JlYXR1cmVTdGF0KTtcclxuICB9IGVsc2Uge1xyXG4gICAgbG9nU3RhdC5taW4gPSBjcmVhdHVyZVN0YXQ7XHJcbiAgfVxyXG4gIGlmIChsb2dTdGF0Lm1heCkge1xyXG4gICAgbG9nU3RhdC5tYXggPSBNYXRoLm1heChsb2dTdGF0Lm1heCwgY3JlYXR1cmVTdGF0KTtcclxuICB9IGVsc2Uge1xyXG4gICAgbG9nU3RhdC5tYXggPSBjcmVhdHVyZVN0YXQ7XHJcbiAgfVxyXG4gIHJldHVybiBsb2dTdGF0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzTW9uc3RlckxvZygpIHtcclxuICBpZiAoIXNob3dNb25zdGVyTG9nKSB7cmV0dXJuO31cclxuICBtb25zdGVyTG9nW2NyZWF0dXJlLm5hbWVdID0gZmFsbGJhY2sobW9uc3RlckxvZ1tjcmVhdHVyZS5uYW1lXSwge30pO1xyXG4gIHZhciBsb2dDcmVhdHVyZSA9IG1vbnN0ZXJMb2dbY3JlYXR1cmUubmFtZV07XHJcbiAgbG9nQ3JlYXR1cmUuY3JlYXR1cmVfY2xhc3MgPSBmYWxsYmFjayhsb2dDcmVhdHVyZS5jcmVhdHVyZV9jbGFzcyxcclxuICAgIGNyZWF0dXJlLmNyZWF0dXJlX2NsYXNzKTtcclxuICBsb2dDcmVhdHVyZS5pbWFnZV9pZCA9IGZhbGxiYWNrKGxvZ0NyZWF0dXJlLmltYWdlX2lkLFxyXG4gICAgY3JlYXR1cmUuaW1hZ2VfaWQpO1xyXG4gIGxvZ0NyZWF0dXJlLmxldmVsID0gZmFsbGJhY2sobG9nQ3JlYXR1cmUubGV2ZWwsXHJcbiAgICBOdW1iZXIoY3JlYXR1cmUubGV2ZWwpKTtcclxuICBsb2dDcmVhdHVyZS50eXBlID0gZmFsbGJhY2sobG9nQ3JlYXR1cmUudHlwZSwgY3JlYXR1cmUudHlwZSk7XHJcbiAgbG9nQ3JlYXR1cmUuYXJtb3IgPSB1cGRhdGVNaW5NYXgobG9nQ3JlYXR1cmUuYXJtb3IsXHJcbiAgICBOdW1iZXIoY3JlYXR1cmUuYXJtb3IpKTtcclxuICBsb2dDcmVhdHVyZS5hdHRhY2sgPSB1cGRhdGVNaW5NYXgobG9nQ3JlYXR1cmUuYXR0YWNrLFxyXG4gICAgTnVtYmVyKGNyZWF0dXJlLmF0dGFjaykpO1xyXG4gIGxvZ0NyZWF0dXJlLmRhbWFnZSA9IHVwZGF0ZU1pbk1heChsb2dDcmVhdHVyZS5kYW1hZ2UsXHJcbiAgICBOdW1iZXIoY3JlYXR1cmUuZGFtYWdlKSk7XHJcbiAgbG9nQ3JlYXR1cmUuZGVmZW5zZSA9IHVwZGF0ZU1pbk1heChsb2dDcmVhdHVyZS5kZWZlbnNlLFxyXG4gICAgTnVtYmVyKGNyZWF0dXJlLmRlZmVuc2UpKTtcclxuICBsb2dDcmVhdHVyZS5ocCA9IHVwZGF0ZU1pbk1heChsb2dDcmVhdHVyZS5ocCxcclxuICAgIE51bWJlcihjcmVhdHVyZS5ocCkpO1xyXG4gIGlmIChjcmVhdHVyZS5lbmhhbmNlbWVudHMgJiYgY3JlYXR1cmUuZW5oYW5jZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgIGxvZ0NyZWF0dXJlLmVuaGFuY2VtZW50cyA9IGZhbGxiYWNrKGxvZ0NyZWF0dXJlLmVuaGFuY2VtZW50cywge30pO1xyXG4gICAgdmFyIGxvZ0VuaCA9IGxvZ0NyZWF0dXJlLmVuaGFuY2VtZW50cztcclxuICAgIGNyZWF0dXJlLmVuaGFuY2VtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgbG9nRW5oW2UubmFtZV0gPSB1cGRhdGVNaW5NYXgobG9nRW5oW2UubmFtZV0sIE51bWJlcihlLnZhbHVlKSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgc2V0Rm9yYWdlKCdmc2hfbW9uc3RlckxvZycsIG1vbnN0ZXJMb2cpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb01vdXNlT3ZlcigpIHtcclxuICB2YXIgb25lSGl0TnVtYmVyID0gTWF0aC5jZWlsKGNyZWF0dXJlLmhwICogaHBWYXJpYWJsZSArIGNyZWF0dXJlLmFybW9yICpcclxuICAgIGdlbmVyYWxWYXJpYWJsZSk7XHJcbiAgdmFyIG15THZsQ2xhcyA9ICdmc2hZZWxsb3cnO1xyXG4gIGlmIChzdGF0TGV2ZWwgPiBjcmVhdHVyZS5sZXZlbCkge215THZsQ2xhcyA9ICdmc2hSZWQnO31cclxuICB2YXIgbW9uc3RlclRpcCA9ICc8dGFibGU+PHRyPjx0ZD4nICtcclxuICAgICc8aW1nIHNyYz1cImh0dHBzOi8vY2RuLmZhbGxlbnN3b3JkLmNvbS9jcmVhdHVyZXMvJyArIGNyZWF0dXJlLmltYWdlX2lkICtcclxuICAgICcuanBnXCIgaGVpZ2h0PVwiMjAwXCIgd2lkdGg9XCIyMDBcIj48L3RkPjx0ZCByb3dzcGFuPVwiMlwiPicgK1xyXG4gICAgJzx0YWJsZSB3aWR0aD1cIjQwMFwiPjx0cj4nICtcclxuICAgICc8dGQgY2xhc3M9XCJoZWFkZXJcIiBjb2xzcGFuPVwiNFwiIGNsYXNzPVwiZnNoQ2VudGVyXCI+U3RhdGlzdGljczwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+PHRkPkNsYXNzOiZuYnNwOzwvdGQ+PHRkIHdpZHRoPVwiNDAlXCI+JyArIGNyZWF0dXJlLmNyZWF0dXJlX2NsYXNzICtcclxuICAgICc8L3RkPjx0ZD5MZXZlbDombmJzcDs8L3RkPjx0ZCB3aWR0aD1cIjQwJVwiPicgKyBjcmVhdHVyZS5sZXZlbCArXHJcbiAgICAnICh5b3VyIGxldmVsOjxzcGFuIGNsYXNzPVwiJyArIG15THZsQ2xhcyArICdcIj4nICtcclxuICAgIHN0YXRMZXZlbCArICc8L3NwYW4+KTwvdGQ+JyArXHJcbiAgICAnPC90cj48dHI+PHRkPkF0dGFjazombmJzcDs8L3RkPjx0ZCB3aWR0aD1cIjQwJVwiPicgKyBjcmVhdHVyZS5hdHRhY2sgK1xyXG4gICAgJyAoeW91ciBkZWZlbnNlOjxzcGFuIGNsYXNzPVwiZnNoWWVsbG93XCI+JyArIHN0YXREZWZlbnNlICsgJzwvc3Bhbj4pPC90ZD4nICtcclxuICAgICc8dGQ+RGVmZW5zZTombmJzcDs8L3RkPjx0ZCB3aWR0aD1cIjQwJVwiPicgKyBjcmVhdHVyZS5kZWZlbnNlICtcclxuICAgICcgKHlvdXIgYXR0YWNrOjxzcGFuIGNsYXNzPVwiZnNoWWVsbG93XCI+JyArIHN0YXRBdHRhY2sgKyAnPC9zcGFuPik8L3RkPicgK1xyXG4gICAgJzwvdHI+PHRyPjx0ZD5Bcm1vcjombmJzcDs8L3RkPjx0ZCB3aWR0aD1cIjQwJVwiPicgKyBjcmVhdHVyZS5hcm1vciArXHJcbiAgICAnICh5b3VyIGRhbWFnZTo8c3BhbiBjbGFzcz1cImZzaFllbGxvd1wiPicgKyBzdGF0RGFtYWdlICsgJzwvc3Bhbj4pPC90ZD4nICtcclxuICAgICc8dGQ+RGFtYWdlOiZuYnNwOzwvdGQ+PHRkIHdpZHRoPVwiNDAlXCI+JyArIGNyZWF0dXJlLmRhbWFnZSArXHJcbiAgICAnICh5b3VyIGFybW9yOjxzcGFuIGNsYXNzPVwiZnNoWWVsbG93XCI+JyArIHN0YXRBcm1vciArICc8L3NwYW4+KTwvdGQ+JyArXHJcbiAgICAnPC90cj48dHI+PHRkPkhQOiZuYnNwOzwvdGQ+PHRkIHdpZHRoPVwiNDAlXCI+JyArIGNyZWF0dXJlLmhwICtcclxuICAgICcgKHlvdXIgSFA6PHNwYW4gY2xhc3M9XCJmc2hZZWxsb3dcIj4nICsgc3RhdEhwICsgJzwvc3Bhbj4pJyArXHJcbiAgICAnKDFIOiA8c3BhbiBjbGFzcz1cImZzaFJlZFwiPicgKyBvbmVIaXROdW1iZXIgKyAnPC9zcGFuPik8L3RkPicgK1xyXG4gICAgJzx0ZD5Hb2xkOiZuYnNwOzwvdGQ+PHRkIHdpZHRoPVwiNDAlXCI+JyArIGNyZWF0dXJlLmdvbGQgKyAnPC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQgY29sc3Bhbj1cIjRcIiBoZWlnaHQ9XCI1XCI+PC90ZD48L3RyPjx0cj4nICtcclxuICAgICc8dGQgY2xhc3M9XCJoZWFkZXJcIiBjb2xzcGFuPVwiNFwiIGNsYXNzPVwiZnNoQ2VudGVyXCI+RW5oYW5jZW1lbnRzPC90ZD48L3RyPic7XHJcblxyXG4gIGlmICghY3JlYXR1cmUuZW5oYW5jZW1lbnRzKSB7XHJcbiAgICBtb25zdGVyVGlwICs9ICc8dHI+PHRkIGNvbHNwYW49XCI0XCI+W25vIGVuaGFuY2VtZW50c108L3RkPjwvdHI+JztcclxuICB9IGVsc2Uge1xyXG4gICAgY3JlYXR1cmUuZW5oYW5jZW1lbnRzLmZvckVhY2goZnVuY3Rpb24oZSkge1xyXG4gICAgICBtb25zdGVyVGlwICs9ICc8dHI+PHRkIGNvbHNwYW49XCIyXCI+JyArIGUubmFtZSArXHJcbiAgICAgICAgJzo8L3RkPjx0ZCBjb2xzcGFuPVwiMlwiPicgKyBlLnZhbHVlICsgJzwvdGQ+PC90cj4nO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBtb25zdGVyVGlwICs9ICc8dHI+PHRkIGNvbHNwYW49XCI0XCIgaGVpZ2h0PVwiNVwiPjwvdGQ+PC90cj48dHI+JyArXHJcbiAgICAnPHRkIGNsYXNzPVwiaGVhZGVyXCIgY29sc3Bhbj1cIjRcIiBjbGFzcz1cImZzaENlbnRlclwiPkRlc2NyaXB0aW9uPC90ZD4nICtcclxuICAgICc8L3RyPjx0cj48dGQgY29sc3Bhbj1cIjRcIj4nICsgY3JlYXR1cmUuZGVzY3JpcHRpb24gKyAnPC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQgY29sc3Bhbj1cIjRcIiBoZWlnaHQ9XCI1XCI+PC90ZD48L3RyPjwvdGFibGU+PC90ZD48L3RyPicgK1xyXG4gICAgJzx0cj48dGQgY2xhc3M9XCJmc2hDZW50ZXJcIj48Yj4nICsgY3JlYXR1cmUubmFtZSArICc8L2I+PC90ZD48L3RyPicgK1xyXG4gICAgJzwvdGFibGU+JztcclxuXHJcbiAgbW9uc3Rlci5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwcGVkJywgbW9uc3RlclRpcCk7XHJcbn1cclxuXHJcbnZhciBiYWlsT3V0ID0gW1xyXG4gIGZ1bmN0aW9uKGRhdGEsIGFjdGlvbnMpIHtcclxuICAgIHJldHVybiBhY3Rpb25zLmxlbmd0aCA9PT0gMSAmJlxyXG4gICAgICBhY3Rpb25zWzBdLmNsYXNzTGlzdC5jb250YWlucygnaGNzLXN0YXRlLWRpc2FibGVkJyk7IC8vIEluIG1vdGlvblxyXG4gIH0sXHJcbiAgZnVuY3Rpb24oZGF0YSwgYWN0aW9ucykge1xyXG4gICAgcmV0dXJuIGFjdGlvbnMubGVuZ3RoIC0gMSA8IGRhdGEucGFzc2JhY2s7IC8vIE5vdCBlbm91Z2ggYWN0aW9uc1xyXG4gIH0sXHJcbiAgZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgcmV0dXJuIGNyZWF0dXJlLmlkICE9PSBhY3Rpb25EYXRhW2RhdGEucGFzc2JhY2tdLmRhdGEuaWQudG9TdHJpbmcoKTsgLy8gRGlmZmVyZW50IGFjdGlvbiBsaXN0XHJcbiAgfVxyXG5dO1xyXG5cclxuZnVuY3Rpb24gZG9DcmVhdHVyZUluZm8oZGF0YSkge1xyXG4gIHZhciBhY3Rpb25zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FjdGlvbkxpc3QnKS5jaGlsZHJlbjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJhaWxPdXQubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgIGlmIChiYWlsT3V0W2ldKGRhdGEsIGFjdGlvbnMpKSB7cmV0dXJuO31cclxuICB9XHJcbiAgbW9uc3RlciA9IGFjdGlvbnNbZGF0YS5wYXNzYmFja10uZmlyc3RFbGVtZW50Q2hpbGQuZmlyc3RFbGVtZW50Q2hpbGRcclxuICAgIC5maXJzdEVsZW1lbnRDaGlsZDtcclxuICBkb01vdXNlT3ZlcigpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzTW91c2VPdmVyKGRhdGEpIHtcclxuICBpZiAoc2hvd0NyZWF0dXJlSW5mbykge2RvQ3JlYXR1cmVJbmZvKGRhdGEpO31cclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc01vbnN0ZXIoZGF0YSkge1xyXG4gIGNyZWF0dXJlID0gZGF0YS5yZXNwb25zZS5kYXRhO1xyXG4gIGlmICghY3JlYXR1cmUpIHtyZXR1cm47fSAvLyBjcmVhdHVyZSBpcyBudWxsXHJcbiAgcHJvY2Vzc01vdXNlT3ZlcihkYXRhKTtcclxuICBwcm9jZXNzTW9uc3RlckxvZygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb29wQWN0aW9ucyhlLCBpKSB7IC8vIGpRdWVyeVxyXG4gIGlmIChlLnR5cGUgIT09IDYpIHtyZXR1cm47fVxyXG4gIHJldHJ5QWpheCh7XHJcbiAgICB1cmw6ICdmZXRjaGRhdGEucGhwP2E9MSZkPTAmaWQ9JyArIGUuZGF0YS5pZCArICcmcGFzc2JhY2s9JyArIGksXHJcbiAgICBkYXRhVHlwZTogJ2pzb24nXHJcbiAgfSkuZG9uZShwcm9jZXNzTW9uc3Rlcik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFN0YXRUZXh0KHN0YXRUb29sdGlwLCBzdGF0Q2xhc3NOYW1lKSB7XHJcbiAgcmV0dXJuIHN0YXRUb29sdGlwLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoc3RhdENsYXNzTmFtZSlbMF1cclxuICAgIC5uZXh0RWxlbWVudFNpYmxpbmcudGV4dENvbnRlbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE15U3RhdHMoKSB7XHJcbiAgc3RhdExldmVsID0gaW50VmFsdWUoZ2V0U3RhdFRleHQoZG9jdW1lbnRcclxuICAgIC5nZXRFbGVtZW50QnlJZCgnc3RhdGJhci1sZXZlbC10b29sdGlwLWdlbmVyYWwnKSwgJ3N0YXQtbGV2ZWwnKSk7XHJcbiAgdmFyIHN0YXRUb29sdGlwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXRiYXItY2hhcmFjdGVyLXRvb2x0aXAtc3RhdHMnKTtcclxuICBzdGF0RGVmZW5zZSA9IGdldFN0YXRUZXh0KHN0YXRUb29sdGlwLCAnc3RhdC1kZWZlbnNlJyk7XHJcbiAgc3RhdEF0dGFjayA9IGdldFN0YXRUZXh0KHN0YXRUb29sdGlwLCAnc3RhdC1hdHRhY2snKTtcclxuICBzdGF0RGFtYWdlID0gZ2V0U3RhdFRleHQoc3RhdFRvb2x0aXAsICdzdGF0LWRhbWFnZScpO1xyXG4gIHN0YXRBcm1vciA9IGdldFN0YXRUZXh0KHN0YXRUb29sdGlwLCAnc3RhdC1hcm1vcicpO1xyXG4gIHN0YXRIcCA9IGdldFN0YXRUZXh0KHN0YXRUb29sdGlwLCAnc3RhdC1ocCcpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0TW9uc3RlckxvZygpIHtcclxuICBpZiAoc2hvd0NyZWF0dXJlSW5mbykge2dldE15U3RhdHMoKTt9XHJcbiAgYWN0aW9uRGF0YSA9IEdhbWVEYXRhLmFjdGlvbnMoKTtcclxuICBhY3Rpb25EYXRhLmZvckVhY2gobG9vcEFjdGlvbnMpO1xyXG59XHJcblxyXG52YXIgZ2VuVmFyID0gWzAsIDEuMSwgMS4wNTMsIDEuMTA1M107XHJcbnZhciBocFZhciA9IFswLCAxLjA1MywgMSwgMV07XHJcblxyXG5mdW5jdGlvbiBnZXRCaWFzKCkge1xyXG4gIHZhciBjb21iYXRFdmFsdWF0b3JCaWFzID0gZ2V0VmFsdWUoJ2NvbWJhdEV2YWx1YXRvckJpYXMnKTtcclxuICBnZW5lcmFsVmFyaWFibGUgPSBnZW5WYXJbY29tYmF0RXZhbHVhdG9yQmlhc107XHJcbiAgaHBWYXJpYWJsZSA9IGhwVmFyW2NvbWJhdEV2YWx1YXRvckJpYXNdO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE1vbnN0ZXJMb2coKSB7IC8vIGpRdWVyeVxyXG4gIHNob3dDcmVhdHVyZUluZm8gPSBnZXRWYWx1ZSgnc2hvd0NyZWF0dXJlSW5mbycpO1xyXG4gIHNob3dNb25zdGVyTG9nID0gZ2V0VmFsdWUoJ3Nob3dNb25zdGVyTG9nJyk7XHJcbiAgaWYgKCFzaG93Q3JlYXR1cmVJbmZvICYmICFzaG93TW9uc3RlckxvZykge3JldHVybjt9XHJcbiAgaWYgKHNob3dDcmVhdHVyZUluZm8pIHtnZXRCaWFzKCk7fVxyXG4gICQuc3Vic2NyaWJlKCdhZnRlci11cGRhdGUuYWN0aW9ubGlzdCcsIGluaXRNb25zdGVyTG9nKTtcclxuICBnZXRGb3JhZ2UoJ2ZzaF9tb25zdGVyTG9nJykuZG9uZShmdW5jdGlvbihkYXRhKSB7XHJcbiAgICBtb25zdGVyTG9nID0gZGF0YSB8fCB7fTtcclxuICB9KTtcclxuICBpbml0TW9uc3RlckxvZygpO1xyXG59XHJcbiIsImltcG9ydCBhc3NldHMgZnJvbSAnLi9hc3NldHMnO1xyXG5pbXBvcnQgY2FsZiBmcm9tICcuLi9zdXBwb3J0L2NhbGYnO1xyXG5pbXBvcnQgY29tYmF0TG9nZ2VyIGZyb20gJy4vY29tYmF0TG9nZ2VyJztcclxuaW1wb3J0IHtnZXRWYWx1ZX0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5pbXBvcnQgaW5qZWN0QnV0dG9ucyBmcm9tICcuL2J1dHRvbnMnO1xyXG5pbXBvcnQgaW5qZWN0UmVsaWMgZnJvbSAnLi9yZWxpYy9yZWxpYyc7XHJcbmltcG9ydCBwcmVwYXJlU2hvcCBmcm9tICcuL3Nob3AnO1xyXG5pbXBvcnQgcmVhZHlWaWV3Q3JlYXR1cmUgZnJvbSAnLi92aWV3Q3JlYXR1cmUvdmlld0NyZWF0dXJlJztcclxuaW1wb3J0IHNldHVwUHJlZiBmcm9tICcuL3N1YkxldmVsJztcclxuaW1wb3J0IHN0YXJ0TW9uc3RlckxvZyBmcm9tICcuL21vbnN0ZXJMb2cnO1xyXG5pbXBvcnQge2luamVjdFNlbmRHb2xkT25Xb3JsZCwgdXBkYXRlU2VuZEdvbGRPbldvcmxkfSBmcm9tICcuL3NlbmRHb2xkJztcclxuXHJcbnZhciBkZWZfYWZ0ZXJVcGRhdGVBY3Rpb25saXN0ID0gJ2FmdGVyLXVwZGF0ZS5hY3Rpb25saXN0JztcclxuXHJcbmZ1bmN0aW9uIGhpZGVHcm91cEJ5VHlwZSh0eXBlKSB7IC8vIGpRdWVyeVxyXG4gICQoJyNhY3Rpb25MaXN0IGxpLmNyZWF0dXJlLScgKyB0eXBlLnRvU3RyaW5nKCkgKyAnIGEuY3JlYXRlLWdyb3VwJykuaGlkZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlR3JvdXBTdWJzY3JpYmUodHlwZSkgeyAvLyBqUXVlcnkubWluXHJcbiAgJC5zdWJzY3JpYmUoZGVmX2FmdGVyVXBkYXRlQWN0aW9ubGlzdCwgaGlkZUdyb3VwQnlUeXBlLmJpbmQobnVsbCwgdHlwZSkpO1xyXG59XHJcblxyXG52YXIgaGlkZUdyb3VwVHlwZXMgPSBbXHJcbiAgJ2hpZGVDaGFtcGlvbnNHcm91cCcsXHJcbiAgJ2hpZGVFbGl0ZXNHcm91cCcsXHJcbiAgJ2hpZGVTRUdyb3VwJyxcclxuICAnaGlkZVRpdGFuR3JvdXAnLFxyXG4gICdoaWRlTGVnZW5kYXJ5R3JvdXAnXHJcbl07XHJcblxyXG5mdW5jdGlvbiBoaWRlR3JvdXBCdXR0b24oKSB7XHJcbiAgaGlkZUdyb3VwVHlwZXMuZm9yRWFjaChmdW5jdGlvbihlbCwgaSkge1xyXG4gICAgaWYgKGdldFZhbHVlKGVsKSkge1xyXG4gICAgICBoaWRlR3JvdXBTdWJzY3JpYmUoaSArIDEpO1xyXG4gICAgICBoaWRlR3JvdXBCeVR5cGUoaSArIDEpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb2xvclR5cGUoYWN0aW9uTGlzdCwgY3JlYXR1cmVDbGFzcywgY29sb3JDbGFzcykge1xyXG4gIHZhciBjcmVhdHVyZXMgPSBhY3Rpb25MaXN0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY3JlYXR1cmVDbGFzcyk7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChjcmVhdHVyZXMsIGZ1bmN0aW9uKGVsKSB7XHJcbiAgICBlbC5jbGFzc0xpc3QuYWRkKGNvbG9yQ2xhc3MpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb2xvck1vbnN0ZXJzKCkge1xyXG4gIHZhciBhY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWN0aW9uTGlzdCcpO1xyXG4gIGNvbG9yVHlwZShhY3QsICdjcmVhdHVyZS0xJywgJ2ZzaEdyZWVuJyk7XHJcbiAgY29sb3JUeXBlKGFjdCwgJ2NyZWF0dXJlLTInLCAnZnNoWWVsbG93Jyk7XHJcbiAgY29sb3JUeXBlKGFjdCwgJ2NyZWF0dXJlLTMnLCAnZnNoUmVkJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvTW9uc3RlckNvbG9ycygpIHsgLy8galF1ZXJ5Lm1pblxyXG4gIGlmIChnZXRWYWx1ZSgnZW5hYmxlQ3JlYXR1cmVDb2xvcmluZycpKSB7XHJcbiAgICAkLnN1YnNjcmliZShkZWZfYWZ0ZXJVcGRhdGVBY3Rpb25saXN0LCBjb2xvck1vbnN0ZXJzKTtcclxuICAgIGNvbG9yTW9uc3RlcnMoKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFmdGVyVXBkYXRlQWN0aW9uTGlzdCgpIHtcclxuICAvLyBjb2xvciB0aGUgY3JpdHRlcnMgaW4gdGhlIGRvIG5vIGtpbGwgbGlzdCBibHVlXHJcbiAgdmFyIGFjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhY3Rpb25MaXN0Jyk7XHJcbiAgdmFyIGNyZWF0dXJlcyA9IGFjdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjcmVhdHVyZScpO1xyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoY3JlYXR1cmVzLCBmdW5jdGlvbihlbCkge1xyXG4gICAgaWYgKGNhbGYuZG9Ob3RLaWxsTGlzdC5pbmRleE9mKGVsLnRleHRDb250ZW50KSAhPT0gLTEpIHtcclxuICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnZnNoQmx1ZScpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbnRlcmNlcHREb0FjdGlvbigpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIGdhbWVEYXRhID0gR2FtZURhdGE7XHJcbiAgdmFyIGhjcyA9IHdpbmRvdy5IQ1M7XHJcbiAgdmFyIG9sZERvQWN0aW9uID0gZ2FtZURhdGEuZG9BY3Rpb247XHJcbiAgZ2FtZURhdGEuZG9BY3Rpb24gPSBmdW5jdGlvbihhY3Rpb25Db2RlLCBmZXRjaEZsYWdzLCBkYXRhKSB7XHJcbiAgICBpZiAoYWN0aW9uQ29kZSA9PT0gaGNzLkRFRklORVMuQUNUSU9OLkNSRUFUVVJFX0NPTUJBVCkge1xyXG4gICAgICAvLyBEbyBjdXN0b20gc3R1ZmYgZS5nLiBkbyBub3Qga2lsbCBsaXN0XHJcbiAgICAgIHZhciBjcmVhdHVyZUljb24gPSAkKCcjYWN0aW9uTGlzdCBkaXYuaGVhZGVyJylcclxuICAgICAgICAuZXEoZGF0YS5wYXNzYmFjaykuZmluZCgnYS5pY29uJyk7XHJcbiAgICAgIGlmIChjYWxmLmRvTm90S2lsbExpc3QuaW5kZXhPZihjcmVhdHVyZUljb24uZGF0YSgnbmFtZScpKSAhPT0gLTEpIHtcclxuICAgICAgICBjcmVhdHVyZUljb24ucmVtb3ZlQ2xhc3MoJ2xvYWRpbmcnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIENhbGwgc3RhbmRhcmQgYWN0aW9uXHJcbiAgICBvbGREb0FjdGlvbihhY3Rpb25Db2RlLCBmZXRjaEZsYWdzLCBkYXRhKTtcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbXBJY29uQ29sb3VyKCkgeyAvLyBqUXVlcnlcclxuICB2YXIgaW1wID0gJCgnI2FjdGlvbmxpc3Qtc2hpZWxkLWltcCcpO1xyXG4gIGlmIChpbXAubGVuZ3RoID09PSAxKSB7XHJcbiAgICBpbXAuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJyxcclxuICAgICAgYXNzZXRzLmNvbG9ySGFzaFtpbXAudGV4dCgpXSB8fCAnI2FkODA0MycpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZml4RGVidWZmUVRpcChlKSB7IC8vIGpRdWVyeS5taW5cclxuICAkKGUudGFyZ2V0KS5xdGlwKCdoaWRlJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluamVjdFdvcmxkTmV3TWFwKGRhdGEpIHtcclxuICB1cGRhdGVTZW5kR29sZE9uV29ybGQoZGF0YSk7XHJcbiAgaWYgKGRhdGEucmVhbG0gJiYgZGF0YS5yZWFsbS5uYW1lKSB7XHJcbiAgICBpbmplY3RCdXR0b25zKGRhdGEpO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1ZmZMaXN0JylcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZml4RGVidWZmUVRpcCk7XHJcbiAgICBpZiAoY2FsZi5oaWRlU3ViTHZsQ3JlYXR1cmUpIHtHYW1lRGF0YS5mZXRjaCgyNTYpO31cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1YnNjcmliZXMoKSB7IC8vIGpRdWVyeS5taW5cclxuICBzZXR1cFByZWYoKTtcclxuICBpbmplY3RTZW5kR29sZE9uV29ybGQoKTtcclxuICAvLyBzdWJzY3JpYmUgdG8gdmlldyBjcmVhdHVyZSBldmVudHMgb24gdGhlIG5ldyBtYXAuXHJcbiAgJC5zdWJzY3JpYmUoJ3JlYWR5LnZpZXctY3JlYXR1cmUnLCByZWFkeVZpZXdDcmVhdHVyZSk7XHJcbiAgaGlkZUdyb3VwQnV0dG9uKCk7IC8vIEhpZGUgQ3JlYXRlIEdyb3VwIGJ1dHRvblxyXG4gIGRvTW9uc3RlckNvbG9ycygpO1xyXG4gIC8vIGFkZCBkby1ub3Qta2lsbCBsaXN0IGZ1bmN0aW9uYWxpdHlcclxuICAkLnN1YnNjcmliZShkZWZfYWZ0ZXJVcGRhdGVBY3Rpb25saXN0LCBhZnRlclVwZGF0ZUFjdGlvbkxpc3QpO1xyXG4gIGFmdGVyVXBkYXRlQWN0aW9uTGlzdCgpO1xyXG4gIC8vIGFkZCBtb25zdGVyIGxvZyBmdW5jdGlvbmFsaXR5XHJcbiAgc3RhcnRNb25zdGVyTG9nKCk7XHJcbiAgLy8gdGhlbiBpbnRlcmNlcHQgdGhlIGFjdGlvbiBjYWxsXHJcbiAgaW50ZXJjZXB0RG9BY3Rpb24oKTtcclxuICAkLnN1YnNjcmliZSh3aW5kb3cuREFUQV9FVkVOVFMuUExBWUVSX0JVRkZTLkFOWSxcclxuICAgIGltcEljb25Db2xvdXIpO1xyXG4gICQuc3Vic2NyaWJlKCdrZXlkb3duLmNvbnRyb2xzJywgZnVuY3Rpb24oZSwga2V5KSB7XHJcbiAgICBpZiAoa2V5ID09PSAnQUNUX1JFUEFJUicpIHtHYW1lRGF0YS5mZXRjaCg0MDMpO31cclxuICB9KTtcclxuICBjb21iYXRMb2dnZXIoKTtcclxuICAvLyBvbiB3b3JsZFxyXG4gIGlmICh3aW5kb3cuaW5pdGlhbEdhbWVEYXRhKSB7Ly8gSENTIGluaXRpYWwgZGF0YVxyXG4gICAgaW5qZWN0V29ybGROZXdNYXAod2luZG93LmluaXRpYWxHYW1lRGF0YSk7XHJcbiAgICBpbXBJY29uQ29sb3VyKG51bGwsXHJcbiAgICAgIHtiOiB3aW5kb3cuaW5pdGlhbEdhbWVEYXRhLnBsYXllci5idWZmc30pO1xyXG4gIH1cclxuICAkLnN1YnNjcmliZSgnLTEtc3VjY2Vzcy5hY3Rpb24tcmVzcG9uc2UgNS1zdWNjZXNzLmFjdGlvbi1yZXNwb25zZScsXHJcbiAgICBmdW5jdGlvbihlLCBkYXRhKSB7IC8vIGNoYW5nZSBvZiBpbmZvcm1hdGlvblxyXG4gICAgICBpbmplY3RXb3JsZE5ld01hcChkYXRhKTtcclxuICAgIH1cclxuICApO1xyXG4gIC8vIHNvbWV3aGVyZSBuZWFyIGhlcmUgd2lsbCBiZSBtdWx0aSBidXkgb24gc2hvcFxyXG4gIHByZXBhcmVTaG9wKCk7XHJcbiAgaW5qZWN0UmVsaWMoKTtcclxuXHJcbiAgLy8jaWYgX0RFViAgLy8gIFwiWW91ciBMdmxcIiBkb2VzIG5vdCB1cGRhdGUgZHVyaW5nIGNvbWJhdCAjMTU1XHJcbiAgJC5zdWJzY3JpYmUoJ2xldmVsLnN0YXRzLXBsYXllcicsIGZ1bmN0aW9uKGUsIGRhdGEpIHtcclxuICAgIGNvbnNvbGUubG9nKCdsZXZlbC5zdGF0cy1wbGF5ZXIgZGF0YScsIGRhdGEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcclxuICAgIC8vIGxldmVsLnN0YXRzLXBsYXllciBkYXRhIE9iamVjdCB7IGE6IDMzODEsIGI6IDMzODIgfVxyXG4gIH0pO1xyXG4gIC8vI2VuZGlmXHJcblxyXG59XHJcblxyXG4vKiBmZXRjaEZsYWdzID0ge1xyXG4gIHBsYXllclN0YXRzIDogMSxcclxuICBwbGF5ZXJCYWNrcGFja0NvdW50IDogMixcclxuICBwbGF5ZXJCYWNrcGFja0l0ZW1zIDogNCxcclxuICBwbGF5ZXJQcmVmcyA6IDgsXHJcblxyXG4gIHBsYXllckJ1ZmZzIDogMTYsXHJcbiAgd29ybGREZWZpbmVzIDogMzIsXHJcbiAgd29ybGRSZWFsbVN0YXRpYyA6IDY0LFxyXG4gIHdvcmxkUmVhbG1EeW5hbWljIDogMTI4LFxyXG5cclxuICB3b3JsZFJlYWxtQWN0aW9ucyA6IDI1NixcclxuICBQTEFZRVJfRVFVSVBNRU5UIDogNTEyLFxyXG4gIFBMQVlFUl9OT1RJRklDQVRJT05TIDogMTAyNCxcclxuXHJcbiAgYWxsIDogMjA0N1xyXG59OyAqL1xyXG4iLCJpbXBvcnQgY2FsZiBmcm9tICcuL3N1cHBvcnQvY2FsZic7XHJcbmltcG9ydCB7Y3JlYXRlRGl2fSBmcm9tICcuL2NvbW1vbi9jRWxlbWVudCc7XHJcbmltcG9ydCB7bG9nfSBmcm9tICcuL3N1cHBvcnQvZGVidWcnO1xyXG5pbXBvcnQgc3Vic2NyaWJlcyBmcm9tICcuL25ld01hcC9uZXdNYXAnO1xyXG5pbXBvcnQge1xyXG4gIGFkZENvbW1hcyxcclxuICBjcmVhdGVEb2N1bWVudCxcclxuICBmaW5kTm9kZSxcclxuICBnZXRWYWx1ZSxcclxuICBpbWFnZVNlcnZlcixcclxuICBpbnRWYWx1ZSxcclxuICBzZXRWYWx1ZSxcclxuICB4bWxodHRwXHJcbn0gZnJvbSAnLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG52YXIgaW1wU3R5bGVzID0gW1xyXG4gICcgc3R5bGU9XCJjb2xvcjpyZWQ7IGZvbnQtc2l6ZTpsYXJnZTsgZm9udC13ZWlnaHQ6Ym9sZFwiJyxcclxuICAnIHN0eWxlPVwiY29sb3I6T3JhbmdlcmVkOyBmb250LXNpemU6bGFyZ2U7IGZvbnQtd2VpZ2h0OmJvbGRcIicsXHJcbiAgJyBzdHlsZT1cImNvbG9yOk9yYW5nZXJlZDsgZm9udC1zaXplOm1lZGl1bTsgZm9udC13ZWlnaHQ6Ym9sZDtcIidcclxuXTtcclxuXHJcbmZ1bmN0aW9uIGdldEltcFdhcm5pbmdTdHlsZShpbXBzUmVtYWluaW5nKSB7IC8vIExlZ2FjeVxyXG4gIGlmIChpbXBzUmVtYWluaW5nID49IDAgJiYgaW1wc1JlbWFpbmluZyA8PSAyKSB7XHJcbiAgICByZXR1cm4gaW1wU3R5bGVzW2ltcHNSZW1haW5pbmddO1xyXG4gIH1cclxuICByZXR1cm4gJyBzdHlsZT1cImNvbG9yOmdyZWVuOyBmb250LXNpemU6bWVkaXVtO1wiJztcclxufVxyXG5cclxuZnVuY3Rpb24gaW1wV2FybmluZyhpbXBzUmVtYWluaW5nKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBhcHBseUltcFdhcm5pbmdDb2xvciA9IGdldEltcFdhcm5pbmdTdHlsZShpbXBzUmVtYWluaW5nKTtcclxuICB2YXIgcmVjYXN0QnV0dG9uID0gJyc7XHJcbiAgaWYgKGltcHNSZW1haW5pbmcgPT09IDApIHtcclxuICAgIHJlY2FzdEJ1dHRvbiA9ICcmbmJzcDs8c3BhbiBpZD1cIkhlbHBlcjpyZWNhc3RJbXBBbmRSZWZyZXNoXCIgJyArXHJcbiAgICAgICdzdHlsZT1cImNvbG9yOiBibHVlOyBjdXJzb3I6IHBvaW50ZXI7IHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyAnICtcclxuICAgICAgJ2ZvbnQtc2l6ZTogeHgtc21hbGw7XCI+UmVjYXN0PC9zcGFuPic7XHJcbiAgfVxyXG4gIHJldHVybiAnPHRyPjx0ZCcgKyBhcHBseUltcFdhcm5pbmdDb2xvciArICc+U2hpZWxkIEltcHMgUmVtYWluaW5nOiAnICtcclxuICAgIGltcHNSZW1haW5pbmcgKyByZWNhc3RCdXR0b24gKyAnPC90ZD48L3RyPic7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENhTHZsKGhhc0NvdW50ZXJBdHRhY2spIHsgLy8gTGVnYWN5XHJcbiAgdmFyIGNvdW50ZXJBdHRhY2tMZXZlbDtcclxuICBpZiAoaGFzQ291bnRlckF0dGFjay5nZXRBdHRyaWJ1dGUoJ3NyYycpLnNlYXJjaCgnL3NraWxscy8nKSAhPT0gLTEpIHtcclxuICAgIHZhciBvbm1vdXNlb3ZlciA9ICQoaGFzQ291bnRlckF0dGFjaykuZGF0YSgndGlwcGVkJyk7XHJcbiAgICB2YXIgY291bnRlckF0dGFja1JFID0gLzxiPkNvdW50ZXIgQXR0YWNrPFxcL2I+IFxcKExldmVsOiAoXFxkKylcXCkvO1xyXG4gICAgdmFyIGNvdW50ZXJBdHRhY2sgPSBjb3VudGVyQXR0YWNrUkUuZXhlYyhvbm1vdXNlb3Zlcik7XHJcbiAgICBpZiAoY291bnRlckF0dGFjaykge1xyXG4gICAgICBjb3VudGVyQXR0YWNrTGV2ZWwgPSBjb3VudGVyQXR0YWNrWzFdO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gJzx0cj48dGQgc3R5bGU9XCJmb250LXNpemU6c21hbGw7IGNvbG9yOicgK1xyXG4gICAgJ2JsdWVcIj5DQScgKyBjb3VudGVyQXR0YWNrTGV2ZWwgKyAnIGFjdGl2ZTwvdGQ+PC90cj4nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYXNDQSgpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIHJlcGxhY2VtZW50VGV4dCA9ICcnO1xyXG4gIHZhciBoYXNDb3VudGVyQXR0YWNrID0gZmluZE5vZGUoJy8vaW1nW2NvbnRhaW5zKEBzcmMsXCIvNTRfc20uZ2lmXCIpXScpO1xyXG4gIGlmIChoYXNDb3VudGVyQXR0YWNrKSB7XHJcbiAgICByZXBsYWNlbWVudFRleHQgKz0gZ2V0Q2FMdmwoaGFzQ291bnRlckF0dGFjayk7XHJcbiAgfVxyXG4gIHJldHVybiByZXBsYWNlbWVudFRleHQ7XHJcbn1cclxuXHJcbnZhciBkb3VibGVyUkUgPSAvPGI+RG91YmxlcjxcXC9iPiBcXChMZXZlbDogKFxcZCspXFwpLztcclxuXHJcbmZ1bmN0aW9uIGRvdWJsZXJMdmwob25tb3VzZW92ZXIpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIGRvdWJsZXIgPSBkb3VibGVyUkUuZXhlYyhvbm1vdXNlb3Zlcik7XHJcbiAgaWYgKGRvdWJsZXIpIHtyZXR1cm4gZG91YmxlclsxXTt9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldERvdWJsZXJMZXZlbChoYXNEb3VibGVyKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBkb3VibGVyTGV2ZWw7XHJcbiAgaWYgKGhhc0RvdWJsZXIuZ2V0QXR0cmlidXRlKCdzcmMnKS5zZWFyY2goJy9za2lsbHMvJykgIT09IC0xKSB7XHJcbiAgICB2YXIgb25tb3VzZW92ZXIgPSAkKGhhc0RvdWJsZXIpLmRhdGEoJ3RpcHBlZCcpO1xyXG4gICAgZG91YmxlckxldmVsID0gZG91Ymxlckx2bChvbm1vdXNlb3Zlcik7XHJcbiAgfVxyXG4gIGlmIChkb3VibGVyTGV2ZWwgPT09IDIwMCkgeyAvLyA/Pz9cclxuICAgIHJldHVybiAnPHRyPjx0ZCBzdHlsZT1cImZvbnQtc2l6ZTpzbWFsbDsgY29sb3I6JyArXHJcbiAgICAgICdyZWRcIj5Eb3VibGVyICcgKyBkb3VibGVyTGV2ZWwgKyAnIGFjdGl2ZTwvdGQ+PC90cj4nO1xyXG4gIH1cclxuICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhc0RibHIoKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBoYXNEb3VibGVyID0gZmluZE5vZGUoJy8vaW1nW2NvbnRhaW5zKEBzcmMsXCIvMjZfc20uZ2lmXCIpXScpO1xyXG4gIGlmIChoYXNEb3VibGVyKSB7XHJcbiAgICByZXR1cm4gZ2V0RG91YmxlckxldmVsKGhhc0RvdWJsZXIpO1xyXG4gIH1cclxuICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEtpbGxTdHJlYWsocmVzcG9uc2VUZXh0KSB7IC8vIEh5YnJpZFxyXG4gIHZhciBkb2MgPSBjcmVhdGVEb2N1bWVudChyZXNwb25zZVRleHQpO1xyXG4gIHZhciBraWxsU3RyZWFrTG9jYXRpb24gPSAkKGRvYykuZmluZCgndGQ6Y29udGFpbnMoXCJTdHJlYWs6XCIpOmxhc3QnKS5uZXh0KCk7XHJcbiAgbG9nKCdraWxsU3RyZWFrTG9jYXRpb24nLCBraWxsU3RyZWFrTG9jYXRpb24pOyAvLyBUT0RPIFdURj9cclxuICB2YXIgcGxheWVyS2lsbFN0cmVha1ZhbHVlO1xyXG4gIGlmIChraWxsU3RyZWFrTG9jYXRpb24ubGVuZ3RoID4gMCkge1xyXG4gICAgcGxheWVyS2lsbFN0cmVha1ZhbHVlID0gaW50VmFsdWUoa2lsbFN0cmVha0xvY2F0aW9uLnRleHQoKSk7XHJcbiAgfVxyXG4gIHZhciBraWxsU3RyZWFrRWxlbWVudCA9IGZpbmROb2RlKCcvL3NwYW5bQGZpbmRtZT1cImtpbGxzdHJlYWtcIl0nKTtcclxuICBraWxsU3RyZWFrRWxlbWVudC5pbm5lckhUTUwgPSBhZGRDb21tYXMocGxheWVyS2lsbFN0cmVha1ZhbHVlKTtcclxuICBzZXRWYWx1ZSgnbGFzdEtpbGxTdHJlYWsnLCBwbGF5ZXJLaWxsU3RyZWFrVmFsdWUpO1xyXG4gIHZhciBkZWF0aERlYWxlckJ1ZmYgPVxyXG4gICAgZmluZE5vZGUoJy8vaW1nW2NvbnRhaW5zKEBkYXRhLXRpcHBlZCxcIkRlYXRoIERlYWxlclwiKV0nKTtcclxuICB2YXIgZGVhdGhEZWFsZXJSRSA9IC88Yj5EZWF0aCBEZWFsZXI8XFwvYj4gXFwoTGV2ZWw6IChcXGQrKVxcKS87XHJcbiAgdmFyIGRlYXRoRGVhbGVyID0gZGVhdGhEZWFsZXJSRS5leGVjKCQoZGVhdGhEZWFsZXJCdWZmKS5kYXRhKCd0aXBwZWQnKSk7XHJcbiAgdmFyIGRlYXRoRGVhbGVyUGVyY2VudGFnZTtcclxuICBpZiAoZGVhdGhEZWFsZXIpIHtcclxuICAgIHZhciBkZWF0aERlYWxlckxldmVsID0gZGVhdGhEZWFsZXJbMV07XHJcbiAgICBkZWF0aERlYWxlclBlcmNlbnRhZ2UgPSBNYXRoLm1pbihNYXRoLnJvdW5kKFxyXG4gICAgICBNYXRoLmZsb29yKHBsYXllcktpbGxTdHJlYWtWYWx1ZSAvIDUpICogZGVhdGhEZWFsZXJMZXZlbFxyXG4gICAgKSAqIDAuMDEsIDIwKTtcclxuICB9XHJcbiAgdmFyIGRlYXRoRGVhbGVyUGVyY2VudGFnZUVsZW1lbnQgPVxyXG4gICAgZmluZE5vZGUoJy8vc3BhbltAZmluZG1lPVwiZGFtYWdlYm9udXNcIl0nKTtcclxuICBkZWF0aERlYWxlclBlcmNlbnRhZ2VFbGVtZW50LmlubmVySFRNTCA9IGRlYXRoRGVhbGVyUGVyY2VudGFnZTtcclxuICBzZXRWYWx1ZSgnbGFzdERlYXRoRGVhbGVyUGVyY2VudGFnZScsIGRlYXRoRGVhbGVyUGVyY2VudGFnZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldExhc3RWYWx1ZShwcmVmKSB7XHJcbiAgdmFyIHZhbCA9IGdldFZhbHVlKHByZWYpO1xyXG4gIGlmICh0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgc2V0VmFsdWUocHJlZiwgMCk7XHJcbiAgICB2YWwgPSAwO1xyXG4gIH1cclxuICByZXR1cm4gdmFsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUcmFja1RleHQodHJhY2tLaWxsU3RyZWFrKSB7IC8vIExlZ2FjeVxyXG4gIGlmICh0cmFja0tpbGxTdHJlYWspIHtyZXR1cm4gJ09OJzt9XHJcbiAgcmV0dXJuICdvZmYnO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb0RlYXRoRGVhbGVyKGltcHNSZW1haW5pbmcpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIGxhc3REZWF0aERlYWxlclBlcmNlbnRhZ2UgPSBnZXRMYXN0VmFsdWUoJ2xhc3REZWF0aERlYWxlclBlcmNlbnRhZ2UnKTtcclxuICB2YXIgbGFzdEtpbGxTdHJlYWsgPSBnZXRMYXN0VmFsdWUoJ2xhc3RLaWxsU3RyZWFrJyk7XHJcbiAgdmFyIHRyYWNrS2lsbFN0cmVhayA9IGdldFZhbHVlKCd0cmFja0tpbGxTdHJlYWsnKTtcclxuICB2YXIgdHJhY2tUZXh0ID0gZ2V0VHJhY2tUZXh0KHRyYWNrS2lsbFN0cmVhayk7XHJcbiAgaWYgKGltcHNSZW1haW5pbmcgPiAwICYmIGxhc3REZWF0aERlYWxlclBlcmNlbnRhZ2UgPT09IDIwKSB7XHJcbiAgICByZXR1cm4gJzx0cj48dGQgc3R5bGU9XCJmb250LXNpemU6c21hbGw7IGNvbG9yOmJsYWNrXCInICtcclxuICAgICAgJz5LaWxsIFN0cmVhazogPHNwYW4gZmluZG1lPVwia2lsbHN0cmVha1wiPiZndDsnICtcclxuICAgICAgYWRkQ29tbWFzKGxhc3RLaWxsU3RyZWFrKSArICc8L3NwYW4+IERhbWFnZSBib251czogPCcgK1xyXG4gICAgICAnc3BhbiBmaW5kbWU9XCJkYW1hZ2Vib251c1wiPjIwPC9zcGFuPiU8L3RkPjwvdHI+JztcclxuICB9XHJcbiAgaWYgKCF0cmFja0tpbGxTdHJlYWspIHtcclxuICAgIHJldHVybiAnPHRyPjx0ZCBzdHlsZT1cImZvbnQtc2l6ZTpzbWFsbDsgY29sb3I6JyArXHJcbiAgICAgICduYXZ5XCIgbm93cmFwPktpbGxTdHJlYWsgdHJhY2tlciBkaXNhYmxlZC4gPHNwYW4gc3R5bGU9XCInICtcclxuICAgICAgJ2ZvbnQtc2l6ZTp4eC1zbWFsbFwiPlRyYWNrOiA8c3BhbiBpZD1IZWxwZXI6dG9nZ2xlS1MnICtcclxuICAgICAgJ3RyYWNrZXIgc3R5bGU9XCJjb2xvcjpuYXZ5O2N1cnNvcjpwb2ludGVyO3RleHQtJyArXHJcbiAgICAgICdkZWNvcmF0aW9uOnVuZGVybGluZTtcIiB0aXRsZT1cIkNsaWNrIHRvIHRvZ2dsZVwiPicgK1xyXG4gICAgICB0cmFja1RleHQgKyAnPC9zcGFuPjwvc3Bhbj48L3RkPjwvdHI+JztcclxuICB9XHJcbiAgeG1saHR0cCgnaW5kZXgucGhwP2NtZD1wcm9maWxlJywgZ2V0S2lsbFN0cmVhayk7XHJcbiAgcmV0dXJuICc8dHI+PHRkIHN0eWxlPVwiZm9udC1zaXplOnNtYWxsOyBjb2xvcjonICtcclxuICAgICduYXZ5XCIgbm93cmFwPktpbGxTdHJlYWs6IDxzcGFuIGZpbmRtZT1cImtpbGxzdHJlYWtcIj4nICtcclxuICAgIGFkZENvbW1hcyhsYXN0S2lsbFN0cmVhaykgKyAnPC9zcGFuPiBEYW1hZ2UgYm9udXMnICtcclxuICAgICc6IDxzcGFuIGZpbmRtZT1cImRhbWFnZWJvbnVzXCI+JyArXHJcbiAgICBNYXRoLnJvdW5kKGxhc3REZWF0aERlYWxlclBlcmNlbnRhZ2UgKiAxMDApIC8gMTAwICtcclxuICAgICc8L3NwYW4+JSZuYnNwOzxzcGFuIHN0eWxlPVwiZm9udC1zaXplOnh4LXNtYWxsXCI+VHJhY2s6ICcgK1xyXG4gICAgJzxzcGFuIGlkPUhlbHBlcjp0b2dnbGVLU3RyYWNrZXIgc3R5bGU9XCJjb2xvcjpuYXZ5OycgK1xyXG4gICAgJ2N1cnNvcjpwb2ludGVyO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7XCIgdGl0bGU9XCJDbGljaycgK1xyXG4gICAgJyB0byB0b2dnbGVcIj4nICsgdHJhY2tUZXh0ICsgJzwvc3Bhbj48L3NwYW4+PC90ZD48L3RyPic7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlY2FzdEltcEFuZFJlZnJlc2gocmVzcG9uc2VUZXh0KSB7IC8vIExlZ2FjeVxyXG4gIHZhciBkb2MgPSBjcmVhdGVEb2N1bWVudChyZXNwb25zZVRleHQpO1xyXG4gIGlmIChkb2MpIHtcclxuICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlS3NUcmFja2VyKCkgeyAvLyBMZWdhY3lcclxuICB2YXIgdHJhY2tLUyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdIZWxwZXI6dG9nZ2xlS1N0cmFja2VyJyk7XHJcbiAgaWYgKHRyYWNrS1MpIHtcclxuICAgIHRyYWNrS1MuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgc2V0VmFsdWUoJ3RyYWNrS2lsbFN0cmVhaycsXHJcbiAgICAgICAgIWdldFZhbHVlKCd0cmFja0tpbGxTdHJlYWsnKSk7XHJcbiAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgfSwgdHJ1ZSk7XHJcbiAgfVxyXG59XHJcblxyXG52YXIgaGFzU2hpZWxkSW1wO1xyXG52YXIgaGFzRGVhdGhEZWFsZXI7XHJcbnZhciBpbXBzUmVtYWluaW5nO1xyXG52YXIgcmUgPSAvKFxcZCspIEhQIHJlbWFpbmluZy87XHJcblxyXG5mdW5jdGlvbiBnZXRJbXBIcCgpIHsgLy8gTGVnYWN5IC0gT2xkIE1hcFxyXG4gIGltcHNSZW1haW5pbmcgPSAwO1xyXG4gIGlmIChoYXNTaGllbGRJbXApIHtcclxuICAgIHZhciB0ZXh0VG9UZXN0ID0gJChoYXNTaGllbGRJbXApLmRhdGEoJ3RpcHBlZCcpO1xyXG4gICAgdmFyIGltcHNSZW1haW5pbmdSRSA9IHJlLmV4ZWModGV4dFRvVGVzdCk7XHJcbiAgICBpbXBzUmVtYWluaW5nID0gaW1wc1JlbWFpbmluZ1JFWzFdO1xyXG4gIH1cclxuICB2YXIgcmV0ID0gaW1wV2FybmluZyhpbXBzUmVtYWluaW5nKTtcclxuICBpZiAoaGFzRGVhdGhEZWFsZXIpIHtcclxuICAgIHJldCArPSBkb0RlYXRoRGVhbGVyKGltcHNSZW1haW5pbmcpO1xyXG4gIH1cclxuICByZXR1cm4gcmV0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kSW1wcygpIHsgLy8gTGVnYWN5IC0gT2xkIE1hcFxyXG4gIGlmIChoYXNEZWF0aERlYWxlciB8fCBoYXNTaGllbGRJbXApIHtcclxuICAgIHJldHVybiBnZXRJbXBIcCgpO1xyXG4gIH1cclxuICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGltcFJlY2FzdCgpIHsgLy8gTGVnYWN5IC0gT2xkIE1hcFxyXG4gIGlmICgoaGFzRGVhdGhEZWFsZXIgfHwgaGFzU2hpZWxkSW1wKSAmJiBpbXBzUmVtYWluaW5nID09PSAwKSB7XHJcbiAgICB2YXIgX3JlY2FzdEltcEFuZFJlZnJlc2ggPSBkb2N1bWVudFxyXG4gICAgICAuZ2V0RWxlbWVudEJ5SWQoJ0hlbHBlcjpyZWNhc3RJbXBBbmRSZWZyZXNoJyk7XHJcbiAgICB2YXIgaW1wSHJlZiA9ICdpbmRleC5waHA/Y21kPXF1aWNrYnVmZiZzdWJjbWQ9YWN0aXZhdGUmdGFyZ2V0JyArXHJcbiAgICAgICdQbGF5ZXJzPScgK1xyXG4gICAgICAkKCdkdC5zdGF0LW5hbWU6Zmlyc3QnKS5uZXh0KCkudGV4dCgpLnJlcGxhY2UoLywvZywgJycpICtcclxuICAgICAgJyZza2lsbHMlNUIlNUQ9NTUnO1xyXG4gICAgX3JlY2FzdEltcEFuZFJlZnJlc2guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgeG1saHR0cChpbXBIcmVmLCByZWNhc3RJbXBBbmRSZWZyZXNoLCB0cnVlKTtcclxuICAgIH0sIHRydWUpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tCdWZmcygpIHsgLy8gTGVnYWN5IC0gT2xkIE1hcFxyXG4gIC8vIGV4dHJhIHdvcmxkIHNjcmVlbiB0ZXh0XHJcbiAgdmFyIHJlcGxhY2VtZW50VGV4dCA9ICc8dGQgYmFja2dyb3VuZD1cIicgKyBpbWFnZVNlcnZlciArXHJcbiAgICAnL3NraW4vcmVhbG1fcmlnaHRfYmcuanBnXCI+PHRhYmxlIGFsaWduPVwicmlnaHRcIiBjZWxscGFkZGluZz1cIjFcIiAnICtcclxuICAgICdzdHlsZT1cIndpZHRoOjI3MHB4O21hcmdpbi1sZWZ0OjM4cHg7bWFyZ2luLXJpZ2h0OjM4cHg7Zm9udC1zaXplJyArXHJcbiAgICAnOm1lZGl1bTsgYm9yZGVyLXNwYWNpbmc6IDFweDsgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcIj48dHI+PCcgK1xyXG4gICAgJ3RkIGNvbHNwYW49XCIyXCIgaGVpZ2h0PVwiMTBcIj48L3RkPjwvdHI+PHRyPic7XHJcbiAgaGFzU2hpZWxkSW1wID0gZmluZE5vZGUoJy8vaW1nW2NvbnRhaW5zKEBzcmMsXCIvNTVfc20uZ2lmXCIpXScpO1xyXG4gIGhhc0RlYXRoRGVhbGVyID0gZmluZE5vZGUoJy8vaW1nW2NvbnRhaW5zKEBzcmMsXCIvNTBfc20uZ2lmXCIpXScpO1xyXG4gIHJlcGxhY2VtZW50VGV4dCArPSBmaW5kSW1wcygpO1xyXG4gIHJlcGxhY2VtZW50VGV4dCArPSBoYXNDQSgpO1xyXG4gIHJlcGxhY2VtZW50VGV4dCArPSBoYXNEYmxyKCk7XHJcbiAgaWYgKGNhbGYuaHVudGluZ01vZGUpIHtcclxuICAgIHJlcGxhY2VtZW50VGV4dCArPSAnPHRyPjx0ZCBzdHlsZT1cImZvbnQtc2l6ZTogc21hbGw7IGNvbG9yOnJlZFwiPicgK1xyXG4gICAgICAnSHVudGluZyBtb2RlIGVuYWJsZWQ8L3RkPjwvdHI+JztcclxuICB9XHJcbiAgcmVwbGFjZW1lbnRUZXh0ICs9ICc8dHI+PHRkIGNvbHNwYW49XCIyXCIgaGVpZ2h0PVwiMTBcIj48L3RkPjwvdHI+JztcclxuICByZXBsYWNlbWVudFRleHQgKz0gJzwvdGQ+JztcclxuXHJcbiAgdmFyIGluamVjdEhlcmUgPSBmaW5kTm9kZSgnLy9kaXZbdGFibGVbQGNsYXNzPVwiY2VudGVyZWRcIiAnICtcclxuICAgICdhbmQgQHN0eWxlPVwid2lkdGg6IDI3MHB4O1wiXV0nKTtcclxuICBpZiAoIWluamVjdEhlcmUpIHtyZXR1cm47fVxyXG4gIC8vIGluc2VydCBhZnRlciBraWxsIGFsbCBtb25zdGVycyBpbWFnZSBhbmQgdGV4dFxyXG4gIHZhciBuZXdTcGFuID0gY3JlYXRlRGl2KHtpbm5lckhUTUw6IHJlcGxhY2VtZW50VGV4dH0pO1xyXG4gIGluamVjdEhlcmUuYXBwZW5kQ2hpbGQobmV3U3Bhbik7XHJcblxyXG4gIGltcFJlY2FzdCgpO1xyXG4gIHRvZ2dsZUtzVHJhY2tlcigpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmplY3RPbGRNYXAoKSB7XHJcbiAgY2hlY2tCdWZmcygpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmplY3RXb3JsZCgpIHtcclxuICAvLyAtMSA9IHdvcmxkIHBhZ2VcclxuICAvLyAwID0gcXVlc3QgcmVzcG9uY2VcclxuICAvLyAxID0gdmlldyBjcmVhdHVyZVxyXG4gIC8vIDIgPSBhdHRhY2sgY3JlYXR1cmVcclxuICAvLyAzID0gYXR0YWNrIHBsYXllclxyXG4gIC8vIDQgPSBtb3ZlXHJcbiAgLy8gNSA9IHVzZSBzdGFpclxyXG4gIC8vIDYgPSB1c2UgY2hlc3RcclxuICAvLyA3ID0gdGFrZSBwb3J0YWxcclxuICAvLyAxMCA9IHByb2JsYWJ5IHZpZXcgcmVsaWNcclxuICAvLyAxMSA9IHRha2UgcmVsaWNcclxuICAvLyAxMiA9IGNyZWF0ZSBncm91cFxyXG4gIC8vIDEzID0gdmlldyBzaG9wXHJcbiAgLy8gMTQgPSBwdXJjaGFzZSBpdGVtXHJcbiAgLy8gMTUgPSByZXBhaXJcclxuICAvLyAxNyA9IGxvZ2luXHJcbiAgLy8gMTggPSB1c2VybmFtZSBub3QgZm91bmRcclxuICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dvcmxkUGFnZScpKSB7IC8vIG5ldyBtYXBcclxuICAgIHN1YnNjcmliZXMoKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gbm90IG5ldyBtYXAuXHJcbiAgICBpbmplY3RPbGRNYXAoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGNhbGxBcHAgZnJvbSAnLi4vY2FsbEFwcCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkb2ludmVudChyZWNpcGUpIHtcclxuICByZXR1cm4gY2FsbEFwcCh7XHJcbiAgICBjbWQ6ICdpbnZlbnRpbmcnLFxyXG4gICAgc3ViY21kOiAnZG9pbnZlbnQnLFxyXG4gICAgcmVjaXBlX2lkOiByZWNpcGVcclxuICB9KTtcclxufVxyXG4iLCJpbXBvcnQge2NyZWF0ZVRkfSBmcm9tICcuL2NvbW1vbi9jRWxlbWVudCc7XHJcbmltcG9ydCBkb2ludmVudCBmcm9tICcuL2FwcC9pbnZlbnRpbmcvZG9pbnZlbnQnO1xyXG5pbXBvcnQganNvbkZhaWwgZnJvbSAnLi9jb21tb24vanNvbkZhaWwnO1xyXG5pbXBvcnQgb3V0cHV0UmVzdWx0IGZyb20gJy4vY29tbW9uL291dHB1dFJlc3VsdCc7XHJcbmltcG9ydCB7ZmFsbGJhY2ssIGZpbmROb2RlLCBmaW5kTm9kZXMsIHNlcnZlciwgeG1saHR0cH0gZnJvbSAnLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG52YXIgaXRlbVJFID0gLzxiPihbXjxdKyk8XFwvYj4vaTtcclxudmFyIHBsYW50RnJvbUNvbXBvbmVudEhhc2ggPSB7XHJcbiAgJ0FtYmVyIEVzc2Vuc2UnOiAnQW1iZXIgUGxhbnQnLFxyXG4gICdCbG9vZCBCbG9vbSBGbG93ZXInOiAnQmxvb2QgQmxvb20gUGxhbnQnLFxyXG4gICdEYXJrIFNoYWRlICc6ICdEYXJrIFNoYWRlIFBsYW50JyxcclxuICAnU25ha2UgRXllJzogJ0VseWEgU25ha2UgSGVhZCcsXHJcbiAgJ1NuYWtlIFZlbm9tIEZhbmcnOiAnRWx5YSBTbmFrZSBIZWFkJyxcclxuICAnSGVmZmxlIFdhcnQnOiAnSGVmZmxlIFdhcnQgUGxhbnQnLFxyXG4gICdKYWRlbWFyZSBCbG9zc29tJzogJ0phZGVtYXJlIFBsYW50JyxcclxuICAnVHJpbmV0dGxlIExlYWYnOiAnVHJpbmV0dGxlIFBsYW50JyxcclxuICAnUHVycGxldCBGbG93ZXInOiAnUHVycGxldCBQbGFudCcsXHJcbn07XHJcblxyXG5mdW5jdGlvbiBxdWlja0ludmVudERvbmUoanNvbikge1xyXG4gIHZhciBpbnZlbnRSZXN1bHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW52ZW50X1Jlc3VsdCcpO1xyXG4gIGlmIChqc29uRmFpbChqc29uLCBpbnZlbnRSZXN1bHQpKSB7cmV0dXJuO31cclxuICBpZiAoanNvbi5yLnN1Y2Nlc3MpIHtcclxuICAgIG91dHB1dFJlc3VsdCgnPHNwYW4gY2xhc3M9XCJmc2hHcmVlblwiPicgK1xyXG4gICAgICAnWW91IHN1Y2Nlc3NmdWxseSBpbnZlbnRlZCB0aGUgaXRlbSE8L3NwYW4+JywgaW52ZW50UmVzdWx0KTtcclxuICB9IGVsc2Uge1xyXG4gICAgb3V0cHV0UmVzdWx0KCc8c3BhbiBjbGFzcz1cImZzaFJlZFwiPicgK1xyXG4gICAgICAnWW91IGhhdmUgZmFpbGVkIHRvIGludmVudCB0aGUgaXRlbS48L3NwYW4+JywgaW52ZW50UmVzdWx0KTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHF1aWNrSW52ZW50KCkgeyAvLyBMZWdhY3lcclxuICB2YXIgYW1vdW50VG9JbnZlbnQgPSAkKCcjaW52ZW50X2Ftb3VudCcpLmF0dHIoJ3ZhbHVlJyk7XHJcbiAgdmFyIHJlY2lwZUlEID0gJCgnaW5wdXRbbmFtZT1cInJlY2lwZV9pZFwiXScpLmF0dHIoJ3ZhbHVlJyk7XHJcbiAgJCgnI2ludmV0X1Jlc3VsdF9sYWJlbCcpLmh0bWwoJ0ludmVudGluZyAnICsgYW1vdW50VG9JbnZlbnQgKyAnIEl0ZW1zJyk7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbW91bnRUb0ludmVudDsgaSArPSAxKSB7XHJcbiAgICBkb2ludmVudChyZWNpcGVJRCkuZG9uZShxdWlja0ludmVudERvbmUpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaW5qZWN0SW52ZW50KCkgeyAvLyBCYWQgalF1ZXJ5XHJcbiAgdmFyIHNlbGVjdG9yID0gJzx0cj48dGQgYWxpZ249XCJjZW50ZXJcIj5TZWxlY3QgaG93IG1hbnkgdG8gcXVpY2sgJyArXHJcbiAgICAnaW52ZW50PGlucHV0IHZhbHVlPTEgaWQ9XCJpbnZlbnRfYW1vdW50XCIgbmFtZT1cImludmVudF9hbW91bnRcIiAnICtcclxuICAgICdzaXplPTMgY2xhc3M9XCJjdXN0b21pbnB1dFwiPjwvdGQ+PC90cj4nICtcclxuICAgICc8dHI+PHRkIGFsaWduPVwiY2VudGVyXCI+PGlucHV0IGlkPVwicXVpY2tJbnZlbnRcIiB2YWx1ZT1cIlF1aWNrICcgK1xyXG4gICAgJ2ludmVudCBpdGVtc1wiIGNsYXNzPVwiY3VzdG9tYnV0dG9uXCIgdHlwZT1cInN1Ym1pdFwiPjwvdGQ+PC90cj4nICsgLy8gYnV0dG9uIHRvIGludmVudFxyXG4gICAgJzx0cj48dGQgY29sc3Bhbj02IGFsaWduPVwiY2VudGVyXCI+PHNwYW4gaWQ9XCJpbnZldF9SZXN1bHRfbGFiZWxcIj4nICtcclxuICAgICc8L3NwYW4+PG9sIGlkPVwiaW52ZW50X1Jlc3VsdFwiPjwvb2w+PC90ZD48L3RyPic7XHJcbiAgJCgnaW5wdXRbbmFtZT1cInJlY2lwZV9pZFwiXScpLmNsb3Nlc3QoJ3Rib2R5JykuYXBwZW5kKHNlbGVjdG9yKTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2tJbnZlbnQnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsXHJcbiAgICBxdWlja0ludmVudCwgdHJ1ZSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRJdGVtTmFtZShyZXNwb25zZVRleHQpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIGl0ZW1OYW1lID0gaXRlbVJFLmV4ZWMocmVzcG9uc2VUZXh0KTtcclxuICBpZiAoaXRlbU5hbWUpIHtyZXR1cm4gaXRlbU5hbWVbMV07fVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbmplY3RWaWV3UmVjaXBlTGlua3MocmVzcG9uc2VUZXh0LCBjYWxsYmFjaykgeyAvLyBMZWdhY3lcclxuICB2YXIgaXRlbU5hbWUgPSBnZXRJdGVtTmFtZShyZXNwb25zZVRleHQpO1xyXG4gIHZhciBwbGFudEZyb21Db21wb25lbnQgPSBmYWxsYmFjayhwbGFudEZyb21Db21wb25lbnRIYXNoW2l0ZW1OYW1lXSxcclxuICAgIGl0ZW1OYW1lKTtcclxuICBpZiAoaXRlbU5hbWUgIT09IHBsYW50RnJvbUNvbXBvbmVudCkge1xyXG4gICAgdmFyIGl0ZW1MaW5rcyA9IGNyZWF0ZVRkKHtcclxuICAgICAgaW5uZXJIVE1MOiAnPGEgaHJlZj1cIicgKyBzZXJ2ZXIgK1xyXG4gICAgICAgICc/Y21kPWF1Y3Rpb25ob3VzZSZzZWFyY2hfdGV4dD0nICtcclxuICAgICAgICBlbmNvZGVVUkkocGxhbnRGcm9tQ29tcG9uZW50KSArICdcIj5BSDwvYT4nXHJcbiAgICB9KTtcclxuICAgIHZhciBjb3VudGVyID0gZmluZE5vZGUoJy4uLy4uLy4uLy4uL3RyWzJdL3RkJywgY2FsbGJhY2spO1xyXG4gICAgY291bnRlci5zZXRBdHRyaWJ1dGUoJ2NvbHNwYW4nLCAnMicpO1xyXG4gICAgY2FsbGJhY2sucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoaXRlbUxpbmtzKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxpbmtGcm9tTW91c2VvdmVyQ3VzdG9tKG1vdXNlT3ZlcikgeyAvLyBMZWdhY3lcclxuICB2YXIgcmVQYXJhbXMgPVxyXG4gICAgL2l0ZW1faWQ9KFxcZCspJmludl9pZD0oWy0wLTldKikmdD0oXFxkKykmcD0oXFxkKykmdmNvZGU9KFthLXowLTldKikvaTtcclxuICB2YXIgcmVSZXN1bHQgPSByZVBhcmFtcy5leGVjKG1vdXNlT3Zlcik7XHJcbiAgaWYgKHJlUmVzdWx0ID09PSBudWxsKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgdmFyIGl0ZW1JZCA9IHJlUmVzdWx0WzFdO1xyXG4gIHZhciBpbnZJZCA9IHJlUmVzdWx0WzJdO1xyXG4gIHZhciB0eXBlID0gcmVSZXN1bHRbM107XHJcbiAgdmFyIHBpZCA9IHJlUmVzdWx0WzRdO1xyXG4gIHZhciB2Y29kZSA9IHJlUmVzdWx0WzVdO1xyXG4gIHZhciB0aGVVcmwgPSAnZmV0Y2hpdGVtLnBocD9pdGVtX2lkPScgKyBpdGVtSWQgKyAnJmludl9pZD0nICsgaW52SWQgK1xyXG4gICAgJyZ0PScgKyB0eXBlICsgJyZwPScgKyBwaWQgKyAnJnZjb2RlPScgKyB2Y29kZTtcclxuICB0aGVVcmwgPSBzZXJ2ZXIgKyB0aGVVcmw7XHJcbiAgcmV0dXJuIHRoZVVybDtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5qZWN0Vmlld1JlY2lwZSgpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIHJlY2lwZSA9ICQoJyNwQ0MgdGFibGUgdGFibGUgYicpLmZpcnN0KCk7XHJcbiAgdmFyIG5hbWUgPSByZWNpcGUuaHRtbCgpO1xyXG4gIHZhciBzZWFyY2hOYW1lID0gcmVjaXBlLmh0bWwoKS5yZXBsYWNlKC8gL2csICclMjAnKTtcclxuICByZWNpcGUuaHRtbCgnPGEgaHJlZj1cImh0dHBzOi8vZ3VpZGUuZmFsbGVuc3dvcmQuY29tL2luZGV4LnBocD9jbWQ9JyArXHJcbiAgICAnaXRlbXMmc3ViY21kPXZpZXcmc2VhcmNoX25hbWU9JyArIHNlYXJjaE5hbWUgKyAnXCI+JyArIG5hbWUgK1xyXG4gICAgJzwvYT4nKTtcclxuXHJcbiAgdmFyIGNvbXBvbmVudHMgPSBmaW5kTm9kZXMoXHJcbiAgICAnLy9iWy49XCJDb21wb25lbnRzIFJlcXVpcmVkXCJdLy4uLy4uL2ZvbGxvd2luZy1zaWJsaW5nOjp0clsyXS8vaW1nJyk7XHJcbiAgaWYgKGNvbXBvbmVudHMpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tcG9uZW50cy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICB2YXIgbW8gPSBjb21wb25lbnRzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS10aXBwZWQnKTtcclxuICAgICAgeG1saHR0cChsaW5rRnJvbU1vdXNlb3ZlckN1c3RvbShtbyksXHJcbiAgICAgICAgaW5qZWN0Vmlld1JlY2lwZUxpbmtzLCBjb21wb25lbnRzW2ldKTtcclxuICAgICAgdmFyIGNvbXBvbmVudENvdW50RWxlbWVudCA9IGNvbXBvbmVudHNbaV0ucGFyZW50Tm9kZS5wYXJlbnROb2RlXHJcbiAgICAgICAgLnBhcmVudE5vZGUubmV4dFNpYmxpbmcuZmlyc3RDaGlsZDtcclxuICAgICAgY29tcG9uZW50Q291bnRFbGVtZW50LmlubmVySFRNTCA9ICc8bm9icj4nICtcclxuICAgICAgICBjb21wb25lbnRDb3VudEVsZW1lbnQuaW5uZXJIVE1MICsgJzwvbm9icj4nO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW52ZW50aW5nKCkge1xyXG4gIGluamVjdFZpZXdSZWNpcGUoKTtcclxuICBpbmplY3RJbnZlbnQoKTtcclxufVxyXG4iLCJpbXBvcnQge2NyZWF0ZVRyfSBmcm9tICcuL2NvbW1vbi9jRWxlbWVudCc7XHJcbmltcG9ydCB7bm93fSBmcm9tICcuL3N1cHBvcnQvZGF0YU9iaic7XHJcbmltcG9ydCB7Z2V0VmFsdWUsIG91dHB1dEZvcm1hdH0gZnJvbSAnLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG5mdW5jdGlvbiBkb250UG9zdCgpIHtcclxuICB2YXIgc3VibWl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BDQyBpbnB1dFt0eXBlPVwic3VibWl0XCJdJyk7XHJcbiAgaWYgKHN1Ym1pdEJ1dHRvbikge1xyXG4gICAgc3VibWl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICdpbmRleC5waHA/Y21kPXB2cGxhZGRlciZ2aWV3aW5nX2JhbmRfaWQ9JyArXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BDQyBzZWxlY3RbbmFtZT1cInZpZXdpbmdfYmFuZF9pZFwiXScpLnZhbHVlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBmb3JtYXRMYXN0UmVzZXQobGFzdExhZGRlclJlc2V0KSB7XHJcbiAgdmFyIG0gPSBNYXRoLmZsb29yKChub3cgLSBsYXN0TGFkZGVyUmVzZXQpIC8gNjAwMDApO1xyXG4gIHZhciBoID0gTWF0aC5mbG9vcihtIC8gNjApO1xyXG4gIG0gJT0gNjA7XHJcbiAgcmV0dXJuIG91dHB1dEZvcm1hdChoLCAnIGhvdXJzLCAnKSArIG0gKyAnIG1pbnMnO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmb3JtYXRUaW1lKCkge1xyXG4gIHZhciBsYXN0TGFkZGVyUmVzZXQgPSBnZXRWYWx1ZSgnbGFzdExhZGRlclJlc2V0Jyk7XHJcbiAgaWYgKGxhc3RMYWRkZXJSZXNldCA8IG5vdyAtIDQ4ICogNjAgKiA2MCAqIDEwMDApIHtcclxuICAgIHJldHVybiAnPHNwYW4gY2xhc3M9XCJmc2hMaW5rIHRpcC1zdGF0aWNcIiBkYXRhLXRpcHBlZD1cIkZTSCBoYXMgbm90IHNlZW4gJyArXHJcbiAgICAgICd0aGUgbGFzdCBsYWRkZXIgcmVzZXQuPGJyPllvdSBjYW4gZmluZCBpdCBpbiB5b3VyIGxvZyBpZiB5b3UgJyArXHJcbiAgICAgICdxdWFsaWZpZWQ8YnI+b3IgVGF2ZXJuIFJ1bW91cnMuXCI+Pz8/PC9zcGFuPic7XHJcbiAgfVxyXG4gIHJldHVybiBmb3JtYXRMYXN0UmVzZXQobGFzdExhZGRlclJlc2V0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gbGFzdFJlc2V0KCkge1xyXG4gIHZhciB0b3BUYWJsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwQ0MgdGFibGUnKTtcclxuICB2YXIgbmV3Um93ID0gY3JlYXRlVHIoKTtcclxuICB2YXIgbGVmdENlbGwgPSBuZXdSb3cuaW5zZXJ0Q2VsbCgtMSk7XHJcbiAgbGVmdENlbGwuaGVpZ2h0ID0gMjU7XHJcbiAgbGVmdENlbGwudGV4dENvbnRlbnQgPSAnTGFzdCBSZXNldDonO1xyXG4gIHZhciByaWdodENlbGwgPSBuZXdSb3cuaW5zZXJ0Q2VsbCgtMSk7XHJcbiAgcmlnaHRDZWxsLmFsaWduID0gJ3JpZ2h0JztcclxuICByaWdodENlbGwuaW5uZXJIVE1MID0gZm9ybWF0VGltZSgpO1xyXG4gIHRvcFRhYmxlLmFwcGVuZENoaWxkKG5ld1Jvdyk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhZGRlcigpIHtcclxuICBkb250UG9zdCgpO1xyXG4gIGxhc3RSZXNldCgpO1xyXG59XHJcbiIsImltcG9ydCB7aW1hZ2VTZXJ2ZXJ9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHttb3ZlT3B0aW9uc30gZnJvbSAnLi9hc3NldHMnO1xyXG5pbXBvcnQgcmV0cnlBamF4IGZyb20gJy4uL2FqYXgvcmV0cnlBamF4JztcclxuXHJcbnZhciBvbGRNb3ZlcyA9IFtdO1xyXG52YXIgbm9kZXM7XHJcbnZhciBzZWxlY3RSb3c7XHJcblxyXG5mdW5jdGlvbiBkb1BpY2tNb3ZlKG1vdmVJZCwgc2xvdElkKSB7XHJcbiAgcmV0dXJuIHJldHJ5QWpheCh7XHJcbiAgICB1cmw6ICdpbmRleC5waHAnLFxyXG4gICAgZGF0YToge1xyXG4gICAgICBjbWQ6ICdhcmVuYScsXHJcbiAgICAgIHN1YmNtZDogJ2RvcGlja21vdmUnLFxyXG4gICAgICBtb3ZlX2lkOiBtb3ZlSWQsXHJcbiAgICAgIHNsb3RfaWQ6IHNsb3RJZFxyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVNb3ZlcygpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIG5ld01vdmVzID0gW107XHJcbiAgJCgnc2VsZWN0Jywgc2VsZWN0Um93KS5lYWNoKGZ1bmN0aW9uKGksIGUpIHtcclxuICAgIG5ld01vdmVzLnB1c2goJChlKS52YWwoKSk7XHJcbiAgfSk7XHJcbiAgdmFyIHBybSA9IFtdO1xyXG4gIG5ld01vdmVzLmZvckVhY2goZnVuY3Rpb24odmFsLCBpbmQpIHtcclxuICAgIGlmICh2YWwgPT09IG9sZE1vdmVzW2luZF0pIHtyZXR1cm47fVxyXG4gICAgcHJtLnB1c2goZG9QaWNrTW92ZSgneCcsIGluZCkpO1xyXG4gICAgbm9kZXMuZXEoaW5kKS5hdHRyKHtcclxuICAgICAgc3JjOiBpbWFnZVNlcnZlciArICcvd29ybGQvYWN0aW9uTG9hZGluZ1NwaW5uZXIuZ2lmJyxcclxuICAgICAgd2lkdGg6ICcyNScsXHJcbiAgICAgIGhlaWdodDogJzI1J1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgJC53aGVuLmFwcGx5KCQsIHBybSkuZG9uZShmdW5jdGlvbigpIHtcclxuICAgIG5ld01vdmVzLmZvckVhY2goZnVuY3Rpb24odmFsLCBpbmQpIHtcclxuICAgICAgaWYgKHZhbCA9PT0gJ3gnIHx8IHZhbCA9PT0gb2xkTW92ZXNbaW5kXSkge3JldHVybjt9XHJcbiAgICAgIHBybS5wdXNoKGRvUGlja01vdmUodmFsLCBpbmQpKTtcclxuICAgIH0pO1xyXG4gICAgJC53aGVuLmFwcGx5KCQsIHBybSkuZG9uZShmdW5jdGlvbigpIHtcclxuICAgICAgd2luZG93LmxvY2F0aW9uID0gJ2luZGV4LnBocD9jbWQ9YXJlbmEmc3ViY21kPXNldHVwJztcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZWxlY3RNb3ZlcyhldnQpIHsgLy8galF1ZXJ5XHJcbiAgJChldnQudGFyZ2V0KS5vZmYoKTtcclxuXHJcbiAgbm9kZXMgPVxyXG4gICAgJCgnI3BDQyBhW2hyZWZePVwiaW5kZXgucGhwP2NtZD1hcmVuYSZzdWJjbWQ9cGlja21vdmUmc2xvdF9pZD1cIl0gaW1nJyk7XHJcbiAgdmFyIHRhYmxlID0gbm9kZXMuZXEoMCkuY2xvc2VzdCgndGFibGUnKS5wYXJlbnQoKS5jbG9zZXN0KCd0YWJsZScpO1xyXG5cclxuICB2YXIgcm93ID0gJCgnPHRyLz4nKTtcclxuICBzZWxlY3RSb3cgPSByb3c7XHJcbiAgcm93LmFwcGVuZCgnPHRkLz4nKTtcclxuICBub2Rlcy5lYWNoKGZ1bmN0aW9uKGksIGUpIHtcclxuICAgIHZhciBtb3ZlID0gJChlKS5hdHRyKCdzcmMnKTtcclxuICAgIGlmIChtb3ZlLmluZGV4T2YoJ2Jhcl9pY29uX2hvbGRlci5qcGcnKSA+IDApIHtcclxuICAgICAgbW92ZSA9ICd4JztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG1vdmUgPSBtb3ZlLm1hdGNoKC9wdnBcXC8oXFxkKykuZ2lmJC8pWzFdO1xyXG4gICAgfVxyXG4gICAgdmFyIGh0bWwgPSAkKG1vdmVPcHRpb25zKTtcclxuICAgICQoJ29wdGlvblt2YWx1ZT0nICsgbW92ZSArICddJywgaHRtbCkucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTtcclxuICAgIHJvdy5hcHBlbmQoaHRtbCk7XHJcbiAgfSk7XHJcbiAgdGFibGUuYXBwZW5kKHJvdyk7XHJcblxyXG4gICQoJ2ltZ1tzcmMkPVwicHZwL2Jhcl9zcGFjZXIuanBnXCJdJywgdGFibGUpXHJcbiAgICAuYXR0cih7d2lkdGg6ICcxNScsIGhlaWdodDogJzUwJ30pO1xyXG5cclxuICByb3cgPSAkKCc8dHI+PHRkIGNvbHNwYW49MzIgYWxpZ249Y2VudGVyICcgK1xyXG4gICAgJ3N0eWxlPVwicGFkZGluZy10b3A6IDJweDtwYWRkaW5nLWJvdHRvbTogMnB4O1wiPicgK1xyXG4gICAgJzxpbnB1dCBjbGFzcz1cImN1c3RvbWJ1dHRvblwiIHZhbHVlPVwiVXBkYXRlXCIgdHlwZT1cImJ1dHRvblwiPicgK1xyXG4gICAgJzwvdGQ+PC90cj4nKTtcclxuICAkKCdpbnB1dCcsIHJvdykuY2xpY2sodXBkYXRlTW92ZXMpO1xyXG4gIHRhYmxlLmFwcGVuZChyb3cpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR1cE1vdmVzKCkgeyAvLyBqUXVlcnlcclxuICB2YXIgbm9kZSA9ICQoJyNwQ0MgYjpjb250YWlucyhcIlNldHVwIENvbWJhdCBNb3Zlc1wiKScpO1xyXG4gIGlmIChub2RlLmxlbmd0aCAhPT0gMSkge3JldHVybjt9XHJcbiAgbm9kZS5hZGRDbGFzcygnZnNoTGluayBmc2hHcmVlbicpO1xyXG4gIG5vZGUuY2xpY2soc2VsZWN0TW92ZXMpO1xyXG59XHJcbiIsImltcG9ydCB7Z2V0VmFsdWV9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNob3dBbGxRdWVzdFN0ZXBzKCkge1xyXG4gIGlmICghZ2V0VmFsdWUoJ3Nob3dOZXh0UXVlc3RTdGVwcycpKSB7cmV0dXJuO31cclxuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2RpdltpZF49XCJzdGFnZVwiXScpLFxyXG4gICAgZnVuY3Rpb24oZSkge2Uuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7fSk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25leHRfc3RhZ2VfYnV0dG9uJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxufVxyXG4iLCJpbXBvcnQgZ2V0Rm9yYWdlIGZyb20gJy4uL2FqYXgvZ2V0Rm9yYWdlJztcclxuaW1wb3J0IHNldEZvcmFnZSBmcm9tICcuLi9hamF4L3NldEZvcmFnZSc7XHJcblxyXG5mdW5jdGlvbiBnb3RNb3ZlcyhfYXJlbmEpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIGFyZW5hID0gX2FyZW5hIHx8IHt9O1xyXG4gIGFyZW5hLm1vdmVzID0ge307XHJcbiAgdmFyIGFyZW5hTW92ZXMgPSAkKCcjcENDIGltZ1t2c3BhY2U9XCI0XCJdJykuc2xpY2UoMSk7XHJcbiAgYXJlbmFNb3Zlcy5lYWNoKGZ1bmN0aW9uKGksIGUpIHtcclxuICAgIHZhciBzZWxmID0gJChlKTtcclxuICAgIHZhciBzcmMgPSBzZWxmLmF0dHIoJ3NyYycpO1xyXG4gICAgdmFyIG1vdmVJZCA9IC8oXFxkKylcXC5naWYvLmV4ZWMoc3JjKVsxXTtcclxuICAgIGFyZW5hLm1vdmVzW21vdmVJZF0gPSB7fTtcclxuICAgIGFyZW5hLm1vdmVzW21vdmVJZF0uY291bnQgPSBOdW1iZXIoLyhcXGQpJC9cclxuICAgICAgLmV4ZWMoc2VsZi5jbG9zZXN0KCd0ZCcpLmh0bWwoKSlbMV0pO1xyXG4gICAgYXJlbmEubW92ZXNbbW92ZUlkXS5ocmVmID0gc3JjO1xyXG4gIH0pO1xyXG4gIHNldEZvcmFnZSgnZnNoX2FyZW5hJywgYXJlbmEpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdG9yZU1vdmVzKCkgeyAvLyBqUXVlcnkubWluXHJcbiAgZ2V0Rm9yYWdlKCdmc2hfYXJlbmEnKS5kb25lKGdvdE1vdmVzKTtcclxufVxyXG4iLCJpbXBvcnQge2ZpbmROb2RlLCBpbnRWYWx1ZSwgc2VydmVyLCBzZXRWYWx1ZX0gZnJvbSAnLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG52YXIgY3VycmVudEZTUDtcclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVN0YW1Db3VudChldnQpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIHRhcmdldCA9ICQoZXZ0LnRhcmdldCk7XHJcbiAgdmFyIGFtb3VudCA9IHRhcmdldC5hdHRyKCdhbW91bnQnKTtcclxuICB2YXIgY29zdCA9IHRhcmdldC5hdHRyKCdjb3N0Jyk7XHJcbiAgdmFyIHF1YW50aXR5ID0gdGFyZ2V0LnZhbCgpO1xyXG4gIC8vIGNhcCB0aGUgdmFsdWUgaWYgdGhlIHVzZXIgZ29lcyBvdmVyIGhpcyBjdXJyZW50IEZTUFxyXG4gIHZhciBjb2xvciA9ICdyZWQnO1xyXG4gIHZhciBleHRyYVN0YW0gPSBNYXRoLmZsb29yKGN1cnJlbnRGU1AgLyBjb3N0KSAqIGFtb3VudDtcclxuICBpZiAocXVhbnRpdHkgKiBjb3N0IDw9IGN1cnJlbnRGU1ApIHtcclxuICAgIGV4dHJhU3RhbSA9IHF1YW50aXR5ICogYW1vdW50O1xyXG4gICAgY29sb3IgPSAnYmx1ZSc7XHJcbiAgfVxyXG4gICQoJyNwQ0Mgc3BhbltpZD1cInRvdGFsU3RhbVwiXVt0eXBlPVwiJyArIHRhcmdldC5hdHRyKCdzdGFtdHlwZScpICsgJ1wiXScpXHJcbiAgICAuY3NzKCdjb2xvcicsIGNvbG9yKVxyXG4gICAgLmh0bWwoJygrJyArIGV4dHJhU3RhbSArICcgc3RhbWluYSknKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5qZWN0VXBncmFkZUhlbHBlcih2YWx1ZSwgdHlwZSkgeyAvLyBqUXVlcnlcclxuICB2YXIgdGhlQ2VsbHMgPSAkKCcjcENDIHRyJylcclxuICAgIC5oYXMoJ2lucHV0W25hbWU9XCJ1cGdyYWRlX2lkXCJdW3ZhbHVlPVwiJyArIHZhbHVlICsgJ1wiXScpXHJcbiAgICAuZmluZCgndGQnKTtcclxuICB2YXIgY2VsbCA9IHRoZUNlbGxzLmZpcnN0KCk7XHJcbiAgY2VsbC5hcHBlbmQoJyA8c3BhbiBzdHlsZT1cImNvbG9yOmJsdWVcIiAnICtcclxuICAgICdpZD1cInRvdGFsU3RhbVwiIHR5cGU9XCInICsgdHlwZSArICdcIj48L3NwYW4+Jyk7XHJcbiAgdmFyIGFtb3VudFJFID0gbmV3IFJlZ0V4cCgnXFxcXCsoXFxcXGQrKSAnICsgdHlwZSArICcgU3RhbWluYScpO1xyXG4gIHZhciBhbW91bnQgPSBjZWxsLnRleHQoKS5tYXRjaChhbW91bnRSRSlbMV07XHJcbiAgJCgnaW5wdXRbbmFtZT1cInF1YW50aXR5XCJdJywgdGhlQ2VsbHMpXHJcbiAgICAuYXR0cignc3RhbXR5cGUnLCB0eXBlKVxyXG4gICAgLmF0dHIoJ2Ftb3VudCcsIGFtb3VudClcclxuICAgIC5hdHRyKCdjb3N0JywgdGhlQ2VsbHMuZXEoMSkudGV4dCgpKVxyXG4gICAgLmtleXVwKHVwZGF0ZVN0YW1Db3VudCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluamVjdFBvaW50cygpIHsgLy8galF1ZXJ5XHJcbiAgY3VycmVudEZTUCA9IGludFZhbHVlKCQoJyNzdGF0YmFyLWZzcCcpLnRleHQoKSk7XHJcbiAgaW5qZWN0VXBncmFkZUhlbHBlcigwLCAnQ3VycmVudCcpO1xyXG4gIGluamVjdFVwZ3JhZGVIZWxwZXIoMSwgJ01heGltdW0nKTtcclxuICAkKCcjcENDIHRkJylcclxuICAgIC5oYXMoJ2lucHV0W25hbWU9XCJ1cGdyYWRlX2lkXCJdW3ZhbHVlPVwiM1wiXScpXHJcbiAgICAuaHRtbCgnPGEgaHJlZj1cIicgKyBzZXJ2ZXIgK1xyXG4gICAgICAnP2NtZD1tYXJrZXRwbGFjZVwiPlNlbGwgYXQgTWFya2V0cGxhY2U8L2E+Jyk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0b3JlUGxheWVyVXBncmFkZXMoKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBhbGxpZXNUZXh0ID0gZmluZE5vZGUoJy8vdGRbLj1cIisxIE1heCBBbGxpZXNcIl0nKTtcclxuICB2YXIgYWxsaWVzUmF0aW8gPSBhbGxpZXNUZXh0Lm5leHRTaWJsaW5nLm5leHRTaWJsaW5nLm5leHRTaWJsaW5nXHJcbiAgICAubmV4dFNpYmxpbmc7XHJcbiAgaWYgKGFsbGllc1JhdGlvKSB7XHJcbiAgICB2YXIgYWxsaWVzVmFsdWVSRSA9IC8oXFxkKykgXFwvIDExNS87XHJcbiAgICB2YXIgYWxsaWVzVmFsdWUgPSBOdW1iZXIoYWxsaWVzVmFsdWVSRS5leGVjKGFsbGllc1JhdGlvLmlubmVySFRNTClbMV0pO1xyXG4gICAgc2V0VmFsdWUoJ2FsbGllc3RvdGFsJywgYWxsaWVzVmFsdWUgKyA1KTtcclxuICB9XHJcbiAgdmFyIGVuZW1pZXNUZXh0ID0gZmluZE5vZGUoJy8vdGRbLj1cIisxIE1heCBFbmVtaWVzXCJdJyk7XHJcbiAgdmFyIGVuZW1pZXNSYXRpbyA9IGVuZW1pZXNUZXh0Lm5leHRTaWJsaW5nLm5leHRTaWJsaW5nLm5leHRTaWJsaW5nXHJcbiAgICAubmV4dFNpYmxpbmc7XHJcbiAgaWYgKGVuZW1pZXNSYXRpbykge1xyXG4gICAgdmFyIGVuZW1pZXNWYWx1ZVJFID0gLyhcXGQrKSBcXC8gMTE1LztcclxuICAgIHZhciBlbmVtaWVzVmFsdWUgPSBOdW1iZXIoZW5lbWllc1ZhbHVlUkUuZXhlYyhlbmVtaWVzUmF0aW8uaW5uZXJIVE1MKVsxXSk7XHJcbiAgICBzZXRWYWx1ZSgnZW5lbWllc3RvdGFsJywgZW5lbWllc1ZhbHVlICsgNSk7XHJcbiAgfVxyXG4gIGluamVjdFBvaW50cygpO1xyXG59XHJcbiIsImltcG9ydCB7cENDfSBmcm9tICcuL3N1cHBvcnQvbGF5b3V0JztcclxuaW1wb3J0IHtcclxuICBnZXRVcmxQYXJhbWV0ZXIsXHJcbiAgZ2V0VmFsdWUsXHJcbiAgaW1hZ2VTZXJ2ZXIsXHJcbiAgc2V0VmFsdWVcclxufSBmcm9tICcuL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbnZhciBub3JtYWxMaW5rO1xyXG52YXIgc2Vhc29uTGluaztcclxudmFyIGFjdGl2ZUxpbms7XHJcbnZhciBjb21wbGV0ZUxpbms7XHJcbnZhciBub3RTdGFydGVkTGluaztcclxudmFyIGN1cnJlbnRQYWdlVmFsdWU7XHJcblxyXG5mdW5jdGlvbiBkb250UG9zdChlKSB7XHJcbiAgaWYgKGUudGFyZ2V0LnR5cGUgIT09ICdzdWJtaXQnKSB7cmV0dXJuO31cclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgdmFyIGZvcm0gPSBlLnRhcmdldC5mb3JtO1xyXG4gIHZhciBtb2RlID0gZm9ybVsxXS52YWx1ZTtcclxuICB2YXIgdHlwZSA9IGZvcm1bMl0udmFsdWU7XHJcbiAgdmFyIGxldHRlciA9IGZvcm1bM10udmFsdWU7XHJcbiAgdmFyIHNvcnRieSA9IGZvcm1bNF0udmFsdWU7XHJcbiAgdmFyIHNvcnRieWRpciA9IGZvcm1bNV0udmFsdWU7XHJcbiAgdmFyIHBhZ2UgPSBmb3JtWzZdLnZhbHVlO1xyXG4gIHdpbmRvdy5sb2NhdGlvbiA9ICdpbmRleC5waHA/Y21kPXF1ZXN0Ym9vayZ0eXBlPScgKyB0eXBlICsgJyZtb2RlPScgKyBtb2RlICtcclxuICAgICcmcGFnZT0nICsgcGFnZSArICcmbGV0dGVyPScgKyBsZXR0ZXIgKyAnJnNvcnRieT0nICsgc29ydGJ5ICtcclxuICAgICcmc29ydGJ5ZGlyPScgKyBzb3J0YnlkaXI7XHJcbn1cclxuXHJcbnZhciBjdXJyZW50TG9jYXRpb25WYWx1ZSA9IFtcclxuICB7dmFsdWU6IDB9LFxyXG4gIHt2YWx1ZTogM30sXHJcbiAge3ZhbHVlOiAwfSxcclxuICB7dmFsdWU6IDF9LFxyXG4gIHt2YWx1ZTogMn1cclxuXTtcclxuXHJcbnZhciBzYXZlUHJlZktleSA9IFtcclxuICAnbGFzdE5vcm1hbEFjdGl2ZVF1ZXN0UGFnZScsXHJcbiAgJ2xhc3ROb3JtYWxDb21wbGV0ZWRRdWVzdFBhZ2UnLFxyXG4gICdsYXN0Tm9ybWFsTm90U3RhcnRlZFF1ZXN0UGFnZScsXHJcbiAgJ2xhc3RTZWFzb25hbEFjdGl2ZVF1ZXN0UGFnZScsXHJcbiAgJ2xhc3RTZWFzb25hbENvbXBsZXRlZFF1ZXN0UGFnZScsXHJcbiAgJ2xhc3RTZWFzb25hbE5vdFN0YXJ0ZWRRdWVzdFBhZ2UnXHJcbl07XHJcblxyXG5mdW5jdGlvbiB3aGVyZUFtSSgpIHtcclxuICB2YXIgYUxpbmtzID0gcENDLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJyk7XHJcbiAgbm9ybWFsTGluayA9IGFMaW5rc1swXTtcclxuICBzZWFzb25MaW5rID0gYUxpbmtzWzFdO1xyXG4gIGFjdGl2ZUxpbmsgPSBhTGlua3NbMl07XHJcbiAgY29tcGxldGVMaW5rID0gYUxpbmtzWzNdO1xyXG4gIG5vdFN0YXJ0ZWRMaW5rID0gYUxpbmtzWzRdO1xyXG4gIGN1cnJlbnRQYWdlVmFsdWUgPSBjdXJyZW50TG9jYXRpb25WYWx1ZS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyciwgaSkge1xyXG4gICAgdmFyIHJldCA9IHByZXY7XHJcbiAgICBpZiAoYUxpbmtzW2ldLmZpcnN0RWxlbWVudENoaWxkLmdldEF0dHJpYnV0ZSgnY29sb3InKSA9PT0gJyNGRjAwMDAnKSB7XHJcbiAgICAgIHJldCArPSBjdXJyLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9LCAwKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3RvcmVMb2MoKSB7XHJcbiAgdmFyIGxhc3RRQlBhZ2UgPSBsb2NhdGlvbi5zZWFyY2g7XHJcbiAgc2V0VmFsdWUoJ2xhc3RBY3RpdmVRdWVzdFBhZ2UnLCBsYXN0UUJQYWdlKTtcclxuICBzZXRWYWx1ZShzYXZlUHJlZktleVtjdXJyZW50UGFnZVZhbHVlXSwgbGFzdFFCUGFnZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldExpbmsoYUxpbmssIHVybCkge1xyXG4gIGlmICh1cmwubGVuZ3RoID4gMCkge1xyXG4gICAgYUxpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgdXJsKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUxpbmtzKCkge1xyXG4gIHZhciBsYXN0Tm9ybWFsQWN0aXZlUXVlc3RQYWdlID0gZ2V0VmFsdWUoc2F2ZVByZWZLZXlbMF0pO1xyXG4gIHZhciBsYXN0Tm9ybWFsQ29tcGxldGVkUXVlc3RQYWdlID0gZ2V0VmFsdWUoc2F2ZVByZWZLZXlbMV0pO1xyXG4gIHZhciBsYXN0Tm9ybWFsTm90U3RhcnRlZFF1ZXN0UGFnZSA9IGdldFZhbHVlKHNhdmVQcmVmS2V5WzJdKTtcclxuICB2YXIgbGFzdFNlYXNvbmFsQWN0aXZlUXVlc3RQYWdlID0gZ2V0VmFsdWUoc2F2ZVByZWZLZXlbM10pO1xyXG4gIHZhciBsYXN0U2Vhc29uYWxDb21wbGV0ZWRRdWVzdFBhZ2UgPSBnZXRWYWx1ZShzYXZlUHJlZktleVs0XSk7XHJcbiAgdmFyIGxhc3RTZWFzb25hbE5vdFN0YXJ0ZWRRdWVzdFBhZ2UgPSBnZXRWYWx1ZShzYXZlUHJlZktleVs1XSk7XHJcblxyXG4gIHZhciBvcHBvc2l0ZVR5cGVVcmwgPSBbXHJcbiAgICBsYXN0U2Vhc29uYWxBY3RpdmVRdWVzdFBhZ2UsXHJcbiAgICBsYXN0U2Vhc29uYWxDb21wbGV0ZWRRdWVzdFBhZ2UsXHJcbiAgICBsYXN0U2Vhc29uYWxOb3RTdGFydGVkUXVlc3RQYWdlLFxyXG4gICAgbGFzdE5vcm1hbEFjdGl2ZVF1ZXN0UGFnZSxcclxuICAgIGxhc3ROb3JtYWxDb21wbGV0ZWRRdWVzdFBhZ2UsXHJcbiAgICBsYXN0Tm9ybWFsTm90U3RhcnRlZFF1ZXN0UGFnZVxyXG4gIF07XHJcblxyXG4gIGlmIChjdXJyZW50UGFnZVZhbHVlIDwgMykge1xyXG4gICAgc2V0TGluayhzZWFzb25MaW5rLCBvcHBvc2l0ZVR5cGVVcmxbY3VycmVudFBhZ2VWYWx1ZV0pO1xyXG4gICAgc2V0TGluayhhY3RpdmVMaW5rLCBsYXN0Tm9ybWFsQWN0aXZlUXVlc3RQYWdlKTtcclxuICAgIHNldExpbmsoY29tcGxldGVMaW5rLCBsYXN0Tm9ybWFsQ29tcGxldGVkUXVlc3RQYWdlKTtcclxuICAgIHNldExpbmsobm90U3RhcnRlZExpbmssIGxhc3ROb3JtYWxOb3RTdGFydGVkUXVlc3RQYWdlKTtcclxuICB9IGVsc2Uge1xyXG4gICAgc2V0TGluayhub3JtYWxMaW5rLCBvcHBvc2l0ZVR5cGVVcmxbY3VycmVudFBhZ2VWYWx1ZV0pO1xyXG4gICAgc2V0TGluayhhY3RpdmVMaW5rLCBsYXN0U2Vhc29uYWxBY3RpdmVRdWVzdFBhZ2UpO1xyXG4gICAgc2V0TGluayhjb21wbGV0ZUxpbmssIGxhc3RTZWFzb25hbENvbXBsZXRlZFF1ZXN0UGFnZSk7XHJcbiAgICBzZXRMaW5rKG5vdFN0YXJ0ZWRMaW5rLCBsYXN0U2Vhc29uYWxOb3RTdGFydGVkUXVlc3RQYWdlKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0b3JlUXVlc3RQYWdlKCkge1xyXG4gIGlmIChnZXRWYWx1ZSgnc3RvcmVMYXN0UXVlc3RQYWdlJykpIHtcclxuICAgIHdoZXJlQW1JKCk7XHJcbiAgICBzdG9yZUxvYygpO1xyXG4gICAgdXBkYXRlTGlua3MoKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGd1aWRlQnV0dG9ucyhxdWVzdElELCBxdWVzdE5hbWUpIHtcclxuICByZXR1cm4gJzxkaXYgY2xhc3M9XCJwYXJlbnRcIj4nICtcclxuICAgICc8YSBocmVmPVwiaHR0cHM6Ly9ndWlkZS5mYWxsZW5zd29yZC5jb20vaW5kZXgucGhwP2NtZD1xdWVzdHMmYW1wOycgK1xyXG4gICAgJ3N1YmNtZD12aWV3JmFtcDtxdWVzdF9pZD0nICsgcXVlc3RJRCArICdcIiBjbGFzcz1cInRpcC1zdGF0aWNcIiAnICtcclxuICAgICdkYXRhLXRpcHBlZD1cIlNlYXJjaCBmb3IgdGhpcyBxdWVzdCBvbiB0aGUgVWx0aW1hdGUgRmFsbGVuIFN3b3JkIEd1aWRlXCIgJyArXHJcbiAgICAnc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFwnJyArIGltYWdlU2VydmVyICtcclxuICAgICcvdGVtcGxlLzEuZ2lmXFwnKTtcIiB0YXJnZXQ9XCJfYmxhbmtcIj48L2E+Jm5ic3A7JyArXHJcbiAgICAnPGEgaHJlZj1cImh0dHBzOi8vd2lraS5mYWxsZW5zd29yZC5jb20vaW5kZXgucGhwP3RpdGxlPScgK1xyXG4gICAgcXVlc3ROYW1lLnJlcGxhY2UoLyAvZywgJ18nKSArICdcIiBjbGFzcz1cInRpcC1zdGF0aWNcIiAnICtcclxuICAgICdkYXRhLXRpcHBlZD1cIlNlYXJjaCBmb3IgdGhpcyBxdWVzdCBvbiB0aGUgV2lraVwiICcgK1xyXG4gICAgJ3N0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcJycgKyBpbWFnZVNlcnZlciArXHJcbiAgICAnL3NraW4vZnNfd2lraS5naWZcXCcpO1wiIHRhcmdldD1cIl9ibGFua1wiPjwvYT48L2Rpdj4nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0hpZGVRdWVzdHMoKSB7XHJcbiAgaWYgKGdldFZhbHVlKCdoaWRlUXVlc3RzJykpIHtcclxuICAgIHJldHVybiBnZXRWYWx1ZSgnaGlkZVF1ZXN0TmFtZXMnKS5zcGxpdCgnLCcpO1xyXG4gIH1cclxuICByZXR1cm4gW107XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvSGlkZVF1ZXN0cyhoaWRlUXVlc3RzLCBxdWVzdE5hbWUsIGFSb3cpIHtcclxuICBpZiAoaGlkZVF1ZXN0cy5pbmRleE9mKHF1ZXN0TmFtZSkgPj0gMCkge1xyXG4gICAgYVJvdy5jbGFzc0xpc3QuYWRkKCdmc2hIaWRlJyk7XHJcbiAgICBhUm93Lm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QuYWRkKCdmc2hIaWRlJyk7XHJcbiAgICBhUm93Lm5leHRFbGVtZW50U2libGluZy5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LmFkZCgnZnNoSGlkZScpO1xyXG4gICAgYVJvdy5uZXh0RWxlbWVudFNpYmxpbmcubmV4dEVsZW1lbnRTaWJsaW5nLm5leHRFbGVtZW50U2libGluZ1xyXG4gICAgICAuY2xhc3NMaXN0LmFkZCgnZnNoSGlkZScpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFF1ZXN0Qm9va0Z1bGwoKSB7XHJcbiAgcENDLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZG9udFBvc3QpO1xyXG4gIHN0b3JlUXVlc3RQYWdlKCk7XHJcbiAgdmFyIHF1ZXN0VGFibGUgPSBwQ0MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RhYmxlJylbNV07XHJcbiAgaWYgKCFxdWVzdFRhYmxlKSB7cmV0dXJuO31cclxuICB2YXIgaGlkZVF1ZXN0cyA9IGlzSGlkZVF1ZXN0cygpO1xyXG4gIGZvciAodmFyIGkgPSAyOyBpIDwgcXVlc3RUYWJsZS5yb3dzLmxlbmd0aDsgaSArPSA0KSB7XHJcbiAgICB2YXIgYVJvdyA9IHF1ZXN0VGFibGUucm93c1tpXTtcclxuICAgIHZhciBxdWVzdE5hbWUgPSBhUm93LmNlbGxzWzBdLnRleHRDb250ZW50LnJlcGxhY2UoLyB7Mn0vZywgJyAnKS50cmltKCk7XHJcbiAgICBkb0hpZGVRdWVzdHMoaGlkZVF1ZXN0cywgcXVlc3ROYW1lLCBhUm93KTtcclxuICAgIHZhciBxdWVzdElEID0gL3F1ZXN0X2lkPShcXGQrKS8uZXhlYyhhUm93LmNlbGxzWzRdLmlubmVySFRNTClbMV07XHJcbiAgICBhUm93LmNlbGxzWzRdLmlubmVySFRNTCA9IGd1aWRlQnV0dG9ucyhxdWVzdElELCBxdWVzdE5hbWUpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFF1ZXN0VHJhY2tlcigpIHtcclxuICB2YXIgbGFzdEFjdGl2ZVF1ZXN0UGFnZSA9IGdldFZhbHVlKCdsYXN0QWN0aXZlUXVlc3RQYWdlJyk7XHJcbiAgaWYgKGxhc3RBY3RpdmVRdWVzdFBhZ2UubGVuZ3RoID4gMCkge1xyXG4gICAgcENDLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJylbMF1cclxuICAgICAgLnNldEF0dHJpYnV0ZSgnaHJlZicsIGxhc3RBY3RpdmVRdWVzdFBhZ2UpO1xyXG4gIH1cclxuICB2YXIgcXVlc3RJRCA9IGdldFVybFBhcmFtZXRlcigncXVlc3RfaWQnKTtcclxuICB2YXIgaW5qZWN0SGVyZSA9IHBDQy5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGQnKVswXTtcclxuICB2YXIgcXVlc3ROYW1lID0gaW5qZWN0SGVyZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZm9udCcpWzFdLnRleHRDb250ZW50XHJcbiAgICAucmVwbGFjZSgvXCIvZywgJycpO1xyXG4gIGluamVjdEhlcmUuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBndWlkZUJ1dHRvbnMocXVlc3RJRCwgcXVlc3ROYW1lKSk7XHJcbn1cclxuIiwiaW1wb3J0IGJ1ZmZMaXN0IGZyb20gJy4uL3N1cHBvcnQvYnVmZk9iaic7XHJcbmltcG9ydCBmb3JtYXREYXRlVGltZSBmcm9tICcuLi9jb21tb24vZm9ybWF0RGF0ZVRpbWUnO1xyXG5pbXBvcnQgZ2V0Rm9yYWdlIGZyb20gJy4uL2FqYXgvZ2V0Rm9yYWdlJztcclxuaW1wb3J0IHtnZXRWYWx1ZX0gZnJvbSAnLi4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5pbXBvcnQgc2V0Rm9yYWdlIGZyb20gJy4uL2FqYXgvc2V0Rm9yYWdlJztcclxuXHJcbmZ1bmN0aW9uIHJlamVjdGVkKHRpbWVTdGFtcCwgYnVmZnNOb3RDYXN0LCBidWZmTG9nKSB7XHJcbiAgaWYgKGJ1ZmZzTm90Q2FzdCkge1xyXG4gICAgcmV0dXJuIHRpbWVTdGFtcCArICcgPHNwYW4gc3R5bGU9XCJjb2xvcjogcmVkO1wiPicgK1xyXG4gICAgICBidWZmc05vdENhc3RbMF0gKyAnPC9zcGFuPjxicj4nICsgYnVmZkxvZztcclxuICB9XHJcbiAgcmV0dXJuIGJ1ZmZMb2c7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFN0YW1Vc2VkKGJ1ZmZDYXN0KSB7XHJcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBidWZmTGlzdC5sZW5ndGg7IGogKz0gMSkge1xyXG4gICAgaWYgKGJ1ZmZMaXN0W2pdLm5hbWUgPT09IGJ1ZmZDYXN0WzFdKSB7XHJcbiAgICAgIHJldHVybiBidWZmTGlzdFtqXS5zdGFtLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiAnLSc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN1Y2Nlc3NmdWxsKHRpbWVTdGFtcCwgYnVmZkNhc3QsIGJ1ZmZMb2cpIHtcclxuICBpZiAoYnVmZkNhc3QpIHtcclxuICAgIHJldHVybiB0aW1lU3RhbXAgKyAnICcgKyBidWZmQ2FzdFswXSArICcgKCcgKyBnZXRTdGFtVXNlZChidWZmQ2FzdCkgK1xyXG4gICAgICAnIHN0YW1pbmEpIDxicj4nICsgYnVmZkxvZztcclxuICB9XHJcbiAgcmV0dXJuIGJ1ZmZMb2c7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJ1ZmZSZXN1bHQoX2J1ZmZMb2cpIHtcclxuICB2YXIgYnVmZkxvZyA9IF9idWZmTG9nO1xyXG4gIGlmICghYnVmZkxvZykge2J1ZmZMb2cgPSAnJzt9XHJcbiAgdmFyIHRpbWVTdGFtcCA9IGZvcm1hdERhdGVUaW1lKG5ldyBEYXRlKCkpO1xyXG4gIHZhciBidWZmc0F0dGVtcHRlZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWlja2J1ZmYtcmVwb3J0JylcclxuICAgIC5pbm5lckhUTUwuc3BsaXQoJzxwPicpO1xyXG4gIHZhciBidWZmc05vdENhc3RSRSA9IG5ldyBSZWdFeHAoJ1RoZSBza2lsbCAoW1xcXFx3IF0qKSBvZiBjdXJyZW50IG9yJyArXHJcbiAgICAnIGhpZ2hlciBsZXZlbCBpcyBjdXJyZW50bHkgYWN0aXZlIG9uIFxcJyhcXFxcdyopXFwnJyk7XHJcbiAgdmFyIGJ1ZmZzQ2FzdFJFID0gbmV3IFJlZ0V4cCgnU2tpbGwgKFtcXFxcdyBdKikgbGV2ZWwgKFxcXFxkKikgd2FzICcgK1xyXG4gICAgJ2FjdGl2YXRlZCBvbiBcXCcoXFxcXHcqKVxcJycpO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZnNBdHRlbXB0ZWQubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgIHZhciBidWZmQ2FzdCA9IGJ1ZmZzQ2FzdFJFLmV4ZWMoYnVmZnNBdHRlbXB0ZWRbaV0pO1xyXG4gICAgdmFyIGJ1ZmZOb3RDYXN0ID0gYnVmZnNOb3RDYXN0UkUuZXhlYyhidWZmc0F0dGVtcHRlZFtpXSk7XHJcbiAgICBidWZmTG9nID0gc3VjY2Vzc2Z1bGwodGltZVN0YW1wLCBidWZmQ2FzdCwgYnVmZkxvZyk7XHJcbiAgICBidWZmTG9nID0gcmVqZWN0ZWQodGltZVN0YW1wLCBidWZmTm90Q2FzdCwgYnVmZkxvZyk7XHJcbiAgfVxyXG4gIHNldEZvcmFnZSgnZnNoX2J1ZmZMb2cnLCBidWZmTG9nKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlQnVmZkxvZygpIHtcclxuICBpZiAoIWdldFZhbHVlKCdrZWVwQnVmZkxvZycpKSB7cmV0dXJuO31cclxuICBnZXRGb3JhZ2UoJ2ZzaF9idWZmTG9nJykuZG9uZShidWZmUmVzdWx0KTtcclxufVxyXG4iLCJpbXBvcnQge2ZpbmROb2RlfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCBpbmplY3RBZHZpc29yIGZyb20gJy4uL2d1aWxkQWR2aXNvcic7XHJcbmltcG9ydCB7aW5qZWN0UXVlc3RCb29rRnVsbH0gZnJvbSAnLi4vcXVlc3RCb29rJztcclxuaW1wb3J0IGludmVudGluZyBmcm9tICcuLi9yZWNpcGVzJztcclxuaW1wb3J0IHtzY3JlZW52aWV3fSBmcm9tICcuLi9zdXBwb3J0L2ZzaEdhJztcclxuaW1wb3J0IHVwZGF0ZUJ1ZmZMb2cgZnJvbSAnLi4vYnVmZkxvZy91cGRhdGVCdWZmTG9nJztcclxuXHJcbnZhciB1bmtub3duID0gW1xyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2tidWZmLXJlcG9ydCcpO1xyXG4gICAgfSxcclxuICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHNjcmVlbnZpZXcoJ3Vua25vd24uYnVmZkxvZy51cGRhdGVCdWZmTG9nJyk7XHJcbiAgICAgIHVwZGF0ZUJ1ZmZMb2coKTtcclxuICAgIH1cclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBmaW5kTm9kZSgnLy90ZFsuPVwiUXVlc3QgTmFtZVwiXScpO1xyXG4gICAgfSxcclxuICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHNjcmVlbnZpZXcoJ3Vua25vd24ucXVlc3RCb29rLmluamVjdFF1ZXN0Qm9va0Z1bGwnKTtcclxuICAgICAgaW5qZWN0UXVlc3RCb29rRnVsbCgpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIGZpbmROb2RlKCcvL2ZvbnRbQHNpemU9MiBhbmQgLj1cIkFkdmlzb3JcIl0nKSAmJlxyXG4gICAgICAgIGZpbmROb2RlKCcvL2FbQGhyZWY9XCJpbmRleC5waHA/Y21kPWd1aWxkJmFtcDtzdWJjbWQ9bWFuYWdlXCIgJyArXHJcbiAgICAgICAgICAnYW5kIC49XCJCYWNrIHRvIEd1aWxkIE1hbmFnZW1lbnRcIl0nKTtcclxuICAgIH0sXHJcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBzY3JlZW52aWV3KCd1bmtub3duLmd1aWxkQWR2aXNvci5pbmplY3RBZHZpc29yJyk7XHJcbiAgICAgIGluamVjdEFkdmlzb3IoKTtcclxuICAgIH1cclxuICB9LFxyXG4gIC8vIHtcclxuICAvLyAgIGNvbmRpdGlvbjogZnVuY3Rpb24oKSB7XHJcbiAgLy8gICAgIHJldHVybiBmaW5kTm9kZSgnLy9hWy49XCJCYWNrIHRvIFNjYXZlbmdpbmdcIl0nKTtcclxuICAvLyAgIH0sXHJcbiAgLy8gICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xyXG4gIC8vICAgICBzY3JlZW52aWV3KCd1bmtub3duLnNjYXZlbmdpbmcuaW5qZWN0U2NhdmVuZ2luZycpO1xyXG4gIC8vICAgICBGU0guc2NhdmVuZ2luZy5pbmplY3RTY2F2ZW5naW5nKCk7IC8vIElzIHRoaXMgdXNlZD8/P1xyXG4gIC8vICAgfVxyXG4gIC8vIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuICQoJyNwQ0MgaW1nW3RpdGxlPVwiSW52ZW50aW5nXCJdJykubGVuZ3RoID4gMDtcclxuICAgIH0sXHJcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBzY3JlZW52aWV3KCd1bmtub3duLnJlY2lwZXMuaW52ZW50aW5nJyk7XHJcbiAgICAgIGludmVudGluZygpO1xyXG4gICAgfVxyXG4gIC8vI2lmIF9ERVYgIC8vICBGZWxsIHRocm91Z2ghXHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKCkge3JldHVybiB0cnVlO30sXHJcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge2NvbnNvbGUubG9nKCdGZWxsIHRocm91Z2ghJyk7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcclxuICAvLyNlbmRpZlxyXG4gIH1cclxuXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVua25vd25QYWdlKCkgeyAvLyBMZWdhY3lcclxuICBpZiAodHlwZW9mIHdpbmRvdy5qUXVlcnkgPT09ICd1bmRlZmluZWQnKSB7cmV0dXJuO31cclxuICAvLyNpZiBfREVWICAvLyAgdW5rbm93blBhZ2VcclxuICBjb25zb2xlLmxvZygndW5rbm93blBhZ2UnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXHJcbiAgLy8jZW5kaWZcclxuICB1bmtub3duLnNvbWUoZnVuY3Rpb24oZWwpIHtcclxuICAgIGlmIChlbC5jb25kaXRpb24oKSkge1xyXG4gICAgICBlbC5yZXN1bHQoKTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHtwQ0N9IGZyb20gJy4uL3N1cHBvcnQvbGF5b3V0JztcclxuaW1wb3J0IHtzaW1wbGVDaGVja2JveH0gZnJvbSAnLi4vc2V0dGluZ3Mvc2V0dGluZ3NQYWdlJztcclxuaW1wb3J0IHtcclxuICBmYWxsYmFjayxcclxuICBnZXRWYWx1ZSxcclxuICBwYXJzZURhdGVBc1RpbWVzdGFtcCxcclxuICBzZXRWYWx1ZVxyXG59IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbnZhciB3YXJlaG91c2UgPSBbXTtcclxudmFyIGNvbGxhcHNlTmV3c0FyY2hpdmU7XHJcbnZhciBsYXN0TGFkZGVyUmVzZXQ7XHJcblxyXG5mdW5jdGlvbiBjb2xsYXBzZUFydChhcnRpY2xlKSB7XHJcbiAgYXJ0aWNsZS5yb3dzLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcclxuICAgIGVsLnJvdy5jbGFzc0xpc3QuYWRkKCdmc2hIaWRlJyk7XHJcbiAgfSk7XHJcbiAgYXJ0aWNsZS5vcGVuID0gZmFsc2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbGxhcHNlQWxsKCkge1xyXG4gIHdhcmVob3VzZS5mb3JFYWNoKGZ1bmN0aW9uKGFydGljbGUpIHtcclxuICAgIGlmIChhcnRpY2xlLm9wZW4pIHtjb2xsYXBzZUFydChhcnRpY2xlKTt9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV4cGFuZEFydChhcnRpY2xlKSB7XHJcbiAgYXJ0aWNsZS5yb3dzLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcclxuICAgIGVsLnJvdy5jbGFzc0xpc3QucmVtb3ZlKCdmc2hIaWRlJyk7XHJcbiAgfSk7XHJcbiAgYXJ0aWNsZS5vcGVuID0gdHJ1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gZXhwYW5kQWxsKCkge1xyXG4gIHdhcmVob3VzZS5mb3JFYWNoKGZ1bmN0aW9uKGFydGljbGUpIHtcclxuICAgIGlmICghYXJ0aWNsZS5vcGVuKSB7ZXhwYW5kQXJ0KGFydGljbGUpO31cclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNIZWFkZXIoZWwpIHtcclxuICBpZiAoZWwucm93SW5kZXggJSA2ID09PSAwKSB7cmV0dXJuIGVsO31cclxufVxyXG5cclxuZnVuY3Rpb24gY2xvc2VzdFRyKGVsKSB7XHJcbiAgaWYgKGVsLnRhZ05hbWUgPT09ICdUUicpIHtcclxuICAgIHJldHVybiBpc0hlYWRlcihlbCk7XHJcbiAgfVxyXG4gIGlmIChlbC50YWdOYW1lID09PSAnVEFCTEUnKSB7cmV0dXJuO31cclxuICByZXR1cm4gY2xvc2VzdFRyKGVsLnBhcmVudE5vZGUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBldnRFbmFibGVkKGV2dCkge1xyXG4gIHZhciBteVJvdyA9IGNsb3Nlc3RUcihldnQudGFyZ2V0KTtcclxuICBpZiAoIW15Um93KSB7cmV0dXJuO31cclxuICB2YXIgYXJ0aWNsZU5vID0gbXlSb3cucm93SW5kZXggLyA2O1xyXG4gIHZhciBhcnRpY2xlID0gd2FyZWhvdXNlW2FydGljbGVOb107XHJcbiAgaWYgKGFydGljbGUub3BlbiA9PT0gZmFsc2UpIHtcclxuICAgIGNvbGxhcHNlQWxsKCk7XHJcbiAgICBleHBhbmRBcnQoYXJ0aWNsZSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbGxhcHNlQXJ0KGFydGljbGUpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZXZ0SGRsKGV2dCkge1xyXG4gIGlmIChjb2xsYXBzZU5ld3NBcmNoaXZlKSB7ZXZ0RW5hYmxlZChldnQpO31cclxufVxyXG5cclxuZnVuY3Rpb24gbWFrZUhlYWRlckNsaWNrYWJsZShyb3cpIHtcclxuICBpZiAoY29sbGFwc2VOZXdzQXJjaGl2ZSkge3Jvdy5jbGFzc0xpc3QuYWRkKCdmc2hQb2ludCcpO31cclxufVxyXG5cclxuZnVuY3Rpb24gY29sbGFwc2VEdXJpbmdBbmFseXNpcyhyb3csIHRoaXNBcnRpY2xlKSB7XHJcbiAgaWYgKGNvbGxhcHNlTmV3c0FyY2hpdmUpIHtcclxuICAgIHJvdy5jbGFzc0xpc3QuYWRkKCdmc2hIaWRlJyk7XHJcbiAgICB0aGlzQXJ0aWNsZS5vcGVuID0gZmFsc2U7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRoaXNBcnRpY2xlLm9wZW4gPSB0cnVlO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tGb3JQdlBMYWRkZXIocm93KSB7XHJcbiAgaWYgKHJvdy5jaGlsZHJlblsxXS5jaGlsZHJlblswXS50ZXh0Q29udGVudCA9PT0gJ1B2UCBMYWRkZXInKSB7XHJcbiAgICB2YXIgbG9nVGltZSA9IHBhcnNlRGF0ZUFzVGltZXN0YW1wKFxyXG4gICAgICByb3cuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMl0udGV4dENvbnRlbnQucmVwbGFjZSgnUG9zdGVkOiAnLCAnJykpO1xyXG4gICAgaWYgKGxvZ1RpbWUgPiBsYXN0TGFkZGVyUmVzZXQpIHtcclxuICAgICAgc2V0VmFsdWUoJ2xhc3RMYWRkZXJSZXNldCcsIGxvZ1RpbWUpO1xyXG4gICAgICBsYXN0TGFkZGVyUmVzZXQgPSBsb2dUaW1lO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdGVzdFJvd1R5cGUocm93LCByb3dUeXBlLCB0aGlzQXJ0aWNsZSkge1xyXG4gIGlmIChyb3dUeXBlID09PSAwKSB7XHJcbiAgICB0aGlzQXJ0aWNsZS5oZWFkZXIgPSByb3c7XHJcbiAgICBtYWtlSGVhZGVyQ2xpY2thYmxlKHJvdyk7XHJcbiAgICBjaGVja0ZvclB2UExhZGRlcihyb3cpO1xyXG4gIH1cclxuICBpZiAocm93VHlwZSA+IDEpIHtcclxuICAgIHRoaXNBcnRpY2xlLnJvd3Nbcm93VHlwZV0gPVxyXG4gICAgICBmYWxsYmFjayh0aGlzQXJ0aWNsZVtyb3dUeXBlXSwge30pO1xyXG4gICAgdGhpc0FydGljbGUucm93c1tyb3dUeXBlXS5yb3cgPSByb3c7XHJcbiAgICBjb2xsYXBzZUR1cmluZ0FuYWx5c2lzKHJvdywgdGhpc0FydGljbGUpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZG9UYWdnaW5nKHJvdykge1xyXG4gIHZhciByb3dUeXBlID0gcm93LnJvd0luZGV4ICUgNjtcclxuICB2YXIgYXJ0aWNsZU5vID0gKHJvdy5yb3dJbmRleCAtIHJvd1R5cGUpIC8gNjtcclxuICB3YXJlaG91c2VbYXJ0aWNsZU5vXSA9IGZhbGxiYWNrKHdhcmVob3VzZVthcnRpY2xlTm9dLCB7fSk7XHJcbiAgdmFyIHRoaXNBcnRpY2xlID0gd2FyZWhvdXNlW2FydGljbGVOb107XHJcbiAgdGhpc0FydGljbGUucm93cyA9IHRoaXNBcnRpY2xlLnJvd3MgfHwgW107XHJcbiAgdGVzdFJvd1R5cGUocm93LCByb3dUeXBlLCB0aGlzQXJ0aWNsZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZUhlYWRlckNsYXNzKCkge1xyXG4gIHdhcmVob3VzZS5mb3JFYWNoKGZ1bmN0aW9uKGFydGljbGUpIHtcclxuICAgIGFydGljbGUuaGVhZGVyLmNsYXNzTGlzdC50b2dnbGUoJ2ZzaFBvaW50Jyk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZVByZWYoKSB7XHJcbiAgY29sbGFwc2VOZXdzQXJjaGl2ZSA9ICFjb2xsYXBzZU5ld3NBcmNoaXZlO1xyXG4gIHNldFZhbHVlKCdjb2xsYXBzZU5ld3NBcmNoaXZlJywgY29sbGFwc2VOZXdzQXJjaGl2ZSk7XHJcbiAgaWYgKGNvbGxhcHNlTmV3c0FyY2hpdmUpIHtjb2xsYXBzZUFsbCgpO30gZWxzZSB7ZXhwYW5kQWxsKCk7fVxyXG4gIHRvZ2dsZUhlYWRlckNsYXNzKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldHVwUHJlZihyb3dJbmplY3Rvcikge1xyXG4gIGNvbGxhcHNlTmV3c0FyY2hpdmUgPSBnZXRWYWx1ZSgnY29sbGFwc2VOZXdzQXJjaGl2ZScpO1xyXG4gIHJvd0luamVjdG9yLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJlbmQnLFxyXG4gICAgc2ltcGxlQ2hlY2tib3goJ2NvbGxhcHNlTmV3c0FyY2hpdmUnKSk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbGxhcHNlTmV3c0FyY2hpdmUnKVxyXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlUHJlZik7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZpZXdBcmNoaXZlKCkge1xyXG4gIGxhc3RMYWRkZXJSZXNldCA9IGdldFZhbHVlKCdsYXN0TGFkZGVyUmVzZXQnKTtcclxuICB2YXIgdGhlVGFibGVzID0gcENDLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0YWJsZScpO1xyXG4gIHNldHVwUHJlZih0aGVUYWJsZXNbMF0ucm93c1syXSk7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCh0aGVUYWJsZXNbMl0ucm93cywgZG9UYWdnaW5nKTtcclxuICB0aGVUYWJsZXNbMl0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldnRIZGwpO1xyXG59XHJcbiIsImltcG9ydCB7Z2V0VmFsdWV9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IHtwQ0N9IGZyb20gJy4uL3N1cHBvcnQvbGF5b3V0JztcclxuXHJcbmZ1bmN0aW9uIGhhc1RleHRFbnRyeSgpIHsgLy8galF1ZXJ5XHJcbiAgJCgnI3BDQyBmb3JtJykuZmlyc3QoKS5hdHRyKCdpZCcsICdkb2NoYXQnKTtcclxuICAkKCcjcENDIGlucHV0Jykuc2xpY2UoMCwgNykuZWFjaChmdW5jdGlvbihpLCBlKSB7XHJcbiAgICAkKGUpLmF0dHIoJ2Zvcm0nLCAnZG9jaGF0Jyk7XHJcbiAgfSk7XHJcbiAgdmFyIHRoZVRhYmxlID0gJCgnI3BDQyB0YWJsZSB0YWJsZScpLmZpcnN0KCk7XHJcbiAgdGhlVGFibGUuYXBwZW5kKCc8dHIgaWQ9XCJmc2hNYXNzXCI+PC90cj4nKTtcclxuICAkKCd0ZCcsIHRoZVRhYmxlKS5lcSgwKS5yZW1vdmUoKTtcclxuICB2YXIgYnRuTWFzcyA9ICQoJ2lucHV0W3ZhbHVlPVwiU2VuZCBBcyBNYXNzXCJdJywgdGhlVGFibGUpO1xyXG4gIGlmIChidG5NYXNzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgYnRuTWFzcy5hcHBlbmRUbygnI2ZzaE1hc3MnLCB0aGVUYWJsZSk7XHJcbiAgfVxyXG4gIHZhciBvdXJUZCA9ICQoJ3RkJywgdGhlVGFibGUpLmVxKDApO1xyXG4gIG91clRkLmF0dHIoJ3Jvd3NwYW4nLCAnMicpO1xyXG4gICQoJ2lucHV0Jywgb3VyVGQpLnJlcGxhY2VXaXRoKCc8dGV4dGFyZWEgaWQ9XCJmc2hUeHRcIiBuYW1lPVwibXNnXCIgY29scycgK1xyXG4gICAgJz1cIjcyXCIgcm93cz1cIjJcIiBmb3JtPVwiZG9jaGF0XCIgc3R5bGU9XCJyZXNpemU6IG5vbmVcIj48L3RleHRhcmVhPicpO1xyXG4gIHZhciBmc2hUeHQgPSAkKCcjZnNoVHh0Jywgb3VyVGQpO1xyXG4gIGZzaFR4dC5rZXlkb3duKGZ1bmN0aW9uKGUpIHtcclxuICAgIGlmIChlLmtleUNvZGUgPT09IDEzICYmIGZzaFR4dC52YWwoKSAhPT0gJycpIHtcclxuICAgICAgJCgnaW5wdXRbdmFsdWU9U2VuZF0nLCB0aGVUYWJsZSkuY2xpY2soKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRDaGF0VGV4dEFyZWEoKSB7XHJcbiAgaWYgKCFnZXRWYWx1ZSgnZW5oYW5jZUNoYXRUZXh0RW50cnknKSB8fFxyXG4gICAgICAhcENDKSB7cmV0dXJuO31cclxuICBoYXNUZXh0RW50cnkoKTtcclxufVxyXG4iLCJpbXBvcnQgY2FsZiBmcm9tICcuLi9zdXBwb3J0L2NhbGYnO1xyXG5pbXBvcnQge2NyZWF0ZVNwYW59IGZyb20gJy4uL2NvbW1vbi9jRWxlbWVudCc7XHJcbmltcG9ydCB7XHJcbiAgYWRkQ29tbWFzLFxyXG4gIGNyZWF0ZURvY3VtZW50LFxyXG4gIGdldEludEZyb21SZWdFeHAsXHJcbiAgeG1saHR0cFxyXG59IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbmZ1bmN0aW9uIHJlc3VsdChzdGF0LCBkZXNjLCBjb2xvcikge1xyXG4gIGlmIChzdGF0ICE9PSAwKSB7XHJcbiAgICByZXR1cm4gZGVzYyArICc6PHNwYW4gY2xhc3M9XCInICsgY29sb3IgKyAnXCI+JyArXHJcbiAgICAgIGFkZENvbW1hcyhzdGF0KSArICcgPC9zcGFuPic7XHJcbiAgfVxyXG4gIHJldHVybiAnJztcclxufVxyXG5cclxuZnVuY3Rpb24gcmV0cmlldmVQdlBDb21iYXRTdW1tYXJ5KHJlc3BvbnNlVGV4dCwgY2FsbGJhY2spIHsgLy8gTGVnYWN5XHJcbiAgdmFyIHdpbm5lciA9IGNhbGxiYWNrLndpbm5lcjtcclxuICB2YXIgY29sb3I7XHJcbiAgaWYgKHdpbm5lciA9PT0gMSkge1xyXG4gICAgY29sb3IgPSAnZnNoR3JlZW4nO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb2xvciA9ICdmc2hSZWQnO1xyXG4gIH1cclxuICB2YXIgeHBHYWluID0gZ2V0SW50RnJvbVJlZ0V4cChyZXNwb25zZVRleHQsXHJcbiAgICAvdmFyXFxzK3hwR2Fpbj0oLT9bMC05XSspOy9pKTtcclxuICB2YXIgZ29sZEdhaW4gPSBnZXRJbnRGcm9tUmVnRXhwKHJlc3BvbnNlVGV4dCxcclxuICAgIC92YXJcXHMrZ29sZEdhaW49KC0/WzAtOV0rKTsvaSk7XHJcbiAgdmFyIHByZXN0aWdlR2FpbiA9IGdldEludEZyb21SZWdFeHAocmVzcG9uc2VUZXh0LFxyXG4gICAgL3ZhclxccytwcmVzdGlnZUdhaW49KC0/WzAtOV0rKTsvaSk7XHJcbiAgdmFyIGdvbGRTdG9sZW4gPSBnZXRJbnRGcm9tUmVnRXhwKHJlc3BvbnNlVGV4dCxcclxuICAgIC92YXJcXHMrZ29sZFN0b2xlbj0oLT9bMC05XSspOy9pKTtcclxuICB2YXIgcHZwUmF0aW5nQ2hhbmdlID0gZ2V0SW50RnJvbVJlZ0V4cChyZXNwb25zZVRleHQsXHJcbiAgICAvdmFyXFxzK3B2cFJhdGluZ0NoYW5nZT0oLT9bMC05XSspOy9pKTtcclxuICB2YXIgb3V0cHV0ID0gJzxicj4gJztcclxuICBvdXRwdXQgKz0gcmVzdWx0KHhwR2FpbiwgJ1hQIHN0b2xlbicsIGNvbG9yKTtcclxuICBvdXRwdXQgKz0gcmVzdWx0KGdvbGRHYWluLCAnR29sZCBsb3N0JywgY29sb3IpO1xyXG4gIG91dHB1dCArPSByZXN1bHQoZ29sZFN0b2xlbiwgJ0dvbGQgc3RvbGVuJywgY29sb3IpO1xyXG4gIG91dHB1dCArPSByZXN1bHQocHJlc3RpZ2VHYWluLCAnUHJlc3RpZ2UgZ2FpbicsIGNvbG9yKTtcclxuICBvdXRwdXQgKz0gcmVzdWx0KHB2cFJhdGluZ0NoYW5nZSwgJ1B2UCBjaGFuZ2UnLCBjb2xvcik7XHJcbiAgLy8gVE9ETyBkaWQgSSBpbml0aWF0ZSB0aGUgYXR0YWNrP1xyXG4gIHZhciBzcGVjaWFscyA9IGNyZWF0ZURvY3VtZW50KHJlc3BvbnNlVGV4dClcclxuICAgIC5xdWVyeVNlbGVjdG9yQWxsKCcjc3BlY2lhbHNEaXYnKTtcclxuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHNwZWNpYWxzLCBmdW5jdGlvbihlbCkge1xyXG4gICAgaWYgKC9tZXNtZXJpemVkfGxlZWNoZWQvLnRlc3QoZWwudGV4dENvbnRlbnQpKSB7XHJcbiAgICAgIG91dHB1dCArPSAnPGJyPicgKyBlbC5pbm5lckhUTUw7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgY2FsbGJhY2sudGFyZ2V0LmlubmVySFRNTCA9IG91dHB1dDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkUHZwU3VtbWFyeShhUm93LCBtZXNzYWdlVHlwZSkgeyAvLyBMZWdhY3lcclxuICAvLyBhZGQgUHZQIGNvbWJhdCBsb2cgc3VtbWFyeVxyXG4gIGlmIChtZXNzYWdlVHlwZSA9PT0gJ0NvbWJhdCcgJiZcclxuICAgICAgYVJvdy5jZWxsc1syXSAmJlxyXG4gICAgICBjYWxmLnNob3dQdlBTdW1tYXJ5SW5Mb2cgJiZcclxuICAgICAgL2NvbWJhdF9pZD0vLnRlc3QoYVJvdy5jZWxsc1syXS5pbm5lckhUTUwpICYmXHJcbiAgICAgICEvXFwoR3VpbGQgQ29uZmxpY3RcXCkvLnRlc3QoYVJvdy5jZWxsc1syXS50ZXh0Q29udGVudCkpIHtcclxuICAgIHZhciBjb21iYXRJRCA9IC9jb21iYXRfaWQ9KFxcZCspLy5leGVjKGFSb3cuY2VsbHNbMl0uaW5uZXJIVE1MKVsxXTtcclxuICAgIHZhciBkZWZlYXQgPSAvWW91IHdlcmUgZGVmZWF0ZWQgYnkvLnRlc3QoYVJvdy5jZWxsc1syXS5pbm5lckhUTUwpO1xyXG4gICAgdmFyIF93aW5uZXIgPSAxO1xyXG4gICAgaWYgKGRlZmVhdCkge193aW5uZXIgPSAwO31cclxuICAgIHZhciBjb21iYXRTdW1tYXJ5U3BhbiA9IGNyZWF0ZVNwYW4oe3N0eWxlOiB7Y29sb3I6ICdncmF5J319KTtcclxuICAgIGFSb3cuY2VsbHNbMl0uYXBwZW5kQ2hpbGQoY29tYmF0U3VtbWFyeVNwYW4pO1xyXG4gICAgeG1saHR0cCgnaW5kZXgucGhwP2NtZD1jb21iYXQmc3ViY21kPXZpZXcmY29tYmF0X2lkPScgKyBjb21iYXRJRCxcclxuICAgICAgcmV0cmlldmVQdlBDb21iYXRTdW1tYXJ5LFxyXG4gICAgICB7XHJcbiAgICAgICAgdGFyZ2V0OiBjb21iYXRTdW1tYXJ5U3BhbixcclxuICAgICAgICB3aW5uZXI6IF93aW5uZXJcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGNhbGYgZnJvbSAnLi4vc3VwcG9ydC9jYWxmJztcclxuaW1wb3J0IHtwYXJzZURhdGVBc1RpbWVzdGFtcCwgc2V0VmFsdWV9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb2Nlc3NMYWRkZXIoYVJvdywgbWVzc2FnZVR5cGUpIHtcclxuICBpZiAobWVzc2FnZVR5cGUgPT09ICdOb3RpZmljYXRpb24nICYmXHJcbiAgICAgIGFSb3cuY2VsbHNbMl0uZmlyc3RFbGVtZW50Q2hpbGQgJiZcclxuICAgICAgYVJvdy5jZWxsc1syXS5maXJzdEVsZW1lbnRDaGlsZC50YWdOYW1lID09PSAnSU1HJyAmJlxyXG4gICAgICBhUm93LmNlbGxzWzJdLmZpcnN0RWxlbWVudENoaWxkLnNyYy5pbmRleE9mKCdwdnBfaWNvbi5naWYnKSAhPT0gLTEpIHtcclxuICAgIHZhciBsb2dUaW1lID0gcGFyc2VEYXRlQXNUaW1lc3RhbXAoYVJvdy5jZWxsc1sxXS50ZXh0Q29udGVudCk7XHJcbiAgICBpZiAobG9nVGltZSA+IGNhbGYubGFzdExhZGRlclJlc2V0KSB7XHJcbiAgICAgIHNldFZhbHVlKCdsYXN0TGFkZGVyUmVzZXQnLCBsb2dUaW1lKTtcclxuICAgICAgY2FsZi5sYXN0TGFkZGVyUmVzZXQgPSBsb2dUaW1lO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgYWRkUHZwU3VtbWFyeSBmcm9tICcuL2FkZFB2cFN1bW1hcnknO1xyXG5pbXBvcnQgYnVmZkxpc3QgZnJvbSAnLi4vc3VwcG9ydC9idWZmT2JqJztcclxuaW1wb3J0IGNhbGYgZnJvbSAnLi4vc3VwcG9ydC9jYWxmJztcclxuaW1wb3J0IGdldE1lbWJyTGlzdCBmcm9tICcuLi9hamF4L2dldE1lbWJyTGlzdCc7XHJcbmltcG9ydCBteVN0YXRzIGZyb20gJy4uL2FqYXgvbXlTdGF0cyc7XHJcbmltcG9ydCBwcm9jZXNzTGFkZGVyIGZyb20gJy4vcHJvY2Vzc0xhZGRlcic7XHJcbmltcG9ydCB7cXVpY2tCdWZmSHJlZn0gZnJvbSAnLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5pbXBvcnQge2ZhbGxiYWNrLCBmaW5kTm9kZSwgZ2V0VmFsdWV9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbnZhciBteVBsYXllciA9IHt9O1xyXG52YXIgYWRkQXR0YWNrTGlua1RvTG9nO1xyXG52YXIgbWVtYmVyTmFtZVN0cmluZztcclxudmFyIGxpc3RPZkFsbGllcztcclxudmFyIGxpc3RPZkVuZW1pZXM7XHJcbnZhciBuaWNrTGlzdDtcclxudmFyIGVuYWJsZUNoYXRQYXJzaW5nO1xyXG5cclxuZnVuY3Rpb24gcmVtb3ZlSFRNTChidWZmTmFtZSkge1xyXG4gIHJldHVybiBidWZmTmFtZS5yZXBsYWNlKC88XFwvP1tePl0rKD58JCkvZywgJycpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXBvcnRJZ25vcmUoYVJvdywgaXNHdWlsZE1hdGUsIHBsYXllck5hbWUpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIGV4dHJhUGFydCA9ICcnO1xyXG4gIHZhciBkYXRlSFRNTCA9IGFSb3cuY2VsbHNbMV0uaW5uZXJIVE1MO1xyXG4gIHZhciBkYXRlRmlyc3RQYXJ0ID0gZGF0ZUhUTUxcclxuICAgIC5zdWJzdHJpbmcoMCwgZGF0ZUhUTUwuaW5kZXhPZignPlJlcG9ydCcpICsgNyk7XHJcbiAgdmFyIGRhdGVMYXN0UGFydCA9IGRhdGVIVE1MXHJcbiAgICAuc3Vic3RyaW5nKGRhdGVIVE1MLmluZGV4T2YoJ01lc3NhZ2U8L2E+JykgKyAxMSwgZGF0ZUhUTUwubGVuZ3RoKTtcclxuICBpZiAoIWlzR3VpbGRNYXRlKSB7XHJcbiAgICBleHRyYVBhcnQgPSAnIHwgPGEgdGl0bGU9XCJBZGQgdG8gSWdub3JlIExpc3RcIiBocmVmPVwiaW5kZXgucGhwP2NtZCcgK1xyXG4gICAgICAnPWxvZyZzdWJjbWQ9ZG9hZGRpZ25vcmUmaWdub3JlX3VzZXJuYW1lPScgKyBwbGF5ZXJOYW1lICtcclxuICAgICAgJ1wiPklnbm9yZTwvYT4nO1xyXG4gIH1cclxuICBhUm93LmNlbGxzWzFdLmlubmVySFRNTCA9IGRhdGVGaXJzdFBhcnQgKyAnPC9hPicgKyBleHRyYVBhcnQgK1xyXG4gICAgZGF0ZUxhc3RQYXJ0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBidWlsZE5pY2tMaXN0KCkgey8vIE5hdGl2ZVxyXG4gIG5pY2tMaXN0ID0gYnVmZkxpc3QucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cnIpIHtcclxuICAgIHZhciByZXQgPSBwcmV2O1xyXG4gICAgdmFyIG5pY2tzID0gY3Vyci5uaWNrcy5zcGxpdCgnLCcpO1xyXG4gICAgbmlja3MuZm9yRWFjaChmdW5jdGlvbihlbCkge1xyXG4gICAgICB2YXIgbmljayA9IGVsLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgIHJldFtuaWNrXSA9IGN1cnIuaWQ7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXQ7XHJcbiAgfSwge30pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb0J1ZmZMaW5rKF9idWZmc1NlbnQsIHRhcmdldFBsYXllcklEKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBxdWlja0J1ZmYgPSAnJztcclxuICB2YXIgYnVmZnNTZW50ID0gX2J1ZmZzU2VudFswXS5yZXBsYWNlKCdgficsICcnKS5yZXBsYWNlKCd+YCcsICcnKVxyXG4gICAgLnNwbGl0KC9cXHMqLFxccyovKTtcclxuICBidWZmc1NlbnQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGVsKSB7XHJcbiAgICB2YXIgcmV0ID0gcHJldjtcclxuICAgIHZhciBuaWNrID0gZWwudG9Mb3dlckNhc2UoKTtcclxuICAgIGlmIChuaWNrTGlzdFtuaWNrXSkge1xyXG4gICAgICByZXQgKz0gbmlja0xpc3Rbbmlja10udG9TdHJpbmcoKSArICc7JztcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbiAgfSwgJycpO1xyXG4gIHJldHVybiAnIHwgPGEgJyArIHF1aWNrQnVmZkhyZWYodGFyZ2V0UGxheWVySUQsIHF1aWNrQnVmZikgK1xyXG4gICAgICAnPkJ1ZmY8L2E+PC9zcGFuPic7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEF0dGFja1BhcnQocGxheWVyTmFtZSkgeyAvLyBMZWdhY3lcclxuICBpZiAoYWRkQXR0YWNrTGlua1RvTG9nKSB7XHJcbiAgICByZXR1cm4gJyB8IDxhIGhyZWY9XCJpbmRleC5waHA/Y21kPWF0dGFja3BsYXllciZ0YXJnZXRfdXNlcm5hbWU9JyArXHJcbiAgICAgIHBsYXllck5hbWUgKyAnXCI+QXR0YWNrPC9hPic7XHJcbiAgfVxyXG4gIHJldHVybiAnJztcclxufVxyXG5cclxuZnVuY3Rpb24gaXNDaGF0KGFSb3csIGlzR3VpbGRNYXRlLCBwbGF5ZXJOYW1lKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBleHRyYVBhcnQgPSAnJztcclxuICByZXBvcnRJZ25vcmUoYVJvdywgaXNHdWlsZE1hdGUsIHBsYXllck5hbWUpO1xyXG4gIHZhciBtZXNzYWdlSFRNTCA9IGFSb3cuY2VsbHNbMl0uaW5uZXJIVE1MO1xyXG4gIHZhciBmaXJzdFBhcnQgPSBtZXNzYWdlSFRNTC5zdWJzdHJpbmcoMCwgbWVzc2FnZUhUTUwuaW5kZXhPZignPHNtYWxsPicpICsgNyk7XHJcbiAgdmFyIHRoaXJkUGFydCA9IG1lc3NhZ2VIVE1MLnN1YnN0cmluZyhtZXNzYWdlSFRNTC5pbmRleE9mKCc+UmVwbHk8L2E+JykgKyAxMCxcclxuICAgIG1lc3NhZ2VIVE1MLmluZGV4T2YoJz5CdWZmPC9hPicpICsgOSk7XHJcbiAgdmFyIHRhcmdldFBsYXllcklEID0gL3F1aWNrQnVmZlxcKChcXGQrKVxcKS8uZXhlYyh0aGlyZFBhcnQpWzFdO1xyXG4gIHRoaXJkUGFydCA9ICcgfCA8YSAnICsgcXVpY2tCdWZmSHJlZih0YXJnZXRQbGF5ZXJJRCkgK1xyXG4gICAgJz5CdWZmPC9hPjwvc3Bhbj4nO1xyXG4gIHZhciBmb3VydGhQYXJ0ID0gbWVzc2FnZUhUTUwuc3Vic3RyaW5nKG1lc3NhZ2VIVE1MXHJcbiAgICAuaW5kZXhPZignPlRyYWRlPC9hPicpICsgMTAsIG1lc3NhZ2VIVE1MLmluZGV4T2YoJzwvc21hbGw+JykpO1xyXG4gIHZhciBsYXN0UGFydCA9IG1lc3NhZ2VIVE1MLnN1YnN0cmluZyhtZXNzYWdlSFRNTC5pbmRleE9mKCc8L3NtYWxsPicpLFxyXG4gICAgbWVzc2FnZUhUTUwubGVuZ3RoKTtcclxuICBleHRyYVBhcnQgPSAnIHwgPGEgaHJlZj1cImluZGV4LnBocD9jbWQ9dHJhZGUmdGFyZ2V0X3BsYXllcj0nICsgcGxheWVyTmFtZSArXHJcbiAgICAnXCI+VHJhZGU8L2E+IHwgPGEgdGl0bGU9XCJTZWN1cmUgVHJhZGVcIiBocmVmPVwiaW5kZXgucGhwP2NtZD10cmFkZScgK1xyXG4gICAgJyZzdWJjbWQ9Y3JlYXRlc2VjdXJlJnRhcmdldF91c2VybmFtZT0nICsgcGxheWVyTmFtZSArICdcIj5TVDwvYT4nO1xyXG4gIHZhciBhdHRhY2tQYXJ0ID0gZ2V0QXR0YWNrUGFydChwbGF5ZXJOYW1lKTtcclxuICB2YXIgYnVmZnNTZW50ID0gYVJvdy5jZWxsc1syXS5pbm5lckhUTUwubWF0Y2goL2B+Lio/fmAvKTtcclxuICBpZiAoYnVmZnNTZW50KSB7XHJcbiAgICB0aGlyZFBhcnQgPSBkb0J1ZmZMaW5rKGJ1ZmZzU2VudCwgdGFyZ2V0UGxheWVySUQpO1xyXG4gIH1cclxuICB2YXIgcmVwbHlUbyA9ICcnO1xyXG4gIGlmIChlbmFibGVDaGF0UGFyc2luZykge1xyXG4gICAgcmVwbHlUbyA9IHJlbW92ZUhUTUwoZmlyc3RQYXJ0LnJlcGxhY2UoLyZuYnNwOy9nLCAnICcpKS5zdWJzdHIoMCwgMTQwKTtcclxuICB9XHJcbiAgdmFyIG1zZ1JlcGx5VG8gPSAnWyA8c3BhbiBzdHlsZT1cImN1cnNvcjpwb2ludGVyO3RleHQtJyArXHJcbiAgICAnZGVjb3JhdGlvbjp1bmRlcmxpbmVcImNsYXNzPVwiYS1yZXBseVwiIHRhcmdldF9wbGF5ZXI9XCInICsgcGxheWVyTmFtZSArXHJcbiAgICAnXCIgcmVwbHlUbz1cIicgKyByZXBseVRvICsgJy4uLlwiPlJlcGx5PC9zcGFuPic7XHJcbiAgYVJvdy5jZWxsc1syXS5pbm5lckhUTUwgPSBmaXJzdFBhcnQgKyAnPG5vYnI+JyArIG1zZ1JlcGx5VG8gK1xyXG4gICAgZXh0cmFQYXJ0ICsgdGhpcmRQYXJ0ICsgYXR0YWNrUGFydCArIGZvdXJ0aFBhcnQgK1xyXG4gICAgJzwvbm9icj4nICsgbGFzdFBhcnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvQ2hhdChtZXNzYWdlVHlwZSwgYVJvdywgaXNHdWlsZE1hdGUsIHBsYXllck5hbWUpIHsgLy8gTGVnYWN5XHJcbiAgaWYgKG1lc3NhZ2VUeXBlID09PSAnQ2hhdCcpIHtpc0NoYXQoYVJvdywgaXNHdWlsZE1hdGUsIHBsYXllck5hbWUpO31cclxufVxyXG5cclxuZnVuY3Rpb24gaXNFbmVteShwbGF5ZXJOYW1lLCBwbGF5ZXJFbGVtZW50KSB7IC8vIExlZ2FjeVxyXG4gIGlmIChsaXN0T2ZFbmVtaWVzLmluZGV4T2YocGxheWVyTmFtZSkgIT09IC0xKSB7XHJcbiAgICBwbGF5ZXJFbGVtZW50LnN0eWxlLmNvbG9yID0gJ3JlZCc7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0FsbHkocGxheWVyTmFtZSwgcGxheWVyRWxlbWVudCkgeyAvLyBMZWdhY3lcclxuICBpZiAobGlzdE9mQWxsaWVzLmluZGV4T2YocGxheWVyTmFtZSkgIT09IC0xKSB7XHJcbiAgICBwbGF5ZXJFbGVtZW50LnN0eWxlLmNvbG9yID0gJ2JsdWUnO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcGxheWVyQ29sb3IoY29sb3JQbGF5ZXJOYW1lLCBwbGF5ZXJOYW1lLCBwbGF5ZXJFbGVtZW50KSB7IC8vIExlZ2FjeVxyXG4gIGlmICghY29sb3JQbGF5ZXJOYW1lKSB7cmV0dXJuIGZhbHNlO31cclxuICBpZiAobWVtYmVyTmFtZVN0cmluZy5pbmRleE9mKHBsYXllck5hbWUpICE9PSAtMSkge1xyXG4gICAgcGxheWVyRWxlbWVudC5zdHlsZS5jb2xvciA9ICdncmVlbic7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgaXNFbmVteShwbGF5ZXJOYW1lLCBwbGF5ZXJFbGVtZW50KTtcclxuICBpc0FsbHkocGxheWVyTmFtZSwgcGxheWVyRWxlbWVudCk7XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRFeHRyYVN0dWZmKGFSb3csIHBsYXllck5hbWUsIGlzR3VpbGRNYXRlKSB7IC8vIExlZ2FjeVxyXG4gIGlmICghaXNHdWlsZE1hdGUpIHtcclxuICAgIHZhciBkYXRlRXh0cmFUZXh0ID0gJzxub2JyPjxzcGFuIHN0eWxlPVwiZm9udC1zaXplOngtc21hbGw7XCI+JyArXHJcbiAgICAgICdbIDxhIHRpdGxlPVwiQWRkIHRvIElnbm9yZSBMaXN0XCIgaHJlZj1cImluZGV4LnBocD9jbWQ9bG9nJyArXHJcbiAgICAgICcmc3ViY21kPWRvYWRkaWdub3JlJmlnbm9yZV91c2VybmFtZT0nICsgcGxheWVyTmFtZSArXHJcbiAgICAgICdcIj5JZ25vcmU8L2E+IF08L3NwYW4+PC9ub2JyPic7XHJcbiAgICBhUm93LmNlbGxzWzFdLmlubmVySFRNTCA9IGFSb3cuY2VsbHNbMV0uaW5uZXJIVE1MICsgJzxicj4nICtcclxuICAgICAgZGF0ZUV4dHJhVGV4dDtcclxuICB9XHJcbiAgdmFyIGJ1ZmZpbmdQbGF5ZXJJRFJFID0gL3BsYXllcl9pZD0oXFxkKykvO1xyXG4gIHZhciBidWZmaW5nUGxheWVySUQgPSBidWZmaW5nUGxheWVySURSRVxyXG4gICAgLmV4ZWMoYVJvdy5jZWxsc1syXS5pbm5lckhUTUwpWzFdO1xyXG4gIHZhciBidWZmaW5nUGxheWVyTmFtZSA9IGFSb3cuY2VsbHNbMl0uZmlyc3RDaGlsZC5uZXh0U2libGluZ1xyXG4gICAgLmlubmVySFRNTDtcclxuICB2YXIgZXh0cmFUZXh0ID0gJyA8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZTp4LXNtYWxsO1wiPjxub2JyPicgK1xyXG4gICAgJ1sgPHNwYW4gc3R5bGU9XCJjdXJzb3I6cG9pbnRlcjt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lXCIgJyArXHJcbiAgICAnY2xhc3M9XCJhLXJlcGx5XCIgdGFyZ2V0X3BsYXllcj1cIicgKyBidWZmaW5nUGxheWVyTmFtZSArXHJcbiAgICAnXCI+UmVwbHk8L3NwYW4+IHwgPGEgaHJlZj1cImluZGV4LnBocD9jbWQ9dHJhZGUmdGFyZ2V0X3BsYXllcj0nICtcclxuICAgIGJ1ZmZpbmdQbGF5ZXJOYW1lICsgJ1wiPlRyYWRlPC9hPiB8IDxhIHRpdGxlPVwiU2VjdXJlIFRyYWRlXCIgJyArXHJcbiAgICAnaHJlZj1cImluZGV4LnBocD9jbWQ9dHJhZGUmc3ViY21kPWNyZWF0ZXNlY3VyZSZ0YXJnZXRfdXNlcm5hbWU9JyArXHJcbiAgICBidWZmaW5nUGxheWVyTmFtZSArICdcIj5TVDwvYT4nO1xyXG4gIGV4dHJhVGV4dCArPSAnIHwgPGEgJyArIHF1aWNrQnVmZkhyZWYoYnVmZmluZ1BsYXllcklEKSArXHJcbiAgICAnPkJ1ZmY8L2E+JztcclxuICBpZiAoYWRkQXR0YWNrTGlua1RvTG9nKSB7XHJcbiAgICBleHRyYVRleHQgKz0gJyB8IDxhIGhyZWY9XCJpbmRleC5waHA/Y21kPWF0dGFja3BsYXllcicgK1xyXG4gICAgICAnJnRhcmdldF91c2VybmFtZT0nICsgYnVmZmluZ1BsYXllck5hbWUgKyAnXCI+QXR0YWNrPC9hPic7XHJcbiAgfVxyXG4gIGV4dHJhVGV4dCArPSAnIF08L25vYnI+PC9zcGFuPic7XHJcblxyXG4gIGFSb3cuY2VsbHNbMl0uaW5uZXJIVE1MICs9IGV4dHJhVGV4dDtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFzUGxheWVyTGluayhhUm93KSB7XHJcbiAgcmV0dXJuIGFSb3cuY2VsbHNbMl0uZmlyc3RDaGlsZC5uZXh0U2libGluZyAmJlxyXG4gICAgYVJvdy5jZWxsc1syXS5maXJzdENoaWxkLm5leHRTaWJsaW5nLm5vZGVOYW1lID09PSAnQScgJiZcclxuICAgIC9wbGF5ZXJfaWQvLnRlc3QoYVJvdy5jZWxsc1syXS5maXJzdENoaWxkLm5leHRTaWJsaW5nLmhyZWYpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb0V4dHJhU3R1ZmYoYVJvdywgbWVzc2FnZVR5cGUsIHBsYXllck5hbWUsIGlzR3VpbGRNYXRlKSB7XHJcbiAgaWYgKG1lc3NhZ2VUeXBlID09PSAnTm90aWZpY2F0aW9uJyAmJlxyXG4gICAgICBoYXNQbGF5ZXJMaW5rKGFSb3cpKSB7XHJcbiAgICBhZGRFeHRyYVN0dWZmKGFSb3csIHBsYXllck5hbWUsIGlzR3VpbGRNYXRlKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvTG9nV2lkZ2V0Um93KGFSb3csIG1lc3NhZ2VUeXBlKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBwbGF5ZXJFbGVtZW50O1xyXG4gIHZhciBwbGF5ZXJOYW1lO1xyXG4gIHZhciBjb2xvclBsYXllck5hbWUgPSBmYWxzZTtcclxuICBpZiAobWVzc2FnZVR5cGUgPT09ICdDaGF0Jykge1xyXG4gICAgcGxheWVyRWxlbWVudCA9IGFSb3cuY2VsbHNbMl0uZmlyc3RDaGlsZDtcclxuICAgIHBsYXllck5hbWUgPSBwbGF5ZXJFbGVtZW50LmlubmVySFRNTDtcclxuICAgIGNvbG9yUGxheWVyTmFtZSA9IHRydWU7XHJcbiAgfVxyXG4gIGlmIChmYWxsYmFjayhtZXNzYWdlVHlwZSA9PT0gJ0dlbmVyYWwnLFxyXG4gICAgbWVzc2FnZVR5cGUgPT09ICdOb3RpZmljYXRpb24nKSAmJlxyXG4gICAgICBoYXNQbGF5ZXJMaW5rKGFSb3cpKSB7XHJcbiAgICBwbGF5ZXJFbGVtZW50ID0gYVJvdy5jZWxsc1syXS5maXJzdENoaWxkLm5leHRTaWJsaW5nO1xyXG4gICAgcGxheWVyTmFtZSA9IHBsYXllckVsZW1lbnQuaW5uZXJIVE1MO1xyXG4gICAgY29sb3JQbGF5ZXJOYW1lID0gdHJ1ZTtcclxuICB9XHJcbiAgdmFyIGlzR3VpbGRNYXRlID0gcGxheWVyQ29sb3IoY29sb3JQbGF5ZXJOYW1lLCBwbGF5ZXJOYW1lLCBwbGF5ZXJFbGVtZW50KTtcclxuICBkb0NoYXQobWVzc2FnZVR5cGUsIGFSb3csIGlzR3VpbGRNYXRlLCBwbGF5ZXJOYW1lKTtcclxuICBkb0V4dHJhU3R1ZmYoYVJvdywgbWVzc2FnZVR5cGUsIHBsYXllck5hbWUsIGlzR3VpbGRNYXRlKTtcclxuICBhZGRQdnBTdW1tYXJ5KGFSb3csIG1lc3NhZ2VUeXBlKTtcclxuICBwcm9jZXNzTGFkZGVyKGFSb3csIG1lc3NhZ2VUeXBlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc0xvZ1dpZGdldFJvdyhhUm93KSB7IC8vIExlZ2FjeVxyXG4gIC8vIFZhbGlkIFR5cGVzOiBHZW5lcmFsLCBDaGF0LCBHdWlsZFxyXG4gIHZhciBtZXNzYWdlVHlwZSA9IGFSb3cuY2VsbHNbMF0uZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoJ29sZHRpdGxlJyk7XHJcbiAgaWYgKG1lc3NhZ2VUeXBlKSB7ZG9Mb2dXaWRnZXRSb3coYVJvdywgbWVzc2FnZVR5cGUpO31cclxufVxyXG5cclxuZnVuY3Rpb24gZm91bmRMb2dUYWJsZShsb2dUYWJsZSkgeyAvLyBMZWdhY3lcclxuICBtZW1iZXJOYW1lU3RyaW5nID0gT2JqZWN0LmtleXMoY2FsZi5tZW1ickxpc3QpO1xyXG4gIGxpc3RPZkFsbGllcyA9IG15UGxheWVyLl9hbGxpZXMubWFwKGZ1bmN0aW9uKG9iaikge1xyXG4gICAgcmV0dXJuIG9iai51c2VybmFtZTtcclxuICB9KTtcclxuICBsaXN0T2ZFbmVtaWVzID0gbXlQbGF5ZXIuX2VuZW1pZXMubWFwKGZ1bmN0aW9uKG9iaikge1xyXG4gICAgcmV0dXJuIG9iai51c2VybmFtZTtcclxuICB9KTtcclxuICBjYWxmLnNob3dQdlBTdW1tYXJ5SW5Mb2cgPSBnZXRWYWx1ZSgnc2hvd1B2UFN1bW1hcnlJbkxvZycpO1xyXG4gIGNhbGYubGFzdExhZGRlclJlc2V0ID0gZ2V0VmFsdWUoJ2xhc3RMYWRkZXJSZXNldCcpO1xyXG4gIGVuYWJsZUNoYXRQYXJzaW5nID0gZ2V0VmFsdWUoJ2VuYWJsZUNoYXRQYXJzaW5nJyk7XHJcbiAgdmFyIG1lc3NhZ2VIZWFkZXIgPSBsb2dUYWJsZS5yb3dzWzBdLmNlbGxzWzJdO1xyXG4gIGlmIChtZXNzYWdlSGVhZGVyKSB7XHJcbiAgICBtZXNzYWdlSGVhZGVyLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgJyZuYnNwOyZuYnNwOycgK1xyXG4gICAgICAnPHNwYW4gY2xhc3M9XCJmc2hXaGl0ZVwiPihHdWlsZCBtYXRlcyBzaG93IHVwIGluICcgK1xyXG4gICAgICAnPHNwYW4gY2xhc3M9XCJmc2hHcmVlblwiPmdyZWVuPC9zcGFuPik8L3NwYW4+Jyk7XHJcbiAgfVxyXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgbG9nVGFibGUucm93cy5sZW5ndGg7IGkgKz0gMikge1xyXG4gICAgcHJvY2Vzc0xvZ1dpZGdldFJvdyhsb2dUYWJsZS5yb3dzW2ldKTtcclxuICB9XHJcbiAgJCgnLmEtcmVwbHknKS5jbGljayhmdW5jdGlvbihldnQpIHtcclxuICAgIHdpbmRvdy5vcGVuUXVpY2tNc2dEaWFsb2coZXZ0LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ3RhcmdldF9wbGF5ZXInKSxcclxuICAgICAgJycsIGV2dC50YXJnZXQuZ2V0QXR0cmlidXRlKCdyZXBseVRvJykpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRMb2dXaWRnZXRzT2xkKCkgeyAvLyBMZWdhY3lcclxuICBidWlsZE5pY2tMaXN0KCk7XHJcbiAgYWRkQXR0YWNrTGlua1RvTG9nID0gZ2V0VmFsdWUoJ2FkZEF0dGFja0xpbmtUb0xvZycpO1xyXG4gIHZhciBsb2dUYWJsZSA9IGZpbmROb2RlKCcvL3RhYmxlW3Rib2R5L3RyL3RkL3NwYW5bY29udGFpbnMnICtcclxuICAgICcoLixcIkN1cnJlbnRseSBzaG93aW5nOlwiKV1dJyk7XHJcbiAgaWYgKGxvZ1RhYmxlKSB7Zm91bmRMb2dUYWJsZShsb2dUYWJsZSk7fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRMb2dXaWRnZXRzKCkgeyAvLyBqUXVlcnlcclxuICAkLndoZW4oXHJcbiAgICBnZXRNZW1ickxpc3QoZmFsc2UpLFxyXG4gICAgbXlTdGF0cyhmYWxzZSkuZG9uZShmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIG15UGxheWVyID0gZGF0YTtcclxuICAgIH0pXHJcbiAgKS5kb25lKGFkZExvZ1dpZGdldHNPbGQpO1xyXG59XHJcbiIsImltcG9ydCBhZGRDaGF0VGV4dEFyZWEgZnJvbSAnLi9hZGRDaGF0VGV4dEFyZWEnO1xyXG5pbXBvcnQgYWRkR3VpbGRMb2dXaWRnZXRzIGZyb20gJy4vYWRkR3VpbGRMb2dXaWRnZXRzJztcclxuaW1wb3J0IGFkZExvZ0NvbG9yaW5nIGZyb20gJy4vYWRkTG9nQ29sb3JpbmcnO1xyXG5pbXBvcnQgYWRkTG9nV2lkZ2V0cyBmcm9tICcuL2FkZExvZ1dpZGdldHMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGd1aWxkQ2hhdCgpIHtcclxuICBhZGRDaGF0VGV4dEFyZWEoKTtcclxuICBhZGRMb2dDb2xvcmluZygnQ2hhdCcsIDApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ3VpbGRMb2coKSB7XHJcbiAgYWRkTG9nQ29sb3JpbmcoJ0d1aWxkTG9nJywgMSk7XHJcbiAgYWRkR3VpbGRMb2dXaWRnZXRzKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvdXRib3goKSB7XHJcbiAgYWRkTG9nQ29sb3JpbmcoJ091dEJveCcsIDEpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGxheWVyTG9nKCkge1xyXG4gIGFkZExvZ0NvbG9yaW5nKCdQbGF5ZXJMb2cnLCAxKTtcclxuICBhZGRMb2dXaWRnZXRzKCk7XHJcbn1cclxuIiwiaW1wb3J0IHtjcmVhdGVTcGFufSBmcm9tICcuL2NvbW1vbi9jRWxlbWVudCc7XHJcbmltcG9ydCB7cENDfSBmcm9tICcuL3N1cHBvcnQvbGF5b3V0JztcclxuaW1wb3J0IHBlcmZGaWx0ZXIgZnJvbSAnLi9jb21tb24vcGVyZkZpbHRlcic7XHJcbmltcG9ydCByZXRyeUFqYXggZnJvbSAnLi9hamF4L3JldHJ5QWpheCc7XHJcbmltcG9ydCB7Z2V0VmFsdWUsIGltYWdlU2VydmVyfSBmcm9tICcuL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbmZ1bmN0aW9uIGNhbmNlbEFsbEFIKCkgeyAvLyBqUXVlcnlcclxuICB2YXIgY2FuY2VsQnV0dG9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN1bHRSb3dzJylcclxuICAgIC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhdWN0aW9uQ2FuY2VsJyk7XHJcbiAgaWYgKGNhbmNlbEJ1dHRvbnMubGVuZ3RoID09PSAwKSB7cmV0dXJuO31cclxuICB2YXIgcHJtID0gW107XHJcbiAgZm9yICh2YXIgaSA9IGNhbmNlbEJ1dHRvbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcclxuICAgIHZhciBjYW5jZWxCdXR0b24gPSBjYW5jZWxCdXR0b25zW2ldO1xyXG4gICAgdmFyIGl0ZW1JbWFnZSA9IGNhbmNlbEJ1dHRvbi5wYXJlbnROb2RlLnBhcmVudE5vZGUuZmlyc3RFbGVtZW50Q2hpbGRcclxuICAgICAgLmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgY2FuY2VsQnV0dG9uLm91dGVySFRNTCA9ICc8aW1nIHNyYz1cIicgKyBpbWFnZVNlcnZlciArXHJcbiAgICAgICcvc2tpbi9sb2FkaW5nLmdpZlwiIHdpZHRoPVwiMTRcIiBoZWlnaHQ9XCIxNFwiPic7XHJcbiAgICBwcm0ucHVzaChcclxuICAgICAgcmV0cnlBamF4KHtcclxuICAgICAgICB1cmw6ICdpbmRleC5waHA/Y21kPWF1Y3Rpb25ob3VzZSZzdWJjbWQ9Y2FuY2VsJyxcclxuICAgICAgICBkYXRhOiB7YXVjdGlvbl9pZDogL2ludl9pZD0oXFxkKykvLmV4ZWMoaXRlbUltYWdlLmRhdGFzZXQudGlwcGVkKVsxXX1cclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gICQud2hlbi5hcHBseSgkLCBwcm0pLmRvbmUoZnVuY3Rpb24oKSB7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVmcmVzaCcpLmNsaWNrKCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RBdWN0aW9uSG91c2UoKSB7XHJcbiAgaWYgKCFwQ0MpIHtyZXR1cm47fVxyXG4gIGlmIChnZXRWYWx1ZSgnYXV0b0ZpbGxNaW5CaWRQcmljZScpKSB7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXV0by1maWxsJykuY2hlY2tlZCA9IHRydWU7XHJcbiAgfVxyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3J0MCcpLmNsaWNrKCk7XHJcbiAgdmFyIGNhbmNlbEFsbCA9IGNyZWF0ZVNwYW4oe1xyXG4gICAgY2xhc3NOYW1lOiAnc21hbGxMaW5rJyxcclxuICAgIHRleHRDb250ZW50OiAnQ2FuY2VsIEFsbCdcclxuICB9KTtcclxuICB2YXIgZmlsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWxsJykucGFyZW50Tm9kZS5wYXJlbnROb2RlXHJcbiAgICAubmV4dEVsZW1lbnRTaWJsaW5nLmZpcnN0RWxlbWVudENoaWxkO1xyXG4gIGZpbGwuY2xhc3NMaXN0LmFkZCgnZnNoQ2VudGVyJyk7XHJcbiAgZmlsbC5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCAnXScpO1xyXG4gIGZpbGwuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmJlZ2luJywgY2FuY2VsQWxsKTtcclxuICBmaWxsLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsICdbJyk7XHJcbiAgY2FuY2VsQWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2FuY2VsQWxsQUgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcXVpY2tDcmVhdGUoKSB7XHJcbiAgcGVyZkZpbHRlcignYXVjdGlvbicpO1xyXG59XHJcbiIsImltcG9ydCB7Y3JlYXRlRG9jdW1lbnR9IGZyb20gJy4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5pbXBvcnQgcmV0cnlBamF4IGZyb20gJy4vYWpheC9yZXRyeUFqYXgnO1xyXG5cclxudmFyIHBsYXllckJhbmsgPSB7XHJcbiAgaGVhZFRleHQ6ICdCYW5rJyxcclxuICBhcHBMaW5rOiB0cnVlLFxyXG4gIGRlcG9Qb3M6IDIsXHJcbiAgYmFsUG9zOiAxLFxyXG4gIGRhdGE6IHtcclxuICAgIGNtZDogJ2JhbmsnLFxyXG4gICAgc3ViY21kOiAndHJhbnNhY3Rpb24nXHJcbiAgfSxcclxuICBpbml0V2l0aGRyYXc6ICcnXHJcbn07XHJcbnZhciBndWlsZEJhbmsgPSB7XHJcbiAgaGVhZFRleHQ6ICdHdWlsZCBCYW5rJyxcclxuICBhcHBMaW5rOiBmYWxzZSxcclxuICBkZXBvUG9zOiAzLFxyXG4gIGJhbFBvczogMixcclxuICBkYXRhOiB7XHJcbiAgICBjbWQ6ICdndWlsZCcsXHJcbiAgICBzdWJjbWQ6ICdiYW5rJyxcclxuICAgIHN1YmNtZDI6ICd0cmFuc2FjdGlvbidcclxuICB9LFxyXG4gIGluaXRXaXRoZHJhdzogJzEnXHJcbn07XHJcbnZhciBiYW5rU2V0dGluZ3M7XHJcblxyXG5mdW5jdGlvbiBkb0luZm9Cb3goaW5mb0JveCkgeyAvLyBqUXVlcnlcclxuICB2YXIgdGFyZ2V0ID0gJCgnI3BDQyAjaW5mby1tc2cnKTtcclxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgJCgnI3BDQycpLnByZXBlbmQoaW5mb0JveC5jbG9zZXN0KCd0YWJsZScpKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGFyZ2V0LmNsb3Nlc3QoJ3RhYmxlJykucmVwbGFjZVdpdGgoaW5mb0JveC5jbG9zZXN0KCd0YWJsZScpKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRpc2FibGVEZXBvKG8pIHsgLy8galF1ZXJ5XHJcbiAgaWYgKCQoJyNwQ0MgYicpLmVxKG8uZGVwb1BvcykudGV4dCgpID09PSAnMCcpIHtcclxuICAgICQoJyNwQ0MgaW5wdXRbdmFsdWU9XCJEZXBvc2l0XCJdJykucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZURlcG9BbW91bnQobywgZG9jKSB7IC8vIGpRdWVyeVxyXG4gIGlmIChvLmRhdGEuZGVwb3NpdF9hbW91bnQgIT09ICcxJykge1xyXG4gICAgJCgnI3BDQyAjZGVwb3NpdF9hbW91bnQnKS52YWwoJCgnI3BDQyAjZGVwb3NpdF9hbW91bnQnLCBkb2MpLnZhbCgpKTtcclxuICB9IGVsc2Uge1xyXG4gICAgJCgnI3BDQyAjZGVwb3NpdF9hbW91bnQnKS52YWwoJzEnKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRyYW5zUmVzcG9uc2UocmVzcG9uc2UpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIGRvYyA9IGNyZWF0ZURvY3VtZW50KHJlc3BvbnNlKTtcclxuICB2YXIgaW5mb0JveCA9ICQoJyNwQ0MgI2luZm8tbXNnJywgZG9jKTtcclxuICBpZiAoaW5mb0JveC5sZW5ndGggPT09IDApIHtyZXR1cm47fVxyXG4gIGRvSW5mb0JveChpbmZvQm94KTtcclxuICAkKCcjcEggI3N0YXRiYXItZ29sZCcpLnRleHQoJCgnI3BIICNzdGF0YmFyLWdvbGQnLCBkb2MpLnRleHQoKSk7XHJcbiAgJCgnI3BIICNzdGF0YmFyLWdvbGQtdG9vbHRpcC1nZW5lcmFsIGRkJykudGV4dChmdW5jdGlvbihpbmRleCkge1xyXG4gICAgcmV0dXJuICQoJyNwSCAjc3RhdGJhci1nb2xkLXRvb2x0aXAtZ2VuZXJhbCBkZCcsIGRvYykuZXEoaW5kZXgpLnRleHQoKTtcclxuICB9KTtcclxuICB2YXIgbyA9IGJhbmtTZXR0aW5ncztcclxuICAkKCcjcENDIGInKS5zbGljZShvLmJhbFBvcykudGV4dChmdW5jdGlvbihpbmRleCkge1xyXG4gICAgcmV0dXJuICQoJyNwQ0MgYicsIGRvYykuc2xpY2Uoby5iYWxQb3MpLmVxKGluZGV4KS50ZXh0KCk7XHJcbiAgfSk7XHJcbiAgZGlzYWJsZURlcG8obyk7XHJcbiAgdXBkYXRlRGVwb0Ftb3VudChvLCBkb2MpO1xyXG4gICQoJyNwQ0MgI3dpdGhkcmF3X2Ftb3VudCcpLnZhbChvLmluaXRXaXRoZHJhdyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGludmFsaWRBbW91bnQobywgYW1vdW50KSB7IC8vIGpRdWVyeVxyXG4gIHJldHVybiAkKCcjcENDIGInKS5lcShvLmRlcG9Qb3MpLnRleHQoKSA9PT0gJzAnIHx8XHJcbiAgICAhJC5pc051bWVyaWMoYW1vdW50KSB8fCBhbW91bnQgPCAxO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb0FqYXgob0RhdGEpIHtcclxuICByZXRyeUFqYXgoe3VybDogJ2luZGV4LnBocCcsIGRhdGE6IG9EYXRhfSkuZG9uZSh0cmFuc1Jlc3BvbnNlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYmFua0RlcG9zaXQoZSkgeyAvLyBqUXVlcnlcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgdmFyIG8gPSBiYW5rU2V0dGluZ3M7XHJcbiAgdmFyIGFtb3VudCA9ICQoJyNwQ0MgI2RlcG9zaXRfYW1vdW50JykudmFsKCk7XHJcbiAgaWYgKGludmFsaWRBbW91bnQobywgYW1vdW50KSkge3JldHVybjt9XHJcbiAgby5kYXRhLm1vZGUgPSAnZGVwb3NpdCc7XHJcbiAgby5kYXRhLmRlcG9zaXRfYW1vdW50ID0gYW1vdW50O1xyXG4gIGRvQWpheChvLmRhdGEpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBiYW5rV2l0aGRyYXdhbChlKSB7IC8vIGpRdWVyeVxyXG4gIGUucHJldmVudERlZmF1bHQoKTtcclxuICB2YXIgbyA9IGJhbmtTZXR0aW5ncztcclxuICB2YXIgYW1vdW50ID0gJCgnI3BDQyAjd2l0aGRyYXdfYW1vdW50JykudmFsKCk7XHJcbiAgaWYgKCEkLmlzTnVtZXJpYyhhbW91bnQpIHx8IGFtb3VudCA8IDEpIHtyZXR1cm47fVxyXG4gIG8uZGF0YS5tb2RlID0gJ3dpdGhkcmF3JztcclxuICBvLmRhdGEud2l0aGRyYXdfYW1vdW50ID0gYW1vdW50O1xyXG4gIGRvQWpheChvLmRhdGEpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsaW5rVG9HdWlsZEJhbmsobywgYmFuaykgeyAvLyBqUXVlcnlcclxuICBpZiAoby5hcHBMaW5rKSB7XHJcbiAgICBiYW5rLmVxKDApLmNsb3Nlc3QoJ3RyJykuYWZ0ZXIoJzx0cj48dGQgY29sc3Bhbj1cIjNcIiBhbGlnbj1cImNlbnRlclwiPicgK1xyXG4gICAgICAnPGEgaHJlZj1cIi9pbmRleC5waHA/Y21kPWd1aWxkJnN1YmNtZD1iYW5rXCI+R28gdG8gR3VpbGQgQmFuazwvYT4nICtcclxuICAgICAgJzwvdGQ+PC90cj4nKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhcHR1cmVCdXR0b25zKG8sIGRlcG8sIHdpdGhkcmF3KSB7IC8vIGpRdWVyeVxyXG4gIGlmICgkKCcjcENDIGInKS5lcShvLmRlcG9Qb3MpLnRleHQoKSA9PT0gJzAnKSB7IC8vIENoZWNrIERlcG9zaXRzIEF2YWlsYWJsZVxyXG4gICAgZGVwby5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBkZXBvLmNsaWNrKGJhbmtEZXBvc2l0KTtcclxuICB9XHJcbiAgd2l0aGRyYXcuY2xpY2soYmFua1dpdGhkcmF3YWwpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhcHBMaW5rKG8sIGJhbmspIHsgLy8galF1ZXJ5XHJcbiAgbGlua1RvR3VpbGRCYW5rKG8sIGJhbmspO1xyXG4gIHZhciBkZXBvID0gJCgnI3BDQyBpbnB1dFt2YWx1ZT1cIkRlcG9zaXRcIl0nKTtcclxuICBpZiAoZGVwby5sZW5ndGggIT09IDEpIHtyZXR1cm47fVxyXG4gIHZhciB3aXRoZHJhdyA9ICQoJyNwQ0MgaW5wdXRbdmFsdWU9XCJXaXRoZHJhd1wiXScpO1xyXG4gIGlmICh3aXRoZHJhdy5sZW5ndGggIT09IDEpIHtyZXR1cm47fVxyXG4gIGNhcHR1cmVCdXR0b25zKG8sIGRlcG8sIHdpdGhkcmF3KTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWpheGlmeUJhbmsoKSB7IC8vIGpRdWVyeVxyXG4gIHZhciBvID0gYmFua1NldHRpbmdzO1xyXG4gIHZhciBiYW5rID0gJCgnI3BDQyBiJyk7XHJcbiAgaWYgKGJhbmsubGVuZ3RoICE9PSAwICYmIGJhbmsuZXEoMCkudGV4dCgpID09PSBvLmhlYWRUZXh0KSB7XHJcbiAgICBhcHBMaW5rKG8sIGJhbmspO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdEd1aWxkQmFuaygpIHtcclxuICBiYW5rU2V0dGluZ3MgPSBndWlsZEJhbms7XHJcbiAgYWpheGlmeUJhbmsoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdEJhbmsoKSB7XHJcbiAgYmFua1NldHRpbmdzID0gcGxheWVyQmFuaztcclxuICBhamF4aWZ5QmFuaygpO1xyXG59XHJcbiIsImltcG9ydCBjYWxmIGZyb20gJy4vc3VwcG9ydC9jYWxmJztcclxuaW1wb3J0IGdldEdyb3VwU3RhdHMgZnJvbSAnLi9hamF4L2dldEdyb3VwU3RhdHMnO1xyXG5pbXBvcnQgZ2V0TWVtYnJMaXN0IGZyb20gJy4vYWpheC9nZXRNZW1ickxpc3QnO1xyXG5pbXBvcnQgZ2V0TWVyY1N0YXRzIGZyb20gJy4vYWpheC9nZXRNZXJjU3RhdHMnO1xyXG5pbXBvcnQgZ3JvdXBWaWV3U3RhdHMgZnJvbSAnLi9hamF4L2dyb3VwVmlld1N0YXRzJztcclxuaW1wb3J0IHttb250aHN9IGZyb20gJy4vc3VwcG9ydC9kYXRhT2JqJztcclxuaW1wb3J0IHJldHJ5QWpheCBmcm9tICcuL2FqYXgvcmV0cnlBamF4JztcclxuaW1wb3J0IHtcclxuICBhZGRDb21tYXMsXHJcbiAgZmluZE5vZGUsXHJcbiAgZmluZE5vZGVzLFxyXG4gIGdldFZhbHVlLFxyXG4gIHNlcnZlclxyXG59IGZyb20gJy4vc3VwcG9ydC9zeXN0ZW0nO1xyXG5pbXBvcnQge2RvQnVmZkxpbmtzLCBvbmxpbmVEb3R9IGZyb20gJy4vc3VwcG9ydC9sYXlvdXQnO1xyXG5pbXBvcnQge3RpbWUsIHRpbWVFbmR9IGZyb20gJy4vc3VwcG9ydC9kZWJ1Zyc7XHJcblxyXG52YXIgbWF4R3JvdXBTaXplVG9Kb2luO1xyXG52YXIgZ3JvdXBTdGF0cztcclxuXHJcbmZ1bmN0aW9uIHBhcnNlTWVyY1N0YXRzKG1lcmNTdGF0cykge1xyXG4gIGdyb3VwU3RhdHMuYXR0YWNrRWxlbWVudC5pbm5lckhUTUwgPSAnPHNwYW4gY2xhc3M9XCJmc2hCbHVlXCI+JyArXHJcbiAgICBhZGRDb21tYXMoZ3JvdXBTdGF0cy5hdHRhY2spICsgJzwvc3Bhbj4nICtcclxuICAgICcgKCAnICsgYWRkQ29tbWFzKGdyb3VwU3RhdHMuYXR0YWNrIC0gbWVyY1N0YXRzLmF0dGFjaykgKyAnICknO1xyXG4gIGdyb3VwU3RhdHMuZGVmZW5zZUVsZW1lbnQuaW5uZXJIVE1MID0gJzxzcGFuIGNsYXNzPVwiZnNoQmx1ZVwiPicgK1xyXG4gICAgYWRkQ29tbWFzKGdyb3VwU3RhdHMuZGVmZW5zZSkgKyAnPC9zcGFuPicgK1xyXG4gICAgJyAoICcgKyBhZGRDb21tYXMoZ3JvdXBTdGF0cy5kZWZlbnNlIC0gbWVyY1N0YXRzLmRlZmVuc2UpICsgJyApJztcclxuICBncm91cFN0YXRzLmFybW9yRWxlbWVudC5pbm5lckhUTUwgPSAnPHNwYW4gY2xhc3M9XCJmc2hCbHVlXCI+JyArXHJcbiAgICBhZGRDb21tYXMoZ3JvdXBTdGF0cy5hcm1vcikgKyAnPC9zcGFuPicgK1xyXG4gICAgJyAoICcgKyBhZGRDb21tYXMoZ3JvdXBTdGF0cy5hcm1vciAtIG1lcmNTdGF0cy5hcm1vcikgKyAnICknO1xyXG4gIGdyb3VwU3RhdHMuZGFtYWdlRWxlbWVudC5pbm5lckhUTUwgPSAnPHNwYW4gY2xhc3M9XCJmc2hCbHVlXCI+JyArXHJcbiAgICBhZGRDb21tYXMoZ3JvdXBTdGF0cy5kYW1hZ2UpICsgJzwvc3Bhbj4nICtcclxuICAgICcgKCAnICsgYWRkQ29tbWFzKGdyb3VwU3RhdHMuZGFtYWdlIC0gbWVyY1N0YXRzLmRhbWFnZSkgKyAnICknO1xyXG4gIGdyb3VwU3RhdHMuaHBFbGVtZW50LmlubmVySFRNTCA9ICc8c3BhbiBjbGFzcz1cImZzaEJsdWVcIj4nICtcclxuICAgIGFkZENvbW1hcyhncm91cFN0YXRzLmhwKSArICc8L3NwYW4+JyArXHJcbiAgICAnICggJyArIGFkZENvbW1hcyhncm91cFN0YXRzLmhwIC0gbWVyY1N0YXRzLmhwKSArICcgKSc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RHcm91cFN0YXRzKCkgeyAvLyBqUXVlcnlcclxuICBncm91cFN0YXRzID0gZ3JvdXBWaWV3U3RhdHMoZG9jdW1lbnQpO1xyXG4gIGdldE1lcmNTdGF0cygpLmRvbmUocGFyc2VNZXJjU3RhdHMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkaXNwbGF5TWluR3JvdXBMZXZlbCgpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIG1pbkdyb3VwTGV2ZWwgPSBnZXRWYWx1ZSgnbWluR3JvdXBMZXZlbCcpO1xyXG4gIGlmIChtaW5Hcm91cExldmVsKSB7XHJcbiAgICAkKCcjcENDID4gdGFibGUgPiB0Ym9keSA+IHRyID4gdGQgPiB0YWJsZSB0ZCcpLmZpcnN0KClcclxuICAgICAgLmFwcGVuZCgnPHNwYW4gc3R5bGU9XCJjb2xvcjpibHVlXCI+ICcgK1xyXG4gICAgICAnQ3VycmVudCBNaW4gTGV2ZWwgU2V0dGluZzogJyArIG1pbkdyb3VwTGV2ZWwgKyAnPC9zcGFuPicpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZmlsdGVyTWVyY3MoZSkge3JldHVybiBlLnNlYXJjaCgnIzAwMDA5OScpID09PSAtMTt9XHJcblxyXG5mdW5jdGlvbiBqb2luR3JvdXAoZ3JvdXBKb2luVVJMLCBqb2luQnV0dG9uKSB7IC8vIGpRdWVyeVxyXG4gIHJldHVybiByZXRyeUFqYXgoZ3JvdXBKb2luVVJMKS5kb25lKGZ1bmN0aW9uKCkge1xyXG4gICAgam9pbkJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdmc2hIaWRlJyk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvSm9pblVuZGVyU2l6ZShwcmV2LCBqb2luQnV0dG9uKSB7IC8vIExlZ2FjeVxyXG4gIHZhciBtZW1MaXN0ID0gam9pbkJ1dHRvbi5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZVxyXG4gICAgLnByZXZpb3VzU2libGluZy5wcmV2aW91c1NpYmxpbmcucHJldmlvdXNTaWJsaW5nLnByZXZpb3VzU2libGluZztcclxuICB2YXIgbWVtTGlzdEFycmF5V2l0aE1lcmNzID0gbWVtTGlzdC5pbm5lckhUTUwuc3BsaXQoJywnKTtcclxuICB2YXIgbWVtTGlzdEFycmF5V2l0aG91dE1lcmNzID0gbWVtTGlzdEFycmF5V2l0aE1lcmNzXHJcbiAgICAuZmlsdGVyKGZpbHRlck1lcmNzKTtcclxuICBpZiAobWVtTGlzdEFycmF5V2l0aG91dE1lcmNzLmxlbmd0aCA8IG1heEdyb3VwU2l6ZVRvSm9pbikge1xyXG4gICAgdmFyIGdyb3VwSUQgPSAvamF2YXNjcmlwdDpjb25maXJtSm9pblxcKChcXGQrKVxcKS8uZXhlYyhcclxuICAgICAgam9pbkJ1dHRvbi5wYXJlbnROb2RlLmhyZWYpWzFdO1xyXG4gICAgdmFyIGdyb3VwSm9pblVSTCA9ICdpbmRleC5waHA/Y21kPWd1aWxkJnN1YmNtZD1ncm91cHMmc3ViY21kMj1qb2luJyArXHJcbiAgICAgICcmZ3JvdXBfaWQ9JyArIGdyb3VwSUQ7XHJcbiAgICBwcmV2LnB1c2goam9pbkdyb3VwKGdyb3VwSm9pblVSTCwgam9pbkJ1dHRvbikpO1xyXG4gIH1cclxuICByZXR1cm4gcHJldjtcclxufVxyXG5cclxuZnVuY3Rpb24gam9pbkFsbEdyb3Vwc1VuZGVyU2l6ZSgpIHsgLy8gTGVnYWN5XHJcbiAgdmFyIGpvaW5CdXR0b25zID0gZmluZE5vZGVzKFxyXG4gICAgJy8vaW1nW2NvbnRhaW5zKEBzcmMsXCJza2luL2ljb25fYWN0aW9uX2pvaW4uZ2lmXCIpXScpO1xyXG4gIGlmICgham9pbkJ1dHRvbnMpIHtyZXR1cm47fVxyXG4gIHZhciBwcm0gPSBqb2luQnV0dG9ucy5yZWR1Y2UoZG9Kb2luVW5kZXJTaXplLCBbXSk7XHJcbiAgJC53aGVuLmFwcGx5KCQsIHBybSkuZG9uZShmdW5jdGlvbigpIHtcclxuICAgIGxvY2F0aW9uLmhyZWYgPSAnaW5kZXgucGhwP2NtZD1ndWlsZCZzdWJjbWQ9Z3JvdXBzJztcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VHcm91cERhdGEobGlua0VsZW1lbnQsIG9iaikge1xyXG4gIHZhciBleHRyYVRleHQgPSAnPHRhYmxlIGNsYXNzPVwiZnNoZ3Jwc3RhdFwiPicgK1xyXG4gICAgJzx0cj4nICtcclxuICAgICc8dGQgY2xhc3M9XCJmc2hCcm93blwiPkF0dGFjazwvdGQ+JyArXHJcbiAgICAnPHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4nICsgb2JqLmF0dGFjayArICc8L3RkPicgK1xyXG4gICAgJzx0ZCBjbGFzcz1cImZzaEJyb3duXCI+RGVmZW5zZTwvdGQ+JyArXHJcbiAgICAnPHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4nICsgb2JqLmRlZmVuc2UgKyAnPC90ZD4nICtcclxuICAgICc8L3RyPjx0cj4nICtcclxuICAgICc8dGQgY2xhc3M9XCJmc2hCcm93blwiPkFybW9yPC90ZD4nICtcclxuICAgICc8dGQgY2xhc3M9XCJmc2hSaWdodFwiPicgKyBvYmouYXJtb3IgKyAnPC90ZD4nICtcclxuICAgICc8dGQgY2xhc3M9XCJmc2hCcm93blwiPkRhbWFnZTwvdGQ+JyArXHJcbiAgICAnPHRkIGNsYXNzPVwiZnNoUmlnaHRcIj4nICsgb2JqLmRhbWFnZSArICc8L3RkPicgK1xyXG4gICAgJzwvdHI+PHRyPicgK1xyXG4gICAgJzx0ZCBjbGFzcz1cImZzaEJyb3duXCI+SFA8L3RkPicgK1xyXG4gICAgJzx0ZCBjbGFzcz1cImZzaFJpZ2h0XCI+JyArIG9iai5ocCArICc8L3RkPicgK1xyXG4gICAgJzx0ZCBjb2xzcGFuPVwiMlwiPjwvdGQ+JyArXHJcbiAgICAnPC90cj48L3RhYmxlPic7XHJcbiAgdmFyIGV4cGlyZXNMb2NhdGlvbiA9IGxpbmtFbGVtZW50LnBhcmVudE5vZGUucGFyZW50Tm9kZVxyXG4gICAgLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XHJcbiAgZXhwaXJlc0xvY2F0aW9uLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgZXh0cmFUZXh0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZmV0Y2hHcm91cERhdGEoZXZ0KSB7XHJcbiAgZXZ0LnRhcmdldC5jbGFzc0xpc3QuYWRkKCdmc2hIaWRlJyk7XHJcbiAgdmFyIGFsbEl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3BDQyBhW2hyZWYqPVwiPXZpZXdzdGF0cyZcIl0nKTtcclxuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGFsbEl0ZW1zLCBmdW5jdGlvbihhTGluaykge1xyXG4gICAgZ2V0R3JvdXBTdGF0cyhhTGluay5ocmVmKS5kb25lKHBhcnNlR3JvdXBEYXRhLmJpbmQobnVsbCwgYUxpbmspKTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ3JvdXBCdXR0b25zKCkgeyAvLyBMZWdhY3lcclxuICB2YXIgYnV0dG9uRWxlbWVudCA9IGZpbmROb2RlKCcvL3RkW2lucHV0W0B2YWx1ZT1cIkpvaW4gQWxsICcgK1xyXG4gICAgJ0F2YWlsYWJsZSBHcm91cHNcIl1dJyk7XHJcbiAgdmFyIGVuYWJsZU1heEdyb3VwU2l6ZVRvSm9pbiA9XHJcbiAgICBnZXRWYWx1ZSgnZW5hYmxlTWF4R3JvdXBTaXplVG9Kb2luJyk7XHJcbiAgaWYgKGVuYWJsZU1heEdyb3VwU2l6ZVRvSm9pbikge1xyXG4gICAgbWF4R3JvdXBTaXplVG9Kb2luID0gZ2V0VmFsdWUoJ21heEdyb3VwU2l6ZVRvSm9pbicpO1xyXG4gICAgdmFyIGpvaW5BbGxJbnB1dCA9IGJ1dHRvbkVsZW1lbnQuZmlyc3RDaGlsZC5uZXh0U2libGluZy5uZXh0U2libGluZztcclxuICAgIGpvaW5BbGxJbnB1dC5jbGFzc0xpc3QuYWRkKCdmc2hIaWRlJyk7XHJcbiAgICBidXR0b25FbGVtZW50LmlubmVySFRNTCArPSAnJm5ic3A7PGlucHV0IGlkPVwiam9pbmFsbGdyb3Vwc3VuZGVyJyArXHJcbiAgICAgICdzaXplXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiSm9pbiBBbGwgR3JvdXBzIDwgJyArXHJcbiAgICAgIG1heEdyb3VwU2l6ZVRvSm9pbiArICcgTWVtYmVyc1wiIGNsYXNzPVwiY3VzdG9tYnV0dG9uXCI+Jm5ic3A7JyArXHJcbiAgICAgICc8aW5wdXQgaWQ9XCJmZXRjaGdyb3Vwc3RhdHNcIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJGZXRjaCAnICtcclxuICAgICAgJ0dyb3VwIFN0YXRzXCIgY2xhc3M9XCJjdXN0b21idXR0b25cIj4nO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pvaW5hbGxncm91cHN1bmRlcnNpemUnKVxyXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBqb2luQWxsR3JvdXBzVW5kZXJTaXplLCB0cnVlKTtcclxuICB9IGVsc2Uge1xyXG4gICAgYnV0dG9uRWxlbWVudC5pbm5lckhUTUwgKz0gJyZuYnNwOzxpbnB1dCBpZD1cImZldGNoZ3JvdXBzdGF0c1wiICcgK1xyXG4gICAgICAndHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiRmV0Y2ggR3JvdXAgU3RhdHNcIiBjbGFzcz1cImN1c3RvbWJ1dHRvblwiPic7XHJcbiAgfVxyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmZXRjaGdyb3Vwc3RhdHMnKVxyXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZmV0Y2hHcm91cERhdGEpO1xyXG5cclxuICBpZiAoY2FsZi5zdWJjbWQyID09PSAnam9pbmFsbGdyb3Vwc3VuZGVyc2l6ZScpIHtcclxuICAgIGpvaW5BbGxHcm91cHNVbmRlclNpemUoKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpeFRhYmxlKCkgeyAvLyBqUXVlcnlcclxuICAvLyBDb3dzIGRvbid0IGFkZCFcclxuICB2YXIgdGRzID0gJCgnI3BDQyB0ZC5oZWFkZXItZGFyaycpO1xyXG4gIHRkcy5lcSgwKS5hdHRyKCd3aWR0aCcsICcyMCUnKTtcclxuICB0ZHMuZXEoMSkuYXR0cignd2lkdGgnLCAnNTElJyk7XHJcbiAgdGRzLmVxKDIpLmF0dHIoJ3dpZHRoJywgJzIyJScpO1xyXG4gIHRkcy5lcSgzKS5hdHRyKCd3aWR0aCcsICc3JScpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBncm91cExvY2FsVGltZSh0aGVEYXRlQ2VsbCkgeyAvLyBqUXVlcnlcclxuICB2YXIgeFJFID0gLyhbYS16QS1aXSspLCAoXFxkKykgKFthLXpBLVpdKykgKFxcZCspOihcXGQrKTooXFxkKykgVVRDLztcclxuICB2YXIgeCA9IHhSRS5leGVjKHRoZURhdGVDZWxsLnRleHQoKSk7XHJcbiAgdmFyIG1vbnRoID0gbW9udGhzLmluZGV4T2YoeFszXSk7XHJcbiAgdmFyIGN1clllYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7IC8vIEJvdW5kYXJ5IGNvbmRpdGlvblxyXG4gIHZhciBncm91cERhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gIGdyb3VwRGF0ZS5zZXRVVENEYXRlKHhbMl0pO1xyXG4gIGdyb3VwRGF0ZS5zZXRVVENNb250aChtb250aCk7XHJcbiAgZ3JvdXBEYXRlLnNldFVUQ0Z1bGxZZWFyKGN1clllYXIpO1xyXG4gIGdyb3VwRGF0ZS5zZXRVVENIb3Vycyh4WzRdKTtcclxuICBncm91cERhdGUuc2V0VVRDTWludXRlcyh4WzVdKTtcclxuICB0aGVEYXRlQ2VsbC5hcHBlbmQoJzxicj48c3BhbiBzdHlsZT1cImNvbG9yOmJsdWU7IGZvbnQtc2l6ZTp4LXNtYWxsXCI+JyArXHJcbiAgICAnTG9jYWw6ICcgKyBncm91cERhdGUudG9TdHJpbmcoKS5zdWJzdHIoMCwgMjEpICsgJzwvc3Bhbj4nKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q3JlYXRvcihtZW1icmxpc3QsIGNyZWF0b3IpIHtcclxuICBpZiAobWVtYnJsaXN0W2NyZWF0b3JdKSB7XHJcbiAgICByZXR1cm4gb25saW5lRG90KHtsYXN0X2xvZ2luOiBtZW1icmxpc3RbY3JlYXRvcl0ubGFzdF9sb2dpbn0pICtcclxuICAgICAgJyZuYnNwOzxhIGhyZWY9XCInICsgc2VydmVyICsgJ2luZGV4LnBocD9jbWQ9cHJvZmlsZSZwbGF5ZXJfaWQ9JyArXHJcbiAgICAgIG1lbWJybGlzdFtjcmVhdG9yXS5pZCArICdcIj48Yj4nICsgY3JlYXRvciArICc8L2I+PC9hPiBbJyArXHJcbiAgICAgIG1lbWJybGlzdFtjcmVhdG9yXS5sZXZlbCArICddJztcclxuICB9XHJcbiAgcmV0dXJuICc8Yj4nICsgY3JlYXRvciArICc8L2I+JztcclxufVxyXG5cclxuZnVuY3Rpb24gbWVtYmVyTGV2ZWwobWVtYnJsaXN0LCBtZW1iZXIpIHtcclxuICBpZiAobWVtYnJsaXN0W21lbWJlcl0pIHtyZXR1cm4gbWVtYnJsaXN0W21lbWJlcl0ubGV2ZWw7fVxyXG4gIHJldHVybiAwO1xyXG59XHJcblxyXG5mdW5jdGlvbiBieU1lbWJlcihtZW1icmxpc3QsIGEsIGIpIHtcclxuICByZXR1cm4gbWVtYmVyTGV2ZWwobWVtYnJsaXN0LCBiKSAtIG1lbWJlckxldmVsKG1lbWJybGlzdCwgYSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvR3JvdXBSb3cocm93LCBtZW1icmxpc3QpIHsgLy8galF1ZXJ5XHJcbiAgdmFyIGNyZWF0b3IgPSAkKCdiJywgcm93KS50ZXh0KCk7XHJcbiAgdmFyIHRkID0gJCgndGQnLCByb3cpLmZpcnN0KCk7XHJcbiAgdGQuaHRtbChnZXRDcmVhdG9yKG1lbWJybGlzdCwgY3JlYXRvcikpO1xyXG4gIHZhciB0ZDIgPSAkKCd0ZCcsIHJvdykuZXEoMSk7XHJcbiAgdmFyIHRoZUxpc3QgPSB0ZDIuaHRtbCgpO1xyXG4gIHZhciBsaXN0QXJyID0gdGhlTGlzdC5zcGxpdCgnLCAnKTtcclxuICBpZiAobGlzdEFyci5sZW5ndGggPiAxKSB7bGlzdEFyci5zb3J0KGJ5TWVtYmVyLmJpbmQobnVsbCwgbWVtYnJsaXN0KSk7fVxyXG4gIHZhciBidWZmTGlzdCA9IGxpc3RBcnIuZmlsdGVyKGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgIHJldHVybiBuYW1lICE9PSAnW25vbmVdJyAmJiBuYW1lLmluZGV4T2YoJzxmb250JykgPT09IC0xO1xyXG4gIH0pO1xyXG4gIGlmIChidWZmTGlzdC5sZW5ndGggPiAwKSB7dGQuYXBwZW5kKGRvQnVmZkxpbmtzKGJ1ZmZMaXN0KSk7fVxyXG4gIHRkLmFwcGVuZCgnPHNwYW4gY2xhc3M9XCJmc2hYU21hbGxcIj5NZW1iZXJzOiAnICtcclxuICAgIGJ1ZmZMaXN0Lmxlbmd0aCArICc8L3NwYW4+Jyk7XHJcbiAgbGlzdEFyciA9IGxpc3RBcnIubWFwKGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgIGlmICghbWVtYnJsaXN0W25hbWVdKSB7cmV0dXJuIG5hbWU7fVxyXG4gICAgcmV0dXJuICc8YSBocmVmPVwiaW5kZXgucGhwP2NtZD1wcm9maWxlJnBsYXllcl9pZD0nICtcclxuICAgICAgbWVtYnJsaXN0W25hbWVdLmlkICsgJ1wiPicgKyBuYW1lICsgJzwvYT4nO1xyXG4gIH0pO1xyXG4gIHRkMi5odG1sKCc8c3Bhbj4nICsgbGlzdEFyci5qb2luKCcsICcpICsgJzwvc3Bhbj4nKTtcclxuICBncm91cExvY2FsVGltZSgkKCd0ZCcsIHJvdykuZXEoMikpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb0dyb3VwUGFpbnQobSkgeyAvLyBqUXVlcnlcclxuXHJcbiAgdGltZSgnZ3JvdXBzLmRvR3JvdXBQYWludCcpO1xyXG5cclxuICAkKCcjcENDIHRhYmxlIHRhYmxlIHRhYmxlIHRyJykuaGFzKCcuZ3JvdXAtYWN0aW9uLWNvbnRhaW5lcicpXHJcbiAgICAuZWFjaChmdW5jdGlvbihpLCBlKSB7XHJcbiAgICAgIGRvR3JvdXBSb3coZSwgbSk7XHJcbiAgICB9KTtcclxuXHJcbiAgdGltZUVuZCgnZ3JvdXBzLmRvR3JvdXBQYWludCcpO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdEdyb3VwcygpIHsgLy8galF1ZXJ5XHJcbiAgZ2V0TWVtYnJMaXN0KGZhbHNlKVxyXG4gICAgLmRvbmUoZG9Hcm91cFBhaW50KTtcclxuICBkaXNwbGF5TWluR3JvdXBMZXZlbCgpO1xyXG4gIGdyb3VwQnV0dG9ucygpO1xyXG4gIGZpeFRhYmxlKCk7XHJcbn1cclxuIiwidmFyIGludkl0ZW1zO1xyXG52YXIgdHlwZTtcclxudmFyIGl0ZW1JZDtcclxuXHJcbmZ1bmN0aW9uIHRpY2tFbGVtZW50KG8sIGVsKSB7XHJcbiAgZWwuY2hlY2tlZCA9ICFlbC5kaXNhYmxlZCAmJiAhZWwuY2hlY2tlZDtcclxufVxyXG5cclxudmFyIHR5cGVzID0gW1xyXG4gIHtcclxuICAgIGM6IGZ1bmN0aW9uKCkge3JldHVybiB0eXBlID09PSAnZ3VpbGQnO30sXHJcbiAgICByOiBmdW5jdGlvbihvLCBlbCkge1xyXG4gICAgICBlbC5jaGVja2VkID0gIWVsLmRpc2FibGVkICYmIGludkl0ZW1zW28uaW52aWRdLmd1aWxkX3RhZyAhPT0gJy0xJztcclxuICAgIH1cclxuICB9LFxyXG4gIHtcclxuICAgIGM6IGZ1bmN0aW9uKG8pIHtcclxuICAgICAgcmV0dXJuIHR5cGUgPT09ICdpdGVtJyAmJiBpbnZJdGVtc1tvLmludmlkXS5pdGVtX2lkID09PSBpdGVtSWQ7XHJcbiAgICB9LFxyXG4gICAgcjogdGlja0VsZW1lbnRcclxuICB9LFxyXG4gIHtcclxuICAgIGM6IGZ1bmN0aW9uKCkge3JldHVybiB0eXBlID09PSAnY2hlY2tBbGwnO30sXHJcbiAgICByOiB0aWNrRWxlbWVudFxyXG4gIH1cclxuXTtcclxuXHJcbmZ1bmN0aW9uIHRlc3RUeXBlKG8sIGVsKSB7XHJcbiAgdHlwZXMuc29tZShmdW5jdGlvbih0ZXN0KSB7XHJcbiAgICBpZiAodGVzdC5jKG8pKSB7XHJcbiAgICAgIHRlc3QucihvLCBlbCk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkb0NoZWNrYm94ZXMoaXRlbXNBcnksIGludkl0ZW1zXywgdHlwZV8sIGl0ZW1JZF8pIHtcclxuICBpbnZJdGVtcyA9IGludkl0ZW1zXztcclxuICB0eXBlID0gdHlwZV87XHJcbiAgaXRlbUlkID0gaXRlbUlkXztcclxuICBpdGVtc0FyeS5mb3JFYWNoKGZ1bmN0aW9uKG8pIHtcclxuICAgIHZhciB0ciA9IG8uaW5qZWN0SGVyZS5wYXJlbnROb2RlO1xyXG4gICAgaWYgKHRyLmNsYXNzTGlzdC5jb250YWlucygnZnNoSGlkZScpKSB7cmV0dXJuO31cclxuICAgIHZhciBlbCA9IG8uZWwucGFyZW50Tm9kZS5wYXJlbnROb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmdcclxuICAgICAgLmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgdGVzdFR5cGUobywgZWwpO1xyXG4gIH0pO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1ha2VGb2xkZXJTcGFucyhmb2xkZXJzKSB7XHJcbiAgcmV0dXJuICc8c3BhbiBjbGFzcz1cImZzaExpbmsgZm9sZGVyXCIgZGF0YS1mb2xkZXI9XCIwXCI+QWxsPC9zcGFuPicgK1xyXG4gICAgJyAmZW5zcDs8c3BhbiBjbGFzcz1cImZzaExpbmsgZm9sZGVyXCIgZGF0YS1mb2xkZXI9XCItMVwiPk1haW48L3NwYW4+JyArXHJcbiAgICBPYmplY3Qua2V5cyhmb2xkZXJzKS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwga2V5KSB7XHJcbiAgICAgIHJldHVybiBwcmV2ICsgJyAmZW5zcDs8c3BhbiBjbGFzcz1cImZzaExpbmsgZnNoTm9XcmFwIGZvbGRlclwiICcgK1xyXG4gICAgICAgICdkYXRhLWZvbGRlcj1cIicgKyBrZXkgKyAnXCI+JyArIGZvbGRlcnNba2V5XSArICc8L3NwYW4+JztcclxuICAgIH0sICcnKTtcclxufVxyXG4iLCJpbXBvcnQgY2FsZiBmcm9tICcuLi9zdXBwb3J0L2NhbGYnO1xyXG5pbXBvcnQgbWFrZUZvbGRlclNwYW5zIGZyb20gJy4uL2NvbW1vbi9tYWtlRm9sZGVyU3BhbnMnO1xyXG5pbXBvcnQge3BDQ30gZnJvbSAnLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5pbXBvcnQge2NyZWF0ZVRkLCBjcmVhdGVUcn0gZnJvbSAnLi4vY29tbW9uL2NFbGVtZW50JztcclxuXHJcbmZ1bmN0aW9uIGV4dHJhQnV0dG9ucygpIHtcclxuICB2YXIgdFJvd3MgPSBwQ0MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RhYmxlJylbMF0ucm93cztcclxuICB0Um93c1t0Um93cy5sZW5ndGggLSAyXS5jZWxsc1swXS5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLFxyXG4gICAgJzxpbnB1dCBpZD1cImZzaENoa0FsbFwiIHZhbHVlPVwiQ2hlY2sgQWxsXCIgdHlwZT1cImJ1dHRvblwiPiZuYnNwOycpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkb0ZvbGRlckJ1dHRvbnMoZm9sZGVycykge1xyXG4gIGlmIChjYWxmLnN1YmNtZDIgPT09ICdzdG9yZWl0ZW1zJykge1xyXG4gICAgdmFyIGZvcm1Ob2RlID0gcENDLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdmb3JtJylbMF07XHJcbiAgICB2YXIgdHIgPSBjcmVhdGVUcih7Y2xhc3NOYW1lOiAnZnNoQ2VudGVyJ30pO1xyXG4gICAgdmFyIGluc2VydEhlcmUgPSBjcmVhdGVUZCh7Y29sU3BhbjogM30pO1xyXG4gICAgdHIuYXBwZW5kQ2hpbGQoaW5zZXJ0SGVyZSk7XHJcbiAgICBmb3JtTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0ciwgZm9ybU5vZGUpO1xyXG4gICAgaW5zZXJ0SGVyZS5pbm5lckhUTUwgPSBtYWtlRm9sZGVyU3BhbnMoZm9sZGVycyk7XHJcbiAgICBleHRyYUJ1dHRvbnMoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGNhbGYgZnJvbSAnLi4vc3VwcG9ydC9jYWxmJztcclxuaW1wb3J0IHtwQ0N9IGZyb20gJy4uL3N1cHBvcnQvbGF5b3V0JztcclxuXHJcbnZhciBpbnNlcnRIZXJlO1xyXG5cclxuZnVuY3Rpb24gc2hvd0hpZGVMYWJlbChwcmVmKSB7XHJcbiAgaWYgKHByZWYpIHtyZXR1cm4gJ0hpZGUnO31cclxuICByZXR1cm4gJ1Nob3cnO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkb1RvZ2dsZUJ1dHRvbnMoc2hvd0V4dHJhTGlua3MsIHNob3dRdWlja0Ryb3BMaW5rcykge1xyXG4gIC8vIE9wdGlvbiB0b2dnbGUgYnV0dG9ucyBmb3IgYm90aCBzY3JlZW5zXHJcbiAgaWYgKCFpbnNlcnRIZXJlKSB7XHJcbiAgICBpbnNlcnRIZXJlID0gcENDLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdmb3JtJylbMF1cclxuICAgICAgLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgfVxyXG4gIHZhciBpbmplY3QgPSAnWzxzcGFuIGlkPVwiZnNoU2hvd0V4dHJhTGlua3NcIiBjbGFzcz1cInNlbmRMaW5rXCI+JyArXHJcbiAgICBzaG93SGlkZUxhYmVsKHNob3dFeHRyYUxpbmtzKSArXHJcbiAgICAnIEFIIGFuZCBVRlNHIGxpbmtzPC9zcGFuPl0mbmJzcDsnICtcclxuICAgICdbPHNwYW4gaWQ9XCJmc2hTaG93UXVpY2tEcm9wTGlua3NcIiBjbGFzcz1cInNlbmRMaW5rXCI+JyArXHJcbiAgICBzaG93SGlkZUxhYmVsKHNob3dRdWlja0Ryb3BMaW5rcykgK1xyXG4gICAgJyBRdWljayBEcm9wIGxpbmtzPC9zcGFuPl0mbmJzcDsnO1xyXG4gIGlmIChjYWxmLnN1YmNtZDIgPT09ICdzdG9yZWl0ZW1zJykge1xyXG4gICAgaW5qZWN0ICs9ICdbPHNwYW4gaWQ9XCJmc2hTZWxlY3RBbGxHdWlsZExvY2tlZFwiIGNsYXNzPVwic2VuZExpbmtcIj4nICtcclxuICAgICAgJyBTZWxlY3QgQWxsIEd1aWxkIExvY2tlZDwvc3Bhbj5dJm5ic3A7JztcclxuICB9XHJcbiAgaW5zZXJ0SGVyZS5pbm5lckhUTUwgPSBpbmplY3Q7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SXRlbUltZyhwQ0MpIHtcclxuICB2YXIgYWxsVGFibGVzID0gcENDLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0YWJsZScpO1xyXG4gIHZhciBsYXN0VGFibGUgPSBhbGxUYWJsZXNbYWxsVGFibGVzLmxlbmd0aCAtIDFdO1xyXG4gIHJldHVybiBsYXN0VGFibGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ltZycpO1xyXG59XHJcbiIsImltcG9ydCB0b2dnbGVGb3JjZSBmcm9tICcuLi9jb21tb24vdG9nZ2xlRm9yY2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGlkZUZvbGRlcnMoaXRlbXNBcnksIGludkl0ZW1zLCBzZWxmKSB7XHJcbiAgdmFyIGZvbGRlcklkID0gc2VsZi5kYXRhc2V0LmZvbGRlcjtcclxuICBpdGVtc0FyeS5mb3JFYWNoKGZ1bmN0aW9uKG8pIHtcclxuICAgIG8uZWwucGFyZW50Tm9kZS5wYXJlbnROb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuZmlyc3RFbGVtZW50Q2hpbGRcclxuICAgICAgLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgIHZhciB0ciA9IG8uaW5qZWN0SGVyZS5wYXJlbnROb2RlO1xyXG4gICAgdmFyIHNlcGFyYXRvciA9IHRyLm5leHRFbGVtZW50U2libGluZztcclxuICAgIGlmIChmb2xkZXJJZCA9PT0gJzAnKSB7XHJcbiAgICAgIHRyLmNsYXNzTGlzdC5yZW1vdmUoJ2ZzaEhpZGUnKTtcclxuICAgICAgc2VwYXJhdG9yLmNsYXNzTGlzdC5yZW1vdmUoJ2ZzaEhpZGUnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBmb2xkZXIgPSBpbnZJdGVtc1tvLmludmlkXS5mb2xkZXJfaWQ7XHJcbiAgICAgIHZhciBmb3JjZSA9IGZvbGRlcklkICE9PSBmb2xkZXI7XHJcbiAgICAgIHRvZ2dsZUZvcmNlKHRyLCBmb3JjZSk7XHJcbiAgICAgIHRvZ2dsZUZvcmNlKHNlcGFyYXRvciwgZm9yY2UpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcbiIsImltcG9ydCB7cENDfSBmcm9tICcuLi9zdXBwb3J0L2xheW91dCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmplY3RNb3ZlSXRlbXMoKSB7XHJcbiAgdmFyIGZsclJvdyA9IHBDQy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZm9ybScpWzBdXHJcbiAgICAubmV4dEVsZW1lbnRTaWJsaW5nLm5leHRFbGVtZW50U2libGluZy5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgdmFyIGZvbGRlcnMgPSBmbHJSb3cuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ltZycpO1xyXG4gIHZhciBmbHJFbmFibGVkO1xyXG4gIHZhciBvRmxyO1xyXG4gIHZhciBvcHRpb25zID0gJzx0cj48dGQgY2xhc3M9XCJmc2hDZW50ZXJcIj5Nb3ZlIHNlbGVjdGVkIGl0ZW1zIHRvOiAnICtcclxuICAgICc8c2VsZWN0IG5hbWU9XCJmb2xkZXJcIiBpZD1cInNlbGVjdEZvbGRlcklkXCIgY2xhc3M9XCJjdXN0b21zZWxlY3RcIj4nO1xyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZm9sZGVycywgZnVuY3Rpb24oZSkge1xyXG4gICAgdmFyIHNyYyA9IGUuZ2V0QXR0cmlidXRlKCdzcmMnKTtcclxuICAgIGlmIChzcmMuaW5kZXhPZignL2ZvbGRlcl9vbi5naWYnKSAhPT0gLTEpIHtmbHJFbmFibGVkID0gdHJ1ZTt9XHJcbiAgICBpZiAoc3JjLmluZGV4T2YoJy9mb2xkZXIuZ2lmJykgIT09IC0xKSB7XHJcbiAgICAgIG9GbHIgPSB0cnVlO1xyXG4gICAgICBvcHRpb25zICs9ICc8b3B0aW9uIHZhbHVlPScgKyBlLnBhcmVudE5vZGUuaHJlZlxyXG4gICAgICAgIC5tYXRjaCgvJmZvbGRlcl9pZD0oLSpcXGQrKS9pKVsxXSArICc+JyArXHJcbiAgICAgICAgZS5wYXJlbnROb2RlLnBhcmVudE5vZGUudGV4dENvbnRlbnQgKyAnPC9vcHRpb24+JztcclxuICAgIH1cclxuICB9KTtcclxuICBpZiAoIWZsckVuYWJsZWQgfHwgIW9GbHIpIHtyZXR1cm47fVxyXG4gIG9wdGlvbnMgKz0gJzwvc2VsZWN0PiZuYnNwOzxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJjdXN0b21idXR0b25cIiAnICtcclxuICAgICdpZD1cImZzaE1vdmVcIiB2YWx1ZT1cIk1vdmVcIj48L3RkPjwvdHI+JztcclxuICBmbHJSb3cuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmVuZCcsIG9wdGlvbnMpO1xyXG59XHJcbiIsImltcG9ydCB7ZmFsbGJhY2t9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuaW1wb3J0IG1vdmVJdGVtIGZyb20gJy4uL2FqYXgvbW92ZUl0ZW0nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbW92ZUl0ZW1zVG9Gb2xkZXIoaXRlbXNBcnkpIHsgLy8galF1ZXJ5Lm1pblxyXG4gIHZhciBmb2xkZXJJZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWxlY3RGb2xkZXJJZCcpLnZhbHVlO1xyXG4gIHZhciBiYXRjaE5vO1xyXG4gIHZhciBjb3VudGVyID0gMDtcclxuICB2YXIgaW52TGlzdCA9IFtdO1xyXG4gIHZhciBwcm0gPSBbXTtcclxuICBpdGVtc0FyeS5mb3JFYWNoKGZ1bmN0aW9uKG8pIHtcclxuICAgIHZhciBlbCA9IG8uaW5qZWN0SGVyZS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLnByZXZpb3VzRWxlbWVudFNpYmxpbmdcclxuICAgICAgLmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgaWYgKGVsLmNoZWNrZWQpIHtcclxuICAgICAgYmF0Y2hObyA9IE1hdGguZmxvb3IoY291bnRlciAvIDUwKTtcclxuICAgICAgaW52TGlzdFtiYXRjaE5vXSA9IGZhbGxiYWNrKGludkxpc3RbYmF0Y2hOb10sIFtdKTtcclxuICAgICAgaW52TGlzdFtiYXRjaE5vXS5wdXNoKG8uaW52aWQpO1xyXG4gICAgICBjb3VudGVyICs9IDE7XHJcbiAgICAgIGlmIChjb3VudGVyICUgNTAgPT09IDApIHtcclxuICAgICAgICBwcm0ucHVzaChtb3ZlSXRlbShpbnZMaXN0W2JhdGNoTm9dLCBmb2xkZXJJZCkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgaWYgKGNvdW50ZXIgJSA1MCAhPT0gMCkge1xyXG4gICAgcHJtLnB1c2gobW92ZUl0ZW0oaW52TGlzdFtiYXRjaE5vXSwgZm9sZGVySWQpKTtcclxuICB9XHJcbiAgJC53aGVuLmFwcGx5KCQsIHBybSkuZG9uZShmdW5jdGlvbigpIHtsb2NhdGlvbi5yZWxvYWQoKTt9KTsgLy8gVE9ETyBhamF4aWZ5IHRoaXNcclxufVxyXG4iLCJpbXBvcnQge2ltYWdlU2VydmVyfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcblxyXG5mdW5jdGlvbiBhbm90aGVyU3Bpbm5lcihzZWxmKSB7XHJcbiAgc2VsZi5pbm5lckhUTUwgPSAnPGltZyBjbGFzcz1cInF1aWNrQWN0aW9uU3Bpbm5lclwiIHNyYz1cIicgK1xyXG4gICAgaW1hZ2VTZXJ2ZXIgK1xyXG4gICAgJy9za2luL2xvYWRpbmcuZ2lmXCIgd2lkdGg9XCIxNVwiIGhlaWdodD1cIjE1XCI+JztcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVpY2tBY3Rpb24oc2VsZiwgZm4sIHN1Y2Nlc3MsIG90aGVyQ2xhc3MpIHsgLy8galF1ZXJ5Lm1pblxyXG4gIHNlbGYuY2xhc3NOYW1lID0gJ3F1aWNrQWN0aW9uJztcclxuICB2YXIgaXRlbUludklkID0gc2VsZi5nZXRBdHRyaWJ1dGUoJ2l0ZW1JbnZJZCcpO1xyXG4gIGZuKFtpdGVtSW52SWRdKS5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgIGlmIChkYXRhLnIgPT09IDEpIHtyZXR1cm47fVxyXG4gICAgc2VsZi5zdHlsZS5jb2xvciA9ICdncmVlbic7XHJcbiAgICBzZWxmLmlubmVySFRNTCA9IHN1Y2Nlc3M7XHJcbiAgfSk7XHJcbiAgJChzZWxmKS5xdGlwKCdoaWRlJyk7XHJcbiAgYW5vdGhlclNwaW5uZXIoc2VsZik7XHJcbiAgdmFyIHRoZVRkID0gc2VsZi5wYXJlbnROb2RlO1xyXG4gIHZhciBvdGhlckJ1dHRvbiA9IHRoZVRkLnF1ZXJ5U2VsZWN0b3Iob3RoZXJDbGFzcyk7XHJcbiAgaWYgKG90aGVyQnV0dG9uKSB7XHJcbiAgICBvdGhlckJ1dHRvbi5jbGFzc05hbWUgPSAncXVpY2tBY3Rpb24nO1xyXG4gICAgb3RoZXJCdXR0b24uaW5uZXJIVE1MID0gJyc7XHJcbiAgfVxyXG4gIHZhciBjaGVja2JveCA9IHRoZVRkLnBhcmVudE5vZGUuZmlyc3RFbGVtZW50Q2hpbGQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgY2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xyXG4gIGNoZWNrYm94LmRpc2FibGVkID0gdHJ1ZTtcclxufVxyXG4iLCJpbXBvcnQgYWRkIGZyb20gJy4uL3N1cHBvcnQvdGFzayc7XHJcbmltcG9ydCBhZGRTdGF0VG90YWxUb01vdXNlb3ZlciBmcm9tICcuLi9jb21tb24vYWRkU3RhdFRvdGFsVG9Nb3VzZW92ZXInO1xyXG5pbXBvcnQgZG9DaGVja2JveGVzIGZyb20gJy4vZG9DaGVja2JveGVzJztcclxuaW1wb3J0IGRvRm9sZGVyQnV0dG9ucyBmcm9tICcuL2RvRm9sZGVyQnV0dG9ucyc7XHJcbmltcG9ydCBkb1RvZ2dsZUJ1dHRvbnMgZnJvbSAnLi9kb1RvZ2dsZUJ1dHRvbnMnO1xyXG5pbXBvcnQgZHJvcEl0ZW0gZnJvbSAnLi4vYWpheC9kcm9wSXRlbSc7XHJcbmltcG9ydCBnZXRJbnZlbnRvcnlCeUlkIGZyb20gJy4uL2FqYXgvZ2V0SW52ZW50b3J5QnlJZCc7XHJcbmltcG9ydCBnZXRJdGVtSW1nIGZyb20gJy4uL2NvbW1vbi9nZXRJdGVtSW1nJztcclxuaW1wb3J0IGhpZGVGb2xkZXJzIGZyb20gJy4vaGlkZUZvbGRlcnMnO1xyXG5pbXBvcnQgaW5qZWN0TW92ZUl0ZW1zIGZyb20gJy4vaW5qZWN0TW92ZUl0ZW1zJztcclxuaW1wb3J0IG1vdmVJdGVtc1RvRm9sZGVyIGZyb20gJy4vbW92ZUl0ZW1zVG9Gb2xkZXInO1xyXG5pbXBvcnQge3BDQ30gZnJvbSAnLi4vc3VwcG9ydC9sYXlvdXQnO1xyXG5pbXBvcnQgcXVpY2tBY3Rpb24gZnJvbSAnLi9xdWlja0FjdGlvbic7XHJcbmltcG9ydCBzZW5kSXRlbSBmcm9tICcuLi9hamF4L3NlbmRJdGVtJztcclxuaW1wb3J0IHtmYWxsYmFjaywgZ2V0VmFsdWUsIHNldFZhbHVlfSBmcm9tICcuLi9zdXBwb3J0L3N5c3RlbSc7XHJcbmltcG9ydCB7aXRlbVJFLCByYXJpdHl9IGZyb20gJy4uL3N1cHBvcnQvZGF0YU9iaic7XHJcblxyXG52YXIgZGlzYWJsZUl0ZW1Db2xvcmluZztcclxudmFyIHNob3dFeHRyYUxpbmtzO1xyXG52YXIgc2hvd1F1aWNrRHJvcExpbmtzO1xyXG52YXIgc2hvd1F1aWNrU2VuZExpbmtzO1xyXG52YXIgZXh0cmFMaW5rcztcclxudmFyIHBhaW50Q291bnQ7XHJcbnZhciBpdGVtc0FyeTtcclxudmFyIGNoZWNrQWxsO1xyXG52YXIgaXRlbXNIYXNoO1xyXG52YXIgZHJvcExpbmtzO1xyXG52YXIgaW52SXRlbXM7XHJcbnZhciBjb2xvdXJpbmc7XHJcbnZhciBzZW5kTGlua3M7XHJcblxyXG5mdW5jdGlvbiBhZnRlcmJlZ2luKG8sIGl0ZW0pIHtcclxuICBpZiAoZmFsbGJhY2soZXh0cmFMaW5rcywgIXNob3dFeHRyYUxpbmtzKSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB2YXIgcGF0dGVybiA9ICc8c3Bhbj48c3BhbiBjbGFzcz1cImFITGlua1wiPic7XHJcbiAgaWYgKCFpdGVtLmJvdW5kKSB7XHJcbiAgICBwYXR0ZXJuICs9ICdbPGEgaHJlZj1cImluZGV4LnBocD9jbWQ9YXVjdGlvbmhvdXNlJnNlYXJjaF90ZXh0PScgK1xyXG4gICAgICBlbmNvZGVVUklDb21wb25lbnQoaXRlbS5pdGVtX25hbWUpICsgJ1wiPkFIPC9hPl0nO1xyXG4gIH1cclxuICBwYXR0ZXJuICs9ICc8L3NwYW4+WzxhIGhyZWY9XCJodHRwczovL2d1aWRlLmZhbGxlbnN3b3JkLmNvbS8nICtcclxuICAgICdpbmRleC5waHA/Y21kPWl0ZW1zJnN1YmNtZD12aWV3Jml0ZW1faWQ9JyArIGl0ZW0uaXRlbV9pZCArXHJcbiAgICAnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+VUZTRzwvYT5dPC9zcGFuPic7XHJcbiAgby5pbmplY3RIZXJlLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsIHBhdHRlcm4pO1xyXG59XHJcblxyXG52YXIgYnVpbGRUcmFpbGVyID0gW1xyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICByZXR1cm4gIWNoZWNrQWxsICYmIGl0ZW1zSGFzaFtpdGVtLml0ZW1faWRdICE9PSAxO1xyXG4gICAgfSxcclxuICAgIHJlc3VsdDogZnVuY3Rpb24obywgaXRlbSkge1xyXG4gICAgICByZXR1cm4gJyBbPHNwYW4gbGlua3RvPVwiJyArIGl0ZW0uaXRlbV9pZCArXHJcbiAgICAgICAgJ1wiIGNsYXNzPVwiZnNoTGlua1wiPkNoZWNrIGFsbDwvc3Bhbj5dJztcclxuICAgIH1cclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICByZXR1cm4gIXNlbmRMaW5rcyAmJiBzaG93UXVpY2tTZW5kTGlua3MgJiZcclxuICAgICAgICAhaXRlbS5ib3VuZDtcclxuICAgIH0sXHJcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKG8pIHtcclxuICAgICAgcmV0dXJuICcgPHNwYW4gY2xhc3M9XCJxdWlja0FjdGlvbiBzZW5kTGluayB0aXAtc3RhdGljXCIgJyArXHJcbiAgICAgICAgJ2l0ZW1JbnZJZD1cIicgKyBvLmludmlkICsgJ1wiIGRhdGEtdGlwcGVkPVwiSU5TVEFOVExZIFNFTkRTIFRIRSAnICtcclxuICAgICAgICAnSVRFTS4gTk8gUkVGVU5EUyBPUiBETy1PVkVSUyEgVXNlIGF0IG93biByaXNrLlwiPltRdWljayBTZW5kXTwvc3Bhbj4nO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgIHJldHVybiAhZHJvcExpbmtzICYmIHNob3dRdWlja0Ryb3BMaW5rcyAmJlxyXG4gICAgICAgIGl0ZW0uZ3VpbGRfdGFnID09PSAnLTEnO1xyXG4gICAgfSxcclxuICAgIHJlc3VsdDogZnVuY3Rpb24obykge1xyXG4gICAgICByZXR1cm4gJyA8c3BhbiBjbGFzcz1cInF1aWNrQWN0aW9uIGRyb3BMaW5rIHRpcC1zdGF0aWNcIiBpdGVtSW52SWQ9XCInICtcclxuICAgICAgICBvLmludmlkICsgJ1wiIGRhdGEtdGlwcGVkPVwiSU5TVEFOVExZIERST1AgVEhFIElURU0uIE5PIFJFRlVORFMgJyArXHJcbiAgICAgICAgJ09SIERPLU9WRVJTISBVc2UgYXQgb3duIHJpc2suXCI+W1F1aWNrIERyb3BdPC9zcGFuPic7XHJcbiAgICB9XHJcbiAgfVxyXG5dO1xyXG5cclxuZnVuY3Rpb24gYmVmb3JlZW5kKG8sIGl0ZW0pIHtcclxuICBpZiAoIWNvbG91cmluZyAmJiAhZGlzYWJsZUl0ZW1Db2xvcmluZykge1xyXG4gICAgby5pbmplY3RIZXJlLmNsYXNzTGlzdC5hZGQocmFyaXR5W2l0ZW0ucmFyaXR5XS5jbGFzKTtcclxuICB9XHJcbiAgdmFyIHBhdHRlcm4gPSBidWlsZFRyYWlsZXIucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGVsKSB7XHJcbiAgICB2YXIgcmV0ID0gcHJldjtcclxuICAgIGlmIChlbC5jb25kaXRpb24oaXRlbSkpIHtcclxuICAgICAgcmV0ICs9IGVsLnJlc3VsdChvLCBpdGVtKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbiAgfSwgJycpO1xyXG4gIGlmIChwYXR0ZXJuICE9PSAnJykge28uaW5qZWN0SGVyZS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIHBhdHRlcm4pO31cclxufVxyXG5cclxuZnVuY3Rpb24gZG9uZUludlBhaW50KCkge1xyXG4gIGlmIChzaG93RXh0cmFMaW5rcykge2V4dHJhTGlua3MgPSB0cnVlO31cclxuICBjaGVja0FsbCA9IHRydWU7XHJcbiAgY29sb3VyaW5nID0gdHJ1ZTtcclxuICBpZiAoc2hvd1F1aWNrRHJvcExpbmtzKSB7ZHJvcExpbmtzID0gdHJ1ZTt9XHJcbiAgc2VuZExpbmtzID0gdHJ1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW52UGFpbnQoKSB7IC8vIE5hdGl2ZSAtIGFic3RyYWN0IHRoaXMgcGF0dGVyblxyXG4gIHZhciBsaW1pdCA9IHBlcmZvcm1hbmNlLm5vdygpICsgNTtcclxuICB3aGlsZSAocGVyZm9ybWFuY2Uubm93KCkgPCBsaW1pdCAmJlxyXG4gICAgICBwYWludENvdW50IDwgaXRlbXNBcnkubGVuZ3RoKSB7XHJcbiAgICB2YXIgbyA9IGl0ZW1zQXJ5W3BhaW50Q291bnRdO1xyXG4gICAgdmFyIGl0ZW0gPSBpbnZJdGVtc1tvLmludmlkXTtcclxuICAgIGFmdGVyYmVnaW4obywgaXRlbSk7XHJcbiAgICBiZWZvcmVlbmQobywgaXRlbSk7XHJcbiAgICBwYWludENvdW50ICs9IDE7XHJcbiAgfVxyXG4gIGlmIChwYWludENvdW50IDwgaXRlbXNBcnkubGVuZ3RoKSB7XHJcbiAgICBhZGQoMywgaW52UGFpbnQpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBkb25lSW52UGFpbnQoKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZVNob3dFeHRyYUxpbmtzKCkge1xyXG4gIHNob3dFeHRyYUxpbmtzID0gIXNob3dFeHRyYUxpbmtzO1xyXG4gIHNldFZhbHVlKCdzaG93RXh0cmFMaW5rcycsIHNob3dFeHRyYUxpbmtzKTtcclxuICBkb1RvZ2dsZUJ1dHRvbnMoc2hvd0V4dHJhTGlua3MsIHNob3dRdWlja0Ryb3BMaW5rcyk7XHJcbiAgaWYgKCFleHRyYUxpbmtzKSB7XHJcbiAgICBwYWludENvdW50ID0gMDtcclxuICAgIGFkZCgzLCBpbnZQYWludCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGl0ZW1zQXJ5LmZvckVhY2goZnVuY3Rpb24obykge1xyXG4gICAgICB2YXIgZWwgPSBvLmluamVjdEhlcmUuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoJ2ZzaEhpZGUnKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlU2hvd1F1aWNrRHJvcExpbmtzKCkge1xyXG4gIHNob3dRdWlja0Ryb3BMaW5rcyA9ICFzaG93UXVpY2tEcm9wTGlua3M7XHJcbiAgc2V0VmFsdWUoJ3Nob3dRdWlja0Ryb3BMaW5rcycsIHNob3dRdWlja0Ryb3BMaW5rcyk7XHJcbiAgZG9Ub2dnbGVCdXR0b25zKHNob3dFeHRyYUxpbmtzLCBzaG93UXVpY2tEcm9wTGlua3MpO1xyXG4gIGlmICghZHJvcExpbmtzKSB7XHJcbiAgICBwYWludENvdW50ID0gMDtcclxuICAgIGFkZCgzLCBpbnZQYWludCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGl0ZW1zQXJ5LmZvckVhY2goZnVuY3Rpb24obykge1xyXG4gICAgICB2YXIgZWwgPSBvLmluamVjdEhlcmUucXVlcnlTZWxlY3RvcignLmRyb3BMaW5rJyk7XHJcbiAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoJ2ZzaEhpZGUnKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxudmFyIGV2dHMgPSBbXHJcbiAge1xyXG4gICAgY29uZGl0aW9uOiBmdW5jdGlvbihzZWxmKSB7cmV0dXJuIHNlbGYuaWQgPT09ICdmc2hTaG93RXh0cmFMaW5rcyc7fSxcclxuICAgIHJlc3VsdDogdG9nZ2xlU2hvd0V4dHJhTGlua3NcclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oc2VsZikge3JldHVybiBzZWxmLmlkID09PSAnZnNoU2hvd1F1aWNrRHJvcExpbmtzJzt9LFxyXG4gICAgcmVzdWx0OiB0b2dnbGVTaG93UXVpY2tEcm9wTGlua3NcclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oc2VsZikge3JldHVybiBzZWxmLmlkID09PSAnZnNoU2VsZWN0QWxsR3VpbGRMb2NrZWQnO30sXHJcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge2RvQ2hlY2tib3hlcyhpdGVtc0FyeSwgaW52SXRlbXMsICdndWlsZCcpO31cclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oc2VsZikge3JldHVybiBzZWxmLmlkID09PSAnZnNoTW92ZSc7fSxcclxuICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7bW92ZUl0ZW1zVG9Gb2xkZXIoaXRlbXNBcnkpO31cclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oc2VsZikge3JldHVybiBzZWxmLmhhc0F0dHJpYnV0ZSgnbGlua3RvJyk7fSxcclxuICAgIHJlc3VsdDogZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICBkb0NoZWNrYm94ZXMoaXRlbXNBcnksIGludkl0ZW1zLCAnaXRlbScsIHNlbGYuZ2V0QXR0cmlidXRlKCdsaW5rdG8nKSk7XHJcbiAgICB9XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKHNlbGYpIHtyZXR1cm4gc2VsZi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbmRMaW5rJyk7fSxcclxuICAgIHJlc3VsdDogZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICBxdWlja0FjdGlvbihzZWxmLCBzZW5kSXRlbSwgJ1NlbnQnLCAnLmRyb3BMaW5rJyk7XHJcbiAgICB9XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKHNlbGYpIHtyZXR1cm4gc2VsZi5jbGFzc0xpc3QuY29udGFpbnMoJ2Ryb3BMaW5rJyk7fSxcclxuICAgIHJlc3VsdDogZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICBxdWlja0FjdGlvbihzZWxmLCBkcm9wSXRlbSwgJ0Ryb3BwZWQnLCAnLnNlbmRMaW5rJyk7XHJcbiAgICB9XHJcbiAgfSxcclxuICB7XHJcbiAgICBjb25kaXRpb246IGZ1bmN0aW9uKHNlbGYpIHtyZXR1cm4gc2VsZi5jbGFzc0xpc3QuY29udGFpbnMoJ2ZvbGRlcicpO30sXHJcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKHNlbGYpIHtcclxuICAgICAgaGlkZUZvbGRlcnMoaXRlbXNBcnksIGludkl0ZW1zLCBzZWxmKTtcclxuICAgIH1cclxuICB9LFxyXG4gIHtcclxuICAgIGNvbmRpdGlvbjogZnVuY3Rpb24oc2VsZikge3JldHVybiBzZWxmLmlkID09PSAnZnNoQ2hrQWxsJzt9LFxyXG4gICAgcmVzdWx0OiBmdW5jdGlvbigpIHtcclxuICAgICAgZG9DaGVja2JveGVzKGl0ZW1zQXJ5LCBpbnZJdGVtcywgJ2NoZWNrQWxsJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5dO1xyXG5cclxuZnVuY3Rpb24gZXZ0SGFuZGxlcihldnQpIHtcclxuICB2YXIgc2VsZiA9IGV2dC50YXJnZXQ7XHJcbiAgZXZ0cy5zb21lKGZ1bmN0aW9uKGVsKSB7XHJcbiAgICBpZiAoZWwuY29uZGl0aW9uKHNlbGYpKSB7XHJcbiAgICAgIGVsLnJlc3VsdChzZWxmKTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEl0ZW1zKCkge1xyXG4gIGFkZFN0YXRUb3RhbFRvTW91c2VvdmVyKCk7XHJcbiAgZGlzYWJsZUl0ZW1Db2xvcmluZyA9IGdldFZhbHVlKCdkaXNhYmxlSXRlbUNvbG9yaW5nJyk7XHJcbiAgc2hvd0V4dHJhTGlua3MgPSBnZXRWYWx1ZSgnc2hvd0V4dHJhTGlua3MnKTtcclxuICBzaG93UXVpY2tEcm9wTGlua3MgPSBnZXRWYWx1ZSgnc2hvd1F1aWNrRHJvcExpbmtzJyk7XHJcbiAgc2hvd1F1aWNrU2VuZExpbmtzID0gZ2V0VmFsdWUoJ3Nob3dRdWlja1NlbmRMaW5rcycpO1xyXG4gIGRvVG9nZ2xlQnV0dG9ucyhzaG93RXh0cmFMaW5rcywgc2hvd1F1aWNrRHJvcExpbmtzKTtcclxuICBwQ0MuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldnRIYW5kbGVyKTtcclxuICB2YXIgaW1nTGlzdCA9IGdldEl0ZW1JbWcocENDKTtcclxuICBpdGVtc0FyeSA9IFtdO1xyXG4gIGl0ZW1zSGFzaCA9IHt9O1xyXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoaW1nTGlzdCwgZnVuY3Rpb24oZWwpIHtcclxuICAgIHZhciB0aXBwZWQgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwcGVkJyk7XHJcbiAgICB2YXIgbWF0Y2hlcyA9IHRpcHBlZC5tYXRjaChpdGVtUkUpO1xyXG4gICAgaXRlbXNIYXNoW21hdGNoZXNbMV1dID0gKGl0ZW1zSGFzaFttYXRjaGVzWzFdXSB8fCAwKSArIDE7XHJcbiAgICB2YXIgaW5qZWN0SGVyZSA9IGVsLnBhcmVudE5vZGUucGFyZW50Tm9kZS5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICBpdGVtc0FyeS5wdXNoKHtcclxuICAgICAgZWw6IGVsLFxyXG4gICAgICBpbnZpZDogbWF0Y2hlc1syXSxcclxuICAgICAgaW5qZWN0SGVyZTogaW5qZWN0SGVyZVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgLy8gRXhjbHVkZSBjb21wb3NlZCBwb3RzXHJcbiAgaXRlbXNIYXNoWzEzNjk5XSA9IDE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGludmVudG9yeShkYXRhKSB7XHJcbiAgZXh0cmFMaW5rcyA9IGZhbHNlO1xyXG4gIGNoZWNrQWxsID0gZmFsc2U7XHJcbiAgaW52SXRlbXMgPSBkYXRhLml0ZW1zO1xyXG4gIGNvbG91cmluZyA9IGZhbHNlO1xyXG4gIGRyb3BMaW5rcyA9IGZhbHNlO1xyXG4gIHNlbmRMaW5rcyA9IGZhbHNlO1xyXG4gIHBhaW50Q291bnQgPSAwO1xyXG4gIGFkZCgzLCBpbnZQYWludCk7XHJcbiAgZG9Gb2xkZXJCdXR0b25zKGRhdGEuZm9sZGVycyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RTdG9yZUl0ZW1zKCkge1xyXG4gIGdldEludmVudG9yeUJ5SWQoKS5kb25lKGludmVudG9yeSk7XHJcbiAgYWRkKDMsIGdldEl0ZW1zKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFByb2ZpbGVEcm9wSXRlbXMoKSB7XHJcbiAgaW5qZWN0U3RvcmVJdGVtcygpO1xyXG4gIGluamVjdE1vdmVJdGVtcygpO1xyXG59XHJcbiIsInZhciBtYXhjaGFyYWN0ZXJzO1xyXG52YXIgdGV4dEFyZWE7XHJcbnZhciBzaG91dGJveFByZXZpZXc7XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVTaG91dGJveFByZXZpZXcoKSB7XHJcbiAgdmFyIHRleHRDb250ZW50ID0gdGV4dEFyZWEudmFsdWU7XHJcbiAgdmFyIGNoYXJzID0gdGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gIGlmIChjaGFycyA+IG1heGNoYXJhY3RlcnMpIHtcclxuICAgIHRleHRDb250ZW50ID0gdGV4dENvbnRlbnQuc3Vic3RyaW5nKDAsIG1heGNoYXJhY3RlcnMpO1xyXG4gICAgdGV4dEFyZWEudmFsdWUgPSB0ZXh0Q29udGVudDtcclxuICAgIGNoYXJzID0gbWF4Y2hhcmFjdGVycztcclxuICB9XHJcbiAgaWYgKCFzaG91dGJveFByZXZpZXcpIHtcclxuICAgIHNob3V0Ym94UHJldmlldyA9IHRleHRBcmVhLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGVcclxuICAgICAgLmluc2VydFJvdygpLmluc2VydENlbGwoKTtcclxuICB9XHJcbiAgc2hvdXRib3hQcmV2aWV3LmlubmVySFRNTCA9ICc8dGFibGUgY2xhc3M9XCJzYnBUYmxcIj48dGJvZHk+PHRyPicgK1xyXG4gICAgJzx0ZCBjbGFzcz1cInNicEhkclwiPlByZXZpZXcgKCcgKyBjaGFycyArICcvJyArIG1heGNoYXJhY3RlcnMgK1xyXG4gICAgJyBjaGFyYWN0ZXJzKTwvdGQ+PC90cj48dHI+PHRkIGNsYXNzPVwic2JwTXNnXCI+PHNwYW4+JyArIHRleHRDb250ZW50ICtcclxuICAgICc8L3NwYW4+PC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT4nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmplY3RTaG91dGJveFdpZGdldHMoKSB7XHJcbiAgdGV4dEFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGV4dElucHV0Qm94Jyk7XHJcbiAgdGV4dEFyZWEuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB1cGRhdGVTaG91dGJveFByZXZpZXcpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbmV3c0ZzYm94KCkge1xyXG4gIG1heGNoYXJhY3RlcnMgPSAxMDA7XHJcbiAgaW5qZWN0U2hvdXRib3hXaWRnZXRzKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBuZXdzU2hvdXRib3goKSB7XHJcbiAgbWF4Y2hhcmFjdGVycyA9IDE1MDtcclxuICBpbmplY3RTaG91dGJveFdpZGdldHMoKTtcclxufVxyXG4iLCJpbXBvcnQgYWRkSGlzdG9yeVdpZGdldHMgZnJvbSAnLi4vZ3VpbGQvYWRkSGlzdG9yeVdpZGdldHMnO1xyXG5pbXBvcnQgYWxsb3dCYWNrIGZyb20gJy4uL2d1aWRlL2FsbG93QmFjayc7XHJcbmltcG9ydCBjb21wbGV0ZWRBcmVuYXMgZnJvbSAnLi4vYXJlbmEvY29tcGxldGVkQXJlbmFzJztcclxuaW1wb3J0IGNvbXBvc2luZ0JyZWFrZG93biBmcm9tICcuLi9jb21wb3NpbmcvYnJlYWtkb3duJztcclxuaW1wb3J0IGdsb2JhbFF1ZXN0IGZyb20gJy4uL3RvcFJhdGVkL2dsb2JhbFF1ZXN0JztcclxuaW1wb3J0IGd1aWxkTWFpbGJveCBmcm9tICcuLi9tYWlsYm94L2d1aWxkTWFpbGJveCc7XHJcbmltcG9ydCBpbmplY3RBZHZpc29yIGZyb20gJy4uL2d1aWxkQWR2aXNvcic7XHJcbmltcG9ydCBpbmplY3RBcmVuYSBmcm9tICcuLi9hcmVuYS9hcmVuYSc7XHJcbmltcG9ydCBpbmplY3RCYXphYXIgZnJvbSAnLi4vYmF6YWFyJztcclxuaW1wb3J0IGluamVjdEJpb1dpZGdldHMgZnJvbSAnLi4vcHJvZmlsZS9iaW8vYmlvV2lkZ2V0cyc7XHJcbmltcG9ydCBpbmplY3RCdWZmTG9nIGZyb20gJy4uL2J1ZmZMb2cvaW5qZWN0QnVmZkxvZyc7XHJcbmltcG9ydCBpbmplY3RHdWlsZCBmcm9tICcuLi9ndWlsZC9ndWlsZCc7XHJcbmltcG9ydCBpbmplY3RHdWlsZEFkZFRhZ3NXaWRnZXRzIGZyb20gJy4uL2d1aWxkL2luamVjdEd1aWxkQWRkVGFnc1dpZGdldHMnO1xyXG5pbXBvcnQgaW5qZWN0R3VpbGRSYW5rcyBmcm9tICcuLi9yYW5rJztcclxuaW1wb3J0IHtpbmplY3RJbnZlbnRvcnlNYW5hZ2VyTmV3fSBmcm9tICcuLi9pbnZlbnRvcnkvaW52ZW50b3J5JztcclxuaW1wb3J0IGluamVjdE1haWxib3ggZnJvbSAnLi4vbWFpbGJveC9tYWlsYm94JztcclxuaW1wb3J0IGluamVjdE1vbnN0ZXJMb2cgZnJvbSAnLi4vbW9uc3RvckxvZyc7XHJcbmltcG9ydCBpbmplY3ROZXdHdWlsZExvZyBmcm9tICcuLi9uZXdHdWlsZExvZy9uZXdHdWlsZExvZyc7XHJcbmltcG9ydCBpbmplY3ROb3RlcGFkU2hvd0xvZ3MgZnJvbSAnLi4vY29tYmF0TG9nJztcclxuaW1wb3J0IGluamVjdE9ubGluZVBsYXllcnMgZnJvbSAnLi4vb25saW5lUGxheWVycyc7XHJcbmltcG9ydCBpbmplY3RQcm9maWxlIGZyb20gJy4uL3Byb2ZpbGUvcHJvZmlsZSc7XHJcbmltcG9ydCBpbmplY3RRdWlja0J1ZmYgZnJvbSAnLi4vcXVpY2tCdWZmJztcclxuaW1wb3J0IGluamVjdFJQVXBncmFkZXMgZnJvbSAnLi4vZ3VpbGQvaW5qZWN0UlBVcGdyYWRlcyc7XHJcbmltcG9ydCBpbmplY3RSZWNpcGVNYW5hZ2VyIGZyb20gJy4uL3JlY2lwZU1nci9yZWNpcGVNZ3InO1xyXG5pbXBvcnQgaW5qZWN0UmVwb3J0UGFpbnQgZnJvbSAnLi4vZ3VpbGRSZXBvcnQvZ3VpbGRSZXBvcnQnO1xyXG5pbXBvcnQgaW5qZWN0U2F2ZVNldHRpbmdzIGZyb20gJy4uL3NldHRpbmdzL2xvYWQnO1xyXG5pbXBvcnQgaW5qZWN0U2NhdmVuZ2luZyBmcm9tICcuLi9zY2F2ZW5naW5nJztcclxuaW1wb3J0IGluamVjdFNjb3V0dG93ZXIgZnJvbSAnLi4vc2NvdXRUb3dlci9pbmplY3RTY291dHRvd2VyJztcclxuaW1wb3J0IHtpbmplY3RTZXR0aW5nc30gZnJvbSAnLi4vc2V0dGluZ3Mvc2V0dGluZ3NQYWdlJztcclxuaW1wb3J0IGluamVjdFRpdGFuIGZyb20gJy4uL3Njb3V0VG93ZXIvaW5qZWN0VGl0YW4nO1xyXG5pbXBvcnQgaW5qZWN0VG9wUmF0ZWQgZnJvbSAnLi4vdG9wUmF0ZWQvdG9wcmF0ZWQnO1xyXG5pbXBvcnQgaW5qZWN0VHJhZGUgZnJvbSAnLi4vdHJhZGUnO1xyXG5pbXBvcnQgaW5qZWN0Vmlld0d1aWxkIGZyb20gJy4uL2d1aWxkL2luamVjdFZpZXdHdWlsZCc7XHJcbmltcG9ydCBpbmplY3RXb3JsZCBmcm9tICcuLi9sZWdhY3knO1xyXG5pbXBvcnQgaW5zZXJ0UXVpY2tFeHRyYWN0IGZyb20gJy4uL3F1aWNrRXh0cmFjdCc7XHJcbmltcG9ydCBpbnNlcnRRdWlja1dlYXIgZnJvbSAnLi4vcXVpY2tXZWFyL3F1aWNrV2Vhcic7XHJcbmltcG9ydCBpbnZlbnRpbmcgZnJvbSAnLi4vcmVjaXBlcyc7XHJcbmltcG9ydCBsYWRkZXIgZnJvbSAnLi4vbGFkZGVyJztcclxuaW1wb3J0IHNldHVwTW92ZXMgZnJvbSAnLi4vYXJlbmEvc2V0dXAnO1xyXG5pbXBvcnQgc2hvd0FsbFF1ZXN0U3RlcHMgZnJvbSAnLi4vZ3VpZGUvc2hvd0FsbFF1ZXN0U3RlcHMnO1xyXG5pbXBvcnQgc3RvcmVNb3ZlcyBmcm9tICcuLi9hcmVuYS9zdG9yZSc7XHJcbmltcG9ydCBzdG9yZVBsYXllclVwZ3JhZGVzIGZyb20gJy4uL3VwZ3JhZGVzJztcclxuaW1wb3J0IHVua25vd25QYWdlIGZyb20gJy4vdW5rbm93blBhZ2UnO1xyXG5pbXBvcnQgdmlld0FyY2hpdmUgZnJvbSAnLi4vbmV3cy92aWV3QXJjaGl2ZSc7XHJcbmltcG9ydCB7XHJcbiAgYWRkTWFya2V0cGxhY2VXaWRnZXRzLFxyXG4gIGluamVjdEZpbmRQbGF5ZXIsXHJcbiAgaW5qZWN0RnNCb3hDb250ZW50LFxyXG4gIGluamVjdE5vdGVwYWRcclxufSBmcm9tICcuLi9taXNjJztcclxuaW1wb3J0IHtjb21wb3NpbmdDcmVhdGUsIGluamVjdENvbXBvc2luZ30gZnJvbSAnLi4vY29tcG9zaW5nL2NvbXBvc2luZyc7XHJcbmltcG9ydCB7Z3VpbGRDaGF0LCBndWlsZExvZywgb3V0Ym94LCBwbGF5ZXJMb2d9IGZyb20gJy4uL2xvZ3MvbG9ncyc7XHJcbmltcG9ydCB7aW5qZWN0QXVjdGlvbkhvdXNlLCBxdWlja0NyZWF0ZX0gZnJvbSAnLi4vYXVjdGlvbkhvdXNlJztcclxuaW1wb3J0IHtpbmplY3RBdWN0aW9uU2VhcmNoLCBpbmplY3RRdWlja0xpbmtNYW5hZ2VyfSBmcm9tICcuLi9saXN0cyc7XHJcbmltcG9ydCB7aW5qZWN0QmFuaywgaW5qZWN0R3VpbGRCYW5rfSBmcm9tICcuLi9iYW5rJztcclxuaW1wb3J0IHtpbmplY3RGaW5kQnVmZnMsIGluamVjdEZpbmRPdGhlcn0gZnJvbSAnLi4vZmluZEJ1ZmZzJztcclxuaW1wb3J0IHtpbmplY3RHcm91cFN0YXRzLCBpbmplY3RHcm91cHN9IGZyb20gJy4uL2dyb3Vwcyc7XHJcbmltcG9ydCB7aW5qZWN0UHJvZmlsZURyb3BJdGVtcywgaW5qZWN0U3RvcmVJdGVtc30gZnJvbSAnLi4vZHJvcEl0ZW1zL2Ryb3BJdGVtcyc7XHJcbmltcG9ydCB7aW5qZWN0UXVlc3RCb29rRnVsbCwgaW5qZWN0UXVlc3RUcmFja2VyfSBmcm9tICcuLi9xdWVzdEJvb2snO1xyXG5pbXBvcnQge25ld3NGc2JveCwgbmV3c1Nob3V0Ym94fSBmcm9tICcuLi9uZXdzL25ld3MnO1xyXG5pbXBvcnQge3BhcnNlR29sZFVwZ3JhZGVzLCBwYXJzZVRlbXBsZVBhZ2V9IGZyb20gJy4uL25vdGlmaWNhdGlvbic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgc2V0dGluZ3M6IHsnLSc6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdFNldHRpbmdzfX19fSxcclxuICB3b3JsZDogeyctJzogeyctJzogeyctJzogeyctJzogaW5qZWN0V29ybGR9fX19LFxyXG4gIG5ld3M6IHtcclxuICAgIGZzYm94OiB7Jy0nOiB7Jy0nOiB7Jy0nOiBuZXdzRnNib3h9fX0sXHJcbiAgICBzaG91dGJveDogeyctJzogeyctJzogeyctJzogbmV3c1Nob3V0Ym94fX19XHJcbiAgfSxcclxuICBibGFja3NtaXRoOiB7cmVwYWlyYWxsOiB7Jy0nOiB7Jy0nOiB7JzEnOiBpbmplY3RXb3JsZH19fX0sXHJcbiAgYXJlbmE6IHtcclxuICAgICctJzogeyctJzogeyctJzogeyctJzogaW5qZWN0QXJlbmF9fX0sXHJcbiAgICBqb2luOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RBcmVuYX19fSxcclxuICAgIGNvbXBsZXRlZDogeyctJzogeyctJzogeyctJzogY29tcGxldGVkQXJlbmFzfX19LFxyXG4gICAgcGlja21vdmU6IHsnLSc6IHsnLSc6IHsnLSc6IHN0b3JlTW92ZXN9fX0sXHJcbiAgICBzZXR1cDogeyctJzogeyctJzogeyctJzogc2V0dXBNb3Zlc319fVxyXG4gIH0sXHJcbiAgcXVlc3Rib29rOiB7XHJcbiAgICAnLSc6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdFF1ZXN0Qm9va0Z1bGx9fX0sXHJcbiAgICBhdG96OiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RRdWVzdEJvb2tGdWxsfX19LFxyXG4gICAgdmlld3F1ZXN0OiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RRdWVzdFRyYWNrZXJ9fX1cclxuICB9LFxyXG4gIHByb2ZpbGU6IHtcclxuICAgICctJzogeyctJzogeyctJzogeyctJzogaW5qZWN0UHJvZmlsZX19fSxcclxuICAgIG1hbmFnZWNvbWJhdHNldDogeyctJzogeyctJzogeyctJzogaW5qZWN0UHJvZmlsZX19fSxcclxuICAgIHJlcG9ydDogeyctJzogeyctJzogeyctJzogaW5qZWN0UHJvZmlsZX19fSxcclxuICAgIGVxdWlwaXRlbTogeyctJzogeyctJzogeyctJzogaW5qZWN0UHJvZmlsZX19fSxcclxuICAgIHVzZWl0ZW06IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdFByb2ZpbGV9fX0sXHJcbiAgICBjaGFuZ2ViaW86IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdEJpb1dpZGdldHN9fX0sXHJcbiAgICBkcm9waXRlbXM6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdFByb2ZpbGVEcm9wSXRlbXN9fX1cclxuICB9LFxyXG4gIGF1Y3Rpb25ob3VzZToge1xyXG4gICAgJy0nOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RBdWN0aW9uSG91c2V9fX0sXHJcbiAgICBxdWlja2NyZWF0ZTogeyctJzogeyctJzogeyctJzogcXVpY2tDcmVhdGV9fX1cclxuICB9LFxyXG4gIGd1aWxkOiB7XHJcbiAgICBpbnZlbnRvcnk6IHtcclxuICAgICAgcmVwb3J0OiB7Jy0nOiB7Jy0nOiBpbmplY3RSZXBvcnRQYWludH19LFxyXG4gICAgICBhZGR0YWdzOiB7Jy0nOiB7Jy0nOiBpbmplY3RHdWlsZEFkZFRhZ3NXaWRnZXRzfX0sXHJcbiAgICAgIHJlbW92ZXRhZ3M6IHsnLSc6IHsnLSc6IGluamVjdEd1aWxkQWRkVGFnc1dpZGdldHN9fSxcclxuICAgICAgc3RvcmVpdGVtczogeyctJzogeyctJzogaW5qZWN0U3RvcmVJdGVtc319XHJcbiAgICB9LFxyXG4gICAgY2hhdDogeyctJzogeyctJzogeyctJzogZ3VpbGRDaGF0fX19LFxyXG4gICAgbG9nOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBndWlsZExvZ319fSxcclxuICAgIGdyb3Vwczoge1xyXG4gICAgICB2aWV3c3RhdHM6IHsnLSc6IHsnLSc6IGluamVjdEdyb3VwU3RhdHN9fSxcclxuICAgICAgam9pbmFsbGdyb3Vwc3VuZGVyc2l6ZTogeyctJzogeyctJzogaW5qZWN0R3JvdXBzfX0sXHJcbiAgICAgIGpvaW5hbGw6IHsnLSc6IHsnLSc6IGluamVjdEdyb3Vwc319LFxyXG4gICAgICAnLSc6IHsnLSc6IHsnLSc6IGluamVjdEdyb3Vwc319XHJcbiAgICB9LFxyXG4gICAgbWFuYWdlOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RHdWlsZH19fSxcclxuICAgIGFkdmlzb3I6IHtcclxuICAgICAgJy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RBZHZpc29yfX0sXHJcbiAgICAgIHdlZWtseTogeyctJzogeyctJzogaW5qZWN0QWR2aXNvcn19XHJcbiAgICB9LFxyXG4gICAgaGlzdG9yeTogeyctJzogeyctJzogeyctJzogYWRkSGlzdG9yeVdpZGdldHN9fX0sXHJcbiAgICB2aWV3OiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RWaWV3R3VpbGR9fX0sXHJcbiAgICBzY291dHRvd2VyOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RTY291dHRvd2VyfX19LFxyXG4gICAgbWFpbGJveDogeyctJzogeyctJzogeyctJzogZ3VpbGRNYWlsYm94fX19LFxyXG4gICAgcmFua3M6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdEd1aWxkUmFua3N9fX0sXHJcbiAgICBjb25mbGljdHM6IHtycHVwZ3JhZGVzOiB7Jy0nOiB7Jy0nOiBpbmplY3RSUFVwZ3JhZGVzfX19LFxyXG4gICAgYmFuazogeyctJzogeyctJzogeyctJzogaW5qZWN0R3VpbGRCYW5rfX19XHJcbiAgfSxcclxuICBiYW5rOiB7Jy0nOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RCYW5rfX19fSxcclxuICBsb2c6IHtcclxuICAgICctJzogeyctJzogeyctJzogeyctJzogcGxheWVyTG9nfX19LFxyXG4gICAgb3V0Ym94OiB7Jy0nOiB7Jy0nOiB7Jy0nOiBvdXRib3h9fX1cclxuICB9LFxyXG4gIHBvdGlvbmJhemFhcjogeyctJzogeyctJzogeyctJzogeyctJzogaW5qZWN0QmF6YWFyfX19fSxcclxuICBtYXJrZXRwbGFjZToge2NyZWF0ZXJlcTogeyctJzogeyctJzogeyctJzogYWRkTWFya2V0cGxhY2VXaWRnZXRzfX19fSxcclxuICBxdWlja2J1ZmY6IHsnLSc6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdFF1aWNrQnVmZn19fX0sIC8vIE5vIGdhXHJcbiAgbm90ZXBhZDoge1xyXG4gICAgc2hvd2xvZ3M6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdE5vdGVwYWRTaG93TG9nc319fSwgLy8gZG9uZVxyXG4gICAgaW52bWFuYWdlcm5ldzogeyctJzogeyctJzogeyctJzogaW5qZWN0SW52ZW50b3J5TWFuYWdlck5ld319fSxcclxuICAgIGd1aWxkaW52bWdyOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RJbnZlbnRvcnlNYW5hZ2VyTmV3fX19LFxyXG4gICAgcmVjaXBlbWFuYWdlcjogeyctJzogeyctJzogeyctJzogaW5qZWN0UmVjaXBlTWFuYWdlcn19fSwgLy8gZG9uZVxyXG4gICAgYXVjdGlvbnNlYXJjaDogeyctJzogeyctJzogeyctJzogaW5qZWN0QXVjdGlvblNlYXJjaH19fSxcclxuICAgIG9ubGluZXBsYXllcnM6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdE9ubGluZVBsYXllcnN9fX0sIC8vIGRvbmVcclxuICAgIHF1aWNrbGlua21hbmFnZXI6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdFF1aWNrTGlua01hbmFnZXJ9fX0sIC8vIGRvbmVcclxuICAgIG1vbnN0ZXJsb2c6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdE1vbnN0ZXJMb2d9fX0sIC8vIGRvbmVcclxuICAgIHF1aWNrZXh0cmFjdDogeyctJzogeyctJzogeyctJzogaW5zZXJ0UXVpY2tFeHRyYWN0fX19LCAvLyBkb25lXHJcbiAgICBxdWlja3dlYXI6IHsnLSc6IHsnLSc6IHsnLSc6IGluc2VydFF1aWNrV2Vhcn19fSwgLy8gZG9uZVxyXG4gICAgZnNib3hjb250ZW50OiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RGc0JveENvbnRlbnR9fX0sIC8vIGRvbmVcclxuICAgIGJ1ZmZsb2djb250ZW50OiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RCdWZmTG9nfX19LCAvLyBkb25lXHJcbiAgICBuZXdndWlsZGxvZzogeyctJzogeyctJzogeyctJzogaW5qZWN0TmV3R3VpbGRMb2d9fX0sXHJcbiAgICBmaW5kYnVmZnM6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdEZpbmRCdWZmc319fSwgLy8gZG9uZVxyXG4gICAgZmluZG90aGVyOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RGaW5kT3RoZXJ9fX0sIC8vIGRvbmVcclxuICAgIHNhdmVzZXR0aW5nczogeyctJzogeyctJzogeyctJzogaW5qZWN0U2F2ZVNldHRpbmdzfX19LFxyXG4gICAgJy0nOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3ROb3RlcGFkfX19XHJcbiAgfSxcclxuICBwb2ludHM6IHtcclxuICAgICctJzoge1xyXG4gICAgICAnLSc6IHtcclxuICAgICAgICAnLSc6IHsnLSc6IHN0b3JlUGxheWVyVXBncmFkZXN9LFxyXG4gICAgICAgICcwJzogeyctJzogc3RvcmVQbGF5ZXJVcGdyYWRlc30sXHJcbiAgICAgICAgJzEnOiB7Jy0nOiBwYXJzZUdvbGRVcGdyYWRlc31cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sXHJcbiAgdHJhZGU6IHtcclxuICAgICctJzogeyctJzogeyctJzogeyctJzogaW5qZWN0VHJhZGV9fX0sXHJcbiAgICBjcmVhdGVzZWN1cmU6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdFRyYWRlfX19LFxyXG4gICAgZG9jcmVhdGVzZWN1cmU6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdFRyYWRlfX19XHJcbiAgfSxcclxuICB0aXRhbjogeyctJzogeyctJzogeyctJzogeyctJzogaW5qZWN0VGl0YW59fX19LFxyXG4gIHRvcHJhdGVkOiB7XHJcbiAgICB4cDogeyctJzogeyctJzogeyctJzogaW5qZWN0VG9wUmF0ZWR9fX0sXHJcbiAgICBtb250aGx5eHA6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdFRvcFJhdGVkfX19LFxyXG4gICAgZ29sZDogeyctJzogeyctJzogeyctJzogaW5qZWN0VG9wUmF0ZWR9fX0sXHJcbiAgICBraWxsc3RyZWFrOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RUb3BSYXRlZH19fSxcclxuICAgIGJvdW50aWVzOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RUb3BSYXRlZH19fSxcclxuICAgIHJpc2luZ3N0YXJzOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RUb3BSYXRlZH19fSxcclxuICAgIGFyZW5hOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RUb3BSYXRlZH19fSxcclxuICAgIHN1cGVyZWxpdGVzOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RUb3BSYXRlZH19fSxcclxuICAgIHNtYXNoZXI6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdFRvcFJhdGVkfX19LFxyXG4gICAgZ2xvYmFscXVlc3Q6IHsnLSc6IHsnLSc6IHsnLSc6IGdsb2JhbFF1ZXN0fX19XHJcbiAgfSxcclxuICBpbnZlbnRpbmc6IHt2aWV3cmVjaXBlOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbnZlbnRpbmd9fX19LFxyXG4gIHRlbXBpbnY6IHsnLSc6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdE1haWxib3h9fX19LFxyXG4gIGZpbmRwbGF5ZXI6IHsnLSc6IHsnLSc6IHsnLSc6IHsnLSc6IGluamVjdEZpbmRQbGF5ZXJ9fX19LFxyXG4gIHF1ZXN0czogeyAvLyBVRlNHXHJcbiAgICAnLSc6IHsnLSc6IHsnLSc6IHsnLSc6IGFsbG93QmFja319fSxcclxuICAgIHZpZXc6IHsnLSc6IHsnLSc6IHsnLSc6IHNob3dBbGxRdWVzdFN0ZXBzfX19XHJcbiAgfSxcclxuICBpdGVtczogeyctJzogeyctJzogeyctJzogeyctJzogYWxsb3dCYWNrfX19fSwgLy8gVUZTR1xyXG4gIGNyZWF0dXJlczogeyctJzogeyctJzogeyctJzogeyctJzogYWxsb3dCYWNrfX19fSwgLy8gVUZTR1xyXG4gIG1hc3RlcnJlYWxtczogeyctJzogeyctJzogeyctJzogeyctJzogYWxsb3dCYWNrfX19fSwgLy8gVUZTR1xyXG4gIHJlYWxtczogeyctJzogeyctJzogeyctJzogeyctJzogYWxsb3dCYWNrfX19fSwgLy8gVUZTR1xyXG4gIHJlbGljczogeyctJzogeyctJzogeyctJzogeyctJzogYWxsb3dCYWNrfX19fSwgLy8gVUZTR1xyXG4gIHNob3BzOiB7Jy0nOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBhbGxvd0JhY2t9fX19LCAvLyBVRlNHXHJcbiAgc2NhdmVuZ2luZzogeyctJzogeyctJzogeyctJzogeyctJzogaW5qZWN0U2NhdmVuZ2luZ319fX0sXHJcbiAgdGVtcGxlOiB7Jy0nOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBwYXJzZVRlbXBsZVBhZ2V9fX19LFxyXG4gIGNvbXBvc2luZzoge1xyXG4gICAgJy0nOiB7Jy0nOiB7Jy0nOiB7Jy0nOiBpbmplY3RDb21wb3Npbmd9fX0sXHJcbiAgICBicmVha2Rvd246IHsnLSc6IHsnLSc6IHsnLSc6IGNvbXBvc2luZ0JyZWFrZG93bn19fSxcclxuICAgIGNyZWF0ZTogeyctJzogeyctJzogeyctJzogY29tcG9zaW5nQ3JlYXRlfX19XHJcbiAgfSxcclxuICBwdnBsYWRkZXI6IHsnLSc6IHsnLSc6IHsnLSc6IHsnLSc6IGxhZGRlcn19fX0sXHJcbiAgJy0nOiB7XHJcbiAgICB2aWV3dXBkYXRlYXJjaGl2ZTogeyctJzogeyctJzogeyctJzogdmlld0FyY2hpdmV9fX0sXHJcbiAgICB2aWV3YXJjaGl2ZTogeyctJzogeyctJzogeyctJzogdmlld0FyY2hpdmV9fX0sXHJcbiAgICAnLSc6IHsnLSc6IHsnLSc6IHsnLSc6IHVua25vd25QYWdlfX19XHJcbiAgfVxyXG59O1xyXG4iLCJpbXBvcnQgYWRkIGZyb20gJy4uL3N1cHBvcnQvdGFzayc7XHJcbmltcG9ydCBjYWxmIGZyb20gJy4uL3N1cHBvcnQvY2FsZic7XHJcbmltcG9ydCBkb1F1aWNrTGlua3MgZnJvbSAnLi9kb1F1aWNrTGlua3MnO1xyXG5pbXBvcnQgaXNNZXNzYWdlU291bmQgZnJvbSAnLi9pc01lc3NhZ2VTb3VuZCc7XHJcbmltcG9ydCBsb29rRm9ySGNzRGF0YSBmcm9tICcuL2xvb2tGb3JIY3NEYXRhJztcclxuaW1wb3J0IHBhZ2VTd2l0Y2hlciBmcm9tICcuL3BhZ2VTd2l0Y2hlcic7XHJcbmltcG9ydCB7ZW5kLCBzY3JlZW52aWV3LCBzZXR1cCwgc3RhcnR9IGZyb20gJy4uL3N1cHBvcnQvZnNoR2EnO1xyXG5pbXBvcnQge2ZhbGxiYWNrLCBnZXRVcmxQYXJhbWV0ZXJ9IGZyb20gJy4uL3N1cHBvcnQvc3lzdGVtJztcclxuXHJcbnZhciBjb3JlRnVuY3Rpb247XHJcbnZhciBmdW5jdGlvblBhdGg7XHJcblxyXG5mdW5jdGlvbiBnZXRUeXBlKGNtZCkge1xyXG4gIHZhciB0eXBlID0gJy0nO1xyXG4gIGlmIChjbWQgPT09ICdwb2ludHMnKSB7XHJcbiAgICB0eXBlID0gZmFsbGJhY2soZ2V0VXJsUGFyYW1ldGVyKCd0eXBlJyksICctJyk7XHJcbiAgfVxyXG4gIHJldHVybiB0eXBlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBuZXdTZWxlY3RvcihzZWxlY3Rvcikge1xyXG4gIHZhciB0ZXN0X2NtZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xyXG4gIHJldHVybiB0ZXN0X2NtZCAmJiB0ZXN0X2NtZC52YWx1ZSB8fCAnLSc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRlc3RDb3JlRnVuY3Rpb24oY21kLCBzdWJjbWQsIHN1YmNtZDIsIHR5cGUsIGZyb21Xb3JsZCkge1xyXG4gIGlmIChwYWdlU3dpdGNoZXJbY21kXSAmJlxyXG4gICAgICBwYWdlU3dpdGNoZXJbY21kXVtzdWJjbWRdICYmXHJcbiAgICAgIHBhZ2VTd2l0Y2hlcltjbWRdW3N1YmNtZF1bc3ViY21kMl0gJiZcclxuICAgICAgcGFnZVN3aXRjaGVyW2NtZF1bc3ViY21kXVtzdWJjbWQyXVt0eXBlXSAmJlxyXG4gICAgICBwYWdlU3dpdGNoZXJbY21kXVtzdWJjbWRdW3N1YmNtZDJdW3R5cGVdW2Zyb21Xb3JsZF0pIHtcclxuICAgIHJldHVybiBwYWdlU3dpdGNoZXJbY21kXVtzdWJjbWRdW3N1YmNtZDJdW3R5cGVdW2Zyb21Xb3JsZF07XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDb3JlRnVuY3Rpb24oKSB7XHJcbiAgdmFyIGNtZDtcclxuICB2YXIgc3ViY21kO1xyXG4gIHZhciBzdWJjbWQyO1xyXG4gIHZhciB0eXBlO1xyXG4gIHZhciBmcm9tV29ybGQ7XHJcbiAgaWYgKGRvY3VtZW50LmxvY2F0aW9uLnNlYXJjaCAhPT0gJycpIHtcclxuICAgIGNtZCA9IGZhbGxiYWNrKGdldFVybFBhcmFtZXRlcignY21kJyksICctJyk7XHJcbiAgICBzdWJjbWQgPSBmYWxsYmFjayhnZXRVcmxQYXJhbWV0ZXIoJ3N1YmNtZCcpLCAnLScpO1xyXG4gICAgc3ViY21kMiA9IGZhbGxiYWNrKGdldFVybFBhcmFtZXRlcignc3ViY21kMicpLCAnLScpO1xyXG4gICAgdHlwZSA9IGdldFR5cGUoY21kKTtcclxuICAgIGZyb21Xb3JsZCA9IGZhbGxiYWNrKGdldFVybFBhcmFtZXRlcignZnJvbXdvcmxkJyksICctJyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNtZCA9IG5ld1NlbGVjdG9yKCdpbnB1dFtuYW1lPVwiY21kXCJdJyk7XHJcbiAgICBzdWJjbWQgPSBuZXdTZWxlY3RvcignaW5wdXRbbmFtZT1cInN1YmNtZFwiXScpO1xyXG4gICAgaWYgKHN1YmNtZCA9PT0gJ2RvY2hhdCcpIHtcclxuICAgICAgY21kID0gJy0nO1xyXG4gICAgICBzdWJjbWQgPSAnLSc7XHJcbiAgICB9XHJcbiAgICBzdWJjbWQyID0gbmV3U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJzdWJjbWQyXCJdJyk7XHJcbiAgICB0eXBlID0gJy0nO1xyXG4gICAgZnJvbVdvcmxkID0gJy0nO1xyXG4gIH1cclxuICBjYWxmLmNtZCA9IGNtZDtcclxuICBjYWxmLnN1YmNtZCA9IHN1YmNtZDtcclxuICBjYWxmLnN1YmNtZDIgPSBzdWJjbWQyO1xyXG4gIGZ1bmN0aW9uUGF0aCA9IGNtZCArICcvJyArIHN1YmNtZCArICcvJyArIHN1YmNtZDIgKyAnLycgKyB0eXBlICsgJy8nICtcclxuICAgIGZyb21Xb3JsZDtcclxuXHJcbiAgY29yZUZ1bmN0aW9uID0gdGVzdENvcmVGdW5jdGlvbihjbWQsIHN1YmNtZCwgc3ViY21kMiwgdHlwZSwgZnJvbVdvcmxkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGV2SG9va3MoKSB7XHJcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xyXG4gIGNvbnNvbGUubG9nKCdmdW5jdGlvblBhdGgnLCBmdW5jdGlvblBhdGgpO1xyXG4gIGlmICghY29yZUZ1bmN0aW9uKSB7XHJcbiAgICBjb25zb2xlLmxvZygnTm8gQ29yZSBGdW5jdGlvbi4nKTtcclxuICB9IGVsc2UgaWYgKHR5cGVvZiBjb3JlRnVuY3Rpb24gIT09ICdmdW5jdGlvbicpIHtcclxuICAgIGNvbnNvbGUubG9nKCdOb3QgQ29yZSBGdW5jdGlvbi4nKTtcclxuICB9XHJcbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFzeW5jRGlzcGF0Y2hlcigpIHtcclxuICAvLyNpZiBfREVWICAvLyAgYXN5bmNEaXNwYXRjaGVyIG1lc3NhZ2VzXHJcbiAgZGV2SG9va3MoKTtcclxuICAvLyNlbmRpZlxyXG4gIGlmICh0eXBlb2YgY29yZUZ1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICBzY3JlZW52aWV3KGZ1bmN0aW9uUGF0aCk7XHJcbiAgICBzdGFydCgnSlMgUGVyZicsIGZ1bmN0aW9uUGF0aCk7XHJcbiAgICBjb3JlRnVuY3Rpb24oKTtcclxuICAgIGVuZCgnSlMgUGVyZicsIGZ1bmN0aW9uUGF0aCk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBtYWluIGV2ZW50IGRpc3BhdGNoZXJcclxuRlNILmRpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XHJcblxyXG4gIHNldHVwKCk7XHJcbiAgc3RhcnQoJ0pTIFBlcmYnLCAnRlNILmRpc3BhdGNoJyk7XHJcblxyXG4gIGdldENvcmVGdW5jdGlvbigpO1xyXG4gIGxvb2tGb3JIY3NEYXRhKCk7XHJcbiAgYWRkKDMsIGFzeW5jRGlzcGF0Y2hlcik7XHJcblxyXG4gIGlmICh0eXBlb2Ygd2luZG93LmpRdWVyeSA9PT0gJ3VuZGVmaW5lZCcpIHtyZXR1cm47fVxyXG5cclxuICBpc01lc3NhZ2VTb3VuZCgpO1xyXG5cclxuICAvKiBUaGlzIG11c3QgYmUgYXQgdGhlIGVuZCBpbiBvcmRlciBub3QgdG9cclxuICBzY3JldyB1cCBvdGhlciBmaW5kTm9kZSBjYWxscyAoSXNzdWUgMzUxKSAqL1xyXG4gIGRvUXVpY2tMaW5rcygpO1xyXG5cclxuICBlbmQoJ0pTIFBlcmYnLCAnRlNILmRpc3BhdGNoJyk7XHJcblxyXG59O1xyXG4iLCJ3aW5kb3cuRlNIID0gd2luZG93LkZTSCB8fCB7fTtcclxud2luZG93LkZTSC5jYWxmID0gJyRfQ0FMRlZFUic7XHJcbmltcG9ydCAnLi9tb2R1bGVzL3N1cHBvcnQvRE9NUGFyc2VyJztcclxuaW1wb3J0ICcuL21vZHVsZXMvc3VwcG9ydC9wZXJmb3JtYW5jZU5vdyc7XHJcbmltcG9ydCAnLi9tb2R1bGVzL3N1cHBvcnQvZ21BcGknO1xyXG5pbXBvcnQgJy4vbW9kdWxlcy9jaHJvbWUvZW52aXJvbm1lbnQnO1xyXG4iXSwibmFtZXMiOlsicGF1c2VkIiwidGFza1J1bm5lciIsImFkZCIsInJldml2ZXIiLCJjb250ZW50IiwicGxheWVySWQiLCJ0YWJsZVJvd3MiLCJsaXN0ZW4iLCJvbmxpbmVQbGF5ZXJzIiwiaGF2ZU5vZGUiLCJwbGF5ZXJOYW1lIiwiZXZlbnRIYW5kbGVyIiwiZ2V0VGFyZ2V0IiwiYmFja3BhY2siLCJ0b2dnbGVQcmVmIiwiYWxwaGEiLCJnb3RBY3Rpdml0eSIsInRha2VSZXN1bHQiLCJkb1RhYmxlIiwibHZsVGVzdHMiLCJkb0x2bEZpbHRlciIsImx2bEZpbHRlciIsImNoYW5nZUx2bHMiLCJyZXNldEx2bHMiLCJkb0FjdGlvbiIsInRha2VJdGVtIiwicmVjYWxsSXRlbSIsImRvVXNlSXRlbSIsImN1cnJlbnRQbGF5ZXJJZCIsIm9wdGlvbnMiLCJtYXhQYWdlIiwibGFzdFBhZ2UiLCJzZXRDaGVja3MiLCJwcm9jZXNzRmlyc3RQYWdlIiwicmVmcmVzaCIsImFkZFN0YXRzIiwiYmFja3BhY2tSZW1vdmUiLCJnZXRTdXN0YWluIiwid2Vhckl0ZW0iLCJldmVudEhhbmRsZXJzIiwicG90T2JqIiwiYnVpbGRPcHRpb25zIiwiZG9SZXNldCIsImV2dEhkbCIsImhpZGVFbGVtZW50IiwiaGVhZGVycyIsImNvdW50ZXIiLCJub2RlTGlzdCIsImRvbnRQb3N0IiwiZG9CdWZmTGlua3MiLCJoaWdobGlnaHRQbGF5ZXJzTmVhck15THZsIiwibHZsRGlmZlRvSGlnaGxpZ2h0Iiwic3Bpbm5lciIsImludiIsImRvQ2hlY2tBbGwiLCJjb21iYXRMb2ciLCJoYXpCdWZmcyIsImdvdENvbWJhdExvZyIsInBsYXllciIsImFzc2V0cyIsImdldEd1aWxkIiwicGFyc2VHdWlsZCIsInNldHVwIiwiZGlhbG9nIiwiZXZhbENhIiwiZXZhbEh0bWwiLCJodW50aW5nQnVmZnMiLCJiYWlsT3V0IiwiaXRlbVJFIiwic2V0dXBQcmVmIiwicmVzdWx0IiwicXVpY2tDcmVhdGUiLCJkb0FqYXgiLCJncm91cFN0YXRzIiwicGFyc2VNZXJjU3RhdHMiLCJpbnZJdGVtcyIsIm1ha2VGb2xkZXJTcGFucyIsImhpZGVGb2xkZXJzIiwiYW5vdGhlclNwaW5uZXIiLCJzaG93UXVpY2tEcm9wTGlua3MiLCJzaG93UXVpY2tTZW5kTGlua3MiLCJldnRzIiwiaW52ZW50b3J5IiwidGV4dEFyZWEiLCJpbmplY3RJbnZlbnRvcnlNYW5h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QUFDO0NBQ0o7O0FBRUQsSUFBSSxPQUFPLEdBQUc7RUFDWixJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7RUFDaEMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0VBQ2hDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztFQUNoQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7RUFDaEMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0VBQ2hDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztFQUNoQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7RUFDaEMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0VBQ2hDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztFQUNoQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7RUFDaEMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO0VBQzlCLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztFQUM5QixJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsV0FBVyxDQUFDO0VBQ3ZCLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUM7RUFDbkIsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFQSxVQUFRLENBQUM7RUFDcEIsS0FBSyxFQUFF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QUUsRUFBRTtJQUM1QyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO0lBQ25CLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkMsSUFBSSxNQUFNLEtBQUssUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDO0lBQ2xDLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPO01BQ3hCLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztNQUN2QyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9CLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO01BQzFELFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDL0IsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7TUFDOUQsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMvQixVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztNQUMxRCxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9CLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEdBQUcsUUFB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LFNBQVMsRUFBRSxTQUFTLElBQUksRUFBRTtNQUN4QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUNwRDtJQUNELEVBQUUsRUFBRSxDQUFDO0dBQ047RUFDRDtJQUNFLFNBQVMsRUFBRSxTQUFTLElBQUksRUFBRTtNQUN4QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsaUNBQWlDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUMvRDtJQUNELEVBQUUsRUFBRSxDQUFDO0dBQ047RUFDRDtJQUNFLFNBQVMsRUFBRSxTQUFTLElBQUksRUFBRTtNQUN4QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUN0RDtJQUNELEVBQUUsRUFBRSxDQUFDO0dBQ047RUFDRDtJQUNFLFNBQVMsRUFBRSxTQUFTLElBQUksRUFBRTtNQUN4QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsaUNBQWlDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUMvRDtJQUNELEVBQUUsRUFBRSxDQUFDO0dBQ047RUFDRDtJQUNFLFNBQVMsRUFBRSxTQUFTLElBQUksRUFBRTtNQUN4QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUNBQW1DLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUNqRTtJQUNELEVBQUUsRUFBRSxDQUFDO0dBQ047RUFDRDtJQUNFLFNBQVMsRUFBRSxTQUFTLElBQUksRUFBRTtNQUN4QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUNsRDtJQUNELEVBQUUsRUFBRSxDQUFDO0dBQ047RUFDRDtJQUNFLFNBQVMsRUFBRSxTQUFTLElBQUksRUFBRTtNQUN4QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUMxRDtJQUNELEVBQUUsRUFBRSxDQUFDO0dBQ047RUFDRDtJ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QUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztHQUNqRDtFQUNELEtBQUssRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDOUMsUUFBUSxFQUFFO0lBQ1IsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsU0FBUyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDOUMsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDekMsVUFBVSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsUUFBUSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDN0MsV0FBVyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDaEQsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDMUMsV0FBVyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDaEQsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLGNB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
